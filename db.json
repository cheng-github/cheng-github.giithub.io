{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/cost_aliyun.PNG","path":"images/cost_aliyun.PNG","modified":0,"renderable":0},{"_id":"source/images/smile.jpg","path":"images/smile.jpg","modified":0,"renderable":0},{"_id":"source/images/timg.jpg","path":"images/timg.jpg","modified":0,"renderable":0},{"_id":"source/images/myself.jpg","path":"images/myself.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/content.json","path":"content.json","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/swcheng.jpg","path":"css/images/swcheng.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"source/images/initial_heart.jpg","path":"images/initial_heart.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.min.css","path":"libs/font-awesome5/css/fa-brands.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.css","path":"libs/font-awesome5/css/fa-brands.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.css","path":"libs/font-awesome5/css/fa-solid.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.min.css","path":"libs/font-awesome5/css/fa-solid.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.css","path":"libs/font-awesome5/css/fontawesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.min.css","path":"libs/font-awesome5/css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff2","path":"libs/font-awesome5/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff","path":"libs/font-awesome5/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff2","path":"libs/font-awesome5/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"source/images/cost_bandwagon.PNG","path":"images/cost_bandwagon.PNG","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.eot","path":"libs/font-awesome5/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.ttf","path":"libs/font-awesome5/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff","path":"libs/font-awesome5/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"source/images/salt-lake.jpg","path":"images/salt-lake.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.eot","path":"libs/font-awesome5/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.ttf","path":"libs/font-awesome5/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/salt-lake.jpg","path":"css/images/salt-lake.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.svg","path":"libs/font-awesome5/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.svg","path":"libs/font-awesome5/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"source/images/maxSubSum/base1.jpg","path":"images/maxSubSum/base1.jpg","modified":0,"renderable":0},{"_id":"source/images/maxSubSum/base2.jpg","path":"images/maxSubSum/base2.jpg","modified":0,"renderable":0},{"_id":"source/images/data_scraping/xiai_chrome.png","path":"images/data_scraping/xiai_chrome.png","modified":0,"renderable":0},{"_id":"source/images/data_scraping/messgae_biaodi.png","path":"images/data_scraping/messgae_biaodi.png","modified":0,"renderable":0},{"_id":"source/images/data_scraping/js文件列表.png","path":"images/data_scraping/js文件列表.png","modified":0,"renderable":0},{"_id":"source/images/data_scraping/breakpoint.png","path":"images/data_scraping/breakpoint.png","modified":0,"renderable":0},{"_id":"source/images/data_scraping/jsoncontent.png","path":"images/data_scraping/jsoncontent.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/icarus/.gitignore","hash":"ece1c3037855e866d5816467cdfb2cef4e36e0a7","modified":1537363615083},{"_id":"themes/icarus/LICENSE","hash":"73ed09aa00f7bda6319fc7d5b722fb40e0c2017e","modified":1537363615084},{"_id":"themes/icarus/README.md","hash":"c2407cbda23f087be719d6dc3f7207a8e01ffd73","modified":1537363615084},{"_id":"themes/icarus/_config.yml","hash":"d92346a898a9a5311bd6dc876460e7fffd5efcc0","modified":1542539887474},{"_id":"themes/icarus/package.json","hash":"c156985c2689895a228188a29ceaae8f7d0bb34f","modified":1537363615137},{"_id":"source/_data/menu.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537700671313},{"_id":"source/_drafts/我是草稿.md","hash":"684c00042d7e4b28d8e8e4616030d4d0c0202a87","modified":1537692284252},{"_id":"source/_posts/2018-10-19-博客开篇.md","hash":"2da982d4d47908d1ca1a5678d3a384373599799e","modified":1541508792780},{"_id":"source/_posts/Comparator && Comparable.md","hash":"c036009f952f354f600f015ca640bf6cbad56b07","modified":1541686762565},{"_id":"source/_posts/最大子序列和的四种实现方式.md","hash":"bdb5a11d778416e4e14e05a4053dd184f48ccd1b","modified":1542615690679},{"_id":"source/about/index.md","hash":"fc3518d978ac48aee135e8468594f1c35ba52a6f","modified":1540140618266},{"_id":"source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1537363615088},{"_id":"source/images/cost_aliyun.PNG","hash":"64ccb78f7e9e849f4ea31f3f587273a188f8ad39","modified":1540046075068},{"_id":"source/images/smile.jpg","hash":"ebc3c2b330787bf3e791c3d74ca4219fc87bd4ef","modified":1539964340492},{"_id":"source/images/timg.jpg","hash":"3cb83f1a3d2cdb56f690513aa08ade108b002c88","modified":1540050686008},{"_id":"source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1537363615089},{"_id":"themes/icarus/.git/FETCH_HEAD","hash":"661d7fda01be747c928b875158101b2b59e887e8","modified":1537364744291},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537363615053},{"_id":"themes/icarus/.git/ORIG_HEAD","hash":"ad61bb2bfa7bc67b892575fc4d51069d6323e1a2","modified":1537364744375},{"_id":"themes/icarus/.git/config","hash":"7b9dd27b1a850e883885c30b03f2abbc794137fd","modified":1537363615064},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537363546783},{"_id":"themes/icarus/.git/index","hash":"ed8cedacf5a7a1a019204975c215ab5451e67fdd","modified":1537363615309},{"_id":"themes/icarus/.git/packed-refs","hash":"174262c5f6dd86ba07a2a5f53896c3994246df74","modified":1537363615043},{"_id":"themes/icarus/languages/en.yml","hash":"2b888a89957e07f440452a12ef338af979abb4c6","modified":1537363615090},{"_id":"themes/icarus/languages/es.yml","hash":"f48b21e020b48a38747a5cd0a2c853d717ad8a7f","modified":1537363615091},{"_id":"themes/icarus/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1537363615091},{"_id":"themes/icarus/languages/id.yml","hash":"83021037b6dad8dd48f48e3b4a822d07d56fc272","modified":1537363615092},{"_id":"themes/icarus/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1537363615092},{"_id":"themes/icarus/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1537363615093},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1537363615094},{"_id":"themes/icarus/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1537363615094},{"_id":"themes/icarus/languages/tr.yml","hash":"50d94b21e1838db1214f6874f4f81b47c8c521db","modified":1537363615095},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"fdce6e6716768cfac9355c4e88a05260efeeae1c","modified":1537363615096},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"646a7ef3e85481b013ffb2f4d9f9a8900f092d73","modified":1537363615096},{"_id":"themes/icarus/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1537363615138},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1537363615138},{"_id":"themes/icarus/layout/archive.ejs","hash":"6f1bada1439dd043bfdfaa53df1bdf9a2ba69bb1","modified":1537363615097},{"_id":"themes/icarus/layout/categories.ejs","hash":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1537363615098},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1537363615099},{"_id":"themes/icarus/layout/index.ejs","hash":"c329f4598a0af4d8678ba789fdc84fcdf10122de","modified":1537363615119},{"_id":"themes/icarus/layout/layout.ejs","hash":"2bc1e3071a5ec25096584d01726a3b7c4d53ffaf","modified":1537363615120},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1537363615121},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1537363615124},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1537363615131},{"_id":"themes/icarus/layout/tags.ejs","hash":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1537363615132},{"_id":"source/images/myself.jpg","hash":"982006912e41fbed78f44d76e31292bc92f1b69b","modified":1531586948000},{"_id":"themes/icarus/source/content.json","hash":"c79c0bc7e1c82f3b58bceaa4d765968884f4db81","modified":1537370537330},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537363546785},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537363546784},{"_id":"themes/icarus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1537363546786},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537363546787},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537363546788},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1537363546789},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537363546790},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537363546790},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537363546791},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537363546792},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537363546793},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537363546794},{"_id":"themes/icarus/.git/logs/HEAD","hash":"b364512d1d5cd36cd0e1866bbcda21f1edbb9ca8","modified":1537363615057},{"_id":"themes/icarus/_source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1537363615087},{"_id":"themes/icarus/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1537363615088},{"_id":"themes/icarus/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1537363615089},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"f744b41f3cc258e2a5a6df6abf6cf9ba9f05c19c","modified":1537363615100},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"67b9c24a2973bb208e183ce46201d3c209a1bd4a","modified":1537363615100},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1537363615101},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1537363615102},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"6a53104fc01fd4a7a34b46c2828e76d02cacb0dd","modified":1537363615102},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1537363615103},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"61f0398161f27ea5d134212a2ed601acdba0402f","modified":1537363615104},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"b3dd067a6099f0e088f3374d37b8a726bafe15e5","modified":1537363615105},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"d2d0d8113a5a7d2cddf1d8ce067e07d40874e56c","modified":1537363615105},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"869b13c45f043451c73c46b347967667e18f6d0b","modified":1537363615106},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1537363615106},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1537363615107},{"_id":"themes/icarus/layout/common/article.ejs","hash":"f62ee6b048e5f310be6c826e54863bed62d8c59f","modified":1539969193631},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"d1812a87a26a48723c30d32bf4a1f57f3b01908e","modified":1537363615109},{"_id":"themes/icarus/layout/common/head.ejs","hash":"d39c07e39f2c9935637029b37d601df1d4cf4c7a","modified":1537363615109},{"_id":"themes/icarus/layout/common/header.ejs","hash":"ea03a21948009f72054af8289e20b2d2006a0afb","modified":1537363615110},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"c2f7caabb14c3bc8f8f05b85a4df075fba085d7e","modified":1537452001986},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"6c39352254c93f1fbedb4e81d2fdc94f34f54c2e","modified":1537363615117},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"bdd3bd76d2fcca57c75f74fd94dc8686ab7ed0bc","modified":1537363615117},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1537363615118},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"01b6fb2f0069b9809504312042b50b7611b00383","modified":1537363615119},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1537363615122},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1537363615122},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"2a41940ab86d3f7b095436b56ea304689c2b5121","modified":1537363615123},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1537363615125},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1537363615125},{"_id":"themes/icarus/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1537363615126},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"90c2954349be157800b6307215f83423619344b2","modified":1537363615127},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1537363615127},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1537363615128},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1537363615129},{"_id":"themes/icarus/layout/share/default.ejs","hash":"898999d386e166e00984eb0f8c8271a5768e84b4","modified":1537363615130},{"_id":"themes/icarus/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1537363615130},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1537363615131},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1537363615133},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1537363615134},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1537363615134},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"0863733fd4378b08b08d37138c1919f4562c176a","modified":1537363615135},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1537363615136},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"a4b28996e0e7df2e582387455c02f5c33f691bbd","modified":1537363615136},{"_id":"themes/icarus/source/css/_extend.styl","hash":"c18c58c67f49b8afe92fa8852ff7e203ce5958de","modified":1537363615140},{"_id":"themes/icarus/source/css/_variables.styl","hash":"28d73a420f32c73595fcc559528544cf998590c7","modified":1537363615197},{"_id":"themes/icarus/source/css/style.styl","hash":"5c22522034beed5018efd77e34c01584a815b23d","modified":1537363615201},{"_id":"themes/icarus/source/js/insight.js","hash":"06fb237cd290877abe967b98a74bdf0d25622ff6","modified":1537363615202},{"_id":"themes/icarus/source/js/main.js","hash":"4d821c56c7068532ea5baf00fd93bf10182c309e","modified":1537363615203},{"_id":"themes/icarus/.git/objects/pack/pack-a8e4425c1dd35e61773d6c5e61477a525c4e42a2.idx","hash":"bc0f2ab01fc32bf9ad1e6fb669177f203c7a40df","modified":1537363614904},{"_id":"themes/icarus/.git/refs/heads/master","hash":"ad61bb2bfa7bc67b892575fc4d51069d6323e1a2","modified":1537363615056},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1537363615111},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"dc61f0cf9d2b9369e9072e2a756310ec7c4add44","modified":1537363615112},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"f02f5f016886024705f9ba87ad29f57e07f37b9f","modified":1537363615113},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1537363615113},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"79d15e00ead668bf44a48f4e870ac0cde9dbdee3","modified":1537363615114},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"ec8cfadecae8031df4448d72c979bb19b30e6e6b","modified":1537363615114},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1537363615115},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1537363615141},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1537363615142},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1537363615142},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1537363615143},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1537363615144},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1537363615145},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1537363615145},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1537363615146},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1537363615147},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1537363615147},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1537363615148},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1537363615149},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1537363615149},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1537363615150},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1537363615151},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1537363615151},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1537363615152},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1537363615153},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1537363615153},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1537363615154},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1537363615155},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1537363615155},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1537363615156},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1537363615157},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1537363615157},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1537363615158},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1537363615160},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1537363615159},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1537363615160},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1537363615161},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1537363615162},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1537363615163},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1537363615163},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1537363615164},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1537363615164},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1537363615165},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1537363615166},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1537363615166},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1537363615167},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1537363615168},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1537363615168},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1537363615169},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1537363615170},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1537363615170},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1537363615171},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1537363615172},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1537363615172},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1537363615173},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1537363615174},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1537363615175},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1537363615175},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1537363615176},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1537363615176},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1537363615177},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1537363615178},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1537363615180},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1537363615179},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1537363615180},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1537363615181},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1537363615182},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1537363615182},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1537363615183},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1537363615184},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1537363615184},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1537363615185},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1537363615186},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1537363615186},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1537363615187},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1537363615188},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1537363615188},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"6da3162382fe528d852815d99ac9b044389fc554","modified":1537363615189},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"488703ff3e5b9a18e5972379f668149ac06f0207","modified":1537363615190},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1537363615191},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1537363615191},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"98cf61179737e74e7f052aa8d8057138d3eb72bf","modified":1537363615192},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"8a84868a13c7edb733347655b33dc169c682e8b8","modified":1537363615193},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"256d198d960172651d2363e1a5b82d99e0dc1039","modified":1537363615194},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"c680d9a7143dcca6df6c6e25788d13340442ff89","modified":1537363615194},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"ba1ea8a87ca7c667f0d3cc40033b52bdf168fbdd","modified":1537363615195},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1537363615196},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1537363615197},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1537363615198},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1537363615199},{"_id":"themes/icarus/source/css/images/swcheng.jpg","hash":"292e39ce92c0ac731160585d49508b14feacae62","modified":1534516628737},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1537363615200},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1537363615240},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1537363615239},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1537363615305},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1537363615308},{"_id":"source/images/initial_heart.jpg","hash":"91332abe1fed2afe075fe8036c7eef71d9d453a0","modified":1540042819400},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"b364512d1d5cd36cd0e1866bbcda21f1edbb9ca8","modified":1537363615058},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537363615051},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.min.css","hash":"24dad0f39e1cd33f44f27e960594327963ac6efa","modified":1537363615205},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.css","hash":"ee60cb08477e43c779b9a6caac16779876b37448","modified":1537363615205},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.css","hash":"ef8d7019efb52fe14cb120c0be7101d0fe4b15b4","modified":1537363615206},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.min.css","hash":"a88fa1bd6d5ebcf482ab5c639d19d1cd252ebbd5","modified":1537363615207},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.css","hash":"f30831895d6fc68a15f0ed4af8e445420535556e","modified":1537363615208},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.min.css","hash":"0fe6c33b0f78e8b47ba6ba910bb7ef291014b0c2","modified":1537363615209},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff2","hash":"0ec12ea1707f5bc812b627f41cccad2aff01e54b","modified":1537363615221},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff","hash":"7b4a63abc8476f745f09775d7465f0a6c33daf85","modified":1537363615234},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff2","hash":"1ba4dd60af529d1a72d0e57467c3bc0bbb728a4d","modified":1537363615235},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1537363615241},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1537363615242},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1537363615243},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1537363615244},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1537363615245},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1537363615262},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1537363615263},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1537363615264},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1537363615265},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1537363615266},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1537363615267},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1537363615268},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1537363615269},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1537363615270},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1537363615271},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1537363615271},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1537363615272},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1537363615273},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1537363615274},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1537363615274},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1537363615275},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1537363615276},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1537363615277},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1537363615278},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1537363615278},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1537363615279},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1537363615280},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1537363615281},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1537363615281},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1537363615282},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1537363615283},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1537363615284},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1537363615284},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1537363615285},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1537363615286},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1537363615288},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1537363615289},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1537363615290},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1537363615290},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1537363615292},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1537363615291},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1537363615293},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1537363615294},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1537363615294},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1537363615295},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1537363615296},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1537363615297},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1537363615298},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1537363615299},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1537363615300},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1537363615299},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1537363615301},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1537363615302},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1537363615303},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1537363615303},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1537363615304},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1537363615307},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1537363615308},{"_id":"source/images/cost_bandwagon.PNG","hash":"75e9983fd54db1e64599209b55587573585956c5","modified":1540048140021},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.eot","hash":"d92c68223732a10ceffe54eecbe4ef70073e6dea","modified":1537363615211},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.ttf","hash":"9b4bb228d5b132e69ff8b6b248262449879eff3e","modified":1537363615219},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff","hash":"8b5cac7fbf1712c81d9cac19cda04e6a604eb9da","modified":1537363615220},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1537363615238},{"_id":"source/images/salt-lake.jpg","hash":"65da705e43b5f0a26fd5fd8512aff4dbb0b3b54f","modified":1539970016912},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"b364512d1d5cd36cd0e1866bbcda21f1edbb9ca8","modified":1537363615051},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.eot","hash":"69aa0b829fd8562d0fb72948ce49ef201ff0ee83","modified":1537363615224},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.ttf","hash":"31dc9b748b8d2bf6c3edec919e763791e037bbff","modified":1537363615233},{"_id":"themes/icarus/source/css/images/salt-lake.jpg","hash":"65da705e43b5f0a26fd5fd8512aff4dbb0b3b54f","modified":1539970016912},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.svg","hash":"79651f9945627cdef4070a43806511d2ca555b5d","modified":1537363615230},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.svg","hash":"9f6b59723d9399b36e15ff569f84e9c01d8500a9","modified":1537363615217},{"_id":"themes/icarus/.git/objects/pack/pack-a8e4425c1dd35e61773d6c5e61477a525c4e42a2.pack","hash":"8cc380e3e7ced268be93e6304b081cde63c54b71","modified":1537363614963},{"_id":"source/images/maxSubSum/base1.jpg","hash":"a512e716a1234d0e2706e956f98052a234b18741","modified":1542604638424},{"_id":"source/images/maxSubSum/base2.jpg","hash":"cc797e9edd8ed34524adbcd1e0580048e7d63267","modified":1542604938987},{"_id":"public/content.json","hash":"8f81317efe51638eac4b00fea335a70dee1e1aca","modified":1543127220592},{"_id":"public/tags/index.html","hash":"a1365a67bed64e00c24382173cf296780be2840d","modified":1543127220989},{"_id":"public/categories/index.html","hash":"2660f3a389b3bd06f399c1d842e3f8c351a5033e","modified":1543127221014},{"_id":"public/about/index.html","hash":"457fd9b959519d61db5c80b4a41e94e15563bd7e","modified":1543127221013},{"_id":"public/2018/11/18/最大子序列和的四种实现方式/index.html","hash":"13b116a30a402327e8880ab91d52394dfab0f3d8","modified":1542616566300},{"_id":"public/2018/11/06/Comparator && Comparable/index.html","hash":"75ea946ca6d473482ecc5e6b588a51ad42f30673","modified":1543127221014},{"_id":"public/2018/10/19/2018-10-19-博客开篇/index.html","hash":"71cd106eba95146923b2cc8b2cf3c941dc8637e4","modified":1543127221014},{"_id":"public/archives/2018/index.html","hash":"007f978756dfd7d39ac5368a179a1f476dcb00c9","modified":1543127221015},{"_id":"public/archives/2018/10/index.html","hash":"450c135897c96a74d8b3b3786a0956525a6a46ee","modified":1543127221015},{"_id":"public/archives/2018/11/index.html","hash":"0b4dfb790214ad21c45c7a15a2581ea830369d55","modified":1543127221014},{"_id":"public/tags/FEELING/index.html","hash":"55d81280c3d54c1a612cf0269aa0ec05300f3212","modified":1543127221015},{"_id":"public/archives/index.html","hash":"588a3fdc46aefea1cadd04940e065c31b69925e1","modified":1543127221014},{"_id":"public/tags/TECHNOLOGY/index.html","hash":"046c937088c51d0cf62fa0508630d1439e55f3fe","modified":1543127221015},{"_id":"public/categories/START/index.html","hash":"b0fc496b6ac437f27f03ecde24314ab093919818","modified":1543127221014},{"_id":"public/categories/JAVA/index.html","hash":"1e36486d7749906e0dd23ae1dd8ca8a2902af6a2","modified":1543127221015},{"_id":"public/index.html","hash":"b7ab6545724f9ba4ab053aa9626c3236a6bb811e","modified":1543127221015},{"_id":"public/categories/JAVA/DATA-STRACTURE/index.html","hash":"637e62eee51d9f03cf0672fa5a51255752e76a3e","modified":1543127221015},{"_id":"public/categories/LIFE/index.html","hash":"86b7230c341e335480f3db2607f6dcbde1ae8135","modified":1543127221015},{"_id":"public/images/smile.jpg","hash":"ebc3c2b330787bf3e791c3d74ca4219fc87bd4ef","modified":1542615950534},{"_id":"public/images/cost_aliyun.PNG","hash":"64ccb78f7e9e849f4ea31f3f587273a188f8ad39","modified":1542615950534},{"_id":"public/images/timg.jpg","hash":"3cb83f1a3d2cdb56f690513aa08ade108b002c88","modified":1542615950534},{"_id":"public/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1542615950534},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1542615950534},{"_id":"public/css/images/swcheng.jpg","hash":"292e39ce92c0ac731160585d49508b14feacae62","modified":1542615950534},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1542615950534},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.woff2","hash":"0ec12ea1707f5bc812b627f41cccad2aff01e54b","modified":1542615950534},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.woff","hash":"7b4a63abc8476f745f09775d7465f0a6c33daf85","modified":1542615950535},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.woff2","hash":"1ba4dd60af529d1a72d0e57467c3bc0bbb728a4d","modified":1542615950535},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1542615950535},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1542615950535},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1542615950535},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1542615950535},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1542615950535},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1542615950535},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1542615950535},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1542615950535},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1542615950535},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1542615950536},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1542615950536},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1542615950537},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1542615950537},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1542615950537},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1542615950537},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1542615950537},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1542615950537},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1542615950537},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1542615950537},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1542615950537},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1542615950537},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1542615950537},{"_id":"public/images/maxSubSum/base2.jpg","hash":"cc797e9edd8ed34524adbcd1e0580048e7d63267","modified":1542616566302},{"_id":"public/images/myself.jpg","hash":"982006912e41fbed78f44d76e31292bc92f1b69b","modified":1542615951144},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.eot","hash":"d92c68223732a10ceffe54eecbe4ef70073e6dea","modified":1542615951161},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.ttf","hash":"9b4bb228d5b132e69ff8b6b248262449879eff3e","modified":1542615951164},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.woff","hash":"8b5cac7fbf1712c81d9cac19cda04e6a604eb9da","modified":1542615951164},{"_id":"public/images/maxSubSum/base1.jpg","hash":"a512e716a1234d0e2706e956f98052a234b18741","modified":1542616566302},{"_id":"public/js/main.js","hash":"2c148f06c5799b5d7dd165c5162e780535e07a40","modified":1542615951179},{"_id":"public/js/insight.js","hash":"f507ab7b2236349719f1af2c918f2f5c22d410c2","modified":1542615951179},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1542615951179},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1542615951180},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1542615951180},{"_id":"public/libs/font-awesome5/css/fa-brands.min.css","hash":"ae33d7d508d9fb4d8cc026f74007fae27017fc80","modified":1542615951180},{"_id":"public/libs/font-awesome5/css/fa-solid.min.css","hash":"ac3cc27cd41d44ed5d680541636604d0c397e5f6","modified":1542615951180},{"_id":"public/libs/font-awesome5/css/fa-solid.css","hash":"5c960e4efb31a88b1319dcf63d4806175e3cb8cd","modified":1542615951180},{"_id":"public/libs/font-awesome5/css/fa-brands.css","hash":"3dc468f3a5d6dcbdb977b17c2c021f751c5bf7c6","modified":1542615951180},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1542615951180},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1542615951180},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1542615951180},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1542615951180},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1542615951180},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1542615951180},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1542615951180},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1542615951181},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1542615951181},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1542615951181},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1542615951181},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1542615951181},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1542615951181},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1542615951181},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1542615951181},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1542615951181},{"_id":"public/css/style.css","hash":"1d5e1f53ea8852dcd3b2f5aff31c488d7003635b","modified":1542615951181},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1542615951181},{"_id":"public/libs/font-awesome5/css/fontawesome.css","hash":"b818fea784ea93c6cc393d545bfc5e1ec2045ff7","modified":1542615951181},{"_id":"public/libs/font-awesome5/css/fontawesome.min.css","hash":"8518d72f88b376749244da2bdc96f261d9bd5645","modified":1542615951181},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1542615951181},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1542615951182},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1542615951182},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1542615951182},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1542615951182},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1542615951182},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1542615951182},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1542615951182},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1542615951182},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.eot","hash":"69aa0b829fd8562d0fb72948ce49ef201ff0ee83","modified":1542615951182},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.ttf","hash":"31dc9b748b8d2bf6c3edec919e763791e037bbff","modified":1542615951182},{"_id":"public/images/initial_heart.jpg","hash":"91332abe1fed2afe075fe8036c7eef71d9d453a0","modified":1542615951255},{"_id":"public/images/cost_bandwagon.PNG","hash":"75e9983fd54db1e64599209b55587573585956c5","modified":1542615951316},{"_id":"public/css/images/salt-lake.jpg","hash":"65da705e43b5f0a26fd5fd8512aff4dbb0b3b54f","modified":1542615951330},{"_id":"public/images/salt-lake.jpg","hash":"65da705e43b5f0a26fd5fd8512aff4dbb0b3b54f","modified":1542615951330},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.svg","hash":"79651f9945627cdef4070a43806511d2ca555b5d","modified":1542615951330},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.svg","hash":"9f6b59723d9399b36e15ff569f84e9c01d8500a9","modified":1542615951382},{"_id":"source/_posts/2018-11-19_最大子序列求和.md","hash":"bdb5a11d778416e4e14e05a4053dd184f48ccd1b","modified":1542617129194},{"_id":"public/2018/11/18/2018-11-19_最大子序列求和/index.html","hash":"60afa42f18371155e67a32967ee4d73cedb83592","modified":1543127221014},{"_id":"source/_posts/抓取喜爱123听故事音频文件.md","hash":"179b0c47dfa72dfc46efccea75097311f1f0d651","modified":1543127097836},{"_id":"source/images/messgae_biaodi.png","hash":"8a89f7c8f2870a2e8b402b87fc77098bb749cb9b","modified":1543064244846},{"_id":"source/images/xiai_chrome.png","hash":"5789a2e511057205819db993d20e68f2e0323ca2","modified":1543064604377},{"_id":"source/images/data_scraping/messgae_biaodi.png","hash":"8a89f7c8f2870a2e8b402b87fc77098bb749cb9b","modified":1543064244846},{"_id":"source/images/data_scraping/js文件列表.png","hash":"bafda60e4b9f1ff30bbf4f1167554a5c3041eda8","modified":1543065554521},{"_id":"source/images/data_scraping/xiai_chrome.png","hash":"3399099b8b2075543c6cc7f9fddc4f456a0a1b73","modified":1543114157790},{"_id":"source/images/data_scraping/breakpoint.PNG","hash":"cd5896082c74f32d0a4dc5d4651ca988b1575a91","modified":1543072120262},{"_id":"source/images/data_scraping/breakpoint.png","hash":"a55c7311b81e133f2a98f97c014ae2a26b7744d2","modified":1543113518837},{"_id":"source/images/data_scraping/jsoncontent.png","hash":"b9f3f47ca59babb0d86b55de825e678fe66fc1e5","modified":1543118860598},{"_id":"public/2018/11/24/抓取喜爱123听故事音频文件/index.html","hash":"2045f0b1e2ff5735d68e6f38e57c927d77fc1d67","modified":1543127221017},{"_id":"public/categories/DATA-SCRAPING/index.html","hash":"4cf7d980de22d22162b8783438d08e176660ac96","modified":1543127221017},{"_id":"public/images/data_scraping/messgae_biaodi.png","hash":"8a89f7c8f2870a2e8b402b87fc77098bb749cb9b","modified":1543127221018},{"_id":"public/images/data_scraping/xiai_chrome.png","hash":"3399099b8b2075543c6cc7f9fddc4f456a0a1b73","modified":1543127221028},{"_id":"public/images/data_scraping/js文件列表.png","hash":"bafda60e4b9f1ff30bbf4f1167554a5c3041eda8","modified":1543127221028},{"_id":"public/images/data_scraping/breakpoint.png","hash":"a55c7311b81e133f2a98f97c014ae2a26b7744d2","modified":1543127221028},{"_id":"public/images/data_scraping/jsoncontent.png","hash":"b9f3f47ca59babb0d86b55de825e678fe66fc1e5","modified":1543127221053}],"Category":[{"name":"START","_id":"cjomsfhhn0007q8wtykqz95mw"},{"name":"JAVA","_id":"cjomsfhhr000aq8wtb5pzb4d0"},{"name":"LIFE","_id":"cjomsfhhx000fq8wtl3z34v42"},{"name":"DATA_STRACTURE","parent":"cjomsfhhr000aq8wtb5pzb4d0","_id":"cjomsfhhz000hq8wt1e9azp82"},{"name":"DATA SCRAPING","_id":"cjovgkdi10002l0wtdl2vobk6"}],"Data":[],"Page":[{"title":"About","layout":"page","_content":"### **My Creation And Participation:**  \n{% raw %}  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n</table>\n{% endraw %}  \n#### <center>\"Be optimistic,everything will be good\"</center>\n<div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  \n>  Sees like a child\n   Give like a saint\n   Feel like an angel\n   Never mind the broken wings\n   And speak like a picture\n   Cry like the rain   \n   Shine like the star\n   As long as the fire remains\n      <p align=\"right\"> -STEFANIE «Someone»</p>             \n","source":"about/index.md","raw":"title: \"About\"\nlayout: \"page\"\n---\n### **My Creation And Participation:**  \n{% raw %}  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n</table>\n{% endraw %}  \n#### <center>\"Be optimistic,everything will be good\"</center>\n<div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  \n>  Sees like a child\n   Give like a saint\n   Feel like an angel\n   Never mind the broken wings\n   And speak like a picture\n   Cry like the rain   \n   Shine like the star\n   As long as the fire remains\n      <p align=\"right\"> -STEFANIE «Someone»</p>             \n","date":"2018-10-21T16:50:18.266Z","updated":"2018-10-21T16:50:18.266Z","path":"about/index.html","comments":1,"_id":"cjomsfhhe0002q8wtg9jfrab1","content":"<h3 id=\"My-Creation-And-Participation\"><a href=\"#My-Creation-And-Participation\" class=\"headerlink\" title=\"My Creation And Participation:\"></a><strong>My Creation And Participation:</strong></h3>  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n</table>\n  \n<h4 id=\"Be-optimistic-everything-will-be-good\"><a href=\"#Be-optimistic-everything-will-be-good\" class=\"headerlink\" title=\"\" be=\"\" optimistic,everything=\"\" will=\"\" good\"\"=\"\"></a><center>\"Be optimistic,everything will be good\"</center></h4><p><div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  </div></p>\n<blockquote>\n<p> Sees like a child<br>   Give like a saint<br>   Feel like an angel<br>   Never mind the broken wings<br>   And speak like a picture<br>   Cry like the rain<br>   Shine like the star<br>   As long as the fire remains<br>      </p><p align=\"right\"> -STEFANIE «Someone»</p>             <p></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"My-Creation-And-Participation\"><a href=\"#My-Creation-And-Participation\" class=\"headerlink\" title=\"My Creation And Participation:\"></a><strong>My Creation And Participation:</strong></h3>  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n</table>\n  \n<h4 id=\"Be-optimistic-everything-will-be-good\"><a href=\"#Be-optimistic-everything-will-be-good\" class=\"headerlink\" title=\"\" be=\"\" optimistic,everything=\"\" will=\"\" good\"\"=\"\"></a><center>\"Be optimistic,everything will be good\"</center></h4><p><div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  </div></p>\n<blockquote>\n<p> Sees like a child<br>   Give like a saint<br>   Feel like an angel<br>   Never mind the broken wings<br>   And speak like a picture<br>   Cry like the rain<br>   Shine like the star<br>   As long as the fire remains<br>      </p><p align=\"right\"> -STEFANIE «Someone»</p>             <p></p>\n</blockquote>\n"},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2018-09-19T13:26:55.089Z","updated":"2018-09-19T13:26:55.089Z","path":"tags/index.html","comments":1,"_id":"cjomsfhhh0004q8wt77im1jgp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2018-09-19T13:26:55.088Z","updated":"2018-09-19T13:26:55.088Z","path":"categories/index.html","comments":1,"_id":"cjomsfhho0008q8wt3mcg7bw1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"我是草稿","_content":"","source":"_drafts/我是草稿.md","raw":"---\ntitle: 我是草稿\ntags:  \n---\n","slug":"我是草稿","published":0,"date":"2018-09-23T07:39:54.354Z","updated":"2018-09-23T08:44:44.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjomsfhf90000q8wtsiz2n8ny","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"个人博客开始之旅","date":"2018-10-19T14:24:00.000Z","thumbnail":"http://swcheng.com/images/initial_heart.jpg","banner":"http://swcheng.com/images/initial_heart.jpg","_content":"　　其实一直以来都隐约有想写博客的想法，记得第一篇博客是发表在我的CSDN个人博客上的，内容是如何为Tomcat配置图片访问路径，以及在Eclipse下对Tomcat服务器目录的理解。之所以写那篇博客是因为这个服务器图片的配置困扰自己很长一段时间，好不容易解决了这个大问题，心情十分愉快就想着写篇博客记录下来，以便为存在有与我有一样需求的人提供帮助　　**︿(￣︶￣)︿**  \n<!-- more -->\n　　但写那篇博客的时候自己对Markdown语法所知甚少，所以最终写出来的博客巨丑无比，自己最后看了都觉得辣眼睛　**┐(´∀｀)┌**,所以之后自己的记录就基本存在于自己的YouDao云笔记上了。直到近来开始学习Web开发的相关知识之后，才觉得书写博客其实是一个很有趣的事情，自己不仅可以在个人博客上记录自己学习的技术知识，也可以记录一些生活上等其他的事情。之前在新浪微博上写过几篇，但总觉得新浪微博更是一个大杂烩一样的平台，所以写了两篇之后自己就想要开始搭建自己的个人博客平台。  \n\n　　当有搭建自己的个人博客的想法之后，刚开始的做法是想要通过搭建一个博客学习Node.js的相关知识的，自己也确实这么去做了，刚接触Nodejs的时候自己还顺带学习了MongoDB的知识，当然只是学习了一点皮毛，然后又去了解在Nodejs使用十分广泛的Express框架，以及与MongoDB交互的API等。但实在是当时需要学习的技术知识太多，时间跨度太大，以及由于准备寻找实习的原因，导致最后有始无终。**╮(╯﹏╰）╭**  \n\n　　之后搭建个人博客的事情就一直搁置下来了，由于实习的原因在使用Java开发Web项目，后来自己又想使用Java去搭建一个个人博客，并因此了解到Java有一个非常流行的开源博客项目solo,star的数量达到了5k+,但是自己对于solo的主题却有点不满意，同时这个时候自己又了解到了Hexo Framework,看到hexo的第一眼，马上喜欢上了这个Nodejs博客框架，同时找到了一个自己非常喜欢的主题icarus,于是开始着手学习使用Hexo搭建自己的博客。使用Hexo搭建博客在官网完整的文档和视频说明帮助下，很顺利的完成了一个初步的本地部署并测试基本功能，这时候我就想着如何将这个站点发布提供给其他人访问。想要发布自己的博客站点有很多方式，但对于自己来说主要有下面三个选项:\n- 部署到阿里云服务器\n- 部署到Bandwagon服务器\n- 部署到GithubPages\n\n阿里云服务器对于学生来说特别便宜，大概120RMB/Year,使用阿里云服务器来部署站点的优点是IP地址在国内，访问速度会比较快，缺点是一但自己毕业之后，服务器的价格就不再是之前的价格了，即使是一个比较low的配置也需要不少的费用，下图是我在 ***2018/10/20*** 日去阿里云官网查看的轻量级应用服务器最低配置的价格。\n![](/images/cost_aliyun.PNG \"阿里云服务器价格\")\n\n　　**(；′⌒`)** 低收入人群表示真心付费不起，所以阿里云这个选项就被我给PASS掉了。至于 **[Bandwagon](https://bwh1.net)** 云服务器，个人觉得 **[Bandwagon](https://bwh1.net)** 是一个非常便宜实用的美国云服务器供应商，**[Bandwagon](https://bwh1.net)** 在国内俗称\"搬瓦工\",去年我购买的时候官网还没有被墙，现在已经无法访问了 (╯︵╰),哎这个长城防火墙实在是...反正自己是没法理解设计者的思想...个人觉得这个墙的弊远远大于利，不过这也是自己的个人想法，没有办法去改变现状。回到正题，下图是搬瓦工的官网界面:\n![](/images/cost_bandwagon.PNG)\n\n　　我们可以看到最便宜的价格是19.9$,但是我们可以从网上找一找优惠码，可以优惠几美刀，毕竟1美刀可是相当6块多RMB呀。对于购买方案的选择，有一个不错的网站自己一直在用，地址是[http://banwagong.cn/](http://banwagong.cn/),感觉还不错，其实最低配以及满足我们普通用户的需求了，但是问题在于购买的VPS是否是选择的CN2直连线路，如果是CN2线路的话大概延迟会在 ***150~200ms*** 之间，个人觉得这个延迟时间是可以接受的。如果再为VPS配置Google的BBR拥塞控制的话，还可以降低一部分延迟，虽然降低的延迟不是很多，但毕竟实在是距离太远，能够做到降低一部分延迟已经很不错了。  \n\n　　自己平时使用 **Bangwagong** 主要是用于配置SSR服务，在自己摸不着头脑的时候用来Google寻找答案的，或者去查看一些官方站点的Doc，也偶尔看看Youtube视频啦 ٩(๑❛ᴗ❛๑)۶ 。所以这时候刚好碰上了部署站点的需求，所以就想这不是一举两得吗?不仅可以用来满足自己的翻墙需求还可以用来发布自己的博客，于是自己就开始为Hexo配置环境，目标主机是Cent OS7,自己也是倒腾一段时间才终于将所有需要配置的东西都配置好。但是当我在80端口运行自己的nginx服务之后，在自己的主机上居然访问不到nginx的页面？开始自己以为是某个地方配置的不对，后来想到可能是墙的锅，于是打开代理，打开代理之后顺利访问到了nginx默认页面，哎...这时候我的心情是复杂的...所有努力付诸东流\n![](/images/timg.jpg \"心情复杂\")\n\n　　既然抵挡不过墙的力量，只能另想办法了，那么只剩下最后一个办法了，使用GitHubPages提供的云空间来发布自己的博客了。对于GithubPages这里就不做过多说明了，使用最多的方式是GithubPages和 [Jekyll](https://jekyllrb.com/) 来部署自己的个人站点，[Jekyll的主题](http://jekyllthemes.org/)十分丰富，如果有兴趣可以去了解一下。我选择的是 **Git本地客户端** + **Node.js** + **Hexo Framework** + **Icarus** + **GithubPages** + **Atom** 的方式去编写发布自己的个人博客。em...对于一个新人来说搭建这样一个完整的环境还是不太容易的...因为有太多没有接触的东西，但幸运的是Hexo的官网的文档十分简洁详细，并且之前自己使用过一点Nodejs,所以本地部署测试的过程还算比较顺利。  \n\n　　接下来就是如何发布自己的站点了，使用Hexo部署的deploy命令部署十分方便，但是这个命令的缺点是会将之前repository里的内容全部都干掉重新生成新的静态文件，这样的会导致自己在repository的CNAME和README文件都会被删除，这是自己没法忍受的缺点，所以只能放弃这个命令，转而自己使用Git的版本控制去手动更新新的文件。但是之前自己写的代码要么是通过IDE里自带的VCS要么是使用Github Desktop同步到Github上，感觉图形界面虽然操作方便但是让我对Git的工作方式一点都不了解，还是停留在无脑commit publish状态，想想自己使用了这么长时间的版本控制只会这两个基本的命令实在是惭愧呀。于是下定决心好好到[Git的官网](https://git-scm.com/)去学习关于版本控制的知识，Git官网有一本可以免费下载的[Git Pro](https://git-scm.com/book/en/v2)，提供多国语言翻译支持，自己就Download到kindle上平时上下班在公交车上阅读，这本书的详细叙述了版本控制的发展历史以及对比了Git与其它版本控制的区别，以及Git的所有使用情景，是一本十分优秀的书籍，很值得推荐一看。在将这本书啃完了前几章之后，就可以很轻松的使用Git command去管理Github的远程仓库了。  \n\n　　在我的cheng-github.github.io仓库下，我建立了两个分支，master和hexo。使用master分支存放生成的如html、css、images、js等静态页面文件,使用hexo分支存放本地测试的hexo文件，用作备份的需要。如果需要将原来的Gitpages的默认访问域名修改为个人域名可以进行相关配置，具体配置可以自行Google或者Baidu。  \n\n　　至此博客部署发布算是完成了，ヾ(๑╹◡╹)ﾉ\"。希望自己不要忘记写博客的初心，也不要忘记当初决定学习计算机的初心，故而使用封面的图片用于提醒自己。em...最想对自己说...\n\n　　***Follow your own voice,尽情去追逐自己想要的一切吧，即使跌倒也不要灰心，别让你眼底的光芒黯淡，that's really alive.***  \n\n\n\n　　\n\n\n\n\n\n\n\n\n\n\n\n　　\n","source":"_posts/2018-10-19-博客开篇.md","raw":"---\nlayout: \"post\"\ntitle: \"个人博客开始之旅\"\ndate: \"2018-10-19 22:24\"\ncategories:\n- [START]\n- [LIFE]\ntags:\n- FEELING\nthumbnail: http://swcheng.com/images/initial_heart.jpg\nbanner: http://swcheng.com/images/initial_heart.jpg\n---\n　　其实一直以来都隐约有想写博客的想法，记得第一篇博客是发表在我的CSDN个人博客上的，内容是如何为Tomcat配置图片访问路径，以及在Eclipse下对Tomcat服务器目录的理解。之所以写那篇博客是因为这个服务器图片的配置困扰自己很长一段时间，好不容易解决了这个大问题，心情十分愉快就想着写篇博客记录下来，以便为存在有与我有一样需求的人提供帮助　　**︿(￣︶￣)︿**  \n<!-- more -->\n　　但写那篇博客的时候自己对Markdown语法所知甚少，所以最终写出来的博客巨丑无比，自己最后看了都觉得辣眼睛　**┐(´∀｀)┌**,所以之后自己的记录就基本存在于自己的YouDao云笔记上了。直到近来开始学习Web开发的相关知识之后，才觉得书写博客其实是一个很有趣的事情，自己不仅可以在个人博客上记录自己学习的技术知识，也可以记录一些生活上等其他的事情。之前在新浪微博上写过几篇，但总觉得新浪微博更是一个大杂烩一样的平台，所以写了两篇之后自己就想要开始搭建自己的个人博客平台。  \n\n　　当有搭建自己的个人博客的想法之后，刚开始的做法是想要通过搭建一个博客学习Node.js的相关知识的，自己也确实这么去做了，刚接触Nodejs的时候自己还顺带学习了MongoDB的知识，当然只是学习了一点皮毛，然后又去了解在Nodejs使用十分广泛的Express框架，以及与MongoDB交互的API等。但实在是当时需要学习的技术知识太多，时间跨度太大，以及由于准备寻找实习的原因，导致最后有始无终。**╮(╯﹏╰）╭**  \n\n　　之后搭建个人博客的事情就一直搁置下来了，由于实习的原因在使用Java开发Web项目，后来自己又想使用Java去搭建一个个人博客，并因此了解到Java有一个非常流行的开源博客项目solo,star的数量达到了5k+,但是自己对于solo的主题却有点不满意，同时这个时候自己又了解到了Hexo Framework,看到hexo的第一眼，马上喜欢上了这个Nodejs博客框架，同时找到了一个自己非常喜欢的主题icarus,于是开始着手学习使用Hexo搭建自己的博客。使用Hexo搭建博客在官网完整的文档和视频说明帮助下，很顺利的完成了一个初步的本地部署并测试基本功能，这时候我就想着如何将这个站点发布提供给其他人访问。想要发布自己的博客站点有很多方式，但对于自己来说主要有下面三个选项:\n- 部署到阿里云服务器\n- 部署到Bandwagon服务器\n- 部署到GithubPages\n\n阿里云服务器对于学生来说特别便宜，大概120RMB/Year,使用阿里云服务器来部署站点的优点是IP地址在国内，访问速度会比较快，缺点是一但自己毕业之后，服务器的价格就不再是之前的价格了，即使是一个比较low的配置也需要不少的费用，下图是我在 ***2018/10/20*** 日去阿里云官网查看的轻量级应用服务器最低配置的价格。\n![](/images/cost_aliyun.PNG \"阿里云服务器价格\")\n\n　　**(；′⌒`)** 低收入人群表示真心付费不起，所以阿里云这个选项就被我给PASS掉了。至于 **[Bandwagon](https://bwh1.net)** 云服务器，个人觉得 **[Bandwagon](https://bwh1.net)** 是一个非常便宜实用的美国云服务器供应商，**[Bandwagon](https://bwh1.net)** 在国内俗称\"搬瓦工\",去年我购买的时候官网还没有被墙，现在已经无法访问了 (╯︵╰),哎这个长城防火墙实在是...反正自己是没法理解设计者的思想...个人觉得这个墙的弊远远大于利，不过这也是自己的个人想法，没有办法去改变现状。回到正题，下图是搬瓦工的官网界面:\n![](/images/cost_bandwagon.PNG)\n\n　　我们可以看到最便宜的价格是19.9$,但是我们可以从网上找一找优惠码，可以优惠几美刀，毕竟1美刀可是相当6块多RMB呀。对于购买方案的选择，有一个不错的网站自己一直在用，地址是[http://banwagong.cn/](http://banwagong.cn/),感觉还不错，其实最低配以及满足我们普通用户的需求了，但是问题在于购买的VPS是否是选择的CN2直连线路，如果是CN2线路的话大概延迟会在 ***150~200ms*** 之间，个人觉得这个延迟时间是可以接受的。如果再为VPS配置Google的BBR拥塞控制的话，还可以降低一部分延迟，虽然降低的延迟不是很多，但毕竟实在是距离太远，能够做到降低一部分延迟已经很不错了。  \n\n　　自己平时使用 **Bangwagong** 主要是用于配置SSR服务，在自己摸不着头脑的时候用来Google寻找答案的，或者去查看一些官方站点的Doc，也偶尔看看Youtube视频啦 ٩(๑❛ᴗ❛๑)۶ 。所以这时候刚好碰上了部署站点的需求，所以就想这不是一举两得吗?不仅可以用来满足自己的翻墙需求还可以用来发布自己的博客，于是自己就开始为Hexo配置环境，目标主机是Cent OS7,自己也是倒腾一段时间才终于将所有需要配置的东西都配置好。但是当我在80端口运行自己的nginx服务之后，在自己的主机上居然访问不到nginx的页面？开始自己以为是某个地方配置的不对，后来想到可能是墙的锅，于是打开代理，打开代理之后顺利访问到了nginx默认页面，哎...这时候我的心情是复杂的...所有努力付诸东流\n![](/images/timg.jpg \"心情复杂\")\n\n　　既然抵挡不过墙的力量，只能另想办法了，那么只剩下最后一个办法了，使用GitHubPages提供的云空间来发布自己的博客了。对于GithubPages这里就不做过多说明了，使用最多的方式是GithubPages和 [Jekyll](https://jekyllrb.com/) 来部署自己的个人站点，[Jekyll的主题](http://jekyllthemes.org/)十分丰富，如果有兴趣可以去了解一下。我选择的是 **Git本地客户端** + **Node.js** + **Hexo Framework** + **Icarus** + **GithubPages** + **Atom** 的方式去编写发布自己的个人博客。em...对于一个新人来说搭建这样一个完整的环境还是不太容易的...因为有太多没有接触的东西，但幸运的是Hexo的官网的文档十分简洁详细，并且之前自己使用过一点Nodejs,所以本地部署测试的过程还算比较顺利。  \n\n　　接下来就是如何发布自己的站点了，使用Hexo部署的deploy命令部署十分方便，但是这个命令的缺点是会将之前repository里的内容全部都干掉重新生成新的静态文件，这样的会导致自己在repository的CNAME和README文件都会被删除，这是自己没法忍受的缺点，所以只能放弃这个命令，转而自己使用Git的版本控制去手动更新新的文件。但是之前自己写的代码要么是通过IDE里自带的VCS要么是使用Github Desktop同步到Github上，感觉图形界面虽然操作方便但是让我对Git的工作方式一点都不了解，还是停留在无脑commit publish状态，想想自己使用了这么长时间的版本控制只会这两个基本的命令实在是惭愧呀。于是下定决心好好到[Git的官网](https://git-scm.com/)去学习关于版本控制的知识，Git官网有一本可以免费下载的[Git Pro](https://git-scm.com/book/en/v2)，提供多国语言翻译支持，自己就Download到kindle上平时上下班在公交车上阅读，这本书的详细叙述了版本控制的发展历史以及对比了Git与其它版本控制的区别，以及Git的所有使用情景，是一本十分优秀的书籍，很值得推荐一看。在将这本书啃完了前几章之后，就可以很轻松的使用Git command去管理Github的远程仓库了。  \n\n　　在我的cheng-github.github.io仓库下，我建立了两个分支，master和hexo。使用master分支存放生成的如html、css、images、js等静态页面文件,使用hexo分支存放本地测试的hexo文件，用作备份的需要。如果需要将原来的Gitpages的默认访问域名修改为个人域名可以进行相关配置，具体配置可以自行Google或者Baidu。  \n\n　　至此博客部署发布算是完成了，ヾ(๑╹◡╹)ﾉ\"。希望自己不要忘记写博客的初心，也不要忘记当初决定学习计算机的初心，故而使用封面的图片用于提醒自己。em...最想对自己说...\n\n　　***Follow your own voice,尽情去追逐自己想要的一切吧，即使跌倒也不要灰心，别让你眼底的光芒黯淡，that's really alive.***  \n\n\n\n　　\n\n\n\n\n\n\n\n\n\n\n\n　　\n","slug":"2018-10-19-博客开篇","published":1,"updated":"2018-11-06T12:53:12.780Z","comments":1,"photos":[],"link":"","_id":"cjomsfhhb0001q8wtw0rlai6m","content":"<p>　　其实一直以来都隐约有想写博客的想法，记得第一篇博客是发表在我的CSDN个人博客上的，内容是如何为Tomcat配置图片访问路径，以及在Eclipse下对Tomcat服务器目录的理解。之所以写那篇博客是因为这个服务器图片的配置困扰自己很长一段时间，好不容易解决了这个大问题，心情十分愉快就想着写篇博客记录下来，以便为存在有与我有一样需求的人提供帮助　　<strong>︿(￣︶￣)︿</strong><br><a id=\"more\"></a><br>　　但写那篇博客的时候自己对Markdown语法所知甚少，所以最终写出来的博客巨丑无比，自己最后看了都觉得辣眼睛　<strong>┐(´∀｀)┌</strong>,所以之后自己的记录就基本存在于自己的YouDao云笔记上了。直到近来开始学习Web开发的相关知识之后，才觉得书写博客其实是一个很有趣的事情，自己不仅可以在个人博客上记录自己学习的技术知识，也可以记录一些生活上等其他的事情。之前在新浪微博上写过几篇，但总觉得新浪微博更是一个大杂烩一样的平台，所以写了两篇之后自己就想要开始搭建自己的个人博客平台。  </p>\n<p>　　当有搭建自己的个人博客的想法之后，刚开始的做法是想要通过搭建一个博客学习Node.js的相关知识的，自己也确实这么去做了，刚接触Nodejs的时候自己还顺带学习了MongoDB的知识，当然只是学习了一点皮毛，然后又去了解在Nodejs使用十分广泛的Express框架，以及与MongoDB交互的API等。但实在是当时需要学习的技术知识太多，时间跨度太大，以及由于准备寻找实习的原因，导致最后有始无终。<strong>╮(╯﹏╰）╭</strong>  </p>\n<p>　　之后搭建个人博客的事情就一直搁置下来了，由于实习的原因在使用Java开发Web项目，后来自己又想使用Java去搭建一个个人博客，并因此了解到Java有一个非常流行的开源博客项目solo,star的数量达到了5k+,但是自己对于solo的主题却有点不满意，同时这个时候自己又了解到了Hexo Framework,看到hexo的第一眼，马上喜欢上了这个Nodejs博客框架，同时找到了一个自己非常喜欢的主题icarus,于是开始着手学习使用Hexo搭建自己的博客。使用Hexo搭建博客在官网完整的文档和视频说明帮助下，很顺利的完成了一个初步的本地部署并测试基本功能，这时候我就想着如何将这个站点发布提供给其他人访问。想要发布自己的博客站点有很多方式，但对于自己来说主要有下面三个选项:</p>\n<ul>\n<li>部署到阿里云服务器</li>\n<li>部署到Bandwagon服务器</li>\n<li>部署到GithubPages</li>\n</ul>\n<p>阿里云服务器对于学生来说特别便宜，大概120RMB/Year,使用阿里云服务器来部署站点的优点是IP地址在国内，访问速度会比较快，缺点是一但自己毕业之后，服务器的价格就不再是之前的价格了，即使是一个比较low的配置也需要不少的费用，下图是我在 <strong><em>2018/10/20</em></strong> 日去阿里云官网查看的轻量级应用服务器最低配置的价格。<br><img src=\"/images/cost_aliyun.PNG\" alt=\"\" title=\"阿里云服务器价格\"></p>\n<p>　　<strong>(；′⌒`)</strong> 低收入人群表示真心付费不起，所以阿里云这个选项就被我给PASS掉了。至于 <strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 云服务器，个人觉得 <strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 是一个非常便宜实用的美国云服务器供应商，<strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 在国内俗称”搬瓦工”,去年我购买的时候官网还没有被墙，现在已经无法访问了 (╯︵╰),哎这个长城防火墙实在是…反正自己是没法理解设计者的思想…个人觉得这个墙的弊远远大于利，不过这也是自己的个人想法，没有办法去改变现状。回到正题，下图是搬瓦工的官网界面:<br><img src=\"/images/cost_bandwagon.PNG\" alt=\"\"></p>\n<p>　　我们可以看到最便宜的价格是19.9$,但是我们可以从网上找一找优惠码，可以优惠几美刀，毕竟1美刀可是相当6块多RMB呀。对于购买方案的选择，有一个不错的网站自己一直在用，地址是<a href=\"http://banwagong.cn/\" target=\"_blank\" rel=\"noopener\">http://banwagong.cn/</a>,感觉还不错，其实最低配以及满足我们普通用户的需求了，但是问题在于购买的VPS是否是选择的CN2直连线路，如果是CN2线路的话大概延迟会在 <strong><em>150~200ms</em></strong> 之间，个人觉得这个延迟时间是可以接受的。如果再为VPS配置Google的BBR拥塞控制的话，还可以降低一部分延迟，虽然降低的延迟不是很多，但毕竟实在是距离太远，能够做到降低一部分延迟已经很不错了。  </p>\n<p>　　自己平时使用 <strong>Bangwagong</strong> 主要是用于配置SSR服务，在自己摸不着头脑的时候用来Google寻找答案的，或者去查看一些官方站点的Doc，也偶尔看看Youtube视频啦 ٩(๑❛ᴗ❛๑)۶ 。所以这时候刚好碰上了部署站点的需求，所以就想这不是一举两得吗?不仅可以用来满足自己的翻墙需求还可以用来发布自己的博客，于是自己就开始为Hexo配置环境，目标主机是Cent OS7,自己也是倒腾一段时间才终于将所有需要配置的东西都配置好。但是当我在80端口运行自己的nginx服务之后，在自己的主机上居然访问不到nginx的页面？开始自己以为是某个地方配置的不对，后来想到可能是墙的锅，于是打开代理，打开代理之后顺利访问到了nginx默认页面，哎…这时候我的心情是复杂的…所有努力付诸东流<br><img src=\"/images/timg.jpg\" alt=\"\" title=\"心情复杂\"></p>\n<p>　　既然抵挡不过墙的力量，只能另想办法了，那么只剩下最后一个办法了，使用GitHubPages提供的云空间来发布自己的博客了。对于GithubPages这里就不做过多说明了，使用最多的方式是GithubPages和 <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">Jekyll</a> 来部署自己的个人站点，<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll的主题</a>十分丰富，如果有兴趣可以去了解一下。我选择的是 <strong>Git本地客户端</strong> + <strong>Node.js</strong> + <strong>Hexo Framework</strong> + <strong>Icarus</strong> + <strong>GithubPages</strong> + <strong>Atom</strong> 的方式去编写发布自己的个人博客。em…对于一个新人来说搭建这样一个完整的环境还是不太容易的…因为有太多没有接触的东西，但幸运的是Hexo的官网的文档十分简洁详细，并且之前自己使用过一点Nodejs,所以本地部署测试的过程还算比较顺利。  </p>\n<p>　　接下来就是如何发布自己的站点了，使用Hexo部署的deploy命令部署十分方便，但是这个命令的缺点是会将之前repository里的内容全部都干掉重新生成新的静态文件，这样的会导致自己在repository的CNAME和README文件都会被删除，这是自己没法忍受的缺点，所以只能放弃这个命令，转而自己使用Git的版本控制去手动更新新的文件。但是之前自己写的代码要么是通过IDE里自带的VCS要么是使用Github Desktop同步到Github上，感觉图形界面虽然操作方便但是让我对Git的工作方式一点都不了解，还是停留在无脑commit publish状态，想想自己使用了这么长时间的版本控制只会这两个基本的命令实在是惭愧呀。于是下定决心好好到<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git的官网</a>去学习关于版本控制的知识，Git官网有一本可以免费下载的<a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Git Pro</a>，提供多国语言翻译支持，自己就Download到kindle上平时上下班在公交车上阅读，这本书的详细叙述了版本控制的发展历史以及对比了Git与其它版本控制的区别，以及Git的所有使用情景，是一本十分优秀的书籍，很值得推荐一看。在将这本书啃完了前几章之后，就可以很轻松的使用Git command去管理Github的远程仓库了。  </p>\n<p>　　在我的cheng-github.github.io仓库下，我建立了两个分支，master和hexo。使用master分支存放生成的如html、css、images、js等静态页面文件,使用hexo分支存放本地测试的hexo文件，用作备份的需要。如果需要将原来的Gitpages的默认访问域名修改为个人域名可以进行相关配置，具体配置可以自行Google或者Baidu。  </p>\n<p>　　至此博客部署发布算是完成了，ヾ(๑╹◡╹)ﾉ”。希望自己不要忘记写博客的初心，也不要忘记当初决定学习计算机的初心，故而使用封面的图片用于提醒自己。em…最想对自己说…</p>\n<p>　　<strong><em>Follow your own voice,尽情去追逐自己想要的一切吧，即使跌倒也不要灰心，别让你眼底的光芒黯淡，that’s really alive.</em></strong>  </p>\n<p>　　</p>\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<p>　　其实一直以来都隐约有想写博客的想法，记得第一篇博客是发表在我的CSDN个人博客上的，内容是如何为Tomcat配置图片访问路径，以及在Eclipse下对Tomcat服务器目录的理解。之所以写那篇博客是因为这个服务器图片的配置困扰自己很长一段时间，好不容易解决了这个大问题，心情十分愉快就想着写篇博客记录下来，以便为存在有与我有一样需求的人提供帮助　　<strong>︿(￣︶￣)︿</strong><br>","more":"<br>　　但写那篇博客的时候自己对Markdown语法所知甚少，所以最终写出来的博客巨丑无比，自己最后看了都觉得辣眼睛　<strong>┐(´∀｀)┌</strong>,所以之后自己的记录就基本存在于自己的YouDao云笔记上了。直到近来开始学习Web开发的相关知识之后，才觉得书写博客其实是一个很有趣的事情，自己不仅可以在个人博客上记录自己学习的技术知识，也可以记录一些生活上等其他的事情。之前在新浪微博上写过几篇，但总觉得新浪微博更是一个大杂烩一样的平台，所以写了两篇之后自己就想要开始搭建自己的个人博客平台。  </p>\n<p>　　当有搭建自己的个人博客的想法之后，刚开始的做法是想要通过搭建一个博客学习Node.js的相关知识的，自己也确实这么去做了，刚接触Nodejs的时候自己还顺带学习了MongoDB的知识，当然只是学习了一点皮毛，然后又去了解在Nodejs使用十分广泛的Express框架，以及与MongoDB交互的API等。但实在是当时需要学习的技术知识太多，时间跨度太大，以及由于准备寻找实习的原因，导致最后有始无终。<strong>╮(╯﹏╰）╭</strong>  </p>\n<p>　　之后搭建个人博客的事情就一直搁置下来了，由于实习的原因在使用Java开发Web项目，后来自己又想使用Java去搭建一个个人博客，并因此了解到Java有一个非常流行的开源博客项目solo,star的数量达到了5k+,但是自己对于solo的主题却有点不满意，同时这个时候自己又了解到了Hexo Framework,看到hexo的第一眼，马上喜欢上了这个Nodejs博客框架，同时找到了一个自己非常喜欢的主题icarus,于是开始着手学习使用Hexo搭建自己的博客。使用Hexo搭建博客在官网完整的文档和视频说明帮助下，很顺利的完成了一个初步的本地部署并测试基本功能，这时候我就想着如何将这个站点发布提供给其他人访问。想要发布自己的博客站点有很多方式，但对于自己来说主要有下面三个选项:</p>\n<ul>\n<li>部署到阿里云服务器</li>\n<li>部署到Bandwagon服务器</li>\n<li>部署到GithubPages</li>\n</ul>\n<p>阿里云服务器对于学生来说特别便宜，大概120RMB/Year,使用阿里云服务器来部署站点的优点是IP地址在国内，访问速度会比较快，缺点是一但自己毕业之后，服务器的价格就不再是之前的价格了，即使是一个比较low的配置也需要不少的费用，下图是我在 <strong><em>2018/10/20</em></strong> 日去阿里云官网查看的轻量级应用服务器最低配置的价格。<br><img src=\"/images/cost_aliyun.PNG\" alt=\"\" title=\"阿里云服务器价格\"></p>\n<p>　　<strong>(；′⌒`)</strong> 低收入人群表示真心付费不起，所以阿里云这个选项就被我给PASS掉了。至于 <strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 云服务器，个人觉得 <strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 是一个非常便宜实用的美国云服务器供应商，<strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 在国内俗称”搬瓦工”,去年我购买的时候官网还没有被墙，现在已经无法访问了 (╯︵╰),哎这个长城防火墙实在是…反正自己是没法理解设计者的思想…个人觉得这个墙的弊远远大于利，不过这也是自己的个人想法，没有办法去改变现状。回到正题，下图是搬瓦工的官网界面:<br><img src=\"/images/cost_bandwagon.PNG\" alt=\"\"></p>\n<p>　　我们可以看到最便宜的价格是19.9$,但是我们可以从网上找一找优惠码，可以优惠几美刀，毕竟1美刀可是相当6块多RMB呀。对于购买方案的选择，有一个不错的网站自己一直在用，地址是<a href=\"http://banwagong.cn/\" target=\"_blank\" rel=\"noopener\">http://banwagong.cn/</a>,感觉还不错，其实最低配以及满足我们普通用户的需求了，但是问题在于购买的VPS是否是选择的CN2直连线路，如果是CN2线路的话大概延迟会在 <strong><em>150~200ms</em></strong> 之间，个人觉得这个延迟时间是可以接受的。如果再为VPS配置Google的BBR拥塞控制的话，还可以降低一部分延迟，虽然降低的延迟不是很多，但毕竟实在是距离太远，能够做到降低一部分延迟已经很不错了。  </p>\n<p>　　自己平时使用 <strong>Bangwagong</strong> 主要是用于配置SSR服务，在自己摸不着头脑的时候用来Google寻找答案的，或者去查看一些官方站点的Doc，也偶尔看看Youtube视频啦 ٩(๑❛ᴗ❛๑)۶ 。所以这时候刚好碰上了部署站点的需求，所以就想这不是一举两得吗?不仅可以用来满足自己的翻墙需求还可以用来发布自己的博客，于是自己就开始为Hexo配置环境，目标主机是Cent OS7,自己也是倒腾一段时间才终于将所有需要配置的东西都配置好。但是当我在80端口运行自己的nginx服务之后，在自己的主机上居然访问不到nginx的页面？开始自己以为是某个地方配置的不对，后来想到可能是墙的锅，于是打开代理，打开代理之后顺利访问到了nginx默认页面，哎…这时候我的心情是复杂的…所有努力付诸东流<br><img src=\"/images/timg.jpg\" alt=\"\" title=\"心情复杂\"></p>\n<p>　　既然抵挡不过墙的力量，只能另想办法了，那么只剩下最后一个办法了，使用GitHubPages提供的云空间来发布自己的博客了。对于GithubPages这里就不做过多说明了，使用最多的方式是GithubPages和 <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">Jekyll</a> 来部署自己的个人站点，<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll的主题</a>十分丰富，如果有兴趣可以去了解一下。我选择的是 <strong>Git本地客户端</strong> + <strong>Node.js</strong> + <strong>Hexo Framework</strong> + <strong>Icarus</strong> + <strong>GithubPages</strong> + <strong>Atom</strong> 的方式去编写发布自己的个人博客。em…对于一个新人来说搭建这样一个完整的环境还是不太容易的…因为有太多没有接触的东西，但幸运的是Hexo的官网的文档十分简洁详细，并且之前自己使用过一点Nodejs,所以本地部署测试的过程还算比较顺利。  </p>\n<p>　　接下来就是如何发布自己的站点了，使用Hexo部署的deploy命令部署十分方便，但是这个命令的缺点是会将之前repository里的内容全部都干掉重新生成新的静态文件，这样的会导致自己在repository的CNAME和README文件都会被删除，这是自己没法忍受的缺点，所以只能放弃这个命令，转而自己使用Git的版本控制去手动更新新的文件。但是之前自己写的代码要么是通过IDE里自带的VCS要么是使用Github Desktop同步到Github上，感觉图形界面虽然操作方便但是让我对Git的工作方式一点都不了解，还是停留在无脑commit publish状态，想想自己使用了这么长时间的版本控制只会这两个基本的命令实在是惭愧呀。于是下定决心好好到<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git的官网</a>去学习关于版本控制的知识，Git官网有一本可以免费下载的<a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Git Pro</a>，提供多国语言翻译支持，自己就Download到kindle上平时上下班在公交车上阅读，这本书的详细叙述了版本控制的发展历史以及对比了Git与其它版本控制的区别，以及Git的所有使用情景，是一本十分优秀的书籍，很值得推荐一看。在将这本书啃完了前几章之后，就可以很轻松的使用Git command去管理Github的远程仓库了。  </p>\n<p>　　在我的cheng-github.github.io仓库下，我建立了两个分支，master和hexo。使用master分支存放生成的如html、css、images、js等静态页面文件,使用hexo分支存放本地测试的hexo文件，用作备份的需要。如果需要将原来的Gitpages的默认访问域名修改为个人域名可以进行相关配置，具体配置可以自行Google或者Baidu。  </p>\n<p>　　至此博客部署发布算是完成了，ヾ(๑╹◡╹)ﾉ”。希望自己不要忘记写博客的初心，也不要忘记当初决定学习计算机的初心，故而使用封面的图片用于提醒自己。em…最想对自己说…</p>\n<p>　　<strong><em>Follow your own voice,尽情去追逐自己想要的一切吧，即使跌倒也不要灰心，别让你眼底的光芒黯淡，that’s really alive.</em></strong>  </p>\n<p>　　</p>\n<p>　　</p>"},{"layout":"post","title":"Comparator && Comparable in Java","date":"2018-11-06T08:33:00.000Z","_content":"　　Comparator和Comparable是Java中将对象按照数据成员进行排序的两个接口，最近在读**《数据结构与算法分析　Java语言描述》_-Mark Allen Weiss_** ,看到书中的例子使用到了这两个接口，所以就想学习一下Java中这两个接口的使用方式　(｀・ω・´)\n<!-- more -->\n　　在Java中Comparable接口定义为:  \n{% codeblock  lang:java %}\n    package java.lang;\n    import java.util.*;\n\n    public interface Comparable<T> {    \n      public int compareTo(T o);\n    }\n{% endcodeblock %}\n　　接口中仅定义了一个***compareTo()***方法，自定义的对象则可以通过实现这个方法并结合Collections.sort()进行排序。比如自定义一个Order类:\n{% codeblock  lang:java %}\n  public class Order implements Comparable<Order>{\n\n      private int orderNumber;\n      private String orderDes;\n      private LocalDate orderTime;\n\n      public Order(int orderNumber, String orderDes, LocalDate orderTime) {\n          this.orderNumber = orderNumber;\n          this.orderDes = orderDes;\n          this.orderTime = orderTime;\n      }\n\n      @Override\n      public int compareTo(Order o) {\n          return this.getOrderNumber() - o.getOrderNumber();\n      }\n\n      @Override\n      public String toString() {\n          return  this.orderNumber + \"  \" + this.orderDes + \"  \" + this.orderTime;\n      }\n      // ... 省略getter setter\n{% endcodeblock %}\n　　该Order类中定义了三个字段orderNumber、orderDes、orderTime，依次表示订单号、订单描述、订单时间。***compareTo()***方法简单的返回订单号的值的相减结果，第一次单元测试用例如下:\n{% codeblock lang:java %}\n    @Test\n    void testComparableSimple() {\n        ArrayList<Order> lists = new ArrayList<>();\n        lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n        lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n        lists.add(new Order(71,\"order 71\",LocalDate.of(2015,2,7)));\n        lists.add(new Order(691,\"order 691\",LocalDate.of(2011,6,21)));\n        lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n        for (int i = 0; i < lists.size() - 1 ; i++) {\n            System.out.println(\"第\" + i +\"个元素与第\" + (i+1) + \"元素进行比较:\" +\n                    lists.get(i).compareTo(lists.get(i+1)));\n        }\n    }\n  /* 输出结果:\n      第0个元素与第1元素进行比较:-98\n      第1个元素与第2元素进行比较:150\n      第2个元素与第3元素进行比较:-620\n      第3个元素与第4元素进行比较:272\n  */\n{% endcodeblock %}\n　　从上面的输出结果可以看出，Order类实现的Comparable接口的作用就是用于与其它Order对象使用***compareTo()***进行比较并返回一个int值。目前我们还看不出这个方法的作用，但是我们再看下一个单元测试就会明白其的作用了:\n{% codeblock lang:java %}\n  @Test\n  void testComparableSecond() {\n      ArrayList<Order> lists = new ArrayList<>();\n      lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n      lists.add(new Order(71,\"order 71\",LocalDate.of(2015,2,7)));\n      lists.add(new Order(691,\"order 691\",LocalDate.of(2011,6,21)));\n      lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n\n      System.out.println(\"未进行排序前的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n      // 调用Collections.sort()进行排序\n      Collections.sort(lists);\n      System.out.println(\"进行排序之后的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n  }\n  /* 输出结果:\n      未进行排序前的顺序:\n      123  order 123  2018-11-06\n      221  order 221  2012-09-01\n      71  order 71  2015-02-07\n      691  order 691  2011-06-21\n      419  order 419  2009-03-31\n      进行排序之后的顺序:\n      71  order 71  2015-02-07\n      123  order 123  2018-11-06\n      221  order 221  2012-09-01\n      419  order 419  2009-03-31\n      691  order 691  2011-06-21\n  */\n{% endcodeblock %}\n　　从输出结果可以看出lists里的数据根据orderNumber进行了升序排序，而这是因为Order实现了Comparable接口的***compareTo()***方法,我们在该方法中返回相减的结果。当结果为正数，零，或者负数分别表示调用***compareTo()***的对象大于、等于、小于传递到方法中的参数对象，默认升序排序。如果需要降序排序则返回相反数即可。\n　　至于Comparator接口，如果需要使用其来进行排序则需要编写一个类去实现它的***compare()***方法，这里我们编写一个先根据订单号再根据订单日期进行排序的实现类***SortByOrderNumberAndTime.class:***\n{% codeblock lang:java %}\n  public class SortByOrderNumberAndTime implements Comparator<Order> {\n        /**\n         * 根据订单号进行排序，订单号相同则根据时间进行排序\n         * @param o1\n         * @param o2\n         * @return\n         */\n        @Override\n        public int compare(Order o1, Order o2) {\n            int numberOrder = o1.getOrderNumber() - o2.getOrderNumber();\n            int timeOrder = o1.getOrderTime().compareTo(o2.getOrderTime());\n            if(numberOrder == 0 && timeOrder != 0)\n                return timeOrder;\n            else\n                return numberOrder;\n        }\n  }\n{% endcodeblock %}\n　　对应的单元测试:\n{% codeblock lang:java %}\n  @Test\n  void testComparator() {\n      ArrayList<Order> lists = new ArrayList<>();\n      lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2017,2,7)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2015,6,21)));\n      lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n      System.out.println(\"未进行排序前的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n      Collections.sort(lists,new SortByOrderNumberAndTime());\n      System.out.println(\"排序之后的顺序\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n  }\n/*输出结果:\n  未进行排序前的顺序:\n  123  order 123  2018-11-06\n  221  order 221  2012-09-01\n  221  order 221  2017-02-07\n  221  order 221  2015-06-21\n  419  order 419  2009-03-31\n  排序之后的顺序\n  123  order 123  2018-11-06\n  221  order 221  2012-09-01\n  221  order 221  2015-06-21\n  221  order 221  2017-02-07\n  419  order 419  2009-03-31\n*/\n{% endcodeblock %}\n　　我们可以看到lists首先根据订单号然后根据时间先后顺序进行了排序，这里也是依据SortByOrderNumberAndTime类中实现的***compare()***方法进行的排序，并且在compare()里使用到了LocalDate类里的compareTo()方法去比较时间先后顺序，除了LocalDate,Java中许多常用的类也默认提供了对Comparable接口的实现，比如String、Integer、Character、Float、Byte基本数据类型的包装类，具体可以查看官网的Docs。\n　　不论是Comparator接口还是Comparable接口，都是实现排序的一种方式，当然也可以结合一起使用，具体的使用方式还是得取决于最终的需求。\n","source":"_posts/Comparator && Comparable.md","raw":"layout: \"post\"\ntitle: \"Comparator && Comparable in Java\"\ndate: \"2018-11-06 16:33\"\ncategories:\n- [JAVA,DATA_STRACTURE]\ntags:\n- [TECHNOLOGY]\n---\n　　Comparator和Comparable是Java中将对象按照数据成员进行排序的两个接口，最近在读**《数据结构与算法分析　Java语言描述》_-Mark Allen Weiss_** ,看到书中的例子使用到了这两个接口，所以就想学习一下Java中这两个接口的使用方式　(｀・ω・´)\n<!-- more -->\n　　在Java中Comparable接口定义为:  \n{% codeblock  lang:java %}\n    package java.lang;\n    import java.util.*;\n\n    public interface Comparable<T> {    \n      public int compareTo(T o);\n    }\n{% endcodeblock %}\n　　接口中仅定义了一个***compareTo()***方法，自定义的对象则可以通过实现这个方法并结合Collections.sort()进行排序。比如自定义一个Order类:\n{% codeblock  lang:java %}\n  public class Order implements Comparable<Order>{\n\n      private int orderNumber;\n      private String orderDes;\n      private LocalDate orderTime;\n\n      public Order(int orderNumber, String orderDes, LocalDate orderTime) {\n          this.orderNumber = orderNumber;\n          this.orderDes = orderDes;\n          this.orderTime = orderTime;\n      }\n\n      @Override\n      public int compareTo(Order o) {\n          return this.getOrderNumber() - o.getOrderNumber();\n      }\n\n      @Override\n      public String toString() {\n          return  this.orderNumber + \"  \" + this.orderDes + \"  \" + this.orderTime;\n      }\n      // ... 省略getter setter\n{% endcodeblock %}\n　　该Order类中定义了三个字段orderNumber、orderDes、orderTime，依次表示订单号、订单描述、订单时间。***compareTo()***方法简单的返回订单号的值的相减结果，第一次单元测试用例如下:\n{% codeblock lang:java %}\n    @Test\n    void testComparableSimple() {\n        ArrayList<Order> lists = new ArrayList<>();\n        lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n        lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n        lists.add(new Order(71,\"order 71\",LocalDate.of(2015,2,7)));\n        lists.add(new Order(691,\"order 691\",LocalDate.of(2011,6,21)));\n        lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n        for (int i = 0; i < lists.size() - 1 ; i++) {\n            System.out.println(\"第\" + i +\"个元素与第\" + (i+1) + \"元素进行比较:\" +\n                    lists.get(i).compareTo(lists.get(i+1)));\n        }\n    }\n  /* 输出结果:\n      第0个元素与第1元素进行比较:-98\n      第1个元素与第2元素进行比较:150\n      第2个元素与第3元素进行比较:-620\n      第3个元素与第4元素进行比较:272\n  */\n{% endcodeblock %}\n　　从上面的输出结果可以看出，Order类实现的Comparable接口的作用就是用于与其它Order对象使用***compareTo()***进行比较并返回一个int值。目前我们还看不出这个方法的作用，但是我们再看下一个单元测试就会明白其的作用了:\n{% codeblock lang:java %}\n  @Test\n  void testComparableSecond() {\n      ArrayList<Order> lists = new ArrayList<>();\n      lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n      lists.add(new Order(71,\"order 71\",LocalDate.of(2015,2,7)));\n      lists.add(new Order(691,\"order 691\",LocalDate.of(2011,6,21)));\n      lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n\n      System.out.println(\"未进行排序前的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n      // 调用Collections.sort()进行排序\n      Collections.sort(lists);\n      System.out.println(\"进行排序之后的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n  }\n  /* 输出结果:\n      未进行排序前的顺序:\n      123  order 123  2018-11-06\n      221  order 221  2012-09-01\n      71  order 71  2015-02-07\n      691  order 691  2011-06-21\n      419  order 419  2009-03-31\n      进行排序之后的顺序:\n      71  order 71  2015-02-07\n      123  order 123  2018-11-06\n      221  order 221  2012-09-01\n      419  order 419  2009-03-31\n      691  order 691  2011-06-21\n  */\n{% endcodeblock %}\n　　从输出结果可以看出lists里的数据根据orderNumber进行了升序排序，而这是因为Order实现了Comparable接口的***compareTo()***方法,我们在该方法中返回相减的结果。当结果为正数，零，或者负数分别表示调用***compareTo()***的对象大于、等于、小于传递到方法中的参数对象，默认升序排序。如果需要降序排序则返回相反数即可。\n　　至于Comparator接口，如果需要使用其来进行排序则需要编写一个类去实现它的***compare()***方法，这里我们编写一个先根据订单号再根据订单日期进行排序的实现类***SortByOrderNumberAndTime.class:***\n{% codeblock lang:java %}\n  public class SortByOrderNumberAndTime implements Comparator<Order> {\n        /**\n         * 根据订单号进行排序，订单号相同则根据时间进行排序\n         * @param o1\n         * @param o2\n         * @return\n         */\n        @Override\n        public int compare(Order o1, Order o2) {\n            int numberOrder = o1.getOrderNumber() - o2.getOrderNumber();\n            int timeOrder = o1.getOrderTime().compareTo(o2.getOrderTime());\n            if(numberOrder == 0 && timeOrder != 0)\n                return timeOrder;\n            else\n                return numberOrder;\n        }\n  }\n{% endcodeblock %}\n　　对应的单元测试:\n{% codeblock lang:java %}\n  @Test\n  void testComparator() {\n      ArrayList<Order> lists = new ArrayList<>();\n      lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2017,2,7)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2015,6,21)));\n      lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n      System.out.println(\"未进行排序前的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n      Collections.sort(lists,new SortByOrderNumberAndTime());\n      System.out.println(\"排序之后的顺序\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n  }\n/*输出结果:\n  未进行排序前的顺序:\n  123  order 123  2018-11-06\n  221  order 221  2012-09-01\n  221  order 221  2017-02-07\n  221  order 221  2015-06-21\n  419  order 419  2009-03-31\n  排序之后的顺序\n  123  order 123  2018-11-06\n  221  order 221  2012-09-01\n  221  order 221  2015-06-21\n  221  order 221  2017-02-07\n  419  order 419  2009-03-31\n*/\n{% endcodeblock %}\n　　我们可以看到lists首先根据订单号然后根据时间先后顺序进行了排序，这里也是依据SortByOrderNumberAndTime类中实现的***compare()***方法进行的排序，并且在compare()里使用到了LocalDate类里的compareTo()方法去比较时间先后顺序，除了LocalDate,Java中许多常用的类也默认提供了对Comparable接口的实现，比如String、Integer、Character、Float、Byte基本数据类型的包装类，具体可以查看官网的Docs。\n　　不论是Comparator接口还是Comparable接口，都是实现排序的一种方式，当然也可以结合一起使用，具体的使用方式还是得取决于最终的需求。\n","slug":"Comparator && Comparable","published":1,"updated":"2018-11-08T14:19:22.565Z","comments":1,"photos":[],"link":"","_id":"cjomsfhhg0003q8wt6cixchb4","content":"<p>　　Comparator和Comparable是Java中将对象按照数据成员进行排序的两个接口，最近在读<strong>《数据结构与算法分析　Java语言描述》_-Mark Allen Weiss_</strong> ,看到书中的例子使用到了这两个接口，所以就想学习一下Java中这两个接口的使用方式　(｀・ω・´)<br><a id=\"more\"></a><br>　　在Java中Comparable接口定义为:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　接口中仅定义了一个<strong><em>compareTo()</em></strong>方法，自定义的对象则可以通过实现这个方法并结合Collections.sort()进行排序。比如自定义一个Order类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Order</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> orderNumber;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderDes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDate orderTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Order</span><span class=\"params\">(<span class=\"keyword\">int</span> orderNumber, String orderDes, LocalDate orderTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderNumber = orderNumber;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderDes = orderDes;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderTime = orderTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Order o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getOrderNumber() - o.getOrderNumber();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span>.orderNumber + <span class=\"string\">\"  \"</span> + <span class=\"keyword\">this</span>.orderDes + <span class=\"string\">\"  \"</span> + <span class=\"keyword\">this</span>.orderTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... 省略getter setter</span></span><br></pre></td></tr></table></figure><br>　　该Order类中定义了三个字段orderNumber、orderDes、orderTime，依次表示订单号、订单描述、订单时间。<strong><em>compareTo()</em></strong>方法简单的返回订单号的值的相减结果，第一次单元测试用例如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparableSimple</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">71</span>,<span class=\"string\">\"order 71\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">691</span>,<span class=\"string\">\"order 691\"</span>,LocalDate.of(<span class=\"number\">2011</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lists.size() - <span class=\"number\">1</span> ; i++) &#123;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"第\"</span> + i +<span class=\"string\">\"个元素与第\"</span> + (i+<span class=\"number\">1</span>) + <span class=\"string\">\"元素进行比较:\"</span> +</span><br><span class=\"line\">                  lists.get(i).compareTo(lists.get(i+<span class=\"number\">1</span>)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    第0个元素与第1元素进行比较:-98</span></span><br><span class=\"line\"><span class=\"comment\">    第1个元素与第2元素进行比较:150</span></span><br><span class=\"line\"><span class=\"comment\">    第2个元素与第3元素进行比较:-620</span></span><br><span class=\"line\"><span class=\"comment\">    第3个元素与第4元素进行比较:272</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　从上面的输出结果可以看出，Order类实现的Comparable接口的作用就是用于与其它Order对象使用<strong><em>compareTo()</em></strong>进行比较并返回一个int值。目前我们还看不出这个方法的作用，但是我们再看下一个单元测试就会明白其的作用了:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparableSecond</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">71</span>,<span class=\"string\">\"order 71\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">691</span>,<span class=\"string\">\"order 691\"</span>,LocalDate.of(<span class=\"number\">2011</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"未进行排序前的顺序:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">        System.out.println(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用Collections.sort()进行排序</span></span><br><span class=\"line\">    Collections.sort(lists);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"进行排序之后的顺序:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">        System.out.println(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    未进行排序前的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">    123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">    221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">    71  order 71  2015-02-07</span></span><br><span class=\"line\"><span class=\"comment\">    691  order 691  2011-06-21</span></span><br><span class=\"line\"><span class=\"comment\">    419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">    进行排序之后的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">    71  order 71  2015-02-07</span></span><br><span class=\"line\"><span class=\"comment\">    123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">    221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">    419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">    691  order 691  2011-06-21</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　从输出结果可以看出lists里的数据根据orderNumber进行了升序排序，而这是因为Order实现了Comparable接口的<strong><em>compareTo()</em></strong>方法,我们在该方法中返回相减的结果。当结果为正数，零，或者负数分别表示调用<strong><em>compareTo()</em></strong>的对象大于、等于、小于传递到方法中的参数对象，默认升序排序。如果需要降序排序则返回相反数即可。<br>　　至于Comparator接口，如果需要使用其来进行排序则需要编写一个类去实现它的<strong><em>compare()</em></strong>方法，这里我们编写一个先根据订单号再根据订单日期进行排序的实现类<strong><em>SortByOrderNumberAndTime.class:</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortByOrderNumberAndTime</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Order</span>&gt; </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 根据订单号进行排序，订单号相同则根据时间进行排序</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@param</span> o1</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@param</span> o2</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Order o1, Order o2)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> numberOrder = o1.getOrderNumber() - o2.getOrderNumber();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> timeOrder = o1.getOrderTime().compareTo(o2.getOrderTime());</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(numberOrder == <span class=\"number\">0</span> &amp;&amp; timeOrder != <span class=\"number\">0</span>)</span><br><span class=\"line\">              <span class=\"keyword\">return</span> timeOrder;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> numberOrder;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　对应的单元测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2017</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"未进行排序前的顺序:\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">          System.out.println(order);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Collections.sort(lists,<span class=\"keyword\">new</span> SortByOrderNumberAndTime());</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"排序之后的顺序\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">          System.out.println(order);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">  未进行排序前的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">  123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2017-02-07</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2015-06-21</span></span><br><span class=\"line\"><span class=\"comment\">  419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">  排序之后的顺序</span></span><br><span class=\"line\"><span class=\"comment\">  123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2015-06-21</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2017-02-07</span></span><br><span class=\"line\"><span class=\"comment\">  419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　我们可以看到lists首先根据订单号然后根据时间先后顺序进行了排序，这里也是依据SortByOrderNumberAndTime类中实现的<strong><em>compare()</em></strong>方法进行的排序，并且在compare()里使用到了LocalDate类里的compareTo()方法去比较时间先后顺序，除了LocalDate,Java中许多常用的类也默认提供了对Comparable接口的实现，比如String、Integer、Character、Float、Byte基本数据类型的包装类，具体可以查看官网的Docs。<br>　　不论是Comparator接口还是Comparable接口，都是实现排序的一种方式，当然也可以结合一起使用，具体的使用方式还是得取决于最终的需求。</p>\n","site":{"data":{}},"excerpt":"<p>　　Comparator和Comparable是Java中将对象按照数据成员进行排序的两个接口，最近在读<strong>《数据结构与算法分析　Java语言描述》_-Mark Allen Weiss_</strong> ,看到书中的例子使用到了这两个接口，所以就想学习一下Java中这两个接口的使用方式　(｀・ω・´)<br>","more":"<br>　　在Java中Comparable接口定义为:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　接口中仅定义了一个<strong><em>compareTo()</em></strong>方法，自定义的对象则可以通过实现这个方法并结合Collections.sort()进行排序。比如自定义一个Order类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Order</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> orderNumber;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderDes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDate orderTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Order</span><span class=\"params\">(<span class=\"keyword\">int</span> orderNumber, String orderDes, LocalDate orderTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderNumber = orderNumber;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderDes = orderDes;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderTime = orderTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Order o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getOrderNumber() - o.getOrderNumber();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span>.orderNumber + <span class=\"string\">\"  \"</span> + <span class=\"keyword\">this</span>.orderDes + <span class=\"string\">\"  \"</span> + <span class=\"keyword\">this</span>.orderTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... 省略getter setter</span></span><br></pre></td></tr></table></figure><br>　　该Order类中定义了三个字段orderNumber、orderDes、orderTime，依次表示订单号、订单描述、订单时间。<strong><em>compareTo()</em></strong>方法简单的返回订单号的值的相减结果，第一次单元测试用例如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparableSimple</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">71</span>,<span class=\"string\">\"order 71\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">691</span>,<span class=\"string\">\"order 691\"</span>,LocalDate.of(<span class=\"number\">2011</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lists.size() - <span class=\"number\">1</span> ; i++) &#123;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"第\"</span> + i +<span class=\"string\">\"个元素与第\"</span> + (i+<span class=\"number\">1</span>) + <span class=\"string\">\"元素进行比较:\"</span> +</span><br><span class=\"line\">                  lists.get(i).compareTo(lists.get(i+<span class=\"number\">1</span>)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    第0个元素与第1元素进行比较:-98</span></span><br><span class=\"line\"><span class=\"comment\">    第1个元素与第2元素进行比较:150</span></span><br><span class=\"line\"><span class=\"comment\">    第2个元素与第3元素进行比较:-620</span></span><br><span class=\"line\"><span class=\"comment\">    第3个元素与第4元素进行比较:272</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　从上面的输出结果可以看出，Order类实现的Comparable接口的作用就是用于与其它Order对象使用<strong><em>compareTo()</em></strong>进行比较并返回一个int值。目前我们还看不出这个方法的作用，但是我们再看下一个单元测试就会明白其的作用了:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparableSecond</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">71</span>,<span class=\"string\">\"order 71\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">691</span>,<span class=\"string\">\"order 691\"</span>,LocalDate.of(<span class=\"number\">2011</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"未进行排序前的顺序:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">        System.out.println(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用Collections.sort()进行排序</span></span><br><span class=\"line\">    Collections.sort(lists);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"进行排序之后的顺序:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">        System.out.println(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    未进行排序前的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">    123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">    221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">    71  order 71  2015-02-07</span></span><br><span class=\"line\"><span class=\"comment\">    691  order 691  2011-06-21</span></span><br><span class=\"line\"><span class=\"comment\">    419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">    进行排序之后的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">    71  order 71  2015-02-07</span></span><br><span class=\"line\"><span class=\"comment\">    123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">    221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">    419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">    691  order 691  2011-06-21</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　从输出结果可以看出lists里的数据根据orderNumber进行了升序排序，而这是因为Order实现了Comparable接口的<strong><em>compareTo()</em></strong>方法,我们在该方法中返回相减的结果。当结果为正数，零，或者负数分别表示调用<strong><em>compareTo()</em></strong>的对象大于、等于、小于传递到方法中的参数对象，默认升序排序。如果需要降序排序则返回相反数即可。<br>　　至于Comparator接口，如果需要使用其来进行排序则需要编写一个类去实现它的<strong><em>compare()</em></strong>方法，这里我们编写一个先根据订单号再根据订单日期进行排序的实现类<strong><em>SortByOrderNumberAndTime.class:</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortByOrderNumberAndTime</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Order</span>&gt; </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 根据订单号进行排序，订单号相同则根据时间进行排序</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@param</span> o1</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@param</span> o2</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Order o1, Order o2)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> numberOrder = o1.getOrderNumber() - o2.getOrderNumber();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> timeOrder = o1.getOrderTime().compareTo(o2.getOrderTime());</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(numberOrder == <span class=\"number\">0</span> &amp;&amp; timeOrder != <span class=\"number\">0</span>)</span><br><span class=\"line\">              <span class=\"keyword\">return</span> timeOrder;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> numberOrder;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　对应的单元测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2017</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"未进行排序前的顺序:\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">          System.out.println(order);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Collections.sort(lists,<span class=\"keyword\">new</span> SortByOrderNumberAndTime());</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"排序之后的顺序\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">          System.out.println(order);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">  未进行排序前的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">  123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2017-02-07</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2015-06-21</span></span><br><span class=\"line\"><span class=\"comment\">  419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">  排序之后的顺序</span></span><br><span class=\"line\"><span class=\"comment\">  123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2015-06-21</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2017-02-07</span></span><br><span class=\"line\"><span class=\"comment\">  419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　我们可以看到lists首先根据订单号然后根据时间先后顺序进行了排序，这里也是依据SortByOrderNumberAndTime类中实现的<strong><em>compare()</em></strong>方法进行的排序，并且在compare()里使用到了LocalDate类里的compareTo()方法去比较时间先后顺序，除了LocalDate,Java中许多常用的类也默认提供了对Comparable接口的实现，比如String、Integer、Character、Float、Byte基本数据类型的包装类，具体可以查看官网的Docs。<br>　　不论是Comparator接口还是Comparable接口，都是实现排序的一种方式，当然也可以结合一起使用，具体的使用方式还是得取决于最终的需求。</p>"},{"layout":"post","title":"求最大子序列和的四种实现方式","date":"2018-11-18T08:20:00.000Z","mathjax":true,"_content":"　　在总结求最大子序列和的四种实现方式之前想谈谈为什么自己想要重新学习数据结构。之前在大二下学期的时候已经学过了数据结构这个课程，依稀记得老师一直提醒我们数据结构是计算机的核心课程，并且对于考研或者是找工作面试都是很重要的，特地提醒我们要重视这门课程，希望我们好好学习数据结构。当时自己在上数据结构这个课程之前已经使用过基本的数据结构-链表完成了大一下学期的一个C语言课程设计，记得那是自己使用C语言写的一个程序，虽然仅有一百多行，显示界面也只是一个小黑框，但完成的时候特别激动，因为那是自己真正意义上动手写的第一个完整程序。本来还想找到原来的代码运行一下，但发现自己前一段时间为了清理笔记本空间已经将自己之前写的关于C的代码都删除了** ╮(╯﹏╰）╭**\n<!-- more -->\n　　em....一个订餐管理程序，有显示当前订单列表、添加订餐信息、删除订餐信息、修改订餐信息、根据价格为订单排序、将已有订餐信息写入文件等几个简单的小功能，尤其是添加写入到文件这个模块的时候，自己遇到不知道如何解决的一个地方一直没法正常写入到文件，在CSDN上提问然后得到了一位前辈的指教才顺利的完成的这个功能，thanks　　( • ̀ω•́ )✧ 。这个程序当时给老师展示之后最后拿了93分的成绩，自己对于成绩倒不是特别在意，但这也是老师对自己的一种认可吧，更让自己开心的是探索的过程。那是自己第一次接触数据结构，被链表折磨的死去活来，去图书馆借书学习链表，一本看不懂就再借另外一本，读了好几本不同书籍关于链表的内容才开始慢慢理解它，至今还能回忆起当初冥思苦想的那几天。**(*￣∇￣*)** \n\n　　不知不觉又扯了这么远...回到正题，一个学期学习数据结构的时间肯定是不够的，更何况自己当时还并没有花特别多的时间去钻研数据结构，对于每种数据结构都仅仅是简单按照书上的例子实现了一遍，到了现在该忘都忘的差不多了...(╯︵╰) 但真正让我决定重新学习数据结构的原因不是自己想要温习知识，之前面试阿里的时候，面试结束的面试官问我有什么问题想要问他的，我觉得自己面试过程中回答的不好，所以就问面试官对于自己的学习有什么建议没有。面试官就说，培养一个掌握基本开发技能的普通程序员很容易，但数据结构是十分重要的，理解技术的原理也是十分重要的，还讲violate的原理给我听。加上之前在公司的季度技术交流会上，看见某位大佬秀了一波关于数据库方面的数据结构的知识，当时自己真是热血沸腾的感觉，并且那一刻真正的意识到是时候该找时间好好的学习数据结构了，于是才选择了**《数据结构与算法分析　Java语言描述》-Mark Allen Weiss**这本书，并计划一边学习这本书一边写博客记录学习过的内容。最后说一下自己的粗见吧，数据结构可能暂时在开发小型程序的作用还不是特别明显，搭建好开发环境之后，只要对某种语言比较熟练就可以做到业务上的实现，但是如果涉及到大型的应用的构建，当应用吞吐量很大的时候，一个小的细节对于应用整体的性能的作用就会比较明显了，这时候我们不仅需要了解使用到的技术的原理，而且需要更有技巧的编程，用更少的执行时间去完成相同的任务，相反而不是去粗暴的使用蛮力算法实现需求。所以从长远的角度来看，熟练掌握数据结构是十分必要的。  \n\n　　最大子序列和，就是指在一个元素类型为整型的数组中，求其中连续的一个序列和的最大值，这个序列的开始下标可以是数组中的任意位置。如果我们按照列举所有可能情况的思考方式编写代码:  \n- 第一种方式   \n{% codeblock  lang:java %}\n  public static void main(String[] args){\n      int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n      System.out.println(maxSubSum1(a));\n  }\n\n  /**\n   * 最大子序列和,最简单直接的求最大子序和\n   * @return\n   */\n  private static int maxSubSum1(int[] a){\n      int maxSum = 0;\n\n      for (int i = 0; i < a.length; i++) {\n          for (int j = i; j < a.length; j++) {\n              int thisSum = 0;\n\n              for (int k = i; k <= j; k++) {\n                  thisSum += a[k];\n              }\n              if(thisSum > maxSum){\n                  maxSum = thisSum;\n              }\n          }\n      }\n\n      return maxSum;\n  }\n  /*  输出结果:\n      50\n  */\n{% endcodeblock %}\n　　很明显，这里的最大子序列和为前五个元素的和。下面我们分析一下该算法的时间复杂度。假设我们输入的数组的长度为***N***，忽略声明、调用方法、返回值的开销，仅关注嵌套的for循环所占用的时间，那么所耗费的时间为:　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $  \n\n　　对该表达式从里到外求和:  \n$$ \\displaystyle \\sum_{ k=i }^j1=j-i+1 $$\n　　继续从里往外求和:  \n$$ \\displaystyle \\sum_{ j=i }^{ N-1 }( j-i+1 )=\\dfrac{( N-i+1 )( N-i )}{2} $$\n　　所以有:  \n\n　　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $　  \n\n=　$ \\displaystyle \\sum_{ i=0 }^{ N-1 }{\\dfrac{( N-i+1 )( N-i )}{2}} $  \n\n=　$ \\displaystyle \\sum_{ i=1 }^{ N }{\\dfrac{( N-i+2 )( N-i+1 )}{2}} $  \n\n=　$ \\displaystyle \\sum_{ i=1 }^{ N }{ ( \\dfrac{i^2}{2} - \\dfrac{ 3i + 2iN }{ 2 } + \\dfrac{N^2 + 3N + 2 }{ 2 } ) } $    \n\n=　$ \\displaystyle \\dfrac12 \\sum_{ i=1 }^{ N }{ i^2 } - (\\dfrac{ 3+2N }{ 2 })\\sum_{ i=1 }^{ N }{ i } + (\\dfrac{N^2 + 3N + 2}{ 2 })\\sum_{ i=1 }^{ N }{ 1 } $    \n\n=　$ \\displaystyle \\dfrac12 \\dfrac{ N(N+1)(N+2) }{6} - (\\dfrac{ 3+2N }{ 2 })\\dfrac{ N(N+1) }{2} + \\dfrac{N^2 + 3N + 2}{ 2 }N  $  \n\n=　$ \\displaystyle  \\dfrac{ N(N+1)(N+2) }{ 6 } $  \n\n　　经计算可知该算法的时间复杂度为$ O(N^3) $，其实我们没有必要通过三层的for循环穷举所有的子序列的和，上面的第三层的for循环的计算明显存在冗余，仅仅两个for循环就可以满足求和需求:  \n- 第二种方式  \n{% codeblock  lang:java %}\n    public static void main(String[] args){\n            int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n            System.out.println(maxSubSum2(a));\n    }\n\n    private static int maxSubSum2(int[] a){\n        int maxSum = 0;\n        for (int i = 0; i < a.length; i++) {\n            int thisSum = 0;\n            for (int j = i; j < a.length; j++) {\n                thisSum += a[j];\n\n                if(thisSum > maxSum){\n                    maxSum = thisSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n    /*  输出结果:\n        50\n    */\n{% endcodeblock %}  \n\n　　仅关注嵌套的for循环所占用的时间，那么所耗费的时间最多为: $ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $\n\n　　对该表达式从里到外进行求和计算:\n　　$ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $　  \n\n=　$ \\displaystyle 3\\sum_{ i=0 }^{ N-1 }(N-i) $\n\n=　$ \\displaystyle 3\\sum_{ i=1 }^{ N }( N-i+1 ) $\n\n=　$ \\displaystyle \\dfrac{ 3N(N+1) }{ 2 } $\n\n　　计算知第二种方法的时间复杂度为$ O(N^2) $。第二种方式避免了单独计算每个子序列结果的值，在第一种方式里，当第二层循环的j取最大值的时候，最里面的循环累加的结果包含了j取其它值的情况。而第二种方式正好避免这种冗余的计算，将每次累加的结果与当前最大的结果对比，从而降低了时间复杂度。以为这就是最优秀的方法了吗？然而编程思想的威力远没有这么简单，第三种方式采用了在算法设计中普遍采用的一种方式-***\"分而治之\"***:  \n\n- 第三种方式\n{% codeblock  lang:java %}\n    public static void main(String[] args){\n    //        int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n        int[] a = new int[]{-11, -21, -5, -11, -42};\n        System.out.println(maxSubSum3(a, 0, a.length - 1));\n    }\n\n\n    /**\n     * 最大子序列和  第三种方式\n     * @param a\n     * @return\n     */\n    private static int maxSubSum3(int[] a,int left,int right){\n        // 对于递归方法总会有一个基准情况，这里的left与right相等的时候就是我们这里例子的基准\n        if( left == right ){\n            if( a[ left ] > 0)\n                return a[ left ];\n            else\n                return 0;\n        }\n\n        int center = (left + right) / 2;\n        int maxLeftSum = maxSubSum3(a, left, center);\n        int maxRightSum = maxSubSum3(a, center + 1, right);\n\n        int maxLeftBorderSum = 0, leftBorderSum = 0;\n        for (int i = center; i >= left; i--) {\n            leftBorderSum += a[ i ];\n            if( leftBorderSum > maxLeftBorderSum){\n                maxLeftBorderSum = leftBorderSum;\n            }\n        }\n\n        int maxRightBorderSum = 0, rightBorderSum = 0;\n        for (int i = center + 1; i <= right; i++) {\n            rightBorderSum += a[ i ];\n            if(rightBorderSum > maxRightBorderSum){\n                maxRightBorderSum = rightBorderSum;\n            }\n        }\n\n\n        return max3(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);\n    }\n\n    private static int max3(int a,int b,int c){\n        if (b > a || c > a){\n            if(b > c)\n                return b;\n            else\n                return c;\n        } else {\n            return a;\n        }\n    }\n\n{% endcodeblock %}  \n\n　　显然第三种方式的代码要比前两种复杂，但是复杂不是出发点，我们的目的是减少时间复杂度。在第三种方式中，核心方法是***int maxSubSum3(int[] a,int left,int right)***，递归方法往往都存在着一个基准情况，不然递归就会无限循环调用下去，程序也毫无意义了。在这里15-20行是这个递归方法的基准情况，方法中的23、24行中进行了对自身的调用。接下来分析这个代码是如何执行的，为了更清楚该代码的执行过程，我调试程序的时候特意注释掉了main方法之前在第一种方式和第二种方式使用到的参数，使用数量较少的参数去还原该算法整个过程。方法中有三个参数，***int[] a、int left、int right***，第一次传递到该方法中的实参是数组a的起始下标和结束下标，显然第一次调用该方法是不满足基准情况的，在不满足基准情况下继续往下执行，计算left和right的平均值，如果不能整除则取去掉小数位的数值。然后分别将center作为right的实参传递到***maxSubSum3()***为maxLeftSum赋值，center+1作为left的实参传递到***maxSubSum3()***为maxRightSum赋值。顾名思义，maxLeftSum和maxRightSum其实就是将数组分为左右两块之后左右两个数组的最大子序列和的值。但是我们怎么知道这两个变量的值是左右两个数组的最大子序列和的值呢？仅从外层去理解这个程序是无法得出这个结论的，我们不妨追溯到该程序的基准情况，left=right。  \n\n　　当left与right相等的时候，程序会判断数组对应left的索引下标的值是否大于0，如果大于0，则返回对应值，小于0则返回0。显然这里就是该递归的基准情况了，当基准情况返回到上一层的调用，center的值必然与left是相等的，且right的值必然等于center+1。这个情况不难分析，因为　center = (left + right) / 2,且left与center相等，left不等于right,所以right必然等于center + 1。且该基准情况准只可能对应数组中的起始元素和结束元素，因为在递归调用中为maxLeftSum赋值的时候左边的参数不变，而center会不断减少直到与left相等，而其它方法中执行到了为maxLeftSum赋值的时候已经过了基准条件的筛选，同理为maxRightSum赋值的递归调用也是如此。明白了这一层关系，我们可以从程序的基准情况开始分析，下图的圆形表示从基准情况返回到上一层的时候，maxLeftSum以及maxRightSum的值,如果index对应0和1的值大于0则返回对应的值否则返回0:  \n\n![](/images/maxSubSum/base1.jpg \"最内层递归结束之后\")  \n\n　　26-40行的代码的意思是以中间的虚线左右两边的第一个元素为首元素分别开始往左右找出最大的子序列和，然后将左边与右边的最大的子序列的和相加，再在它和maxLeftSum、maxRightSum三个值中取最大值。当索引仅为0和1的时候这样处理肯定是可以拿到0、1组合的子数组的最大序列和，但如果递归的结果再往上一层，这样的处理是否依旧合适呢？当递归到第二层，上图递归的返回值为下图的maxLeftSum。下图展示了下一层递归的结果:(右边可能的Index有两种情况，一种是仅存在一个元素Index = 2，一种是存在元素Index = 2 和 Index = 3,这里我们为了更好的展示过程取两个元素的情况)\n\n![](/images/maxSubSum/base2.jpg \"递归第二层结束之后\")  \n\n　　这个时候如果还是按照之前的处理，取三者之间的最大值作为最大子序列和的结果是否合适呢？这里需要分情况讨论，现在我们可以确定的是maxLeftSum一定是左边数组最大的子序列的和，maxRightSum一定是右边数组最大的子序列的和。如果存在最大子序列的和不仅是单独取左边和右边里的元素，而是左右两边都需要取值构成最大子序列的和，那么这个对于整体而言的最大子序列一定是包含虚线左右两侧的元素的，因为一个子序列一定是连续的，这样的话就可以按照之前的方法分别从虚线开始往左右两边求最大子序列的和相加一定可以得到整个数组的最大子序列的和。如果不存在最大的子序列的和同时依赖于左和右两边的元素，我们针对maxLeftSum和maxRightSum取较大值即可得到最大子序列和。综合考虑上面两种情况，这样我们在这三个值中取最大值一定可以得到这个数组块的最大子序列和。这个可以递推到无论数组被分为多少块的情况，在数学的证明里也经常使用到这样的方式去证明一个定理，对于某个较小的情况条件成立，我们将这个较小的情况取为一般情况K，然后再证明K+1的情况成立，那么结论一定是成立的，数学里称为归纳假设，同样在这个情况下证明这个递归算法的正确性使用到了相似的方式。  \n\n　　验证了这个算法的正确性之后，不可缺少的工作是去计算这个算法的时间复杂度。假设我们处理的数组长度为***N***，仅对***maxSubSum3(int[] a,int left,int right)***的执行时间进行计算，设其执行时间为T(N)。在这个方法内，15-20行的执行时间为一个常数时间量，设为T(1) = 1；对于26-40行的两个for循环，会遍历$ A_0 到 A_{ N-1 } $的每个元素，在每个循环内部耗费的时间都为常量，因此可设其执行时间为O(N)；接下来就是在23、24上两个递归方法的调用消耗的时间，这两行求解的数组长度大小为N/2，总计消耗的时间为2T(N/2)。忽略常数时间，可以得:  \n\n$$  \\displaystyle T(N) = T(\\dfrac{N}{2}) + O(N) $$\n\n　　 为了简化计算，我们可以使用N代替上式的O(N)，那么T(N) = 2T(N/2) + N,且有T(1) = 1,那么 T(2) = 2\\*2 + 2 = 2\\*2 = 4,T(4) = 2\\*4 + 4 = 3\\*4 = 12,T(8) = 2T(4) + 8 = 2\\*12 + 8 = 4\\*8 = 32,T(16) = 2T(8) + 16 = 2\\*32 + 16 = 5\\*16 = 80 ...... 即若$ N = 2^k $,则有:  \n\n$$  \\displaystyle T(N) = N * (k+1) = NlogN + N = O(NlogN) $$\n\n　　 当然这里的计算结果是假设当$ N = 2^k $的情况，当N不是这个值的时候，需要一些更复杂的分析，但大O的结果是不变的。显然该算法的时间复杂度要比第二种方式低，本来以为到这里已经是最快的解决方式了，可是接下来还有一种比第三种方式时间复杂度更低的算法...而且实现起来居然更简单...不得不为思维的力量折服。 Ｏ(≧▽≦)Ｏ  \n\n- 第四种方式\n{% codeblock  lang:java %}\n    public static void main(String[] args){\n            int[] a = new int[]{11, -21, 5, 11, -42};\n            System.out.println(maxSubSum4(a));\n    }\n\n    /**\n     * 最大子序列求和   第四种写法\n     * @param a\n     * @return\n     */\n    private static int maxSubSum4(int[] a){\n        int maxSum = 0, thisSum = 0;\n\n        for (int i = 0; i < a.length; i++) {\n            thisSum += a[ i ];\n\n            if(thisSum > maxSum){\n                maxSum = thisSum;\n            }else if( thisSum < 0){\n                thisSum = 0;\n            }\n        }\n\n        return maxSum;\n    } \n/*\n  输出结果:\n  16\n*/\n{% endcodeblock %}  \n\n　　这个算法的时间复杂度可以看出来为O(N),但是粗看会质疑这个算法的正确性，因为这里仅有一个for循环去遍历数组中的值，难道这能就求出最大子序列的和？ (╬￣皿￣)=○ 　那我们之前的努力不是徒劳了？别着急，慢慢来看这个算法到底是怎么回事。  \n\n　　分析程序可以得出，当thisSum为负值的时候，就选择抛弃前面的计算结果，选择从第一个非负值开始递增寻找最大子序列和。当在数组中前几个数字为负值的时候，这样的做法明显是正确的，因为负值不可能作为最大子序列和的开始。但是如果这样的一个序列出现在数组的中间的时候呢？我们假设从a[i]到a[j]出现了一个计算序列结果为负数的情况，那么假设可以从p(p为i+1到j之间的一个整数)开始得到一个比当前最大更大的子序列和，由于子序列必定是连续的，且从a[i]到a[p-1]的和是大于0的，那么很明显我们如果从a[i]开始要比从a[p]开始可以得到一个更大的子序列和。然后再做这样一个比较，从i开始和从j+1开始对比，如果存在一个从j+1开始的子序列的和比当前的最大的子序列大的情况，也是由于子序列的连续性，那么显然从j+1开始要比从i开始的值大，因为a[i]到a[j]的和是一个负数。所以如果出现负数的情况，如果后续还存在一个更大的子序列和，那么它的起点必然是在j之后而不可能在j之前。当然如果不存在从i+1开始存在比当前子序列更大的情况，我们继续累加也是不可能得出一个比当前最大子序列和更大的值。所以我们仅考虑存在比当前子序列更大的情况即可。如果存在从i+1开始比当前子序列更大的情况，综前所述，也必然出现在j之后。  \n\n　　看似简单的程序其实蕴含了丰富的思考，掌握了这个求最大和问题的本质。 (=ﾟωﾟ)ﾉ\n\n　　End\n\n\n\n\n\n","source":"_posts/2018-11-19_最大子序列求和.md","raw":"layout: \"post\"\ntitle: \"求最大子序列和的四种实现方式\"\ndate: \"2018-11-18 16:20\"\nmathjax: true\ncategories:\n- [JAVA,DATA_STRACTURE]\ntags:\n- [TECHNOLOGY]\n---\n　　在总结求最大子序列和的四种实现方式之前想谈谈为什么自己想要重新学习数据结构。之前在大二下学期的时候已经学过了数据结构这个课程，依稀记得老师一直提醒我们数据结构是计算机的核心课程，并且对于考研或者是找工作面试都是很重要的，特地提醒我们要重视这门课程，希望我们好好学习数据结构。当时自己在上数据结构这个课程之前已经使用过基本的数据结构-链表完成了大一下学期的一个C语言课程设计，记得那是自己使用C语言写的一个程序，虽然仅有一百多行，显示界面也只是一个小黑框，但完成的时候特别激动，因为那是自己真正意义上动手写的第一个完整程序。本来还想找到原来的代码运行一下，但发现自己前一段时间为了清理笔记本空间已经将自己之前写的关于C的代码都删除了** ╮(╯﹏╰）╭**\n<!-- more -->\n　　em....一个订餐管理程序，有显示当前订单列表、添加订餐信息、删除订餐信息、修改订餐信息、根据价格为订单排序、将已有订餐信息写入文件等几个简单的小功能，尤其是添加写入到文件这个模块的时候，自己遇到不知道如何解决的一个地方一直没法正常写入到文件，在CSDN上提问然后得到了一位前辈的指教才顺利的完成的这个功能，thanks　　( • ̀ω•́ )✧ 。这个程序当时给老师展示之后最后拿了93分的成绩，自己对于成绩倒不是特别在意，但这也是老师对自己的一种认可吧，更让自己开心的是探索的过程。那是自己第一次接触数据结构，被链表折磨的死去活来，去图书馆借书学习链表，一本看不懂就再借另外一本，读了好几本不同书籍关于链表的内容才开始慢慢理解它，至今还能回忆起当初冥思苦想的那几天。**(*￣∇￣*)** \n\n　　不知不觉又扯了这么远...回到正题，一个学期学习数据结构的时间肯定是不够的，更何况自己当时还并没有花特别多的时间去钻研数据结构，对于每种数据结构都仅仅是简单按照书上的例子实现了一遍，到了现在该忘都忘的差不多了...(╯︵╰) 但真正让我决定重新学习数据结构的原因不是自己想要温习知识，之前面试阿里的时候，面试结束的面试官问我有什么问题想要问他的，我觉得自己面试过程中回答的不好，所以就问面试官对于自己的学习有什么建议没有。面试官就说，培养一个掌握基本开发技能的普通程序员很容易，但数据结构是十分重要的，理解技术的原理也是十分重要的，还讲violate的原理给我听。加上之前在公司的季度技术交流会上，看见某位大佬秀了一波关于数据库方面的数据结构的知识，当时自己真是热血沸腾的感觉，并且那一刻真正的意识到是时候该找时间好好的学习数据结构了，于是才选择了**《数据结构与算法分析　Java语言描述》-Mark Allen Weiss**这本书，并计划一边学习这本书一边写博客记录学习过的内容。最后说一下自己的粗见吧，数据结构可能暂时在开发小型程序的作用还不是特别明显，搭建好开发环境之后，只要对某种语言比较熟练就可以做到业务上的实现，但是如果涉及到大型的应用的构建，当应用吞吐量很大的时候，一个小的细节对于应用整体的性能的作用就会比较明显了，这时候我们不仅需要了解使用到的技术的原理，而且需要更有技巧的编程，用更少的执行时间去完成相同的任务，相反而不是去粗暴的使用蛮力算法实现需求。所以从长远的角度来看，熟练掌握数据结构是十分必要的。  \n\n　　最大子序列和，就是指在一个元素类型为整型的数组中，求其中连续的一个序列和的最大值，这个序列的开始下标可以是数组中的任意位置。如果我们按照列举所有可能情况的思考方式编写代码:  \n- 第一种方式   \n{% codeblock  lang:java %}\n  public static void main(String[] args){\n      int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n      System.out.println(maxSubSum1(a));\n  }\n\n  /**\n   * 最大子序列和,最简单直接的求最大子序和\n   * @return\n   */\n  private static int maxSubSum1(int[] a){\n      int maxSum = 0;\n\n      for (int i = 0; i < a.length; i++) {\n          for (int j = i; j < a.length; j++) {\n              int thisSum = 0;\n\n              for (int k = i; k <= j; k++) {\n                  thisSum += a[k];\n              }\n              if(thisSum > maxSum){\n                  maxSum = thisSum;\n              }\n          }\n      }\n\n      return maxSum;\n  }\n  /*  输出结果:\n      50\n  */\n{% endcodeblock %}\n　　很明显，这里的最大子序列和为前五个元素的和。下面我们分析一下该算法的时间复杂度。假设我们输入的数组的长度为***N***，忽略声明、调用方法、返回值的开销，仅关注嵌套的for循环所占用的时间，那么所耗费的时间为:　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $  \n\n　　对该表达式从里到外求和:  \n$$ \\displaystyle \\sum_{ k=i }^j1=j-i+1 $$\n　　继续从里往外求和:  \n$$ \\displaystyle \\sum_{ j=i }^{ N-1 }( j-i+1 )=\\dfrac{( N-i+1 )( N-i )}{2} $$\n　　所以有:  \n\n　　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $　  \n\n=　$ \\displaystyle \\sum_{ i=0 }^{ N-1 }{\\dfrac{( N-i+1 )( N-i )}{2}} $  \n\n=　$ \\displaystyle \\sum_{ i=1 }^{ N }{\\dfrac{( N-i+2 )( N-i+1 )}{2}} $  \n\n=　$ \\displaystyle \\sum_{ i=1 }^{ N }{ ( \\dfrac{i^2}{2} - \\dfrac{ 3i + 2iN }{ 2 } + \\dfrac{N^2 + 3N + 2 }{ 2 } ) } $    \n\n=　$ \\displaystyle \\dfrac12 \\sum_{ i=1 }^{ N }{ i^2 } - (\\dfrac{ 3+2N }{ 2 })\\sum_{ i=1 }^{ N }{ i } + (\\dfrac{N^2 + 3N + 2}{ 2 })\\sum_{ i=1 }^{ N }{ 1 } $    \n\n=　$ \\displaystyle \\dfrac12 \\dfrac{ N(N+1)(N+2) }{6} - (\\dfrac{ 3+2N }{ 2 })\\dfrac{ N(N+1) }{2} + \\dfrac{N^2 + 3N + 2}{ 2 }N  $  \n\n=　$ \\displaystyle  \\dfrac{ N(N+1)(N+2) }{ 6 } $  \n\n　　经计算可知该算法的时间复杂度为$ O(N^3) $，其实我们没有必要通过三层的for循环穷举所有的子序列的和，上面的第三层的for循环的计算明显存在冗余，仅仅两个for循环就可以满足求和需求:  \n- 第二种方式  \n{% codeblock  lang:java %}\n    public static void main(String[] args){\n            int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n            System.out.println(maxSubSum2(a));\n    }\n\n    private static int maxSubSum2(int[] a){\n        int maxSum = 0;\n        for (int i = 0; i < a.length; i++) {\n            int thisSum = 0;\n            for (int j = i; j < a.length; j++) {\n                thisSum += a[j];\n\n                if(thisSum > maxSum){\n                    maxSum = thisSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n    /*  输出结果:\n        50\n    */\n{% endcodeblock %}  \n\n　　仅关注嵌套的for循环所占用的时间，那么所耗费的时间最多为: $ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $\n\n　　对该表达式从里到外进行求和计算:\n　　$ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $　  \n\n=　$ \\displaystyle 3\\sum_{ i=0 }^{ N-1 }(N-i) $\n\n=　$ \\displaystyle 3\\sum_{ i=1 }^{ N }( N-i+1 ) $\n\n=　$ \\displaystyle \\dfrac{ 3N(N+1) }{ 2 } $\n\n　　计算知第二种方法的时间复杂度为$ O(N^2) $。第二种方式避免了单独计算每个子序列结果的值，在第一种方式里，当第二层循环的j取最大值的时候，最里面的循环累加的结果包含了j取其它值的情况。而第二种方式正好避免这种冗余的计算，将每次累加的结果与当前最大的结果对比，从而降低了时间复杂度。以为这就是最优秀的方法了吗？然而编程思想的威力远没有这么简单，第三种方式采用了在算法设计中普遍采用的一种方式-***\"分而治之\"***:  \n\n- 第三种方式\n{% codeblock  lang:java %}\n    public static void main(String[] args){\n    //        int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n        int[] a = new int[]{-11, -21, -5, -11, -42};\n        System.out.println(maxSubSum3(a, 0, a.length - 1));\n    }\n\n\n    /**\n     * 最大子序列和  第三种方式\n     * @param a\n     * @return\n     */\n    private static int maxSubSum3(int[] a,int left,int right){\n        // 对于递归方法总会有一个基准情况，这里的left与right相等的时候就是我们这里例子的基准\n        if( left == right ){\n            if( a[ left ] > 0)\n                return a[ left ];\n            else\n                return 0;\n        }\n\n        int center = (left + right) / 2;\n        int maxLeftSum = maxSubSum3(a, left, center);\n        int maxRightSum = maxSubSum3(a, center + 1, right);\n\n        int maxLeftBorderSum = 0, leftBorderSum = 0;\n        for (int i = center; i >= left; i--) {\n            leftBorderSum += a[ i ];\n            if( leftBorderSum > maxLeftBorderSum){\n                maxLeftBorderSum = leftBorderSum;\n            }\n        }\n\n        int maxRightBorderSum = 0, rightBorderSum = 0;\n        for (int i = center + 1; i <= right; i++) {\n            rightBorderSum += a[ i ];\n            if(rightBorderSum > maxRightBorderSum){\n                maxRightBorderSum = rightBorderSum;\n            }\n        }\n\n\n        return max3(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);\n    }\n\n    private static int max3(int a,int b,int c){\n        if (b > a || c > a){\n            if(b > c)\n                return b;\n            else\n                return c;\n        } else {\n            return a;\n        }\n    }\n\n{% endcodeblock %}  \n\n　　显然第三种方式的代码要比前两种复杂，但是复杂不是出发点，我们的目的是减少时间复杂度。在第三种方式中，核心方法是***int maxSubSum3(int[] a,int left,int right)***，递归方法往往都存在着一个基准情况，不然递归就会无限循环调用下去，程序也毫无意义了。在这里15-20行是这个递归方法的基准情况，方法中的23、24行中进行了对自身的调用。接下来分析这个代码是如何执行的，为了更清楚该代码的执行过程，我调试程序的时候特意注释掉了main方法之前在第一种方式和第二种方式使用到的参数，使用数量较少的参数去还原该算法整个过程。方法中有三个参数，***int[] a、int left、int right***，第一次传递到该方法中的实参是数组a的起始下标和结束下标，显然第一次调用该方法是不满足基准情况的，在不满足基准情况下继续往下执行，计算left和right的平均值，如果不能整除则取去掉小数位的数值。然后分别将center作为right的实参传递到***maxSubSum3()***为maxLeftSum赋值，center+1作为left的实参传递到***maxSubSum3()***为maxRightSum赋值。顾名思义，maxLeftSum和maxRightSum其实就是将数组分为左右两块之后左右两个数组的最大子序列和的值。但是我们怎么知道这两个变量的值是左右两个数组的最大子序列和的值呢？仅从外层去理解这个程序是无法得出这个结论的，我们不妨追溯到该程序的基准情况，left=right。  \n\n　　当left与right相等的时候，程序会判断数组对应left的索引下标的值是否大于0，如果大于0，则返回对应值，小于0则返回0。显然这里就是该递归的基准情况了，当基准情况返回到上一层的调用，center的值必然与left是相等的，且right的值必然等于center+1。这个情况不难分析，因为　center = (left + right) / 2,且left与center相等，left不等于right,所以right必然等于center + 1。且该基准情况准只可能对应数组中的起始元素和结束元素，因为在递归调用中为maxLeftSum赋值的时候左边的参数不变，而center会不断减少直到与left相等，而其它方法中执行到了为maxLeftSum赋值的时候已经过了基准条件的筛选，同理为maxRightSum赋值的递归调用也是如此。明白了这一层关系，我们可以从程序的基准情况开始分析，下图的圆形表示从基准情况返回到上一层的时候，maxLeftSum以及maxRightSum的值,如果index对应0和1的值大于0则返回对应的值否则返回0:  \n\n![](/images/maxSubSum/base1.jpg \"最内层递归结束之后\")  \n\n　　26-40行的代码的意思是以中间的虚线左右两边的第一个元素为首元素分别开始往左右找出最大的子序列和，然后将左边与右边的最大的子序列的和相加，再在它和maxLeftSum、maxRightSum三个值中取最大值。当索引仅为0和1的时候这样处理肯定是可以拿到0、1组合的子数组的最大序列和，但如果递归的结果再往上一层，这样的处理是否依旧合适呢？当递归到第二层，上图递归的返回值为下图的maxLeftSum。下图展示了下一层递归的结果:(右边可能的Index有两种情况，一种是仅存在一个元素Index = 2，一种是存在元素Index = 2 和 Index = 3,这里我们为了更好的展示过程取两个元素的情况)\n\n![](/images/maxSubSum/base2.jpg \"递归第二层结束之后\")  \n\n　　这个时候如果还是按照之前的处理，取三者之间的最大值作为最大子序列和的结果是否合适呢？这里需要分情况讨论，现在我们可以确定的是maxLeftSum一定是左边数组最大的子序列的和，maxRightSum一定是右边数组最大的子序列的和。如果存在最大子序列的和不仅是单独取左边和右边里的元素，而是左右两边都需要取值构成最大子序列的和，那么这个对于整体而言的最大子序列一定是包含虚线左右两侧的元素的，因为一个子序列一定是连续的，这样的话就可以按照之前的方法分别从虚线开始往左右两边求最大子序列的和相加一定可以得到整个数组的最大子序列的和。如果不存在最大的子序列的和同时依赖于左和右两边的元素，我们针对maxLeftSum和maxRightSum取较大值即可得到最大子序列和。综合考虑上面两种情况，这样我们在这三个值中取最大值一定可以得到这个数组块的最大子序列和。这个可以递推到无论数组被分为多少块的情况，在数学的证明里也经常使用到这样的方式去证明一个定理，对于某个较小的情况条件成立，我们将这个较小的情况取为一般情况K，然后再证明K+1的情况成立，那么结论一定是成立的，数学里称为归纳假设，同样在这个情况下证明这个递归算法的正确性使用到了相似的方式。  \n\n　　验证了这个算法的正确性之后，不可缺少的工作是去计算这个算法的时间复杂度。假设我们处理的数组长度为***N***，仅对***maxSubSum3(int[] a,int left,int right)***的执行时间进行计算，设其执行时间为T(N)。在这个方法内，15-20行的执行时间为一个常数时间量，设为T(1) = 1；对于26-40行的两个for循环，会遍历$ A_0 到 A_{ N-1 } $的每个元素，在每个循环内部耗费的时间都为常量，因此可设其执行时间为O(N)；接下来就是在23、24上两个递归方法的调用消耗的时间，这两行求解的数组长度大小为N/2，总计消耗的时间为2T(N/2)。忽略常数时间，可以得:  \n\n$$  \\displaystyle T(N) = T(\\dfrac{N}{2}) + O(N) $$\n\n　　 为了简化计算，我们可以使用N代替上式的O(N)，那么T(N) = 2T(N/2) + N,且有T(1) = 1,那么 T(2) = 2\\*2 + 2 = 2\\*2 = 4,T(4) = 2\\*4 + 4 = 3\\*4 = 12,T(8) = 2T(4) + 8 = 2\\*12 + 8 = 4\\*8 = 32,T(16) = 2T(8) + 16 = 2\\*32 + 16 = 5\\*16 = 80 ...... 即若$ N = 2^k $,则有:  \n\n$$  \\displaystyle T(N) = N * (k+1) = NlogN + N = O(NlogN) $$\n\n　　 当然这里的计算结果是假设当$ N = 2^k $的情况，当N不是这个值的时候，需要一些更复杂的分析，但大O的结果是不变的。显然该算法的时间复杂度要比第二种方式低，本来以为到这里已经是最快的解决方式了，可是接下来还有一种比第三种方式时间复杂度更低的算法...而且实现起来居然更简单...不得不为思维的力量折服。 Ｏ(≧▽≦)Ｏ  \n\n- 第四种方式\n{% codeblock  lang:java %}\n    public static void main(String[] args){\n            int[] a = new int[]{11, -21, 5, 11, -42};\n            System.out.println(maxSubSum4(a));\n    }\n\n    /**\n     * 最大子序列求和   第四种写法\n     * @param a\n     * @return\n     */\n    private static int maxSubSum4(int[] a){\n        int maxSum = 0, thisSum = 0;\n\n        for (int i = 0; i < a.length; i++) {\n            thisSum += a[ i ];\n\n            if(thisSum > maxSum){\n                maxSum = thisSum;\n            }else if( thisSum < 0){\n                thisSum = 0;\n            }\n        }\n\n        return maxSum;\n    } \n/*\n  输出结果:\n  16\n*/\n{% endcodeblock %}  \n\n　　这个算法的时间复杂度可以看出来为O(N),但是粗看会质疑这个算法的正确性，因为这里仅有一个for循环去遍历数组中的值，难道这能就求出最大子序列的和？ (╬￣皿￣)=○ 　那我们之前的努力不是徒劳了？别着急，慢慢来看这个算法到底是怎么回事。  \n\n　　分析程序可以得出，当thisSum为负值的时候，就选择抛弃前面的计算结果，选择从第一个非负值开始递增寻找最大子序列和。当在数组中前几个数字为负值的时候，这样的做法明显是正确的，因为负值不可能作为最大子序列和的开始。但是如果这样的一个序列出现在数组的中间的时候呢？我们假设从a[i]到a[j]出现了一个计算序列结果为负数的情况，那么假设可以从p(p为i+1到j之间的一个整数)开始得到一个比当前最大更大的子序列和，由于子序列必定是连续的，且从a[i]到a[p-1]的和是大于0的，那么很明显我们如果从a[i]开始要比从a[p]开始可以得到一个更大的子序列和。然后再做这样一个比较，从i开始和从j+1开始对比，如果存在一个从j+1开始的子序列的和比当前的最大的子序列大的情况，也是由于子序列的连续性，那么显然从j+1开始要比从i开始的值大，因为a[i]到a[j]的和是一个负数。所以如果出现负数的情况，如果后续还存在一个更大的子序列和，那么它的起点必然是在j之后而不可能在j之前。当然如果不存在从i+1开始存在比当前子序列更大的情况，我们继续累加也是不可能得出一个比当前最大子序列和更大的值。所以我们仅考虑存在比当前子序列更大的情况即可。如果存在从i+1开始比当前子序列更大的情况，综前所述，也必然出现在j之后。  \n\n　　看似简单的程序其实蕴含了丰富的思考，掌握了这个求最大和问题的本质。 (=ﾟωﾟ)ﾉ\n\n　　End\n\n\n\n\n\n","slug":"2018-11-19_最大子序列求和","published":1,"updated":"2018-11-19T08:45:29.194Z","comments":1,"photos":[],"link":"","_id":"cjoo2ew8w0000lswtldcdrv89","content":"<p>　　在总结求最大子序列和的四种实现方式之前想谈谈为什么自己想要重新学习数据结构。之前在大二下学期的时候已经学过了数据结构这个课程，依稀记得老师一直提醒我们数据结构是计算机的核心课程，并且对于考研或者是找工作面试都是很重要的，特地提醒我们要重视这门课程，希望我们好好学习数据结构。当时自己在上数据结构这个课程之前已经使用过基本的数据结构-链表完成了大一下学期的一个C语言课程设计，记得那是自己使用C语言写的一个程序，虽然仅有一百多行，显示界面也只是一个小黑框，但完成的时候特别激动，因为那是自己真正意义上动手写的第一个完整程序。本来还想找到原来的代码运行一下，但发现自己前一段时间为了清理笔记本空间已经将自己之前写的关于C的代码都删除了<strong> ╮(╯﹏╰）╭</strong><br><a id=\"more\"></a><br>　　em….一个订餐管理程序，有显示当前订单列表、添加订餐信息、删除订餐信息、修改订餐信息、根据价格为订单排序、将已有订餐信息写入文件等几个简单的小功能，尤其是添加写入到文件这个模块的时候，自己遇到不知道如何解决的一个地方一直没法正常写入到文件，在CSDN上提问然后得到了一位前辈的指教才顺利的完成的这个功能，thanks　　( • ̀ω•́ )✧ 。这个程序当时给老师展示之后最后拿了93分的成绩，自己对于成绩倒不是特别在意，但这也是老师对自己的一种认可吧，更让自己开心的是探索的过程。那是自己第一次接触数据结构，被链表折磨的死去活来，去图书馆借书学习链表，一本看不懂就再借另外一本，读了好几本不同书籍关于链表的内容才开始慢慢理解它，至今还能回忆起当初冥思苦想的那几天。<strong>(<em>￣∇￣</em>)</strong> </p>\n<p>　　不知不觉又扯了这么远…回到正题，一个学期学习数据结构的时间肯定是不够的，更何况自己当时还并没有花特别多的时间去钻研数据结构，对于每种数据结构都仅仅是简单按照书上的例子实现了一遍，到了现在该忘都忘的差不多了…(╯︵╰) 但真正让我决定重新学习数据结构的原因不是自己想要温习知识，之前面试阿里的时候，面试结束的面试官问我有什么问题想要问他的，我觉得自己面试过程中回答的不好，所以就问面试官对于自己的学习有什么建议没有。面试官就说，培养一个掌握基本开发技能的普通程序员很容易，但数据结构是十分重要的，理解技术的原理也是十分重要的，还讲violate的原理给我听。加上之前在公司的季度技术交流会上，看见某位大佬秀了一波关于数据库方面的数据结构的知识，当时自己真是热血沸腾的感觉，并且那一刻真正的意识到是时候该找时间好好的学习数据结构了，于是才选择了<strong>《数据结构与算法分析　Java语言描述》-Mark Allen Weiss</strong>这本书，并计划一边学习这本书一边写博客记录学习过的内容。最后说一下自己的粗见吧，数据结构可能暂时在开发小型程序的作用还不是特别明显，搭建好开发环境之后，只要对某种语言比较熟练就可以做到业务上的实现，但是如果涉及到大型的应用的构建，当应用吞吐量很大的时候，一个小的细节对于应用整体的性能的作用就会比较明显了，这时候我们不仅需要了解使用到的技术的原理，而且需要更有技巧的编程，用更少的执行时间去完成相同的任务，相反而不是去粗暴的使用蛮力算法实现需求。所以从长远的角度来看，熟练掌握数据结构是十分必要的。  </p>\n<p>　　最大子序列和，就是指在一个元素类型为整型的数组中，求其中连续的一个序列和的最大值，这个序列的开始下标可以是数组中的任意位置。如果我们按照列举所有可能情况的思考方式编写代码:  </p>\n<ul>\n<li>第一种方式   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; <span class=\"number\">19</span>, <span class=\"number\">2</span>, -<span class=\"number\">20</span>, <span class=\"number\">14</span>, <span class=\"number\">35</span>, -<span class=\"number\">3</span>, -<span class=\"number\">21</span>, <span class=\"number\">10</span>, -<span class=\"number\">22</span> &#125;;</span><br><span class=\"line\">    System.out.println(maxSubSum1(a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大子序列和,最简单直接的求最大子序和</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i; k &lt;= j; k++) &#123;</span><br><span class=\"line\">                thisSum += a[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n　　很明显，这里的最大子序列和为前五个元素的和。下面我们分析一下该算法的时间复杂度。假设我们输入的数组的长度为<strong><em>N</em></strong>，忽略声明、调用方法、返回值的开销，仅关注嵌套的for循环所占用的时间，那么所耗费的时间为:　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $  </li>\n</ul>\n<p>　　对该表达式从里到外求和:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle \\sum_{ k=i }^j1=j-i+1</script><p>　　继续从里往外求和:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle \\sum_{ j=i }^{ N-1 }( j-i+1 )=\\dfrac{( N-i+1 )( N-i )}{2}</script><p>　　所以有:  </p>\n<p>　　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $　  </p>\n<p>=　$ \\displaystyle \\sum_{ i=0 }^{ N-1 }{\\dfrac{( N-i+1 )( N-i )}{2}} $  </p>\n<p>=　$ \\displaystyle \\sum_{ i=1 }^{ N }{\\dfrac{( N-i+2 )( N-i+1 )}{2}} $  </p>\n<p>=　$ \\displaystyle \\sum_{ i=1 }^{ N }{ ( \\dfrac{i^2}{2} - \\dfrac{ 3i + 2iN }{ 2 } + \\dfrac{N^2 + 3N + 2 }{ 2 } ) } $    </p>\n<p>=　$ \\displaystyle \\dfrac12 \\sum_{ i=1 }^{ N }{ i^2 } - (\\dfrac{ 3+2N }{ 2 })\\sum_{ i=1 }^{ N }{ i } + (\\dfrac{N^2 + 3N + 2}{ 2 })\\sum_{ i=1 }^{ N }{ 1 } $    </p>\n<p>=　$ \\displaystyle \\dfrac12 \\dfrac{ N(N+1)(N+2) }{6} - (\\dfrac{ 3+2N }{ 2 })\\dfrac{ N(N+1) }{2} + \\dfrac{N^2 + 3N + 2}{ 2 }N  $  </p>\n<p>=　$ \\displaystyle  \\dfrac{ N(N+1)(N+2) }{ 6 } $  </p>\n<p>　　经计算可知该算法的时间复杂度为$ O(N^3) $，其实我们没有必要通过三层的for循环穷举所有的子序列的和，上面的第三层的for循环的计算明显存在冗余，仅仅两个for循环就可以满足求和需求:  </p>\n<ul>\n<li>第二种方式  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; <span class=\"number\">19</span>, <span class=\"number\">2</span>, -<span class=\"number\">20</span>, <span class=\"number\">14</span>, <span class=\"number\">35</span>, -<span class=\"number\">3</span>, -<span class=\"number\">21</span>, <span class=\"number\">10</span>, -<span class=\"number\">22</span> &#125;;</span><br><span class=\"line\">        System.out.println(maxSubSum2(a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">            thisSum += a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　仅关注嵌套的for循环所占用的时间，那么所耗费的时间最多为: $ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $</p>\n<p>　　对该表达式从里到外进行求和计算:<br>　　$ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $　  </p>\n<p>=　$ \\displaystyle 3\\sum_{ i=0 }^{ N-1 }(N-i) $</p>\n<p>=　$ \\displaystyle 3\\sum_{ i=1 }^{ N }( N-i+1 ) $</p>\n<p>=　$ \\displaystyle \\dfrac{ 3N(N+1) }{ 2 } $</p>\n<p>　　计算知第二种方法的时间复杂度为$ O(N^2) $。第二种方式避免了单独计算每个子序列结果的值，在第一种方式里，当第二层循环的j取最大值的时候，最里面的循环累加的结果包含了j取其它值的情况。而第二种方式正好避免这种冗余的计算，将每次累加的结果与当前最大的结果对比，从而降低了时间复杂度。以为这就是最优秀的方法了吗？然而编程思想的威力远没有这么简单，第三种方式采用了在算法设计中普遍采用的一种方式-<strong><em>“分而治之”</em></strong>:  </p>\n<ul>\n<li>第三种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        int[] a = new int[]&#123; 19, 2, -20, 14, 35, -3, -21, 10, -22 &#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">11</span>, -<span class=\"number\">21</span>, -<span class=\"number\">5</span>, -<span class=\"number\">11</span>, -<span class=\"number\">42</span>&#125;;</span><br><span class=\"line\">    System.out.println(maxSubSum3(a, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大子序列和  第三种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum3</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对于递归方法总会有一个基准情况，这里的left与right相等的时候就是我们这里例子的基准</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( left == right )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( a[ left ] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[ left ];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLeftSum = maxSubSum3(a, left, center);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxRightSum = maxSubSum3(a, center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLeftBorderSum = <span class=\"number\">0</span>, leftBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = center; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        leftBorderSum += a[ i ];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( leftBorderSum &gt; maxLeftBorderSum)&#123;</span><br><span class=\"line\">            maxLeftBorderSum = leftBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxRightBorderSum = <span class=\"number\">0</span>, rightBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = center + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        rightBorderSum += a[ i ];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rightBorderSum &gt; maxRightBorderSum)&#123;</span><br><span class=\"line\">            maxRightBorderSum = rightBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">max3</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b &gt; a || c &gt; a)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b &gt; c)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　显然第三种方式的代码要比前两种复杂，但是复杂不是出发点，我们的目的是减少时间复杂度。在第三种方式中，核心方法是<strong><em>int maxSubSum3(int[] a,int left,int right)</em></strong>，递归方法往往都存在着一个基准情况，不然递归就会无限循环调用下去，程序也毫无意义了。在这里15-20行是这个递归方法的基准情况，方法中的23、24行中进行了对自身的调用。接下来分析这个代码是如何执行的，为了更清楚该代码的执行过程，我调试程序的时候特意注释掉了main方法之前在第一种方式和第二种方式使用到的参数，使用数量较少的参数去还原该算法整个过程。方法中有三个参数，<strong><em>int[] a、int left、int right</em></strong>，第一次传递到该方法中的实参是数组a的起始下标和结束下标，显然第一次调用该方法是不满足基准情况的，在不满足基准情况下继续往下执行，计算left和right的平均值，如果不能整除则取去掉小数位的数值。然后分别将center作为right的实参传递到<strong><em>maxSubSum3()</em></strong>为maxLeftSum赋值，center+1作为left的实参传递到<strong><em>maxSubSum3()</em></strong>为maxRightSum赋值。顾名思义，maxLeftSum和maxRightSum其实就是将数组分为左右两块之后左右两个数组的最大子序列和的值。但是我们怎么知道这两个变量的值是左右两个数组的最大子序列和的值呢？仅从外层去理解这个程序是无法得出这个结论的，我们不妨追溯到该程序的基准情况，left=right。  </p>\n<p>　　当left与right相等的时候，程序会判断数组对应left的索引下标的值是否大于0，如果大于0，则返回对应值，小于0则返回0。显然这里就是该递归的基准情况了，当基准情况返回到上一层的调用，center的值必然与left是相等的，且right的值必然等于center+1。这个情况不难分析，因为　center = (left + right) / 2,且left与center相等，left不等于right,所以right必然等于center + 1。且该基准情况准只可能对应数组中的起始元素和结束元素，因为在递归调用中为maxLeftSum赋值的时候左边的参数不变，而center会不断减少直到与left相等，而其它方法中执行到了为maxLeftSum赋值的时候已经过了基准条件的筛选，同理为maxRightSum赋值的递归调用也是如此。明白了这一层关系，我们可以从程序的基准情况开始分析，下图的圆形表示从基准情况返回到上一层的时候，maxLeftSum以及maxRightSum的值,如果index对应0和1的值大于0则返回对应的值否则返回0:  </p>\n<p><img src=\"/images/maxSubSum/base1.jpg\" alt=\"\" title=\"最内层递归结束之后\">  </p>\n<p>　　26-40行的代码的意思是以中间的虚线左右两边的第一个元素为首元素分别开始往左右找出最大的子序列和，然后将左边与右边的最大的子序列的和相加，再在它和maxLeftSum、maxRightSum三个值中取最大值。当索引仅为0和1的时候这样处理肯定是可以拿到0、1组合的子数组的最大序列和，但如果递归的结果再往上一层，这样的处理是否依旧合适呢？当递归到第二层，上图递归的返回值为下图的maxLeftSum。下图展示了下一层递归的结果:(右边可能的Index有两种情况，一种是仅存在一个元素Index = 2，一种是存在元素Index = 2 和 Index = 3,这里我们为了更好的展示过程取两个元素的情况)</p>\n<p><img src=\"/images/maxSubSum/base2.jpg\" alt=\"\" title=\"递归第二层结束之后\">  </p>\n<p>　　这个时候如果还是按照之前的处理，取三者之间的最大值作为最大子序列和的结果是否合适呢？这里需要分情况讨论，现在我们可以确定的是maxLeftSum一定是左边数组最大的子序列的和，maxRightSum一定是右边数组最大的子序列的和。如果存在最大子序列的和不仅是单独取左边和右边里的元素，而是左右两边都需要取值构成最大子序列的和，那么这个对于整体而言的最大子序列一定是包含虚线左右两侧的元素的，因为一个子序列一定是连续的，这样的话就可以按照之前的方法分别从虚线开始往左右两边求最大子序列的和相加一定可以得到整个数组的最大子序列的和。如果不存在最大的子序列的和同时依赖于左和右两边的元素，我们针对maxLeftSum和maxRightSum取较大值即可得到最大子序列和。综合考虑上面两种情况，这样我们在这三个值中取最大值一定可以得到这个数组块的最大子序列和。这个可以递推到无论数组被分为多少块的情况，在数学的证明里也经常使用到这样的方式去证明一个定理，对于某个较小的情况条件成立，我们将这个较小的情况取为一般情况K，然后再证明K+1的情况成立，那么结论一定是成立的，数学里称为归纳假设，同样在这个情况下证明这个递归算法的正确性使用到了相似的方式。  </p>\n<p>　　验证了这个算法的正确性之后，不可缺少的工作是去计算这个算法的时间复杂度。假设我们处理的数组长度为<strong><em>N</em></strong>，仅对<strong><em>maxSubSum3(int[] a,int left,int right)</em></strong>的执行时间进行计算，设其执行时间为T(N)。在这个方法内，15-20行的执行时间为一个常数时间量，设为T(1) = 1；对于26-40行的两个for循环，会遍历$ A_0 到 A_{ N-1 } $的每个元素，在每个循环内部耗费的时间都为常量，因此可设其执行时间为O(N)；接下来就是在23、24上两个递归方法的调用消耗的时间，这两行求解的数组长度大小为N/2，总计消耗的时间为2T(N/2)。忽略常数时间，可以得:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle T(N) = T(\\dfrac{N}{2}) + O(N)</script><p>　　 为了简化计算，我们可以使用N代替上式的O(N)，那么T(N) = 2T(N/2) + N,且有T(1) = 1,那么 T(2) = 2*2 + 2 = 2*2 = 4,T(4) = 2*4 + 4 = 3*4 = 12,T(8) = 2T(4) + 8 = 2*12 + 8 = 4*8 = 32,T(16) = 2T(8) + 16 = 2*32 + 16 = 5*16 = 80 …… 即若$ N = 2^k $,则有:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle T(N) = N * (k+1) = NlogN + N = O(NlogN)</script><p>　　 当然这里的计算结果是假设当$ N = 2^k $的情况，当N不是这个值的时候，需要一些更复杂的分析，但大O的结果是不变的。显然该算法的时间复杂度要比第二种方式低，本来以为到这里已经是最快的解决方式了，可是接下来还有一种比第三种方式时间复杂度更低的算法…而且实现起来居然更简单…不得不为思维的力量折服。 Ｏ(≧▽≦)Ｏ  </p>\n<ul>\n<li>第四种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">11</span>, -<span class=\"number\">21</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, -<span class=\"number\">42</span>&#125;;</span><br><span class=\"line\">            System.out.println(maxSubSum4(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最大子序列求和   第四种写法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>, thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            thisSum += a[ i ];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( thisSum &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">  16</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　这个算法的时间复杂度可以看出来为O(N),但是粗看会质疑这个算法的正确性，因为这里仅有一个for循环去遍历数组中的值，难道这能就求出最大子序列的和？ (╬￣皿￣)=○ 　那我们之前的努力不是徒劳了？别着急，慢慢来看这个算法到底是怎么回事。  </p>\n<p>　　分析程序可以得出，当thisSum为负值的时候，就选择抛弃前面的计算结果，选择从第一个非负值开始递增寻找最大子序列和。当在数组中前几个数字为负值的时候，这样的做法明显是正确的，因为负值不可能作为最大子序列和的开始。但是如果这样的一个序列出现在数组的中间的时候呢？我们假设从a[i]到a[j]出现了一个计算序列结果为负数的情况，那么假设可以从p(p为i+1到j之间的一个整数)开始得到一个比当前最大更大的子序列和，由于子序列必定是连续的，且从a[i]到a[p-1]的和是大于0的，那么很明显我们如果从a[i]开始要比从a[p]开始可以得到一个更大的子序列和。然后再做这样一个比较，从i开始和从j+1开始对比，如果存在一个从j+1开始的子序列的和比当前的最大的子序列大的情况，也是由于子序列的连续性，那么显然从j+1开始要比从i开始的值大，因为a[i]到a[j]的和是一个负数。所以如果出现负数的情况，如果后续还存在一个更大的子序列和，那么它的起点必然是在j之后而不可能在j之前。当然如果不存在从i+1开始存在比当前子序列更大的情况，我们继续累加也是不可能得出一个比当前最大子序列和更大的值。所以我们仅考虑存在比当前子序列更大的情况即可。如果存在从i+1开始比当前子序列更大的情况，综前所述，也必然出现在j之后。  </p>\n<p>　　看似简单的程序其实蕴含了丰富的思考，掌握了这个求最大和问题的本质。 (=ﾟωﾟ)ﾉ</p>\n<p>　　End</p>\n","site":{"data":{}},"excerpt":"<p>　　在总结求最大子序列和的四种实现方式之前想谈谈为什么自己想要重新学习数据结构。之前在大二下学期的时候已经学过了数据结构这个课程，依稀记得老师一直提醒我们数据结构是计算机的核心课程，并且对于考研或者是找工作面试都是很重要的，特地提醒我们要重视这门课程，希望我们好好学习数据结构。当时自己在上数据结构这个课程之前已经使用过基本的数据结构-链表完成了大一下学期的一个C语言课程设计，记得那是自己使用C语言写的一个程序，虽然仅有一百多行，显示界面也只是一个小黑框，但完成的时候特别激动，因为那是自己真正意义上动手写的第一个完整程序。本来还想找到原来的代码运行一下，但发现自己前一段时间为了清理笔记本空间已经将自己之前写的关于C的代码都删除了<strong> ╮(╯﹏╰）╭</strong><br>","more":"<br>　　em….一个订餐管理程序，有显示当前订单列表、添加订餐信息、删除订餐信息、修改订餐信息、根据价格为订单排序、将已有订餐信息写入文件等几个简单的小功能，尤其是添加写入到文件这个模块的时候，自己遇到不知道如何解决的一个地方一直没法正常写入到文件，在CSDN上提问然后得到了一位前辈的指教才顺利的完成的这个功能，thanks　　( • ̀ω•́ )✧ 。这个程序当时给老师展示之后最后拿了93分的成绩，自己对于成绩倒不是特别在意，但这也是老师对自己的一种认可吧，更让自己开心的是探索的过程。那是自己第一次接触数据结构，被链表折磨的死去活来，去图书馆借书学习链表，一本看不懂就再借另外一本，读了好几本不同书籍关于链表的内容才开始慢慢理解它，至今还能回忆起当初冥思苦想的那几天。<strong>(<em>￣∇￣</em>)</strong> </p>\n<p>　　不知不觉又扯了这么远…回到正题，一个学期学习数据结构的时间肯定是不够的，更何况自己当时还并没有花特别多的时间去钻研数据结构，对于每种数据结构都仅仅是简单按照书上的例子实现了一遍，到了现在该忘都忘的差不多了…(╯︵╰) 但真正让我决定重新学习数据结构的原因不是自己想要温习知识，之前面试阿里的时候，面试结束的面试官问我有什么问题想要问他的，我觉得自己面试过程中回答的不好，所以就问面试官对于自己的学习有什么建议没有。面试官就说，培养一个掌握基本开发技能的普通程序员很容易，但数据结构是十分重要的，理解技术的原理也是十分重要的，还讲violate的原理给我听。加上之前在公司的季度技术交流会上，看见某位大佬秀了一波关于数据库方面的数据结构的知识，当时自己真是热血沸腾的感觉，并且那一刻真正的意识到是时候该找时间好好的学习数据结构了，于是才选择了<strong>《数据结构与算法分析　Java语言描述》-Mark Allen Weiss</strong>这本书，并计划一边学习这本书一边写博客记录学习过的内容。最后说一下自己的粗见吧，数据结构可能暂时在开发小型程序的作用还不是特别明显，搭建好开发环境之后，只要对某种语言比较熟练就可以做到业务上的实现，但是如果涉及到大型的应用的构建，当应用吞吐量很大的时候，一个小的细节对于应用整体的性能的作用就会比较明显了，这时候我们不仅需要了解使用到的技术的原理，而且需要更有技巧的编程，用更少的执行时间去完成相同的任务，相反而不是去粗暴的使用蛮力算法实现需求。所以从长远的角度来看，熟练掌握数据结构是十分必要的。  </p>\n<p>　　最大子序列和，就是指在一个元素类型为整型的数组中，求其中连续的一个序列和的最大值，这个序列的开始下标可以是数组中的任意位置。如果我们按照列举所有可能情况的思考方式编写代码:  </p>\n<ul>\n<li>第一种方式   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; <span class=\"number\">19</span>, <span class=\"number\">2</span>, -<span class=\"number\">20</span>, <span class=\"number\">14</span>, <span class=\"number\">35</span>, -<span class=\"number\">3</span>, -<span class=\"number\">21</span>, <span class=\"number\">10</span>, -<span class=\"number\">22</span> &#125;;</span><br><span class=\"line\">    System.out.println(maxSubSum1(a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大子序列和,最简单直接的求最大子序和</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i; k &lt;= j; k++) &#123;</span><br><span class=\"line\">                thisSum += a[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n　　很明显，这里的最大子序列和为前五个元素的和。下面我们分析一下该算法的时间复杂度。假设我们输入的数组的长度为<strong><em>N</em></strong>，忽略声明、调用方法、返回值的开销，仅关注嵌套的for循环所占用的时间，那么所耗费的时间为:　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $  </li>\n</ul>\n<p>　　对该表达式从里到外求和:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle \\sum_{ k=i }^j1=j-i+1</script><p>　　继续从里往外求和:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle \\sum_{ j=i }^{ N-1 }( j-i+1 )=\\dfrac{( N-i+1 )( N-i )}{2}</script><p>　　所以有:  </p>\n<p>　　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $　  </p>\n<p>=　$ \\displaystyle \\sum_{ i=0 }^{ N-1 }{\\dfrac{( N-i+1 )( N-i )}{2}} $  </p>\n<p>=　$ \\displaystyle \\sum_{ i=1 }^{ N }{\\dfrac{( N-i+2 )( N-i+1 )}{2}} $  </p>\n<p>=　$ \\displaystyle \\sum_{ i=1 }^{ N }{ ( \\dfrac{i^2}{2} - \\dfrac{ 3i + 2iN }{ 2 } + \\dfrac{N^2 + 3N + 2 }{ 2 } ) } $    </p>\n<p>=　$ \\displaystyle \\dfrac12 \\sum_{ i=1 }^{ N }{ i^2 } - (\\dfrac{ 3+2N }{ 2 })\\sum_{ i=1 }^{ N }{ i } + (\\dfrac{N^2 + 3N + 2}{ 2 })\\sum_{ i=1 }^{ N }{ 1 } $    </p>\n<p>=　$ \\displaystyle \\dfrac12 \\dfrac{ N(N+1)(N+2) }{6} - (\\dfrac{ 3+2N }{ 2 })\\dfrac{ N(N+1) }{2} + \\dfrac{N^2 + 3N + 2}{ 2 }N  $  </p>\n<p>=　$ \\displaystyle  \\dfrac{ N(N+1)(N+2) }{ 6 } $  </p>\n<p>　　经计算可知该算法的时间复杂度为$ O(N^3) $，其实我们没有必要通过三层的for循环穷举所有的子序列的和，上面的第三层的for循环的计算明显存在冗余，仅仅两个for循环就可以满足求和需求:  </p>\n<ul>\n<li>第二种方式  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; <span class=\"number\">19</span>, <span class=\"number\">2</span>, -<span class=\"number\">20</span>, <span class=\"number\">14</span>, <span class=\"number\">35</span>, -<span class=\"number\">3</span>, -<span class=\"number\">21</span>, <span class=\"number\">10</span>, -<span class=\"number\">22</span> &#125;;</span><br><span class=\"line\">        System.out.println(maxSubSum2(a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">            thisSum += a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　仅关注嵌套的for循环所占用的时间，那么所耗费的时间最多为: $ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $</p>\n<p>　　对该表达式从里到外进行求和计算:<br>　　$ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $　  </p>\n<p>=　$ \\displaystyle 3\\sum_{ i=0 }^{ N-1 }(N-i) $</p>\n<p>=　$ \\displaystyle 3\\sum_{ i=1 }^{ N }( N-i+1 ) $</p>\n<p>=　$ \\displaystyle \\dfrac{ 3N(N+1) }{ 2 } $</p>\n<p>　　计算知第二种方法的时间复杂度为$ O(N^2) $。第二种方式避免了单独计算每个子序列结果的值，在第一种方式里，当第二层循环的j取最大值的时候，最里面的循环累加的结果包含了j取其它值的情况。而第二种方式正好避免这种冗余的计算，将每次累加的结果与当前最大的结果对比，从而降低了时间复杂度。以为这就是最优秀的方法了吗？然而编程思想的威力远没有这么简单，第三种方式采用了在算法设计中普遍采用的一种方式-<strong><em>“分而治之”</em></strong>:  </p>\n<ul>\n<li>第三种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        int[] a = new int[]&#123; 19, 2, -20, 14, 35, -3, -21, 10, -22 &#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">11</span>, -<span class=\"number\">21</span>, -<span class=\"number\">5</span>, -<span class=\"number\">11</span>, -<span class=\"number\">42</span>&#125;;</span><br><span class=\"line\">    System.out.println(maxSubSum3(a, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大子序列和  第三种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum3</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对于递归方法总会有一个基准情况，这里的left与right相等的时候就是我们这里例子的基准</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( left == right )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( a[ left ] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[ left ];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLeftSum = maxSubSum3(a, left, center);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxRightSum = maxSubSum3(a, center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLeftBorderSum = <span class=\"number\">0</span>, leftBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = center; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        leftBorderSum += a[ i ];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( leftBorderSum &gt; maxLeftBorderSum)&#123;</span><br><span class=\"line\">            maxLeftBorderSum = leftBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxRightBorderSum = <span class=\"number\">0</span>, rightBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = center + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        rightBorderSum += a[ i ];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rightBorderSum &gt; maxRightBorderSum)&#123;</span><br><span class=\"line\">            maxRightBorderSum = rightBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">max3</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b &gt; a || c &gt; a)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b &gt; c)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　显然第三种方式的代码要比前两种复杂，但是复杂不是出发点，我们的目的是减少时间复杂度。在第三种方式中，核心方法是<strong><em>int maxSubSum3(int[] a,int left,int right)</em></strong>，递归方法往往都存在着一个基准情况，不然递归就会无限循环调用下去，程序也毫无意义了。在这里15-20行是这个递归方法的基准情况，方法中的23、24行中进行了对自身的调用。接下来分析这个代码是如何执行的，为了更清楚该代码的执行过程，我调试程序的时候特意注释掉了main方法之前在第一种方式和第二种方式使用到的参数，使用数量较少的参数去还原该算法整个过程。方法中有三个参数，<strong><em>int[] a、int left、int right</em></strong>，第一次传递到该方法中的实参是数组a的起始下标和结束下标，显然第一次调用该方法是不满足基准情况的，在不满足基准情况下继续往下执行，计算left和right的平均值，如果不能整除则取去掉小数位的数值。然后分别将center作为right的实参传递到<strong><em>maxSubSum3()</em></strong>为maxLeftSum赋值，center+1作为left的实参传递到<strong><em>maxSubSum3()</em></strong>为maxRightSum赋值。顾名思义，maxLeftSum和maxRightSum其实就是将数组分为左右两块之后左右两个数组的最大子序列和的值。但是我们怎么知道这两个变量的值是左右两个数组的最大子序列和的值呢？仅从外层去理解这个程序是无法得出这个结论的，我们不妨追溯到该程序的基准情况，left=right。  </p>\n<p>　　当left与right相等的时候，程序会判断数组对应left的索引下标的值是否大于0，如果大于0，则返回对应值，小于0则返回0。显然这里就是该递归的基准情况了，当基准情况返回到上一层的调用，center的值必然与left是相等的，且right的值必然等于center+1。这个情况不难分析，因为　center = (left + right) / 2,且left与center相等，left不等于right,所以right必然等于center + 1。且该基准情况准只可能对应数组中的起始元素和结束元素，因为在递归调用中为maxLeftSum赋值的时候左边的参数不变，而center会不断减少直到与left相等，而其它方法中执行到了为maxLeftSum赋值的时候已经过了基准条件的筛选，同理为maxRightSum赋值的递归调用也是如此。明白了这一层关系，我们可以从程序的基准情况开始分析，下图的圆形表示从基准情况返回到上一层的时候，maxLeftSum以及maxRightSum的值,如果index对应0和1的值大于0则返回对应的值否则返回0:  </p>\n<p><img src=\"/images/maxSubSum/base1.jpg\" alt=\"\" title=\"最内层递归结束之后\">  </p>\n<p>　　26-40行的代码的意思是以中间的虚线左右两边的第一个元素为首元素分别开始往左右找出最大的子序列和，然后将左边与右边的最大的子序列的和相加，再在它和maxLeftSum、maxRightSum三个值中取最大值。当索引仅为0和1的时候这样处理肯定是可以拿到0、1组合的子数组的最大序列和，但如果递归的结果再往上一层，这样的处理是否依旧合适呢？当递归到第二层，上图递归的返回值为下图的maxLeftSum。下图展示了下一层递归的结果:(右边可能的Index有两种情况，一种是仅存在一个元素Index = 2，一种是存在元素Index = 2 和 Index = 3,这里我们为了更好的展示过程取两个元素的情况)</p>\n<p><img src=\"/images/maxSubSum/base2.jpg\" alt=\"\" title=\"递归第二层结束之后\">  </p>\n<p>　　这个时候如果还是按照之前的处理，取三者之间的最大值作为最大子序列和的结果是否合适呢？这里需要分情况讨论，现在我们可以确定的是maxLeftSum一定是左边数组最大的子序列的和，maxRightSum一定是右边数组最大的子序列的和。如果存在最大子序列的和不仅是单独取左边和右边里的元素，而是左右两边都需要取值构成最大子序列的和，那么这个对于整体而言的最大子序列一定是包含虚线左右两侧的元素的，因为一个子序列一定是连续的，这样的话就可以按照之前的方法分别从虚线开始往左右两边求最大子序列的和相加一定可以得到整个数组的最大子序列的和。如果不存在最大的子序列的和同时依赖于左和右两边的元素，我们针对maxLeftSum和maxRightSum取较大值即可得到最大子序列和。综合考虑上面两种情况，这样我们在这三个值中取最大值一定可以得到这个数组块的最大子序列和。这个可以递推到无论数组被分为多少块的情况，在数学的证明里也经常使用到这样的方式去证明一个定理，对于某个较小的情况条件成立，我们将这个较小的情况取为一般情况K，然后再证明K+1的情况成立，那么结论一定是成立的，数学里称为归纳假设，同样在这个情况下证明这个递归算法的正确性使用到了相似的方式。  </p>\n<p>　　验证了这个算法的正确性之后，不可缺少的工作是去计算这个算法的时间复杂度。假设我们处理的数组长度为<strong><em>N</em></strong>，仅对<strong><em>maxSubSum3(int[] a,int left,int right)</em></strong>的执行时间进行计算，设其执行时间为T(N)。在这个方法内，15-20行的执行时间为一个常数时间量，设为T(1) = 1；对于26-40行的两个for循环，会遍历$ A_0 到 A_{ N-1 } $的每个元素，在每个循环内部耗费的时间都为常量，因此可设其执行时间为O(N)；接下来就是在23、24上两个递归方法的调用消耗的时间，这两行求解的数组长度大小为N/2，总计消耗的时间为2T(N/2)。忽略常数时间，可以得:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle T(N) = T(\\dfrac{N}{2}) + O(N)</script><p>　　 为了简化计算，我们可以使用N代替上式的O(N)，那么T(N) = 2T(N/2) + N,且有T(1) = 1,那么 T(2) = 2*2 + 2 = 2*2 = 4,T(4) = 2*4 + 4 = 3*4 = 12,T(8) = 2T(4) + 8 = 2*12 + 8 = 4*8 = 32,T(16) = 2T(8) + 16 = 2*32 + 16 = 5*16 = 80 …… 即若$ N = 2^k $,则有:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle T(N) = N * (k+1) = NlogN + N = O(NlogN)</script><p>　　 当然这里的计算结果是假设当$ N = 2^k $的情况，当N不是这个值的时候，需要一些更复杂的分析，但大O的结果是不变的。显然该算法的时间复杂度要比第二种方式低，本来以为到这里已经是最快的解决方式了，可是接下来还有一种比第三种方式时间复杂度更低的算法…而且实现起来居然更简单…不得不为思维的力量折服。 Ｏ(≧▽≦)Ｏ  </p>\n<ul>\n<li>第四种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">11</span>, -<span class=\"number\">21</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, -<span class=\"number\">42</span>&#125;;</span><br><span class=\"line\">            System.out.println(maxSubSum4(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最大子序列求和   第四种写法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>, thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            thisSum += a[ i ];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( thisSum &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">  16</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　这个算法的时间复杂度可以看出来为O(N),但是粗看会质疑这个算法的正确性，因为这里仅有一个for循环去遍历数组中的值，难道这能就求出最大子序列的和？ (╬￣皿￣)=○ 　那我们之前的努力不是徒劳了？别着急，慢慢来看这个算法到底是怎么回事。  </p>\n<p>　　分析程序可以得出，当thisSum为负值的时候，就选择抛弃前面的计算结果，选择从第一个非负值开始递增寻找最大子序列和。当在数组中前几个数字为负值的时候，这样的做法明显是正确的，因为负值不可能作为最大子序列和的开始。但是如果这样的一个序列出现在数组的中间的时候呢？我们假设从a[i]到a[j]出现了一个计算序列结果为负数的情况，那么假设可以从p(p为i+1到j之间的一个整数)开始得到一个比当前最大更大的子序列和，由于子序列必定是连续的，且从a[i]到a[p-1]的和是大于0的，那么很明显我们如果从a[i]开始要比从a[p]开始可以得到一个更大的子序列和。然后再做这样一个比较，从i开始和从j+1开始对比，如果存在一个从j+1开始的子序列的和比当前的最大的子序列大的情况，也是由于子序列的连续性，那么显然从j+1开始要比从i开始的值大，因为a[i]到a[j]的和是一个负数。所以如果出现负数的情况，如果后续还存在一个更大的子序列和，那么它的起点必然是在j之后而不可能在j之前。当然如果不存在从i+1开始存在比当前子序列更大的情况，我们继续累加也是不可能得出一个比当前最大子序列和更大的值。所以我们仅考虑存在比当前子序列更大的情况即可。如果存在从i+1开始比当前子序列更大的情况，综前所述，也必然出现在j之后。  </p>\n<p>　　看似简单的程序其实蕴含了丰富的思考，掌握了这个求最大和问题的本质。 (=ﾟωﾟ)ﾉ</p>\n<p>　　End</p>"},{"layout":"post","title":"抓取喜爱123音频文件","date":"2018-11-24T12:25:00.000Z","_content":"　　滴...你的表弟已上线，问你是否可以帮他把英语听力下载到他的MP3。(；′⌒`)...开始我以为他是不会如何将文件放在MP3的磁盘里面，就对他说将文件下载后放到移动磁盘就OK。然后他又说他老爸找不到下载地址，额....我心想下载地址你找不到我也没办法帮他去远程找下载地址呀...接着表弟就发了个微信分享的链接给我...但当时我不在宿舍，就说回去帮他看看。  \n<!-- more -->  \n\n![](/images/data_scraping/messgae_biaodi.png \"来自表弟的消息 罒ω罒 \")  \n\n　　回到宿舍已经是八点半，用电脑登录微信，打开表弟给的微信分享，其实就是使用微信的内置浏览器打开了一个地址。复制了链接地址改为使用Chrome打开，看到了下面的[在线听听力的界面](http://xiai123.com/rjbxmbyy9.html?from=groupmessage&isappinstalled=0)。\n\n![](/images/data_scraping/xiai_chrome.png \"表弟发来的MP3在线听地址\")  \n\n　　接下来把这个界面点了点，并没有发现听力的下载地址，看来是有意不提供下载地址，于是打开了调试模式查看网页对应的源码，想看看是否能在html界面中找到听力文件的地址，但是定位到对应的按钮点击的html代码，只看到了一个ul列表，里面的li标签只定义了一个class属性。看来音频地址是不会直接保存在html页面中的，(PS: 如果直接保存在html也太容易被获取到了吧) 于是接着查看它的源码。在chorme调试模式下定位到source tab页面，查看当前页面下的所有文件，显然我们的答案不可能存在css、img文件夹里，过滤掉css、img文件夹里的内容，仅关注js文件，下面两个文件出现在视野里:\n\n![](/images/data_scraping/js文件列表.png \"js文件列表\")  \n　　\n　　那明显第一个是jquery在生产环境的名称，第二个文件叫***smusic.min.js***，里都有些什么内容呢?不妨打开看个究竟。这个js文件最外层是用一个 ***!function(l) {}(window);*** 包裹了一些方法的定义，一些变量的声明，但其中核心内容是设计者在其中定义了一个p对象，在js中对象的定义方式与函数声明的语法一样，区别定义一个函数还是一个对象取决于设计者使用它们的方式，如果定义的是一个对象，一般后续会使用 ***new xxx(...);*** 形式的语法去创建一个对象，而如果是作为方法调用则直接在js代码中使用 ***xxx(...);*** 形式的语法去执行调用。为什么说这个p是核心对象呢？原因是在对象p的prototype属性中定义了大量与播放音频文件相关的方法，这些方法包括 ***config、createListDom、setBuffer、resetPlayer、setVolume、initPlay、play、pause、getRandomIndex、playByMode、action、init*** ，顾名思义，init()方法中会执行一些初始化对象需要调用的方法和表达式，action()方法的内容是为不同的按钮添加点击事件，playByMode、play、pause、setVolume、resetPlayer则是与播放mp3音频操作相关的方法，config则是进行一些相关的配置...如果对这些方法具体的内容有兴趣，可以去仔细研究一下每一步它的执行，但在这里就不做过于详细的阐述了。  \n\n**注意:**\n- js中没有java中的继承，它实现不同对象间共享变量、方法的方式是使用一个共享的原型对象，在这个原型对象中定义的方法和变量可以在任何一个通过其构造函数创建的对象中直接使用  \n- **!function(l) {}(window);　** 的作用与 **　(funcion(){})();** 一样，都是定义一个匿名函数接着进行对自身的调用，这种方式是在前面加上了!符号提示编译器这不是一个函数声明，而是一个表达式，从而实现与后者相同的效果。其它的运算符如 **+、-** 等也可以实现同样的作用，如果有兴趣可以研究一下它们之间的区别。  \n\n　　粗略的研究了一下 ***smusic.min.js*** 的内容，下一步就可以通过断点来追踪具体的执行过程了，我选择的是将这个断点打在了p对象的构造函数里面调用init()方法的地方，结果如下图所示，下图需要关注的地方被红圈标注出来了。  \n\n![](/images/data_scraping/breakpoint.png \"断点\")  \n　　\n　　在对象p的构造函数中很容易可以注意到,为config进行了赋值，接着调用了原型对象中的init()方法。在这个构造函数中，很容易注意到**musicList**变量，可以将这个变量添加到watch里面追踪值的变化，然后可以看到其具体的内容，明显这里的musicList是一个数组，数组里的内容如下图所示:  \n\n![](/images/data_scraping/jsoncontent.png \"数组里的内容\")\n\n　　显然这是一个json数组，里面的json对象包括了四个键值对，**title、cover、singer、src**，红色方框标注的内容是对应mp3文件的地址，这就是我们要寻找的东西啦。开始我的做法是在调试的时候直接将这个json数组里的内容copy到文件里，但是这样做会有一个问题，这个问题会导致我们拿不到正确的文件地址，原因是chrome在调试模式查看值的时候，如果一条记录的值过于长，不会显示所有的内容，而是会将结尾字符串的部分内容替换为...，但是我一开始并没有注意到这个问题，而是直接拿着这个url调用java的http api去下载，导致出现404错误，提示找不到对应的文件...刚开始我还以为这个站点做了安全措施...但是其实并没有...只是自己拿的方式有问题，正确的方式应该是使用**JSON.stringify()**将这个数组转为字符串，然后再存入到文件里。(当然也有将json字符串转换为对象的方法，需要使用**JSON.parse()**方法，注意参数需要使用单引号，因为json字符串的内容包含双引号，如果再使用双引号去包裹参数就会提示语法错误)\n\n<p>　　到了这里其实已经完成的差不多了，下面都是Java需要解决的问题了，由于存在172条记录，如果手动去提取地址再下载未免太麻烦，所以我的做法是使用Java的io流读取这个文件里的内容到一个StringBuffer对象中，当然也可以使用StringBuilder，这两个的主要区别是StringBuffer是线程安全，StringBuilder不是线程安全的。由于我使用的是单线程下载，所以无论是使用StringBuffer还是StringBuilder其实都一样。将文件的内容读取到StringBuffer对象中之后，就可以愉快的进行我们想要的操作了。将所有的地址提取出来可以使用Java里的正则表达式，其核心的两个对象是<strong>Pattern</strong>和<strong>Matcher</strong>。匹配方式有三种，分别是matches、lookingAt、find，这三种的区别是matches是用于匹配整个字符串，就是说需要pattern和输入的字符串完全相等的时候才会返回true。lookingAt方法会匹配输入字符串的开头，仅当输入的字符串的开头部分满足匹配模式的时候返回true。find方法会扫描整个输入字符串，并且是逐个寻找满足条件的匹配模式，直到找不到匹配的内容为止。在这个需求里，匹配需要的地址就很容易啦，字符串内容的开头一定是<strong>http://ting.xiai123.com/mp3/</strong>，结尾一定是.mp3，这样去编写匹配模式就Ok。将匹配到的所有的url存入一个字符串数组中，接下来就是逐个去下载的问题啦，这里就不一一介绍了，自己踩的一个坑是将地址进行URLEncoder的时候选择了全部的地址，其实只需要将结尾部分进行重新编码就ok了，但是使用Java调用<strong>URLEncoder.encode()</strong>方法还存在着一个问题就是空白符会被替换成+，正确的替换结果应该是%20，无奈自己只能再调用一个replaceAll方法去替换。</p>\n\n　　如果对这些代码有兴趣的话可以在这里下载，[https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download](https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download)。如果这个站点的源码有更多兴趣可以打一些断点，在Call Stack跟踪方法执行流程，以及Watch关键变量的值。  \n\n　　这个网站没有作任何的保护措施，但是我还是一直弄到晚上一点才搞定，同时自己也发现抓取一个站点的数据其实是特别有意思的，听说Python对此有更强大的支持，赶紧去了解一下。(*´ﾟ∀ﾟ｀)ﾉ   \n\n　　End\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/抓取喜爱123听故事音频文件.md","raw":"layout: \"post\"\ntitle: \"抓取喜爱123音频文件\"\ndate: \"2018-11-24 20:25\"\ncategories:\n- [DATA SCRAPING]\ntags:\n- [TECHNOLOGY]\n---\n　　滴...你的表弟已上线，问你是否可以帮他把英语听力下载到他的MP3。(；′⌒`)...开始我以为他是不会如何将文件放在MP3的磁盘里面，就对他说将文件下载后放到移动磁盘就OK。然后他又说他老爸找不到下载地址，额....我心想下载地址你找不到我也没办法帮他去远程找下载地址呀...接着表弟就发了个微信分享的链接给我...但当时我不在宿舍，就说回去帮他看看。  \n<!-- more -->  \n\n![](/images/data_scraping/messgae_biaodi.png \"来自表弟的消息 罒ω罒 \")  \n\n　　回到宿舍已经是八点半，用电脑登录微信，打开表弟给的微信分享，其实就是使用微信的内置浏览器打开了一个地址。复制了链接地址改为使用Chrome打开，看到了下面的[在线听听力的界面](http://xiai123.com/rjbxmbyy9.html?from=groupmessage&isappinstalled=0)。\n\n![](/images/data_scraping/xiai_chrome.png \"表弟发来的MP3在线听地址\")  \n\n　　接下来把这个界面点了点，并没有发现听力的下载地址，看来是有意不提供下载地址，于是打开了调试模式查看网页对应的源码，想看看是否能在html界面中找到听力文件的地址，但是定位到对应的按钮点击的html代码，只看到了一个ul列表，里面的li标签只定义了一个class属性。看来音频地址是不会直接保存在html页面中的，(PS: 如果直接保存在html也太容易被获取到了吧) 于是接着查看它的源码。在chorme调试模式下定位到source tab页面，查看当前页面下的所有文件，显然我们的答案不可能存在css、img文件夹里，过滤掉css、img文件夹里的内容，仅关注js文件，下面两个文件出现在视野里:\n\n![](/images/data_scraping/js文件列表.png \"js文件列表\")  \n　　\n　　那明显第一个是jquery在生产环境的名称，第二个文件叫***smusic.min.js***，里都有些什么内容呢?不妨打开看个究竟。这个js文件最外层是用一个 ***!function(l) {}(window);*** 包裹了一些方法的定义，一些变量的声明，但其中核心内容是设计者在其中定义了一个p对象，在js中对象的定义方式与函数声明的语法一样，区别定义一个函数还是一个对象取决于设计者使用它们的方式，如果定义的是一个对象，一般后续会使用 ***new xxx(...);*** 形式的语法去创建一个对象，而如果是作为方法调用则直接在js代码中使用 ***xxx(...);*** 形式的语法去执行调用。为什么说这个p是核心对象呢？原因是在对象p的prototype属性中定义了大量与播放音频文件相关的方法，这些方法包括 ***config、createListDom、setBuffer、resetPlayer、setVolume、initPlay、play、pause、getRandomIndex、playByMode、action、init*** ，顾名思义，init()方法中会执行一些初始化对象需要调用的方法和表达式，action()方法的内容是为不同的按钮添加点击事件，playByMode、play、pause、setVolume、resetPlayer则是与播放mp3音频操作相关的方法，config则是进行一些相关的配置...如果对这些方法具体的内容有兴趣，可以去仔细研究一下每一步它的执行，但在这里就不做过于详细的阐述了。  \n\n**注意:**\n- js中没有java中的继承，它实现不同对象间共享变量、方法的方式是使用一个共享的原型对象，在这个原型对象中定义的方法和变量可以在任何一个通过其构造函数创建的对象中直接使用  \n- **!function(l) {}(window);　** 的作用与 **　(funcion(){})();** 一样，都是定义一个匿名函数接着进行对自身的调用，这种方式是在前面加上了!符号提示编译器这不是一个函数声明，而是一个表达式，从而实现与后者相同的效果。其它的运算符如 **+、-** 等也可以实现同样的作用，如果有兴趣可以研究一下它们之间的区别。  \n\n　　粗略的研究了一下 ***smusic.min.js*** 的内容，下一步就可以通过断点来追踪具体的执行过程了，我选择的是将这个断点打在了p对象的构造函数里面调用init()方法的地方，结果如下图所示，下图需要关注的地方被红圈标注出来了。  \n\n![](/images/data_scraping/breakpoint.png \"断点\")  \n　　\n　　在对象p的构造函数中很容易可以注意到,为config进行了赋值，接着调用了原型对象中的init()方法。在这个构造函数中，很容易注意到**musicList**变量，可以将这个变量添加到watch里面追踪值的变化，然后可以看到其具体的内容，明显这里的musicList是一个数组，数组里的内容如下图所示:  \n\n![](/images/data_scraping/jsoncontent.png \"数组里的内容\")\n\n　　显然这是一个json数组，里面的json对象包括了四个键值对，**title、cover、singer、src**，红色方框标注的内容是对应mp3文件的地址，这就是我们要寻找的东西啦。开始我的做法是在调试的时候直接将这个json数组里的内容copy到文件里，但是这样做会有一个问题，这个问题会导致我们拿不到正确的文件地址，原因是chrome在调试模式查看值的时候，如果一条记录的值过于长，不会显示所有的内容，而是会将结尾字符串的部分内容替换为...，但是我一开始并没有注意到这个问题，而是直接拿着这个url调用java的http api去下载，导致出现404错误，提示找不到对应的文件...刚开始我还以为这个站点做了安全措施...但是其实并没有...只是自己拿的方式有问题，正确的方式应该是使用**JSON.stringify()**将这个数组转为字符串，然后再存入到文件里。(当然也有将json字符串转换为对象的方法，需要使用**JSON.parse()**方法，注意参数需要使用单引号，因为json字符串的内容包含双引号，如果再使用双引号去包裹参数就会提示语法错误)\n\n<p>　　到了这里其实已经完成的差不多了，下面都是Java需要解决的问题了，由于存在172条记录，如果手动去提取地址再下载未免太麻烦，所以我的做法是使用Java的io流读取这个文件里的内容到一个StringBuffer对象中，当然也可以使用StringBuilder，这两个的主要区别是StringBuffer是线程安全，StringBuilder不是线程安全的。由于我使用的是单线程下载，所以无论是使用StringBuffer还是StringBuilder其实都一样。将文件的内容读取到StringBuffer对象中之后，就可以愉快的进行我们想要的操作了。将所有的地址提取出来可以使用Java里的正则表达式，其核心的两个对象是<strong>Pattern</strong>和<strong>Matcher</strong>。匹配方式有三种，分别是matches、lookingAt、find，这三种的区别是matches是用于匹配整个字符串，就是说需要pattern和输入的字符串完全相等的时候才会返回true。lookingAt方法会匹配输入字符串的开头，仅当输入的字符串的开头部分满足匹配模式的时候返回true。find方法会扫描整个输入字符串，并且是逐个寻找满足条件的匹配模式，直到找不到匹配的内容为止。在这个需求里，匹配需要的地址就很容易啦，字符串内容的开头一定是<strong>http://ting.xiai123.com/mp3/</strong>，结尾一定是.mp3，这样去编写匹配模式就Ok。将匹配到的所有的url存入一个字符串数组中，接下来就是逐个去下载的问题啦，这里就不一一介绍了，自己踩的一个坑是将地址进行URLEncoder的时候选择了全部的地址，其实只需要将结尾部分进行重新编码就ok了，但是使用Java调用<strong>URLEncoder.encode()</strong>方法还存在着一个问题就是空白符会被替换成+，正确的替换结果应该是%20，无奈自己只能再调用一个replaceAll方法去替换。</p>\n\n　　如果对这些代码有兴趣的话可以在这里下载，[https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download](https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download)。如果这个站点的源码有更多兴趣可以打一些断点，在Call Stack跟踪方法执行流程，以及Watch关键变量的值。  \n\n　　这个网站没有作任何的保护措施，但是我还是一直弄到晚上一点才搞定，同时自己也发现抓取一个站点的数据其实是特别有意思的，听说Python对此有更强大的支持，赶紧去了解一下。(*´ﾟ∀ﾟ｀)ﾉ   \n\n　　End\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"抓取喜爱123听故事音频文件","published":1,"updated":"2018-11-25T06:24:57.836Z","_id":"cjovgkdgq0000l0wto4dtkuuv","comments":1,"photos":[],"link":"","content":"<p>　　滴…你的表弟已上线，问你是否可以帮他把英语听力下载到他的MP3。(；′⌒`)…开始我以为他是不会如何将文件放在MP3的磁盘里面，就对他说将文件下载后放到移动磁盘就OK。然后他又说他老爸找不到下载地址，额….我心想下载地址你找不到我也没办法帮他去远程找下载地址呀…接着表弟就发了个微信分享的链接给我…但当时我不在宿舍，就说回去帮他看看。<br><a id=\"more\"></a>  </p>\n<p><img src=\"/images/data_scraping/messgae_biaodi.png\" alt=\"\" title=\"来自表弟的消息 罒ω罒 \">  </p>\n<p>　　回到宿舍已经是八点半，用电脑登录微信，打开表弟给的微信分享，其实就是使用微信的内置浏览器打开了一个地址。复制了链接地址改为使用Chrome打开，看到了下面的<a href=\"http://xiai123.com/rjbxmbyy9.html?from=groupmessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">在线听听力的界面</a>。</p>\n<p><img src=\"/images/data_scraping/xiai_chrome.png\" alt=\"\" title=\"表弟发来的MP3在线听地址\">  </p>\n<p>　　接下来把这个界面点了点，并没有发现听力的下载地址，看来是有意不提供下载地址，于是打开了调试模式查看网页对应的源码，想看看是否能在html界面中找到听力文件的地址，但是定位到对应的按钮点击的html代码，只看到了一个ul列表，里面的li标签只定义了一个class属性。看来音频地址是不会直接保存在html页面中的，(PS: 如果直接保存在html也太容易被获取到了吧) 于是接着查看它的源码。在chorme调试模式下定位到source tab页面，查看当前页面下的所有文件，显然我们的答案不可能存在css、img文件夹里，过滤掉css、img文件夹里的内容，仅关注js文件，下面两个文件出现在视野里:</p>\n<p><img src=\"/images/data_scraping/js文件列表.png\" alt=\"\" title=\"js文件列表\"><br>　　<br>　　那明显第一个是jquery在生产环境的名称，第二个文件叫<strong><em>smusic.min.js</em></strong>，里都有些什么内容呢?不妨打开看个究竟。这个js文件最外层是用一个 <strong><em>!function(l) {}(window);</em></strong> 包裹了一些方法的定义，一些变量的声明，但其中核心内容是设计者在其中定义了一个p对象，在js中对象的定义方式与函数声明的语法一样，区别定义一个函数还是一个对象取决于设计者使用它们的方式，如果定义的是一个对象，一般后续会使用 <strong><em>new xxx(…);</em></strong> 形式的语法去创建一个对象，而如果是作为方法调用则直接在js代码中使用 <strong><em>xxx(…);</em></strong> 形式的语法去执行调用。为什么说这个p是核心对象呢？原因是在对象p的prototype属性中定义了大量与播放音频文件相关的方法，这些方法包括 <strong><em>config、createListDom、setBuffer、resetPlayer、setVolume、initPlay、play、pause、getRandomIndex、playByMode、action、init</em></strong> ，顾名思义，init()方法中会执行一些初始化对象需要调用的方法和表达式，action()方法的内容是为不同的按钮添加点击事件，playByMode、play、pause、setVolume、resetPlayer则是与播放mp3音频操作相关的方法，config则是进行一些相关的配置…如果对这些方法具体的内容有兴趣，可以去仔细研究一下每一步它的执行，但在这里就不做过于详细的阐述了。  </p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>js中没有java中的继承，它实现不同对象间共享变量、方法的方式是使用一个共享的原型对象，在这个原型对象中定义的方法和变量可以在任何一个通过其构造函数创建的对象中直接使用  </li>\n<li><strong>!function(l) {}(window);　</strong> 的作用与 <strong>　(funcion(){})();</strong> 一样，都是定义一个匿名函数接着进行对自身的调用，这种方式是在前面加上了!符号提示编译器这不是一个函数声明，而是一个表达式，从而实现与后者相同的效果。其它的运算符如 <strong>+、-</strong> 等也可以实现同样的作用，如果有兴趣可以研究一下它们之间的区别。  </li>\n</ul>\n<p>　　粗略的研究了一下 <strong><em>smusic.min.js</em></strong> 的内容，下一步就可以通过断点来追踪具体的执行过程了，我选择的是将这个断点打在了p对象的构造函数里面调用init()方法的地方，结果如下图所示，下图需要关注的地方被红圈标注出来了。  </p>\n<p><img src=\"/images/data_scraping/breakpoint.png\" alt=\"\" title=\"断点\"><br>　　<br>　　在对象p的构造函数中很容易可以注意到,为config进行了赋值，接着调用了原型对象中的init()方法。在这个构造函数中，很容易注意到<strong>musicList</strong>变量，可以将这个变量添加到watch里面追踪值的变化，然后可以看到其具体的内容，明显这里的musicList是一个数组，数组里的内容如下图所示:  </p>\n<p><img src=\"/images/data_scraping/jsoncontent.png\" alt=\"\" title=\"数组里的内容\"></p>\n<p>　　显然这是一个json数组，里面的json对象包括了四个键值对，<strong>title、cover、singer、src</strong>，红色方框标注的内容是对应mp3文件的地址，这就是我们要寻找的东西啦。开始我的做法是在调试的时候直接将这个json数组里的内容copy到文件里，但是这样做会有一个问题，这个问题会导致我们拿不到正确的文件地址，原因是chrome在调试模式查看值的时候，如果一条记录的值过于长，不会显示所有的内容，而是会将结尾字符串的部分内容替换为…，但是我一开始并没有注意到这个问题，而是直接拿着这个url调用java的http api去下载，导致出现404错误，提示找不到对应的文件…刚开始我还以为这个站点做了安全措施…但是其实并没有…只是自己拿的方式有问题，正确的方式应该是使用<strong>JSON.stringify()</strong>将这个数组转为字符串，然后再存入到文件里。(当然也有将json字符串转换为对象的方法，需要使用<strong>JSON.parse()</strong>方法，注意参数需要使用单引号，因为json字符串的内容包含双引号，如果再使用双引号去包裹参数就会提示语法错误)</p>\n<p>　　到了这里其实已经完成的差不多了，下面都是Java需要解决的问题了，由于存在172条记录，如果手动去提取地址再下载未免太麻烦，所以我的做法是使用Java的io流读取这个文件里的内容到一个StringBuffer对象中，当然也可以使用StringBuilder，这两个的主要区别是StringBuffer是线程安全，StringBuilder不是线程安全的。由于我使用的是单线程下载，所以无论是使用StringBuffer还是StringBuilder其实都一样。将文件的内容读取到StringBuffer对象中之后，就可以愉快的进行我们想要的操作了。将所有的地址提取出来可以使用Java里的正则表达式，其核心的两个对象是<strong>Pattern</strong>和<strong>Matcher</strong>。匹配方式有三种，分别是matches、lookingAt、find，这三种的区别是matches是用于匹配整个字符串，就是说需要pattern和输入的字符串完全相等的时候才会返回true。lookingAt方法会匹配输入字符串的开头，仅当输入的字符串的开头部分满足匹配模式的时候返回true。find方法会扫描整个输入字符串，并且是逐个寻找满足条件的匹配模式，直到找不到匹配的内容为止。在这个需求里，匹配需要的地址就很容易啦，字符串内容的开头一定是<strong>http://ting.xiai123.com/mp3/</strong>，结尾一定是.mp3，这样去编写匹配模式就Ok。将匹配到的所有的url存入一个字符串数组中，接下来就是逐个去下载的问题啦，这里就不一一介绍了，自己踩的一个坑是将地址进行URLEncoder的时候选择了全部的地址，其实只需要将结尾部分进行重新编码就ok了，但是使用Java调用<strong>URLEncoder.encode()</strong>方法还存在着一个问题就是空白符会被替换成+，正确的替换结果应该是%20，无奈自己只能再调用一个replaceAll方法去替换。</p>\n\n<p>　　如果对这些代码有兴趣的话可以在这里下载，<a href=\"https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download\" target=\"_blank\" rel=\"noopener\">https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download</a>。如果这个站点的源码有更多兴趣可以打一些断点，在Call Stack跟踪方法执行流程，以及Watch关键变量的值。  </p>\n<p>　　这个网站没有作任何的保护措施，但是我还是一直弄到晚上一点才搞定，同时自己也发现抓取一个站点的数据其实是特别有意思的，听说Python对此有更强大的支持，赶紧去了解一下。(*´ﾟ∀ﾟ｀)ﾉ   </p>\n<p>　　End</p>\n","site":{"data":{}},"excerpt":"<p>　　滴…你的表弟已上线，问你是否可以帮他把英语听力下载到他的MP3。(；′⌒`)…开始我以为他是不会如何将文件放在MP3的磁盘里面，就对他说将文件下载后放到移动磁盘就OK。然后他又说他老爸找不到下载地址，额….我心想下载地址你找不到我也没办法帮他去远程找下载地址呀…接着表弟就发了个微信分享的链接给我…但当时我不在宿舍，就说回去帮他看看。<br>","more":"</p>\n<p><img src=\"/images/data_scraping/messgae_biaodi.png\" alt=\"\" title=\"来自表弟的消息 罒ω罒 \">  </p>\n<p>　　回到宿舍已经是八点半，用电脑登录微信，打开表弟给的微信分享，其实就是使用微信的内置浏览器打开了一个地址。复制了链接地址改为使用Chrome打开，看到了下面的<a href=\"http://xiai123.com/rjbxmbyy9.html?from=groupmessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">在线听听力的界面</a>。</p>\n<p><img src=\"/images/data_scraping/xiai_chrome.png\" alt=\"\" title=\"表弟发来的MP3在线听地址\">  </p>\n<p>　　接下来把这个界面点了点，并没有发现听力的下载地址，看来是有意不提供下载地址，于是打开了调试模式查看网页对应的源码，想看看是否能在html界面中找到听力文件的地址，但是定位到对应的按钮点击的html代码，只看到了一个ul列表，里面的li标签只定义了一个class属性。看来音频地址是不会直接保存在html页面中的，(PS: 如果直接保存在html也太容易被获取到了吧) 于是接着查看它的源码。在chorme调试模式下定位到source tab页面，查看当前页面下的所有文件，显然我们的答案不可能存在css、img文件夹里，过滤掉css、img文件夹里的内容，仅关注js文件，下面两个文件出现在视野里:</p>\n<p><img src=\"/images/data_scraping/js文件列表.png\" alt=\"\" title=\"js文件列表\"><br>　　<br>　　那明显第一个是jquery在生产环境的名称，第二个文件叫<strong><em>smusic.min.js</em></strong>，里都有些什么内容呢?不妨打开看个究竟。这个js文件最外层是用一个 <strong><em>!function(l) {}(window);</em></strong> 包裹了一些方法的定义，一些变量的声明，但其中核心内容是设计者在其中定义了一个p对象，在js中对象的定义方式与函数声明的语法一样，区别定义一个函数还是一个对象取决于设计者使用它们的方式，如果定义的是一个对象，一般后续会使用 <strong><em>new xxx(…);</em></strong> 形式的语法去创建一个对象，而如果是作为方法调用则直接在js代码中使用 <strong><em>xxx(…);</em></strong> 形式的语法去执行调用。为什么说这个p是核心对象呢？原因是在对象p的prototype属性中定义了大量与播放音频文件相关的方法，这些方法包括 <strong><em>config、createListDom、setBuffer、resetPlayer、setVolume、initPlay、play、pause、getRandomIndex、playByMode、action、init</em></strong> ，顾名思义，init()方法中会执行一些初始化对象需要调用的方法和表达式，action()方法的内容是为不同的按钮添加点击事件，playByMode、play、pause、setVolume、resetPlayer则是与播放mp3音频操作相关的方法，config则是进行一些相关的配置…如果对这些方法具体的内容有兴趣，可以去仔细研究一下每一步它的执行，但在这里就不做过于详细的阐述了。  </p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>js中没有java中的继承，它实现不同对象间共享变量、方法的方式是使用一个共享的原型对象，在这个原型对象中定义的方法和变量可以在任何一个通过其构造函数创建的对象中直接使用  </li>\n<li><strong>!function(l) {}(window);　</strong> 的作用与 <strong>　(funcion(){})();</strong> 一样，都是定义一个匿名函数接着进行对自身的调用，这种方式是在前面加上了!符号提示编译器这不是一个函数声明，而是一个表达式，从而实现与后者相同的效果。其它的运算符如 <strong>+、-</strong> 等也可以实现同样的作用，如果有兴趣可以研究一下它们之间的区别。  </li>\n</ul>\n<p>　　粗略的研究了一下 <strong><em>smusic.min.js</em></strong> 的内容，下一步就可以通过断点来追踪具体的执行过程了，我选择的是将这个断点打在了p对象的构造函数里面调用init()方法的地方，结果如下图所示，下图需要关注的地方被红圈标注出来了。  </p>\n<p><img src=\"/images/data_scraping/breakpoint.png\" alt=\"\" title=\"断点\"><br>　　<br>　　在对象p的构造函数中很容易可以注意到,为config进行了赋值，接着调用了原型对象中的init()方法。在这个构造函数中，很容易注意到<strong>musicList</strong>变量，可以将这个变量添加到watch里面追踪值的变化，然后可以看到其具体的内容，明显这里的musicList是一个数组，数组里的内容如下图所示:  </p>\n<p><img src=\"/images/data_scraping/jsoncontent.png\" alt=\"\" title=\"数组里的内容\"></p>\n<p>　　显然这是一个json数组，里面的json对象包括了四个键值对，<strong>title、cover、singer、src</strong>，红色方框标注的内容是对应mp3文件的地址，这就是我们要寻找的东西啦。开始我的做法是在调试的时候直接将这个json数组里的内容copy到文件里，但是这样做会有一个问题，这个问题会导致我们拿不到正确的文件地址，原因是chrome在调试模式查看值的时候，如果一条记录的值过于长，不会显示所有的内容，而是会将结尾字符串的部分内容替换为…，但是我一开始并没有注意到这个问题，而是直接拿着这个url调用java的http api去下载，导致出现404错误，提示找不到对应的文件…刚开始我还以为这个站点做了安全措施…但是其实并没有…只是自己拿的方式有问题，正确的方式应该是使用<strong>JSON.stringify()</strong>将这个数组转为字符串，然后再存入到文件里。(当然也有将json字符串转换为对象的方法，需要使用<strong>JSON.parse()</strong>方法，注意参数需要使用单引号，因为json字符串的内容包含双引号，如果再使用双引号去包裹参数就会提示语法错误)</p>\n<p>　　到了这里其实已经完成的差不多了，下面都是Java需要解决的问题了，由于存在172条记录，如果手动去提取地址再下载未免太麻烦，所以我的做法是使用Java的io流读取这个文件里的内容到一个StringBuffer对象中，当然也可以使用StringBuilder，这两个的主要区别是StringBuffer是线程安全，StringBuilder不是线程安全的。由于我使用的是单线程下载，所以无论是使用StringBuffer还是StringBuilder其实都一样。将文件的内容读取到StringBuffer对象中之后，就可以愉快的进行我们想要的操作了。将所有的地址提取出来可以使用Java里的正则表达式，其核心的两个对象是<strong>Pattern</strong>和<strong>Matcher</strong>。匹配方式有三种，分别是matches、lookingAt、find，这三种的区别是matches是用于匹配整个字符串，就是说需要pattern和输入的字符串完全相等的时候才会返回true。lookingAt方法会匹配输入字符串的开头，仅当输入的字符串的开头部分满足匹配模式的时候返回true。find方法会扫描整个输入字符串，并且是逐个寻找满足条件的匹配模式，直到找不到匹配的内容为止。在这个需求里，匹配需要的地址就很容易啦，字符串内容的开头一定是<strong>http://ting.xiai123.com/mp3/</strong>，结尾一定是.mp3，这样去编写匹配模式就Ok。将匹配到的所有的url存入一个字符串数组中，接下来就是逐个去下载的问题啦，这里就不一一介绍了，自己踩的一个坑是将地址进行URLEncoder的时候选择了全部的地址，其实只需要将结尾部分进行重新编码就ok了，但是使用Java调用<strong>URLEncoder.encode()</strong>方法还存在着一个问题就是空白符会被替换成+，正确的替换结果应该是%20，无奈自己只能再调用一个replaceAll方法去替换。</p>\n\n<p>　　如果对这些代码有兴趣的话可以在这里下载，<a href=\"https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download\" target=\"_blank\" rel=\"noopener\">https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download</a>。如果这个站点的源码有更多兴趣可以打一些断点，在Call Stack跟踪方法执行流程，以及Watch关键变量的值。  </p>\n<p>　　这个网站没有作任何的保护措施，但是我还是一直弄到晚上一点才搞定，同时自己也发现抓取一个站点的数据其实是特别有意思的，听说Python对此有更强大的支持，赶紧去了解一下。(*´ﾟ∀ﾟ｀)ﾉ   </p>\n<p>　　End</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjomsfhhb0001q8wtw0rlai6m","category_id":"cjomsfhhn0007q8wtykqz95mw","_id":"cjomsfhi1000jq8wtim4q8w7d"},{"post_id":"cjomsfhhb0001q8wtw0rlai6m","category_id":"cjomsfhhx000fq8wtl3z34v42","_id":"cjomsfhi1000kq8wtubsxzj4s"},{"post_id":"cjomsfhhg0003q8wt6cixchb4","category_id":"cjomsfhhr000aq8wtb5pzb4d0","_id":"cjomsfhi2000lq8wtduvby83c"},{"post_id":"cjomsfhhg0003q8wt6cixchb4","category_id":"cjomsfhhz000hq8wt1e9azp82","_id":"cjomsfhi3000mq8wtj3lee538"},{"post_id":"cjoo2ew8w0000lswtldcdrv89","category_id":"cjomsfhhr000aq8wtb5pzb4d0","_id":"cjoo2ew9a0002lswtj5reg0iy"},{"post_id":"cjoo2ew8w0000lswtldcdrv89","category_id":"cjomsfhhz000hq8wt1e9azp82","_id":"cjoo2ew9a0003lswtu01cyoxk"},{"post_id":"cjovgkdgq0000l0wto4dtkuuv","category_id":"cjovgkdi10002l0wtdl2vobk6","_id":"cjovgkdi40003l0wtzp87ymr6"}],"PostTag":[{"post_id":"cjomsfhhb0001q8wtw0rlai6m","tag_id":"cjomsfhhj0005q8wtxd5ydpz3","_id":"cjomsfhhs000bq8wtz3nhyt90"},{"post_id":"cjomsfhhg0003q8wt6cixchb4","tag_id":"cjomsfhhq0009q8wtweeuj7p3","_id":"cjomsfhhw000eq8wt541fv32u"},{"post_id":"cjoo2ew8w0000lswtldcdrv89","tag_id":"cjomsfhhq0009q8wtweeuj7p3","_id":"cjoo2ew980001lswtvh6et0ep"},{"post_id":"cjovgkdgq0000l0wto4dtkuuv","tag_id":"cjomsfhhq0009q8wtweeuj7p3","_id":"cjovgkdi00001l0wtr5f93cmc"}],"Tag":[{"name":"FEELING","_id":"cjomsfhhj0005q8wtxd5ydpz3"},{"name":"TECHNOLOGY","_id":"cjomsfhhq0009q8wtweeuj7p3"}]}}