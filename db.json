{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/cost_aliyun.PNG","path":"images/cost_aliyun.PNG","modified":0,"renderable":0},{"_id":"source/images/dalian.jpg","path":"images/dalian.jpg","modified":0,"renderable":0},{"_id":"source/images/hehe.jpg","path":"images/hehe.jpg","modified":0,"renderable":0},{"_id":"source/images/jiaonipi.jfif","path":"images/jiaonipi.jfif","modified":0,"renderable":0},{"_id":"source/images/piyixia.jpg","path":"images/piyixia.jpg","modified":0,"renderable":0},{"_id":"source/images/smile.jpg","path":"images/smile.jpg","modified":0,"renderable":0},{"_id":"source/images/timg.jpg","path":"images/timg.jpg","modified":0,"renderable":0},{"_id":"source/images/vuelogo.png","path":"images/vuelogo.png","modified":0,"renderable":0},{"_id":"source/images/aoteguaishou.jpg","path":"images/aoteguaishou.jpg","modified":0,"renderable":0},{"_id":"source/images/albums.jpg","path":"images/albums.jpg","modified":0,"renderable":0},{"_id":"source/images/myself.jpg","path":"images/myself.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/content.json","path":"content.json","modified":0,"renderable":1},{"_id":"source/images/data_scraping/messgae_biaodi.png","path":"images/data_scraping/messgae_biaodi.png","modified":0,"renderable":0},{"_id":"source/images/heying.jpg","path":"images/heying.jpg","modified":0,"renderable":0},{"_id":"source/images/myhuaban.jpg","path":"images/myhuaban.jpg","modified":0,"renderable":0},{"_id":"source/images/maxSubSum/base1.jpg","path":"images/maxSubSum/base1.jpg","modified":0,"renderable":0},{"_id":"source/images/maxSubSum/base2.jpg","path":"images/maxSubSum/base2.jpg","modified":0,"renderable":0},{"_id":"source/images/realmorning.jpg","path":"images/realmorning.jpg","modified":0,"renderable":0},{"_id":"source/images/xianren_distance.jpg","path":"images/xianren_distance.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"source/images/destination_xianren.jpg","path":"images/destination_xianren.jpg","modified":0,"renderable":0},{"_id":"source/images/dapeng.jpg","path":"images/dapeng.jpg","modified":0,"renderable":0},{"_id":"source/images/data_scraping/breakpoint.png","path":"images/data_scraping/breakpoint.png","modified":0,"renderable":0},{"_id":"source/images/data_scraping/js文件列表.png","path":"images/data_scraping/js文件列表.png","modified":0,"renderable":0},{"_id":"source/images/data_scraping/xiai_chrome.png","path":"images/data_scraping/xiai_chrome.png","modified":0,"renderable":0},{"_id":"source/images/huahui_route.jpg","path":"images/huahui_route.jpg","modified":0,"renderable":0},{"_id":"source/images/xianren_brand.jpg","path":"images/xianren_brand.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/swcheng.jpg","path":"css/images/swcheng.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"source/images/data_scraping/jsoncontent.png","path":"images/data_scraping/jsoncontent.png","modified":0,"renderable":0},{"_id":"source/images/initial_heart.jpg","path":"images/initial_heart.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.css","path":"libs/font-awesome5/css/fa-brands.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.min.css","path":"libs/font-awesome5/css/fa-brands.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.css","path":"libs/font-awesome5/css/fa-solid.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.min.css","path":"libs/font-awesome5/css/fa-solid.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.min.css","path":"libs/font-awesome5/css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.css","path":"libs/font-awesome5/css/fontawesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff2","path":"libs/font-awesome5/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff","path":"libs/font-awesome5/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff2","path":"libs/font-awesome5/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"source/images/cost_bandwagon.PNG","path":"images/cost_bandwagon.PNG","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.eot","path":"libs/font-awesome5/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.ttf","path":"libs/font-awesome5/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff","path":"libs/font-awesome5/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"source/images/salt-lake.jpg","path":"images/salt-lake.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.eot","path":"libs/font-awesome5/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.ttf","path":"libs/font-awesome5/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/salt-lake.jpg","path":"css/images/salt-lake.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.svg","path":"libs/font-awesome5/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.svg","path":"libs/font-awesome5/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"source/images/flowers/pic37.jpg","path":"images/flowers/pic37.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic19.jpg","path":"images/flowers/pic19.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic13.jpg","path":"images/flowers/pic13.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic35.jpg","path":"images/flowers/pic35.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic41.jpg","path":"images/flowers/pic41.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic27.jpg","path":"images/flowers/pic27.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic29.jpg","path":"images/flowers/pic29.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic31.jpg","path":"images/flowers/pic31.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic12.jpg","path":"images/flowers/pic12.jpg","modified":0,"renderable":0},{"_id":"source/images/qinqinghuahi.jpg","path":"images/qinqinghuahi.jpg","modified":0,"renderable":0},{"_id":"source/images/xianrenzhang.jpg","path":"images/xianrenzhang.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic23.jpg","path":"images/flowers/pic23.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic36.jpg","path":"images/flowers/pic36.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic9.jpg","path":"images/flowers/pic9.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic22.jpg","path":"images/flowers/pic22.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic21.jpg","path":"images/flowers/pic21.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic24.jpg","path":"images/flowers/pic24.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic4.jpg","path":"images/flowers/pic4.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic15.jpg","path":"images/flowers/pic15.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic20.jpg","path":"images/flowers/pic20.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic39.jpg","path":"images/flowers/pic39.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic16.jpg","path":"images/flowers/pic16.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic3.jpg","path":"images/flowers/pic3.jpg","modified":0,"renderable":0},{"_id":"source/images/lanqiu.jpg","path":"images/lanqiu.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic25.jpg","path":"images/flowers/pic25.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic38.jpg","path":"images/flowers/pic38.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic2.jpg","path":"images/flowers/pic2.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic40.jpg","path":"images/flowers/pic40.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic5.jpg","path":"images/flowers/pic5.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic8.jpg","path":"images/flowers/pic8.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic10.jpg","path":"images/flowers/pic10.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic28.jpg","path":"images/flowers/pic28.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic6.jpg","path":"images/flowers/pic6.jpg","modified":0,"renderable":0},{"_id":"source/images/huabandian.jpg","path":"images/huabandian.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic34.jpg","path":"images/flowers/pic34.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic14.jpg","path":"images/flowers/pic14.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic17.jpg","path":"images/flowers/pic17.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic18.jpg","path":"images/flowers/pic18.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic26.jpg","path":"images/flowers/pic26.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic30.jpg","path":"images/flowers/pic30.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic42.jpg","path":"images/flowers/pic42.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic32.jpg","path":"images/flowers/pic32.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic33.jpg","path":"images/flowers/pic33.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic1.jpg","path":"images/flowers/pic1.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic43.jpg","path":"images/flowers/pic43.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic11.jpg","path":"images/flowers/pic11.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic7.jpg","path":"images/flowers/pic7.jpg","modified":0,"renderable":0},{"_id":"source/images/flowers/pic44.jpg","path":"images/flowers/pic44.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/icarus/LICENSE","hash":"73ed09aa00f7bda6319fc7d5b722fb40e0c2017e","modified":1558258926904},{"_id":"themes/icarus/README.md","hash":"c2407cbda23f087be719d6dc3f7207a8e01ffd73","modified":1558258926905},{"_id":"themes/icarus/_config.yml","hash":"e4ea69f59312b6ed5db403725884c2b636d9ab13","modified":1558258926906},{"_id":"source/_data/menu.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558258925855},{"_id":"themes/icarus/package.json","hash":"c156985c2689895a228188a29ceaae8f7d0bb34f","modified":1558258926955},{"_id":"source/_drafts/我是草稿.md","hash":"889588b8d3f112f553ddd767d78d7d602b0a0962","modified":1558258925856},{"_id":"source/_posts/2018-10-19-博客开篇.md","hash":"131f94bcbe50c9046c69deefef0504599b7de81d","modified":1558261261824},{"_id":"source/_posts/2018-11-19_最大子序列求和.md","hash":"9c09186162b8dd164147b3fb9cb6a9909e6093ea","modified":1558258925858},{"_id":"source/_posts/Comparator && Comparable.md","hash":"d4dc4cd7b70abf4dd66149160839a8f395723aac","modified":1558258925859},{"_id":"source/_posts/Every story has an ending.md","hash":"7e09ad53d6836a482be32d4d351658d8a2823a1d","modified":1558258925859},{"_id":"source/_posts/Keep relax, Keep curious, Keep ur fire.md","hash":"af363222c0d701282600c1900b04c49841fc64d6","modified":1561991275497},{"_id":"source/_posts/Summarize_2018.md","hash":"621f4c630846c3bcaf3f843adeed21a4a4f09eb8","modified":1558258925860},{"_id":"source/_posts/Vue基础-事件处理和表单数据绑定.md","hash":"bb77f3c3ca4a7a2a9493f3058a87f3c1370aced5","modified":1572227957216},{"_id":"source/_posts/Vue基础-条件列表渲染.md","hash":"9456da3d7fa76dbf23d8d2ebe741ddc838abe0e8","modified":1572227491013},{"_id":"source/_posts/Vue基础-数据绑定.md","hash":"5dbeb6e53ddb57ebcb664093ffc58b4f095ae56d","modified":1570781712090},{"_id":"source/_posts/上海仙人掌养殖基地之旅.md","hash":"5f500a0a2b25bd91dfa1cb2fc9c5f312555ea9e6","modified":1558258925864},{"_id":"source/_posts/小半，小梦大半.md","hash":"bef10ba103e561a4833d1f8f5795361d12f1bb67","modified":1566741146689},{"_id":"source/_posts/开启新的运动,Yeah!.md","hash":"56f7124e0e413c66f95c854d4c925ccd8f901341","modified":1558258925865},{"_id":"source/_posts/找回走失的童心.md","hash":"6ef80df9a2ef862ca29e3270958417e0dc08157a","modified":1558258925865},{"_id":"source/_posts/找工作的一些感受.md","hash":"2354aeb251f327184675c94900bdd95a8c14cc42","modified":1558258925866},{"_id":"source/_posts/早上五点的清晨.md","hash":"eb457c52530ca66ebeab00bd5deb7b75200745df","modified":1558258925867},{"_id":"source/_posts/抓取喜爱123听故事音频文件.md","hash":"c809ba8b3280745593447b3b208d521d8661dba7","modified":1558258925867},{"_id":"source/_posts/确认过眼神，你是我的仙人掌.md","hash":"f4fc7bb5f52957a831700d0011808201960b3f30","modified":1558258925868},{"_id":"source/_posts/花卉市场&龙华古寺之旅.md","hash":"435a4dda1cf23ec634d7cf5cb97e2a78515ae8c0","modified":1558258925869},{"_id":"source/_posts/近期小结.md","hash":"6ae5c540d34a098a35030b18b30cee7ee25247ff","modified":1558801137184},{"_id":"source/about/index.md","hash":"5a65336c6c10042a2159395fdc6227df3a2f7664","modified":1558259257269},{"_id":"source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1558258925871},{"_id":"source/images/cost_aliyun.PNG","hash":"64ccb78f7e9e849f4ea31f3f587273a188f8ad39","modified":1558258925873},{"_id":"source/images/dalian.jpg","hash":"791130da4255584114ba84ce76a8ecb952e2940c","modified":1558797282888},{"_id":"source/images/hehe.jpg","hash":"56fd9ccdc02617d213a82d360abd8305a618bfff","modified":1558792353202},{"_id":"source/images/jiaonipi.jfif","hash":"0fb4a715221297b3b5eeb9a8d71d39becf4755eb","modified":1561990774078},{"_id":"source/images/piyixia.jpg","hash":"ff5561f288a44849fbf0cf627af38b895e08737f","modified":1558792027917},{"_id":"source/images/smile.jpg","hash":"ebc3c2b330787bf3e791c3d74ca4219fc87bd4ef","modified":1558258926878},{"_id":"source/images/timg.jpg","hash":"3cb83f1a3d2cdb56f690513aa08ade108b002c88","modified":1558258926879},{"_id":"source/images/vuelogo.png","hash":"555257b8c5e7ecf34ce4f9b952eeaf006adfa339","modified":1558258926880},{"_id":"source/tags/index.md","hash":"5a65336c6c10042a2159395fdc6227df3a2f7664","modified":1558258926903},{"_id":"themes/icarus/languages/en.yml","hash":"2b888a89957e07f440452a12ef338af979abb4c6","modified":1558258926910},{"_id":"themes/icarus/languages/es.yml","hash":"f48b21e020b48a38747a5cd0a2c853d717ad8a7f","modified":1558258926911},{"_id":"themes/icarus/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1558258926911},{"_id":"themes/icarus/languages/id.yml","hash":"83021037b6dad8dd48f48e3b4a822d07d56fc272","modified":1558258926912},{"_id":"themes/icarus/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1558258926913},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1558258926914},{"_id":"themes/icarus/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1558258926913},{"_id":"themes/icarus/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1558258926915},{"_id":"themes/icarus/languages/tr.yml","hash":"50d94b21e1838db1214f6874f4f81b47c8c521db","modified":1558258926915},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"fdce6e6716768cfac9355c4e88a05260efeeae1c","modified":1558258926916},{"_id":"themes/icarus/layout/archive.ejs","hash":"6f1bada1439dd043bfdfaa53df1bdf9a2ba69bb1","modified":1558258926918},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"646a7ef3e85481b013ffb2f4d9f9a8900f092d73","modified":1558258926916},{"_id":"themes/icarus/layout/categories.ejs","hash":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1558258926918},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1558258926919},{"_id":"themes/icarus/layout/index.ejs","hash":"c329f4598a0af4d8678ba789fdc84fcdf10122de","modified":1558258926938},{"_id":"themes/icarus/layout/layout.ejs","hash":"2bc1e3071a5ec25096584d01726a3b7c4d53ffaf","modified":1558258926939},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1558258926939},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1558258926942},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1558258926950},{"_id":"themes/icarus/layout/tags.ejs","hash":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1558258926951},{"_id":"themes/icarus/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1558258926956},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1558258926957},{"_id":"source/images/aoteguaishou.jpg","hash":"0bbcec466ad30119111c2e5fd2aaaf8b815fafd9","modified":1558258925872},{"_id":"source/images/albums.jpg","hash":"8923c878ef30ccaf4846d892ac3085a4d484390e","modified":1564413034247},{"_id":"source/images/myself.jpg","hash":"982006912e41fbed78f44d76e31292bc92f1b69b","modified":1558258926850},{"_id":"themes/icarus/source/content.json","hash":"c79c0bc7e1c82f3b58bceaa4d765968884f4db81","modified":1558258926958},{"_id":"source/images/data_scraping/messgae_biaodi.png","hash":"8a89f7c8f2870a2e8b402b87fc77098bb749cb9b","modified":1558258925887},{"_id":"source/images/heying.jpg","hash":"4522553859b6c8c51a0aee9108021878b1f029d9","modified":1558258926795},{"_id":"source/images/myhuaban.jpg","hash":"2971521e76e0417c5e328ca30b12ac1ca5e00027","modified":1558258926849},{"_id":"source/images/maxSubSum/base1.jpg","hash":"a512e716a1234d0e2706e956f98052a234b18741","modified":1558258926846},{"_id":"source/images/maxSubSum/base2.jpg","hash":"cc797e9edd8ed34524adbcd1e0580048e7d63267","modified":1558258926847},{"_id":"source/images/realmorning.jpg","hash":"d3c5b425154d41e1bfb6d7ebfb945539d24ad292","modified":1558258926874},{"_id":"source/images/xianren_distance.jpg","hash":"9937b60862856b7ccf777e9b62fdfb74e19a976c","modified":1558258926885},{"_id":"themes/icarus/_source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1558258926907},{"_id":"themes/icarus/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1558258926909},{"_id":"themes/icarus/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1558258926908},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"67b9c24a2973bb208e183ce46201d3c209a1bd4a","modified":1558258926920},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1558258926921},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"f744b41f3cc258e2a5a6df6abf6cf9ba9f05c19c","modified":1558258926920},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1558258926921},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"6a53104fc01fd4a7a34b46c2828e76d02cacb0dd","modified":1558258926922},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1558258926923},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"61f0398161f27ea5d134212a2ed601acdba0402f","modified":1558258926923},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"b3dd067a6099f0e088f3374d37b8a726bafe15e5","modified":1558258926924},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"d2d0d8113a5a7d2cddf1d8ce067e07d40874e56c","modified":1558258926925},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"869b13c45f043451c73c46b347967667e18f6d0b","modified":1558258926925},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1558258926926},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1558258926927},{"_id":"themes/icarus/layout/common/article.ejs","hash":"f62ee6b048e5f310be6c826e54863bed62d8c59f","modified":1558258926928},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"d1812a87a26a48723c30d32bf4a1f57f3b01908e","modified":1558258926928},{"_id":"themes/icarus/layout/common/head.ejs","hash":"d39c07e39f2c9935637029b37d601df1d4cf4c7a","modified":1558258926929},{"_id":"themes/icarus/layout/common/header.ejs","hash":"ea03a21948009f72054af8289e20b2d2006a0afb","modified":1558258926929},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"c2f7caabb14c3bc8f8f05b85a4df075fba085d7e","modified":1558258926935},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"6c39352254c93f1fbedb4e81d2fdc94f34f54c2e","modified":1558258926936},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"bdd3bd76d2fcca57c75f74fd94dc8686ab7ed0bc","modified":1558258926936},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1558258926937},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"01b6fb2f0069b9809504312042b50b7611b00383","modified":1558258926938},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1558258926941},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1558258926941},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1558258926943},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"2a41940ab86d3f7b095436b56ea304689c2b5121","modified":1558258926942},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1558258926944},{"_id":"themes/icarus/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1558258926945},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"90c2954349be157800b6307215f83423619344b2","modified":1558258926945},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1558258926946},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1558258926947},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1558258926948},{"_id":"themes/icarus/layout/share/default.ejs","hash":"898999d386e166e00984eb0f8c8271a5768e84b4","modified":1558258926948},{"_id":"themes/icarus/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1558258926949},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1558258926949},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1558258926952},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1558258926952},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1558258926953},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1558258926954},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"0863733fd4378b08b08d37138c1919f4562c176a","modified":1558258926953},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"a4b28996e0e7df2e582387455c02f5c33f691bbd","modified":1558258926955},{"_id":"themes/icarus/source/css/_extend.styl","hash":"c18c58c67f49b8afe92fa8852ff7e203ce5958de","modified":1558258926960},{"_id":"themes/icarus/source/css/_variables.styl","hash":"28d73a420f32c73595fcc559528544cf998590c7","modified":1558258927016},{"_id":"themes/icarus/source/js/main.js","hash":"4d821c56c7068532ea5baf00fd93bf10182c309e","modified":1558258927026},{"_id":"themes/icarus/source/css/style.styl","hash":"5c22522034beed5018efd77e34c01584a815b23d","modified":1558258927024},{"_id":"themes/icarus/source/js/insight.js","hash":"06fb237cd290877abe967b98a74bdf0d25622ff6","modified":1558258927025},{"_id":"source/images/destination_xianren.jpg","hash":"ff08ebf4bb907eeb771294102dc5bae3a5d3674d","modified":1558258925891},{"_id":"source/images/dapeng.jpg","hash":"a66273793661a5336430ef7284da5286f5861ac7","modified":1558258925879},{"_id":"source/images/data_scraping/breakpoint.png","hash":"a55c7311b81e133f2a98f97c014ae2a26b7744d2","modified":1558258925881},{"_id":"source/images/data_scraping/js文件列表.png","hash":"bafda60e4b9f1ff30bbf4f1167554a5c3041eda8","modified":1558258925885},{"_id":"source/images/data_scraping/xiai_chrome.png","hash":"3399099b8b2075543c6cc7f9fddc4f456a0a1b73","modified":1558258925888},{"_id":"source/images/huahui_route.jpg","hash":"4648f0aa52a1d95ed7553e2b61c9bc00c8ab5e5f","modified":1558258926820},{"_id":"source/images/xianren_brand.jpg","hash":"dd8ba0d339c55ffa0223e6c2d43b74ce03662314","modified":1558258926883},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1558258926931},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"dc61f0cf9d2b9369e9072e2a756310ec7c4add44","modified":1558258926931},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1558258926932},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"f02f5f016886024705f9ba87ad29f57e07f37b9f","modified":1558258926932},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"79d15e00ead668bf44a48f4e870ac0cde9dbdee3","modified":1558258926933},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"ec8cfadecae8031df4448d72c979bb19b30e6e6b","modified":1558258926934},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1558258926934},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1558258926961},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1558258926962},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1558258926961},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1558258926963},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1558258926963},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1558258926964},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1558258926965},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1558258926965},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1558258926966},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1558258926967},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1558258926967},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1558258926968},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1558258926969},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1558258926969},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1558258926970},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1558258926971},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1558258926971},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1558258926972},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1558258926973},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1558258926973},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1558258926974},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1558258926975},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1558258926976},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1558258926975},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1558258926977},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1558258926977},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1558258926979},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1558258926979},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1558258926978},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1558258926980},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1558258926980},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1558258926981},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1558258926982},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1558258926983},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1558258926983},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1558258926984},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1558258926984},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1558258926985},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1558258926986},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1558258926986},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1558258926987},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1558258926988},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1558258926988},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1558258926989},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1558258926990},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1558258926990},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1558258926991},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1558258926991},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1558258926992},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1558258926994},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1558258926993},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1558258926994},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1558258926995},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1558258926996},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1558258926996},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1558258926998},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1558258926997},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1558258926999},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1558258926999},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1558258927000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1558258927001},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1558258927001},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1558258927002},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1558258927003},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1558258927004},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1558258927005},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1558258927004},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1558258927006},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1558258927007},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1558258927007},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"6da3162382fe528d852815d99ac9b044389fc554","modified":1558258927008},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"488703ff3e5b9a18e5972379f668149ac06f0207","modified":1558258927009},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1558258927010},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1558258927010},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"98cf61179737e74e7f052aa8d8057138d3eb72bf","modified":1558258927011},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"8a84868a13c7edb733347655b33dc169c682e8b8","modified":1558258927012},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"256d198d960172651d2363e1a5b82d99e0dc1039","modified":1558258927012},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"c680d9a7143dcca6df6c6e25788d13340442ff89","modified":1558258927013},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1558258927015},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"ba1ea8a87ca7c667f0d3cc40033b52bdf168fbdd","modified":1558258927014},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1558258927015},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1558258927017},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1558258927018},{"_id":"themes/icarus/source/css/images/swcheng.jpg","hash":"292e39ce92c0ac731160585d49508b14feacae62","modified":1558258927022},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1558258927023},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1558258927060},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1558258927061},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1558258927108},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1558258927111},{"_id":"source/images/data_scraping/jsoncontent.png","hash":"b9f3f47ca59babb0d86b55de825e678fe66fc1e5","modified":1558258925884},{"_id":"source/images/initial_heart.jpg","hash":"91332abe1fed2afe075fe8036c7eef71d9d453a0","modified":1558258926823},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.css","hash":"ee60cb08477e43c779b9a6caac16779876b37448","modified":1558258927028},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.min.css","hash":"24dad0f39e1cd33f44f27e960594327963ac6efa","modified":1558258927028},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.css","hash":"ef8d7019efb52fe14cb120c0be7101d0fe4b15b4","modified":1558258927029},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.min.css","hash":"a88fa1bd6d5ebcf482ab5c639d19d1cd252ebbd5","modified":1558258927030},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.min.css","hash":"0fe6c33b0f78e8b47ba6ba910bb7ef291014b0c2","modified":1558258927032},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.css","hash":"f30831895d6fc68a15f0ed4af8e445420535556e","modified":1558258927031},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff2","hash":"0ec12ea1707f5bc812b627f41cccad2aff01e54b","modified":1558258927045},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff","hash":"7b4a63abc8476f745f09775d7465f0a6c33daf85","modified":1558258927056},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff2","hash":"1ba4dd60af529d1a72d0e57467c3bc0bbb728a4d","modified":1558258927057},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1558258927070},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1558258927070},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1558258927071},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1558258927071},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1558258927062},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1558258927062},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1558258927064},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1558258927065},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1558258927066},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1558258927067},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1558258927067},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1558258927073},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1558258927068},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1558258927067},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1558258927073},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1558258927076},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1558258927074},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1558258927075},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1558258927076},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1558258927077},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1558258927078},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1558258927079},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1558258927079},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1558258927080},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1558258927082},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1558258927081},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1558258927082},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1558258927083},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1558258927084},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1558258927084},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1558258927085},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1558258927086},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1558258927088},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1558258927087},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1558258927089},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1558258927090},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1558258927091},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1558258927093},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1558258927092},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1558258927094},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1558258927094},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1558258927095},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1558258927096},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1558258927097},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1558258927097},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1558258927099},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1558258927098},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1558258927100},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1558258927101},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1558258927102},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1558258927103},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1558258927104},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1558258927103},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1558258927110},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1558258927105},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1558258927107},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1558258927106},{"_id":"source/images/cost_bandwagon.PNG","hash":"75e9983fd54db1e64599209b55587573585956c5","modified":1558258925877},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1558258927110},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.eot","hash":"d92c68223732a10ceffe54eecbe4ef70073e6dea","modified":1558258927035},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.ttf","hash":"9b4bb228d5b132e69ff8b6b248262449879eff3e","modified":1558258927043},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff","hash":"8b5cac7fbf1712c81d9cac19cda04e6a604eb9da","modified":1558258927044},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1558258927059},{"_id":"source/images/salt-lake.jpg","hash":"65da705e43b5f0a26fd5fd8512aff4dbb0b3b54f","modified":1558258926878},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.eot","hash":"69aa0b829fd8562d0fb72948ce49ef201ff0ee83","modified":1558258927048},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.ttf","hash":"31dc9b748b8d2bf6c3edec919e763791e037bbff","modified":1558258927055},{"_id":"themes/icarus/source/css/images/salt-lake.jpg","hash":"65da705e43b5f0a26fd5fd8512aff4dbb0b3b54f","modified":1558258927021},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.svg","hash":"79651f9945627cdef4070a43806511d2ca555b5d","modified":1558258927053},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.svg","hash":"9f6b59723d9399b36e15ff569f84e9c01d8500a9","modified":1558258927040},{"_id":"source/images/flowers/pic37.jpg","hash":"1d1e098bb763c8b9abe3f25437a33777b5b62e26","modified":1558258926503},{"_id":"source/images/flowers/pic19.jpg","hash":"b7766b7e867154a214463ec5030c5e5f89f79437","modified":1558258926130},{"_id":"source/images/flowers/pic13.jpg","hash":"a7b65a6f39f4777d54f63b449ec288c387b41557","modified":1558258926009},{"_id":"source/images/flowers/pic35.jpg","hash":"2118f3807935f602d7fda1504d7889d065955a98","modified":1558258926471},{"_id":"source/images/flowers/pic41.jpg","hash":"720fe7e8e25419e8eed0b415a2dea8d1ad9cdcd4","modified":1558258926605},{"_id":"source/images/flowers/pic27.jpg","hash":"b1aedb862febacfdf18e60ae3de6aff64899299e","modified":1558258926293},{"_id":"source/images/flowers/pic29.jpg","hash":"42c39e4ec40b1b6ad669a844883ca1cb73b5a08a","modified":1558258926328},{"_id":"source/images/flowers/pic31.jpg","hash":"dc51792082386064a0b1065237c1f71636d87fde","modified":1558258926384},{"_id":"source/images/flowers/pic12.jpg","hash":"689f9552ebd8d5194fecfdf7f347b52d1a6f743c","modified":1558258925994},{"_id":"source/images/qinqinghuahi.jpg","hash":"30fde2af9dac53a46fdec74a8cd5631ebe4c3caf","modified":1558258926871},{"_id":"source/images/xianrenzhang.jpg","hash":"7c619d0861e899e71beebed4d1bc312ee06c89b2","modified":1558258926901},{"_id":"source/images/flowers/pic23.jpg","hash":"13b194a52bf2efc8933fde9fa99efc5e04f900c7","modified":1558258926219},{"_id":"source/images/flowers/pic36.jpg","hash":"b493821c1d410fa2e6e7d0767b5ef50f02c12b46","modified":1558258926488},{"_id":"source/images/flowers/pic9.jpg","hash":"dc712f4b78a67e60e15d5bf33abd3262987ceef1","modified":1558258926792},{"_id":"source/images/flowers/pic22.jpg","hash":"cdd9996459ade4a55a3792b96207fa430c1fab0b","modified":1558258926202},{"_id":"source/images/flowers/pic21.jpg","hash":"e3f0eee75bb6c03429a42c5fa512cbebf2b28a6c","modified":1558258926185},{"_id":"source/images/flowers/pic24.jpg","hash":"6eecb9e5d76cf6d23f9027a2493eff0e6d47f09d","modified":1558258926238},{"_id":"source/images/flowers/pic4.jpg","hash":"0786de1cd9edff7e5e4c9668a3001069d6dc3303","modified":1558258926561},{"_id":"source/images/flowers/pic15.jpg","hash":"17bbf9f812cadd127e1a3b6bccecc51554ca4a80","modified":1558258926048},{"_id":"source/images/flowers/pic20.jpg","hash":"e045d2b6aaacbdec7978966b1d0719478f1361c8","modified":1558258926168},{"_id":"source/images/flowers/pic39.jpg","hash":"8594106db926d7becc0a9a0c47a358ad82ca7bee","modified":1558258926543},{"_id":"source/images/flowers/pic16.jpg","hash":"901fbcbed45c5a8d891787dcd4bd471d95e24714","modified":1558258926066},{"_id":"source/images/flowers/pic3.jpg","hash":"f43bc26dc22d38eccec55faae96a2dd9f8bbb5bd","modified":1558258926346},{"_id":"source/images/lanqiu.jpg","hash":"c8ac5e9493b314bb35f385d02d1ffd7a8812193d","modified":1558258926844},{"_id":"source/images/flowers/pic25.jpg","hash":"1c563b22406e2d3283b9745274810d6c4f5175c5","modified":1558258926257},{"_id":"source/images/flowers/pic38.jpg","hash":"33c42c725df457b5df6ec6d7f3f9fd42ef2a719a","modified":1558258926524},{"_id":"source/images/flowers/pic2.jpg","hash":"aba75625521f2f8f19006db820675f97c0fb2e85","modified":1558258926150},{"_id":"source/images/flowers/pic40.jpg","hash":"5bff93a57f4b1e73f9ffb9bbc5ff1ffb74d2db86","modified":1558258926589},{"_id":"source/images/flowers/pic5.jpg","hash":"8018639e89be48ae9319463229b59b052cecf147","modified":1558258926709},{"_id":"source/images/flowers/pic8.jpg","hash":"18d64224af27c5e6074d9159260c96499e28bdfb","modified":1558258926774},{"_id":"source/images/flowers/pic10.jpg","hash":"0c825219c44b1fab354fc67caed36a16039ad324","modified":1558258925938},{"_id":"source/images/flowers/pic28.jpg","hash":"5931db8d74e95d51373ed6400019695f66eced08","modified":1558258926313},{"_id":"source/images/flowers/pic6.jpg","hash":"8ca720fe10c78c21d7b9f8280be0246062cd2584","modified":1558258926730},{"_id":"source/images/huabandian.jpg","hash":"f1b404db6058b421519c0474f1e5796b64641202","modified":1558258926817},{"_id":"source/images/flowers/pic34.jpg","hash":"120f633d4c3fef04947e835b2350a937be0ade2f","modified":1558258926453},{"_id":"source/images/flowers/pic14.jpg","hash":"a24ddb4d4699d6f498c4efb6d65473b3579984fd","modified":1558258926030},{"_id":"source/images/flowers/pic17.jpg","hash":"365e761168d67fce0e066ab499d84db77e363f85","modified":1558258926088},{"_id":"source/images/flowers/pic18.jpg","hash":"f8e9c7d5514b085a3b5c458d90db18934de159a7","modified":1558258926110},{"_id":"source/images/flowers/pic26.jpg","hash":"38a76ec56af58860f616fd51bb03a2d22a82c70e","modified":1558258926277},{"_id":"source/images/flowers/pic30.jpg","hash":"971752ed9c86fff68b268b64b639d5f2b1b3b536","modified":1558258926367},{"_id":"source/images/flowers/pic42.jpg","hash":"c652db566ccd6ab5d4f244f30ea72efd81064685","modified":1558258926628},{"_id":"source/images/flowers/pic32.jpg","hash":"8abe25c1e344572b0056dfdd5338862076291a2a","modified":1558258926407},{"_id":"source/images/flowers/pic33.jpg","hash":"ea70758e64a5c73061e23bbec241bcf4ec3c1134","modified":1558258926431},{"_id":"source/images/flowers/pic1.jpg","hash":"246404316f2f124a53062857c3ba106bd529e273","modified":1558258925914},{"_id":"source/images/flowers/pic43.jpg","hash":"6761208de98a9a1f5c6bed8b8844d75ee536a2f5","modified":1558258926651},{"_id":"source/images/flowers/pic11.jpg","hash":"db3dfa78abf87a70554b96a5a143d3b7d322943b","modified":1558258925970},{"_id":"source/images/flowers/pic7.jpg","hash":"31867cd2616f1c5607e1fcfaf389699775d64385","modified":1558258926755},{"_id":"source/images/flowers/pic44.jpg","hash":"b7a931c8306105e791d4ec6b6e24f0047d30018c","modified":1558258926689},{"_id":"public/content.json","hash":"d054f8a551a5aeb6c7cc5896e7c7ef9bfc5ecc32","modified":1576056689295},{"_id":"public/about/index.html","hash":"7d9c4c7a85ba950d7e97bedc5d343df1e3a2c3af","modified":1576056689674},{"_id":"public/categories/index.html","hash":"68b943bb431e184ef60e47b335cdab9c3ba958e9","modified":1576056689885},{"_id":"public/tags/index.html","hash":"0233ffa3af07084be5bbd05be4ba3fb82b0a594e","modified":1576056689686},{"_id":"public/2019/06/30/Keep relax, Keep curious, Keep ur fire/index.html","hash":"683fd24c0d266e8c9d10a3a4b4878b5fdae974c1","modified":1576056689901},{"_id":"public/2019/05/25/近期小结/index.html","hash":"21539bc37d611af39cca83863dd8cfc8d33e9a18","modified":1576056689901},{"_id":"public/2019/04/21/Vue基础-事件处理和表单数据绑定/index.html","hash":"d04b8b569c5f935d24fc0c36ad680369d32ca476","modified":1576056689901},{"_id":"public/2019/04/21/Vue基础-条件列表渲染/index.html","hash":"4895fcef39c431efda7fe89642a749291f6549cd","modified":1576056689901},{"_id":"public/2019/04/20/Vue基础-数据绑定/index.html","hash":"06a1f220494e3f84acfcce20023be6ef6534e662","modified":1576056689901},{"_id":"public/2019/04/19/找工作的一些感受/index.html","hash":"3069aa5636aa612a3196a87cb50dc05e192f72b4","modified":1576056689901},{"_id":"public/2019/03/10/花卉市场&龙华古寺之旅/index.html","hash":"6d7ebd300d596b1a10940c221a3e5b65438b252b","modified":1576056689902},{"_id":"public/2019/03/18/早上五点的清晨/index.html","hash":"e1bb7bed28dce3a645fbb9e9b82b29d8ee55cb9e","modified":1576056689902},{"_id":"public/2019/03/03/上海仙人掌养殖基地之旅/index.html","hash":"ae68a21424d3d19a41353ba6e887b323517b935f","modified":1576056689901},{"_id":"public/2019/02/26/确认过眼神，你是我的仙人掌/index.html","hash":"38cc4402628f098a09bc58f309529bb3f4dd0339","modified":1576056689902},{"_id":"public/2019/02/23/开启新的运动,Yeah!/index.html","hash":"461f8b66227a44016d87563451f8d501ed8e0c45","modified":1576056689902},{"_id":"public/2019/02/03/找回走失的童心/index.html","hash":"53780f334f71ab18032a8e832e97260ea21db7c8","modified":1576056689902},{"_id":"public/2018/12/30/Summarize_2018/index.html","hash":"a97b8b62597bce0ba3670f61b171afc4f007144a","modified":1576056689902},{"_id":"public/2018/11/24/抓取喜爱123听故事音频文件/index.html","hash":"2661d59a626ba6525f285955439a1bbfcb1d650f","modified":1576056689902},{"_id":"public/2018/11/18/2018-11-19_最大子序列求和/index.html","hash":"da6415598c633964796de814170841cf96275033","modified":1576056689902},{"_id":"public/2018/11/06/Comparator && Comparable/index.html","hash":"824b5d2fb9a4beae74b7b7ea6c182aca3205095d","modified":1576056689902},{"_id":"public/archives/index.html","hash":"9e0cd2d3cbd87fe9ee610acbb756c0bf396a08ba","modified":1576056689903},{"_id":"public/2018/10/19/2018-10-19-博客开篇/index.html","hash":"379e039ed9791c9520debe0b45da01b5d4241b66","modified":1576056689902},{"_id":"public/archives/2018/index.html","hash":"cad938ef49699e184ddb4d29f272524e65ae7560","modified":1576056689903},{"_id":"public/archives/2018/10/index.html","hash":"e89d6933eb4fca00fbe3460b837548d31f49ed68","modified":1576056689903},{"_id":"public/archives/page/2/index.html","hash":"0e2543d9b5f7595de159b191bbebfde9a6f9e630","modified":1576056689903},{"_id":"public/archives/2018/11/index.html","hash":"c9392379e7702adb419dcf4457a3329849028d33","modified":1576056689903},{"_id":"public/2019/01/27/Every story has an ending/index.html","hash":"33b249ef58d6d6bb70a6904c68c16c99582910e6","modified":1576056689902},{"_id":"public/archives/2018/12/index.html","hash":"bce26d389c779c111ee79d8e905fae2e8eba126a","modified":1576056689903},{"_id":"public/archives/2019/index.html","hash":"8acc35b025fdd6e1ce55192410a7895428cdcb6b","modified":1576056689903},{"_id":"public/archives/2019/page/2/index.html","hash":"779058be165cead326db58dcf9861dc75251f4bb","modified":1576056689903},{"_id":"public/archives/2019/03/index.html","hash":"a7a0c79dd8ed4948b73926213a37672b8458bebd","modified":1576056689903},{"_id":"public/archives/2019/01/index.html","hash":"54eb01c28ca8967472e7229986159d5f1a8e87e9","modified":1576056689903},{"_id":"public/archives/2019/02/index.html","hash":"1a2c825188d88fa425f7cac73efad4d7673c1dc5","modified":1576056689903},{"_id":"public/archives/2019/04/index.html","hash":"d8b1d8227c82a2662996deec7a3d8f303557dfd6","modified":1576056689903},{"_id":"public/archives/2019/05/index.html","hash":"9cf4f7e82c432978db98894951d66d5489177839","modified":1576056689903},{"_id":"public/index.html","hash":"f060e11d9f757e7b15c59da93ffa1f8b91492cb1","modified":1576056689905},{"_id":"public/categories/START/index.html","hash":"ec079465b5e1643284b4880e04d83b0b2a8fde23","modified":1576056689903},{"_id":"public/page/2/index.html","hash":"20b20833f93c14b48528f4ff24f2113671921cc6","modified":1576056689905},{"_id":"public/archives/2019/06/index.html","hash":"e8212dd95b49b0e7d2a623bf74fe138559255244","modified":1576056689903},{"_id":"public/categories/JAVA/index.html","hash":"afbb30686daf91e9171312c490db608819d921ca","modified":1576056689904},{"_id":"public/categories/LIFE/index.html","hash":"e1ba1fa5bf394539cdf855e17989bc34e252ff5b","modified":1576056689904},{"_id":"public/categories/JAVA/DATA-STRACTURE/index.html","hash":"5f736afb37584b754e3f1139a5e49c195b0074c1","modified":1576056689904},{"_id":"public/categories/UI/index.html","hash":"1dd66b78d23cf79740c10652bf2173a14082bd5d","modified":1576056689905},{"_id":"public/categories/LIFE/page/2/index.html","hash":"08f6e49489485f264a81b0f4694882b4c548e642","modified":1576056689904},{"_id":"public/categories/DATA-SCRAPING/index.html","hash":"bacb78f5219eca760727f6206848ddb5556e74b7","modified":1576056689905},{"_id":"public/categories/UI/VUE/index.html","hash":"bf756459615bdae827660e33cd333b5cf8ad36cd","modified":1576056689905},{"_id":"public/tags/FEELING/index.html","hash":"fa3bf14b735884eac0f9735f544775dc2a59767d","modified":1576056689902},{"_id":"public/tags/TECHNOLOGY/index.html","hash":"b31978e741f970986b2c17c2898ce8097e0c5d92","modified":1576056689902},{"_id":"public/tags/EMOTION/index.html","hash":"72d11a28c7e92858fff63c3ea75da91492e5aa58","modified":1576056689902},{"_id":"public/tags/SPORTS/index.html","hash":"a046cbdd184e443c51763584b5a87f6ab06d05a6","modified":1576056689902},{"_id":"public/tags/STROLL/index.html","hash":"9fd71d8e1ff40dd3d11ba208f557a817c41fb9b7","modified":1576056689902},{"_id":"public/tags/EXPERIENCE/index.html","hash":"4e2ebc81141eca8e3af14f3f15a836888e3b2bc9","modified":1576056689903},{"_id":"public/tags/DRAWING/index.html","hash":"9611aac73780d41c78d0cf60990fb623d7ea69a3","modified":1576056689903},{"_id":"public/2019/08/25/小半，小梦大半/index.html","hash":"bc878e1df5432edd27b380d9ad54a70d4829bc52","modified":1576056689892},{"_id":"public/archives/2019/08/index.html","hash":"b25876a93f5033ccdf2138491a4d54257b040a24","modified":1576056689904},{"_id":"public/images/piyixia.jpg","hash":"ff5561f288a44849fbf0cf627af38b895e08737f","modified":1566741370398},{"_id":"public/images/hehe.jpg","hash":"56fd9ccdc02617d213a82d360abd8305a618bfff","modified":1566741370398},{"_id":"public/images/dalian.jpg","hash":"791130da4255584114ba84ce76a8ecb952e2940c","modified":1566741370398},{"_id":"public/images/jiaonipi.jfif","hash":"0fb4a715221297b3b5eeb9a8d71d39becf4755eb","modified":1566741370398},{"_id":"public/images/smile.jpg","hash":"ebc3c2b330787bf3e791c3d74ca4219fc87bd4ef","modified":1566741370398},{"_id":"public/images/cost_aliyun.PNG","hash":"64ccb78f7e9e849f4ea31f3f587273a188f8ad39","modified":1566741370398},{"_id":"public/images/timg.jpg","hash":"3cb83f1a3d2cdb56f690513aa08ade108b002c88","modified":1566741370398},{"_id":"public/images/vuelogo.png","hash":"555257b8c5e7ecf34ce4f9b952eeaf006adfa339","modified":1566741370398},{"_id":"public/images/data_scraping/messgae_biaodi.png","hash":"8a89f7c8f2870a2e8b402b87fc77098bb749cb9b","modified":1566741370399},{"_id":"public/images/maxSubSum/base1.jpg","hash":"a512e716a1234d0e2706e956f98052a234b18741","modified":1566741370399},{"_id":"public/images/maxSubSum/base2.jpg","hash":"cc797e9edd8ed34524adbcd1e0580048e7d63267","modified":1566741370399},{"_id":"public/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1566741370399},{"_id":"public/css/images/swcheng.jpg","hash":"292e39ce92c0ac731160585d49508b14feacae62","modified":1566741370399},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1566741370399},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1566741370399},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.woff","hash":"7b4a63abc8476f745f09775d7465f0a6c33daf85","modified":1566741370399},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.woff2","hash":"1ba4dd60af529d1a72d0e57467c3bc0bbb728a4d","modified":1566741370399},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.woff2","hash":"0ec12ea1707f5bc812b627f41cccad2aff01e54b","modified":1566741370399},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1566741370399},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1566741370399},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1566741370399},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1566741370399},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1566741370399},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1566741370399},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1566741370399},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1566741370399},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1566741370399},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1566741370399},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1566741370399},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1566741370841},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1566741370841},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1566741370843},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1566741370843},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1566741370844},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1566741370844},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1566741370844},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1566741370844},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1566741370844},{"_id":"public/images/aoteguaishou.jpg","hash":"0bbcec466ad30119111c2e5fd2aaaf8b815fafd9","modified":1566741370844},{"_id":"public/images/myself.jpg","hash":"982006912e41fbed78f44d76e31292bc92f1b69b","modified":1566741370844},{"_id":"public/images/data_scraping/breakpoint.png","hash":"a55c7311b81e133f2a98f97c014ae2a26b7744d2","modified":1566741370844},{"_id":"public/images/data_scraping/js文件列表.png","hash":"bafda60e4b9f1ff30bbf4f1167554a5c3041eda8","modified":1566741370844},{"_id":"public/images/data_scraping/xiai_chrome.png","hash":"3399099b8b2075543c6cc7f9fddc4f456a0a1b73","modified":1566741370844},{"_id":"public/images/albums.jpg","hash":"8923c878ef30ccaf4846d892ac3085a4d484390e","modified":1566741370844},{"_id":"public/js/main.js","hash":"2c148f06c5799b5d7dd165c5162e780535e07a40","modified":1566741370856},{"_id":"public/js/insight.js","hash":"f507ab7b2236349719f1af2c918f2f5c22d410c2","modified":1566741370856},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1566741370857},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1566741370857},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1566741370857},{"_id":"public/libs/font-awesome5/css/fa-brands.min.css","hash":"ae33d7d508d9fb4d8cc026f74007fae27017fc80","modified":1566741370857},{"_id":"public/libs/font-awesome5/css/fa-brands.css","hash":"3dc468f3a5d6dcbdb977b17c2c021f751c5bf7c6","modified":1566741370857},{"_id":"public/libs/font-awesome5/css/fa-solid.css","hash":"5c960e4efb31a88b1319dcf63d4806175e3cb8cd","modified":1566741370857},{"_id":"public/libs/font-awesome5/css/fa-solid.min.css","hash":"ac3cc27cd41d44ed5d680541636604d0c397e5f6","modified":1566741370857},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1566741370857},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1566741370858},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1566741370858},{"_id":"public/css/style.css","hash":"1d5e1f53ea8852dcd3b2f5aff31c488d7003635b","modified":1566741370858},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1566741370858},{"_id":"public/libs/font-awesome5/css/fontawesome.min.css","hash":"8518d72f88b376749244da2bdc96f261d9bd5645","modified":1566741370858},{"_id":"public/libs/font-awesome5/css/fontawesome.css","hash":"b818fea784ea93c6cc393d545bfc5e1ec2045ff7","modified":1566741370858},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1566741370858},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1566741370858},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1566741370858},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1566741370858},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.eot","hash":"d92c68223732a10ceffe54eecbe4ef70073e6dea","modified":1566741370858},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.ttf","hash":"9b4bb228d5b132e69ff8b6b248262449879eff3e","modified":1566741370858},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.woff","hash":"8b5cac7fbf1712c81d9cac19cda04e6a604eb9da","modified":1566741370858},{"_id":"public/images/myhuaban.jpg","hash":"2971521e76e0417c5e328ca30b12ac1ca5e00027","modified":1566741370858},{"_id":"public/images/heying.jpg","hash":"4522553859b6c8c51a0aee9108021878b1f029d9","modified":1566741370858},{"_id":"public/images/xianren_distance.jpg","hash":"9937b60862856b7ccf777e9b62fdfb74e19a976c","modified":1566741370859},{"_id":"public/images/realmorning.jpg","hash":"d3c5b425154d41e1bfb6d7ebfb945539d24ad292","modified":1566741370859},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1566741370872},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1566741370872},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1566741370872},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1566741370872},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1566741370872},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1566741370872},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1566741370872},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1566741370872},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1566741370872},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.eot","hash":"69aa0b829fd8562d0fb72948ce49ef201ff0ee83","modified":1566741370872},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.ttf","hash":"31dc9b748b8d2bf6c3edec919e763791e037bbff","modified":1566741370873},{"_id":"public/images/destination_xianren.jpg","hash":"ff08ebf4bb907eeb771294102dc5bae3a5d3674d","modified":1566741370873},{"_id":"public/images/dapeng.jpg","hash":"a66273793661a5336430ef7284da5286f5861ac7","modified":1566741370873},{"_id":"public/images/huahui_route.jpg","hash":"4648f0aa52a1d95ed7553e2b61c9bc00c8ab5e5f","modified":1566741370873},{"_id":"public/images/xianren_brand.jpg","hash":"dd8ba0d339c55ffa0223e6c2d43b74ce03662314","modified":1566741370873},{"_id":"public/images/data_scraping/jsoncontent.png","hash":"b9f3f47ca59babb0d86b55de825e678fe66fc1e5","modified":1566741370873},{"_id":"public/images/initial_heart.jpg","hash":"91332abe1fed2afe075fe8036c7eef71d9d453a0","modified":1566741370888},{"_id":"public/images/cost_bandwagon.PNG","hash":"75e9983fd54db1e64599209b55587573585956c5","modified":1566741370905},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.svg","hash":"79651f9945627cdef4070a43806511d2ca555b5d","modified":1566741370905},{"_id":"public/images/salt-lake.jpg","hash":"65da705e43b5f0a26fd5fd8512aff4dbb0b3b54f","modified":1566741370911},{"_id":"public/css/images/salt-lake.jpg","hash":"65da705e43b5f0a26fd5fd8512aff4dbb0b3b54f","modified":1566741370911},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.svg","hash":"9f6b59723d9399b36e15ff569f84e9c01d8500a9","modified":1566741370917},{"_id":"public/images/flowers/pic37.jpg","hash":"1d1e098bb763c8b9abe3f25437a33777b5b62e26","modified":1566741371029},{"_id":"public/images/flowers/pic19.jpg","hash":"b7766b7e867154a214463ec5030c5e5f89f79437","modified":1566741371034},{"_id":"public/images/flowers/pic13.jpg","hash":"a7b65a6f39f4777d54f63b449ec288c387b41557","modified":1566741371079},{"_id":"public/images/flowers/pic35.jpg","hash":"2118f3807935f602d7fda1504d7889d065955a98","modified":1566741371086},{"_id":"public/images/flowers/pic41.jpg","hash":"720fe7e8e25419e8eed0b415a2dea8d1ad9cdcd4","modified":1566741371091},{"_id":"public/images/flowers/pic27.jpg","hash":"b1aedb862febacfdf18e60ae3de6aff64899299e","modified":1566741371102},{"_id":"public/images/flowers/pic29.jpg","hash":"42c39e4ec40b1b6ad669a844883ca1cb73b5a08a","modified":1566741371102},{"_id":"public/images/flowers/pic31.jpg","hash":"dc51792082386064a0b1065237c1f71636d87fde","modified":1566741371103},{"_id":"public/images/flowers/pic12.jpg","hash":"689f9552ebd8d5194fecfdf7f347b52d1a6f743c","modified":1566741371109},{"_id":"public/images/qinqinghuahi.jpg","hash":"30fde2af9dac53a46fdec74a8cd5631ebe4c3caf","modified":1566741371117},{"_id":"public/images/xianrenzhang.jpg","hash":"7c619d0861e899e71beebed4d1bc312ee06c89b2","modified":1566741371117},{"_id":"public/images/flowers/pic36.jpg","hash":"b493821c1d410fa2e6e7d0767b5ef50f02c12b46","modified":1566741371119},{"_id":"public/images/flowers/pic23.jpg","hash":"13b194a52bf2efc8933fde9fa99efc5e04f900c7","modified":1566741371120},{"_id":"public/images/flowers/pic9.jpg","hash":"dc712f4b78a67e60e15d5bf33abd3262987ceef1","modified":1566741371121},{"_id":"public/images/flowers/pic22.jpg","hash":"cdd9996459ade4a55a3792b96207fa430c1fab0b","modified":1566741371130},{"_id":"public/images/flowers/pic4.jpg","hash":"0786de1cd9edff7e5e4c9668a3001069d6dc3303","modified":1566741371164},{"_id":"public/images/flowers/pic24.jpg","hash":"6eecb9e5d76cf6d23f9027a2493eff0e6d47f09d","modified":1566741371164},{"_id":"public/images/flowers/pic21.jpg","hash":"e3f0eee75bb6c03429a42c5fa512cbebf2b28a6c","modified":1566741371171},{"_id":"public/images/flowers/pic20.jpg","hash":"e045d2b6aaacbdec7978966b1d0719478f1361c8","modified":1566741371171},{"_id":"public/images/flowers/pic15.jpg","hash":"17bbf9f812cadd127e1a3b6bccecc51554ca4a80","modified":1566741371172},{"_id":"public/images/flowers/pic39.jpg","hash":"8594106db926d7becc0a9a0c47a358ad82ca7bee","modified":1566741371174},{"_id":"public/images/flowers/pic16.jpg","hash":"901fbcbed45c5a8d891787dcd4bd471d95e24714","modified":1566741371181},{"_id":"public/images/flowers/pic3.jpg","hash":"f43bc26dc22d38eccec55faae96a2dd9f8bbb5bd","modified":1566741371181},{"_id":"public/images/flowers/pic25.jpg","hash":"1c563b22406e2d3283b9745274810d6c4f5175c5","modified":1566741371185},{"_id":"public/images/lanqiu.jpg","hash":"c8ac5e9493b314bb35f385d02d1ffd7a8812193d","modified":1566741371190},{"_id":"public/images/flowers/pic38.jpg","hash":"33c42c725df457b5df6ec6d7f3f9fd42ef2a719a","modified":1566741371194},{"_id":"public/images/flowers/pic2.jpg","hash":"aba75625521f2f8f19006db820675f97c0fb2e85","modified":1566741371226},{"_id":"public/images/flowers/pic40.jpg","hash":"5bff93a57f4b1e73f9ffb9bbc5ff1ffb74d2db86","modified":1566741371239},{"_id":"public/images/flowers/pic8.jpg","hash":"18d64224af27c5e6074d9159260c96499e28bdfb","modified":1566741371239},{"_id":"public/images/flowers/pic5.jpg","hash":"8018639e89be48ae9319463229b59b052cecf147","modified":1566741371240},{"_id":"public/images/flowers/pic10.jpg","hash":"0c825219c44b1fab354fc67caed36a16039ad324","modified":1566741371245},{"_id":"public/images/flowers/pic28.jpg","hash":"5931db8d74e95d51373ed6400019695f66eced08","modified":1566741371245},{"_id":"public/images/flowers/pic6.jpg","hash":"8ca720fe10c78c21d7b9f8280be0246062cd2584","modified":1566741371246},{"_id":"public/images/huabandian.jpg","hash":"f1b404db6058b421519c0474f1e5796b64641202","modified":1566741371252},{"_id":"public/images/flowers/pic34.jpg","hash":"120f633d4c3fef04947e835b2350a937be0ade2f","modified":1566741371252},{"_id":"public/images/flowers/pic14.jpg","hash":"a24ddb4d4699d6f498c4efb6d65473b3579984fd","modified":1566741371257},{"_id":"public/images/flowers/pic17.jpg","hash":"365e761168d67fce0e066ab499d84db77e363f85","modified":1566741371257},{"_id":"public/images/flowers/pic18.jpg","hash":"f8e9c7d5514b085a3b5c458d90db18934de159a7","modified":1566741371261},{"_id":"public/images/flowers/pic30.jpg","hash":"971752ed9c86fff68b268b64b639d5f2b1b3b536","modified":1566741371261},{"_id":"public/images/flowers/pic26.jpg","hash":"38a76ec56af58860f616fd51bb03a2d22a82c70e","modified":1566741371263},{"_id":"public/images/flowers/pic42.jpg","hash":"c652db566ccd6ab5d4f244f30ea72efd81064685","modified":1566741371265},{"_id":"public/images/flowers/pic32.jpg","hash":"8abe25c1e344572b0056dfdd5338862076291a2a","modified":1566741371300},{"_id":"public/images/flowers/pic33.jpg","hash":"ea70758e64a5c73061e23bbec241bcf4ec3c1134","modified":1566741371303},{"_id":"public/images/flowers/pic1.jpg","hash":"246404316f2f124a53062857c3ba106bd529e273","modified":1566741371308},{"_id":"public/images/flowers/pic43.jpg","hash":"6761208de98a9a1f5c6bed8b8844d75ee536a2f5","modified":1566741371310},{"_id":"public/images/flowers/pic11.jpg","hash":"db3dfa78abf87a70554b96a5a143d3b7d322943b","modified":1566741371312},{"_id":"public/images/flowers/pic7.jpg","hash":"31867cd2616f1c5607e1fcfaf389699775d64385","modified":1566741371315},{"_id":"public/images/flowers/pic44.jpg","hash":"b7a931c8306105e791d4ec6b6e24f0047d30018c","modified":1566741371317},{"_id":"source/_posts/Vue基础-Class和Style绑定.md","hash":"aad738ebfd211554586ca43cf0bf88bb88cd2418","modified":1572240205106},{"_id":"source/_posts/Vue基础-组件.md","hash":"e7208a4b8a3383f927edb39c6de7dd05fc3d803c","modified":1573577702729},{"_id":"public/2019/10/28/Vue基础-组件/index.html","hash":"c22166ead5a7f3ccf4e35cd39263ffe22e53418d","modified":1576056689892},{"_id":"public/2019/10/28/Vue基础-Class和Style绑定/index.html","hash":"fb9bc8ec76d1ab62866bab8ed61116977bcf9d26","modified":1576056689892},{"_id":"public/archives/page/3/index.html","hash":"907a21099bdbfb457fb56ba1bd3d18ca894eaa8b","modified":1576056689903},{"_id":"public/archives/2019/10/index.html","hash":"903f6b9413fc744526ab754bc39147167c8de5a9","modified":1576056689904},{"_id":"public/page/3/index.html","hash":"b33e2e94f5cae3c22569122085fe46155b807557","modified":1576056689905},{"_id":"source/_posts/Think Different,Refuse Repeating.md","hash":"121ede595ade390365f04a4adbbc500310188a1d","modified":1576056656537},{"_id":"public/2019/12/11/Think Different,Refuse Repeating/index.html","hash":"e9874c072bb74896ad72d72f23cfe4d571e4ec47","modified":1576056689898},{"_id":"public/archives/2019/12/index.html","hash":"8348f8b3f5d54fb2725f0657b6930df193f7886c","modified":1576056689906}],"Category":[{"name":"START","_id":"cjzr1cxad0008fo81p9q9ra02"},{"name":"JAVA","_id":"cjzr1cxah000cfo81zse9rvdq"},{"name":"LIFE","_id":"cjzr1cxap000ofo810r9fzi44"},{"name":"DATA_STRACTURE","parent":"cjzr1cxah000cfo81zse9rvdq","_id":"cjzr1cxb1001gfo81aqtip0jb"},{"name":"UI","_id":"cjzr1cxb4001pfo81yhs3ta9r"},{"name":"DATA SCRAPING","_id":"cjzr1cxb80025fo81xm2lpaf4"},{"name":"VUE","parent":"cjzr1cxb4001pfo81yhs3ta9r","_id":"cjzr1cxb90028fo81tdh2tdd8"}],"Data":[],"Page":[{"title":"About","layout":"page","_content":"### **My Creation And Participation:**  \n{% raw %}  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n  <tr>\n    <td>Teradata</td>\n    <td>2018-07 ~ 2018-12</td>\n    <td>Java Web开发实习</td>\n    <td>第一份实习，让自己更加清楚自己想要的是什么</td>\n    <td>无</td>\n  </tr>\n</table>\n{% endraw %}  \n#### <center>\"Be optimistic,everything will be good\"</center>\n<div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  \n>  Sees like a child\n   Give like a saint\n   Feel like an angel\n   Never mind the broken wings\n   And speak like a picture\n   Cry like the rain   \n   Shine like the star\n   As long as the fire remains\n      <p align=\"right\"> -STEFANIE «Someone»</p>             \n","source":"about/index.md","raw":"title: \"About\"\nlayout: \"page\"\n---\n### **My Creation And Participation:**  \n{% raw %}  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n  <tr>\n    <td>Teradata</td>\n    <td>2018-07 ~ 2018-12</td>\n    <td>Java Web开发实习</td>\n    <td>第一份实习，让自己更加清楚自己想要的是什么</td>\n    <td>无</td>\n  </tr>\n</table>\n{% endraw %}  \n#### <center>\"Be optimistic,everything will be good\"</center>\n<div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  \n>  Sees like a child\n   Give like a saint\n   Feel like an angel\n   Never mind the broken wings\n   And speak like a picture\n   Cry like the rain   \n   Shine like the star\n   As long as the fire remains\n      <p align=\"right\"> -STEFANIE «Someone»</p>             \n","date":"2019-08-25T08:42:51.591Z","updated":"2019-05-19T09:47:37.269Z","path":"about/index.html","comments":1,"_id":"cjzr1cxa40001fo81mf3hl8fg","content":"<h3 id=\"My-Creation-And-Participation\"><a href=\"#My-Creation-And-Participation\" class=\"headerlink\" title=\"My Creation And Participation:\"></a><strong>My Creation And Participation:</strong></h3>  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n  <tr>\n    <td>Teradata</td>\n    <td>2018-07 ~ 2018-12</td>\n    <td>Java Web开发实习</td>\n    <td>第一份实习，让自己更加清楚自己想要的是什么</td>\n    <td>无</td>\n  </tr>\n</table>\n  \n<h4 id=\"Be-optimistic-everything-will-be-good\"><a href=\"#Be-optimistic-everything-will-be-good\" class=\"headerlink\" title=\"\" be=\"\" optimistic,everything=\"\" will=\"\" good\"\"=\"\"></a><center>\"Be optimistic,everything will be good\"</center></h4><p><div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  </div></p>\n<blockquote>\n<p> Sees like a child<br>   Give like a saint<br>   Feel like an angel<br>   Never mind the broken wings<br>   And speak like a picture<br>   Cry like the rain<br>   Shine like the star<br>   As long as the fire remains<br>      </p><p align=\"right\"> -STEFANIE «Someone»</p>             <p></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"My-Creation-And-Participation\"><a href=\"#My-Creation-And-Participation\" class=\"headerlink\" title=\"My Creation And Participation:\"></a><strong>My Creation And Participation:</strong></h3>  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n  <tr>\n    <td>Teradata</td>\n    <td>2018-07 ~ 2018-12</td>\n    <td>Java Web开发实习</td>\n    <td>第一份实习，让自己更加清楚自己想要的是什么</td>\n    <td>无</td>\n  </tr>\n</table>\n  \n<h4 id=\"Be-optimistic-everything-will-be-good\"><a href=\"#Be-optimistic-everything-will-be-good\" class=\"headerlink\" title=\"\" be=\"\" optimistic,everything=\"\" will=\"\" good\"\"=\"\"></a><center>\"Be optimistic,everything will be good\"</center></h4><p><div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  </div></p>\n<blockquote>\n<p> Sees like a child<br>   Give like a saint<br>   Feel like an angel<br>   Never mind the broken wings<br>   And speak like a picture<br>   Cry like the rain<br>   Shine like the star<br>   As long as the fire remains<br>      </p><p align=\"right\"> -STEFANIE «Someone»</p>             <p></p>\n</blockquote>\n"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2019-05-19T09:42:05.871Z","updated":"2019-05-19T09:42:05.871Z","path":"categories/index.html","comments":1,"_id":"cjzr1cxa70003fo81ljm1anfw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","layout":"page","_content":"### **My Creation And Participation:**  \n{% raw %}  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n  <tr>\n    <td>Teradata</td>\n    <td>2018-07 ~ 2018-12</td>\n    <td>Java Web开发实习</td>\n    <td>第一份实习，让自己更加清楚自己想要的是什么</td>\n    <td>无</td>\n  </tr>\n</table>\n{% endraw %}  \n#### <center>\"Be optimistic,everything will be good\"</center>\n<div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  \n>  Sees like a child\n   Give like a saint\n   Feel like an angel\n   Never mind the broken wings\n   And speak like a picture\n   Cry like the rain   \n   Shine like the star\n   As long as the fire remains\n      <p align=\"right\"> -STEFANIE «Someone»</p>             \n","source":"tags/index.md","raw":"title: \"About\"\nlayout: \"page\"\n---\n### **My Creation And Participation:**  \n{% raw %}  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n  <tr>\n    <td>Teradata</td>\n    <td>2018-07 ~ 2018-12</td>\n    <td>Java Web开发实习</td>\n    <td>第一份实习，让自己更加清楚自己想要的是什么</td>\n    <td>无</td>\n  </tr>\n</table>\n{% endraw %}  \n#### <center>\"Be optimistic,everything will be good\"</center>\n<div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  \n>  Sees like a child\n   Give like a saint\n   Feel like an angel\n   Never mind the broken wings\n   And speak like a picture\n   Cry like the rain   \n   Shine like the star\n   As long as the fire remains\n      <p align=\"right\"> -STEFANIE «Someone»</p>             \n","date":"2019-05-19T09:42:06.903Z","updated":"2019-05-19T09:42:06.903Z","path":"tags/index.html","comments":1,"_id":"cjzr1cxa90005fo81b8jp9dzk","content":"<h3 id=\"My-Creation-And-Participation\"><a href=\"#My-Creation-And-Participation\" class=\"headerlink\" title=\"My Creation And Participation:\"></a><strong>My Creation And Participation:</strong></h3>  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n  <tr>\n    <td>Teradata</td>\n    <td>2018-07 ~ 2018-12</td>\n    <td>Java Web开发实习</td>\n    <td>第一份实习，让自己更加清楚自己想要的是什么</td>\n    <td>无</td>\n  </tr>\n</table>\n  \n<h4 id=\"Be-optimistic-everything-will-be-good\"><a href=\"#Be-optimistic-everything-will-be-good\" class=\"headerlink\" title=\"\" be=\"\" optimistic,everything=\"\" will=\"\" good\"\"=\"\"></a><center>\"Be optimistic,everything will be good\"</center></h4><p><div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  </div></p>\n<blockquote>\n<p> Sees like a child<br>   Give like a saint<br>   Feel like an angel<br>   Never mind the broken wings<br>   And speak like a picture<br>   Cry like the rain<br>   Shine like the star<br>   As long as the fire remains<br>      </p><p align=\"right\"> -STEFANIE «Someone»</p>             <p></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"My-Creation-And-Participation\"><a href=\"#My-Creation-And-Participation\" class=\"headerlink\" title=\"My Creation And Participation:\"></a><strong>My Creation And Participation:</strong></h3>  \n<table>\n  <tr>\n    <th width=\"50\">地点</th>\n    <th width=\"150\">时间</th>\n    <th width=\"75\">名称</th>\n    <th>描述</th>\n    <th>URL</th>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-03 ~ 2018-03</td>\n    <td>ShareBook</td>\n    <td>刚开始做这个项目的时候，自己连SQL都还没学过，凭着自己的热情和一点Java基础就开始了，在十一月的时候已经完成大部分内容，后续有一些轻微的修补和添加</td>\n    <td>https://github.com/cheng-github/ShareBooks</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2017-12 ~ 2018-01</td>\n    <td>Sniffer</td>\n    <td>TCP/IP协议课程设计，一个网络嗅探器，为其添加了写入文件功能</td>\n    <td>https://github.com/cheng-github/Sniffer</td>\n  </tr>\n  <tr>\n    <td>学校</td>\n    <td>2018-05 ~ 2018-10</td>\n    <td>Hexo博客</td>\n    <td>Start to express!</td>\n    <td>http://swcheng.com</td>\n  </tr>\n  <tr>\n    <td>Teradata</td>\n    <td>2018-07 ~ 2018-12</td>\n    <td>Java Web开发实习</td>\n    <td>第一份实习，让自己更加清楚自己想要的是什么</td>\n    <td>无</td>\n  </tr>\n</table>\n  \n<h4 id=\"Be-optimistic-everything-will-be-good\"><a href=\"#Be-optimistic-everything-will-be-good\" class=\"headerlink\" title=\"\" be=\"\" optimistic,everything=\"\" will=\"\" good\"\"=\"\"></a><center>\"Be optimistic,everything will be good\"</center></h4><p><div align=\"center\"><img src=\"/images/myself.jpg\" height=\"600\">  </div></p>\n<blockquote>\n<p> Sees like a child<br>   Give like a saint<br>   Feel like an angel<br>   Never mind the broken wings<br>   And speak like a picture<br>   Cry like the rain<br>   Shine like the star<br>   As long as the fire remains<br>      </p><p align=\"right\"> -STEFANIE «Someone»</p>             <p></p>\n</blockquote>\n"}],"Post":[{"title":"我是草稿","_content":"","source":"_drafts/我是草稿.md","raw":"---\ntitle: 我是草稿\ntags:  \n---\n","slug":"我是草稿","published":0,"date":"2019-05-19T09:42:05.856Z","updated":"2019-05-19T09:42:05.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzr1cxa00000fo81msvgbup5","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"个人博客开始之旅","date":"2018-10-19T14:24:00.000Z","thumbnail":"http://swcheng.com/images/initial_heart.jpg","banner":"http://swcheng.com/images/initial_heart.jpg","_content":"　　其实一直以来都隐约有想写博客的想法，记得第一篇博客是发表在我的CSDN个人博客上的，内容是如何为Tomcat配置图片访问路径，以及在Eclipse下对Tomcat服务器目录的理解。之所以写那篇博客是因为这个服务器图片的配置困扰自己很长一段时间，好不容易解决了这个大问题，心情十分愉快就想着写篇博客记录下来，以便为存在有与我有一样需求的人提供帮助　　**︿(￣︶￣)︿**  \n<!-- more -->\n　　但写那篇博客的时候自己对Markdown语法所知甚少，所以最终写出来的博客巨丑无比，自己最后看了都觉得辣眼睛　**┐(´∀｀)┌**,所以之后自己的记录就基本存在于自己的YouDao云笔记上了。直到近来开始学习Web开发的相关知识之后，才觉得书写博客其实是一个很有趣的事情，自己不仅可以在个人博客上记录自己学习的技术知识，也可以记录一些生活上等其他的事情。之前在新浪微博上写过几篇，但总觉得新浪微博更是一个大杂烩一样的平台，所以写了两篇之后自己就想要开始搭建自己的个人博客平台。  \n\n　　当有搭建自己的个人博客的想法之后，刚开始的做法是想要通过搭建一个博客学习Node.js的相关知识的，自己也确实这么去做了，刚接触Nodejs的时候自己还顺带学习了MongoDB的知识，当然只是学习了一点皮毛，然后又去了解在Nodejs使用十分广泛的Express框架，以及与MongoDB交互的API等。但实在是当时需要学习的技术知识太多，时间跨度太大，以及由于准备寻找实习的原因，导致最后有始无终。**╮(╯﹏╰）╭**  \n\n　　之后搭建个人博客的事情就一直搁置下来了，由于实习的原因在使用Java开发Web项目，后来自己又想使用Java去搭建一个个人博客，并因此了解到Java有一个非常流行的开源博客项目solo,star的数量达到了5k+,但是自己对于solo的主题却有点不满意，同时这个时候自己又了解到了Hexo Framework,看到hexo的第一眼，马上喜欢上了这个Nodejs博客框架，同时找到了一个自己非常喜欢的主题icarus,于是开始着手学习使用Hexo搭建自己的博客。使用Hexo搭建博客在官网完整的文档和视频说明帮助下，很顺利的完成了一个初步的本地部署并测试基本功能，这时候我就想着如何将这个站点发布提供给其他人访问。想要发布自己的博客站点有很多方式，但对于自己来说主要有下面三个选项:\n- 部署到阿里云服务器\n- 部署到Bandwagon服务器\n- 部署到GithubPages\n\n阿里云服务器对于学生来说特别便宜，大概120RMB/Year,使用阿里云服务器来部署站点的优点是IP地址在国内，访问速度会比较快，缺点是一但自己毕业之后，服务器的价格就不再是之前的价格了，即使是一个比较low的配置也需要不少的费用，下图是我在 ***2018/10/20*** 日去阿里云官网查看的轻量级应用服务器最低配置的价格。\n![](/images/cost_aliyun.PNG \"阿里云服务器价格\")\n\n　　**(；′⌒`)** 低收入人群表示真心付费不起，所以阿里云这个选项就被我给PASS掉了。至于 **[Bandwagon](https://bwh1.net)** 云服务器，个人觉得 **[Bandwagon](https://bwh1.net)** 是一个非常便宜实用的美国云服务器供应商，**[Bandwagon](https://bwh1.net)** 在国内俗称\"搬瓦工\",去年我购买的时候官网还没有被墙，现在已经无法访问了 (╯︵╰),哎这个长城防火墙实在是...反正自己是没法理解设计者的思想...个人觉得这个墙的弊远远大于利，不过这也是自己的个人想法，没有办法去改变现状。回到正题，下图是搬瓦工的官网界面:\n![](/images/cost_bandwagon.PNG)\n\n　　我们可以看到最便宜的价格是19.9$,但是我们可以从网上找一找优惠码，可以优惠几美刀，毕竟1美刀可是相当6块多RMB呀。对于购买方案的选择，有一个不错的网站自己一直在用，地址是[http://banwagong.cn/](http://banwagong.cn/),感觉还不错，其实最低配以及满足我们普通用户的需求了，但是问题在于购买的VPS是否是选择的CN2直连线路，如果是CN2线路的话大概延迟会在 ***150~200ms*** 之间，个人觉得这个延迟时间是可以接受的。如果再为VPS配置Google的BBR拥塞控制的话，还可以降低一部分延迟，虽然降低的延迟不是很多，但毕竟实在是距离太远，能够做到降低一部分延迟已经很不错了。  \n\n　　自己平时使用 **Bangwagong** 主要是用于配置SSR服务，在自己摸不着头脑的时候用来Google寻找答案的，或者去查看一些官方站点的Doc，也偶尔看看Youtube视频啦 ٩(๑❛ᴗ❛๑)۶ 。所以这时候刚好碰上了部署站点的需求，所以就想这不是一举两得吗?不仅可以用来满足自己的翻墙需求还可以用来发布自己的博客，于是自己就开始为Hexo配置环境，目标主机是Cent OS7,自己也是倒腾一段时间才终于将所有需要配置的东西都配置好。但是当我在80端口运行自己的nginx服务之后，在自己的主机上居然访问不到nginx的页面？开始自己以为是某个地方配置的不对，后来想到可能是墙的锅，于是打开代理，打开代理之后顺利访问到了nginx默认页面，哎...这时候我的心情是复杂的...所有努力付诸东流\n![](/images/timg.jpg \"心情复杂\")\n\n　　既然抵挡不过墙的力量，只能另想办法了，那么只剩下最后一个办法了，使用GitHubPages提供的云空间来发布自己的博客了。对于GithubPages这里就不做过多说明了，使用最多的方式是GithubPages和 [Jekyll](https://jekyllrb.com/) 来部署自己的个人站点，[Jekyll的主题](http://jekyllthemes.org/)十分丰富，如果有兴趣可以去了解一下。我选择的是 **Git本地客户端** + **Node.js** + **Hexo Framework** + **Icarus** + **GithubPages** + **Atom** 的方式去编写发布自己的个人博客。em...对于一个新人来说搭建这样一个完整的环境还是不太容易的...因为有太多没有接触的东西，但幸运的是Hexo的官网的文档十分简洁详细，并且之前自己使用过一点Nodejs,所以本地部署测试的过程还算比较顺利。  \n\n　　接下来就是如何发布自己的站点了，使用Hexo部署的deploy命令部署十分方便，但是这个命令的缺点是会将之前repository里的内容全部都干掉重新生成新的静态文件，这样的会导致自己在repository的CNAME和README文件都会被删除，这是自己没法忍受的缺点，所以只能放弃这个命令，转而自己使用Git的版本控制去手动更新新的文件。但是之前自己写的代码要么是通过IDE里自带的VCS要么是使用Github Desktop同步到Github上，感觉图形界面虽然操作方便但是让我对Git的工作方式一点都不了解，还是停留在无脑commit publish状态，想想自己使用了这么长时间的版本控制只会这两个基本的命令实在是惭愧呀。于是下定决心好好到[Git的官网](https://git-scm.com/)去学习关于版本控制的知识，Git官网有一本可以免费下载的[Git Pro](https://git-scm.com/book/en/v2)，提供多国语言翻译支持，自己就Download到kindle上平时上下班在公交车上阅读，这本书的详细叙述了版本控制的发展历史以及对比了Git与其它版本控制的区别，以及Git的所有使用情景，是一本十分优秀的书籍，很值得推荐一看。在将这本书啃完了前几章之后，就可以很轻松的使用Git command去管理Github的远程仓库了。  \n\n　　在我的cheng-github.github.io仓库下，我建立了两个分支，master和hexo。使用master分支存放生成的如html、css、images、js等静态页面文件,使用hexo分支存放本地测试的hexo文件，用作备份的需要。如果需要将原来的Gitpages的默认访问域名修改为个人域名可以进行相关配置，具体配置可以自行Google或者Baidu。  \n\n　　至此博客部署发布算是完成了，ヾ(๑╹◡╹)ﾉ\"。希望自己不要忘记写博客的初心，也不要忘记当初决定学习计算机的初心，故而使用封面的图片用于提醒自己。em...最想对自己说...\n\n　　***Follow your own voice,尽情去追逐自己想要的一切吧，即使跌倒也不要灰心，别让你眼底的光芒黯淡，that's really alive.***  \n\n\n\n　　\n\n\n\n\n\n\n\n\n\n\n\n　　\n","source":"_posts/2018-10-19-博客开篇.md","raw":"---\nlayout: \"post\"\ntitle: \"个人博客开始之旅\"\ndate: \"2018-10-19 22:24\"\ncategories:\n- [START]\n- [LIFE]\ntags:\n- FEELING\nthumbnail: http://swcheng.com/images/initial_heart.jpg\nbanner: http://swcheng.com/images/initial_heart.jpg\n---\n　　其实一直以来都隐约有想写博客的想法，记得第一篇博客是发表在我的CSDN个人博客上的，内容是如何为Tomcat配置图片访问路径，以及在Eclipse下对Tomcat服务器目录的理解。之所以写那篇博客是因为这个服务器图片的配置困扰自己很长一段时间，好不容易解决了这个大问题，心情十分愉快就想着写篇博客记录下来，以便为存在有与我有一样需求的人提供帮助　　**︿(￣︶￣)︿**  \n<!-- more -->\n　　但写那篇博客的时候自己对Markdown语法所知甚少，所以最终写出来的博客巨丑无比，自己最后看了都觉得辣眼睛　**┐(´∀｀)┌**,所以之后自己的记录就基本存在于自己的YouDao云笔记上了。直到近来开始学习Web开发的相关知识之后，才觉得书写博客其实是一个很有趣的事情，自己不仅可以在个人博客上记录自己学习的技术知识，也可以记录一些生活上等其他的事情。之前在新浪微博上写过几篇，但总觉得新浪微博更是一个大杂烩一样的平台，所以写了两篇之后自己就想要开始搭建自己的个人博客平台。  \n\n　　当有搭建自己的个人博客的想法之后，刚开始的做法是想要通过搭建一个博客学习Node.js的相关知识的，自己也确实这么去做了，刚接触Nodejs的时候自己还顺带学习了MongoDB的知识，当然只是学习了一点皮毛，然后又去了解在Nodejs使用十分广泛的Express框架，以及与MongoDB交互的API等。但实在是当时需要学习的技术知识太多，时间跨度太大，以及由于准备寻找实习的原因，导致最后有始无终。**╮(╯﹏╰）╭**  \n\n　　之后搭建个人博客的事情就一直搁置下来了，由于实习的原因在使用Java开发Web项目，后来自己又想使用Java去搭建一个个人博客，并因此了解到Java有一个非常流行的开源博客项目solo,star的数量达到了5k+,但是自己对于solo的主题却有点不满意，同时这个时候自己又了解到了Hexo Framework,看到hexo的第一眼，马上喜欢上了这个Nodejs博客框架，同时找到了一个自己非常喜欢的主题icarus,于是开始着手学习使用Hexo搭建自己的博客。使用Hexo搭建博客在官网完整的文档和视频说明帮助下，很顺利的完成了一个初步的本地部署并测试基本功能，这时候我就想着如何将这个站点发布提供给其他人访问。想要发布自己的博客站点有很多方式，但对于自己来说主要有下面三个选项:\n- 部署到阿里云服务器\n- 部署到Bandwagon服务器\n- 部署到GithubPages\n\n阿里云服务器对于学生来说特别便宜，大概120RMB/Year,使用阿里云服务器来部署站点的优点是IP地址在国内，访问速度会比较快，缺点是一但自己毕业之后，服务器的价格就不再是之前的价格了，即使是一个比较low的配置也需要不少的费用，下图是我在 ***2018/10/20*** 日去阿里云官网查看的轻量级应用服务器最低配置的价格。\n![](/images/cost_aliyun.PNG \"阿里云服务器价格\")\n\n　　**(；′⌒`)** 低收入人群表示真心付费不起，所以阿里云这个选项就被我给PASS掉了。至于 **[Bandwagon](https://bwh1.net)** 云服务器，个人觉得 **[Bandwagon](https://bwh1.net)** 是一个非常便宜实用的美国云服务器供应商，**[Bandwagon](https://bwh1.net)** 在国内俗称\"搬瓦工\",去年我购买的时候官网还没有被墙，现在已经无法访问了 (╯︵╰),哎这个长城防火墙实在是...反正自己是没法理解设计者的思想...个人觉得这个墙的弊远远大于利，不过这也是自己的个人想法，没有办法去改变现状。回到正题，下图是搬瓦工的官网界面:\n![](/images/cost_bandwagon.PNG)\n\n　　我们可以看到最便宜的价格是19.9$,但是我们可以从网上找一找优惠码，可以优惠几美刀，毕竟1美刀可是相当6块多RMB呀。对于购买方案的选择，有一个不错的网站自己一直在用，地址是[http://banwagong.cn/](http://banwagong.cn/),感觉还不错，其实最低配以及满足我们普通用户的需求了，但是问题在于购买的VPS是否是选择的CN2直连线路，如果是CN2线路的话大概延迟会在 ***150~200ms*** 之间，个人觉得这个延迟时间是可以接受的。如果再为VPS配置Google的BBR拥塞控制的话，还可以降低一部分延迟，虽然降低的延迟不是很多，但毕竟实在是距离太远，能够做到降低一部分延迟已经很不错了。  \n\n　　自己平时使用 **Bangwagong** 主要是用于配置SSR服务，在自己摸不着头脑的时候用来Google寻找答案的，或者去查看一些官方站点的Doc，也偶尔看看Youtube视频啦 ٩(๑❛ᴗ❛๑)۶ 。所以这时候刚好碰上了部署站点的需求，所以就想这不是一举两得吗?不仅可以用来满足自己的翻墙需求还可以用来发布自己的博客，于是自己就开始为Hexo配置环境，目标主机是Cent OS7,自己也是倒腾一段时间才终于将所有需要配置的东西都配置好。但是当我在80端口运行自己的nginx服务之后，在自己的主机上居然访问不到nginx的页面？开始自己以为是某个地方配置的不对，后来想到可能是墙的锅，于是打开代理，打开代理之后顺利访问到了nginx默认页面，哎...这时候我的心情是复杂的...所有努力付诸东流\n![](/images/timg.jpg \"心情复杂\")\n\n　　既然抵挡不过墙的力量，只能另想办法了，那么只剩下最后一个办法了，使用GitHubPages提供的云空间来发布自己的博客了。对于GithubPages这里就不做过多说明了，使用最多的方式是GithubPages和 [Jekyll](https://jekyllrb.com/) 来部署自己的个人站点，[Jekyll的主题](http://jekyllthemes.org/)十分丰富，如果有兴趣可以去了解一下。我选择的是 **Git本地客户端** + **Node.js** + **Hexo Framework** + **Icarus** + **GithubPages** + **Atom** 的方式去编写发布自己的个人博客。em...对于一个新人来说搭建这样一个完整的环境还是不太容易的...因为有太多没有接触的东西，但幸运的是Hexo的官网的文档十分简洁详细，并且之前自己使用过一点Nodejs,所以本地部署测试的过程还算比较顺利。  \n\n　　接下来就是如何发布自己的站点了，使用Hexo部署的deploy命令部署十分方便，但是这个命令的缺点是会将之前repository里的内容全部都干掉重新生成新的静态文件，这样的会导致自己在repository的CNAME和README文件都会被删除，这是自己没法忍受的缺点，所以只能放弃这个命令，转而自己使用Git的版本控制去手动更新新的文件。但是之前自己写的代码要么是通过IDE里自带的VCS要么是使用Github Desktop同步到Github上，感觉图形界面虽然操作方便但是让我对Git的工作方式一点都不了解，还是停留在无脑commit publish状态，想想自己使用了这么长时间的版本控制只会这两个基本的命令实在是惭愧呀。于是下定决心好好到[Git的官网](https://git-scm.com/)去学习关于版本控制的知识，Git官网有一本可以免费下载的[Git Pro](https://git-scm.com/book/en/v2)，提供多国语言翻译支持，自己就Download到kindle上平时上下班在公交车上阅读，这本书的详细叙述了版本控制的发展历史以及对比了Git与其它版本控制的区别，以及Git的所有使用情景，是一本十分优秀的书籍，很值得推荐一看。在将这本书啃完了前几章之后，就可以很轻松的使用Git command去管理Github的远程仓库了。  \n\n　　在我的cheng-github.github.io仓库下，我建立了两个分支，master和hexo。使用master分支存放生成的如html、css、images、js等静态页面文件,使用hexo分支存放本地测试的hexo文件，用作备份的需要。如果需要将原来的Gitpages的默认访问域名修改为个人域名可以进行相关配置，具体配置可以自行Google或者Baidu。  \n\n　　至此博客部署发布算是完成了，ヾ(๑╹◡╹)ﾉ\"。希望自己不要忘记写博客的初心，也不要忘记当初决定学习计算机的初心，故而使用封面的图片用于提醒自己。em...最想对自己说...\n\n　　***Follow your own voice,尽情去追逐自己想要的一切吧，即使跌倒也不要灰心，别让你眼底的光芒黯淡，that's really alive.***  \n\n\n\n　　\n\n\n\n\n\n\n\n\n\n\n\n　　\n","slug":"2018-10-19-博客开篇","published":1,"updated":"2019-05-19T10:21:01.824Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxa50002fo81zgdrm5nr","content":"<p>　　其实一直以来都隐约有想写博客的想法，记得第一篇博客是发表在我的CSDN个人博客上的，内容是如何为Tomcat配置图片访问路径，以及在Eclipse下对Tomcat服务器目录的理解。之所以写那篇博客是因为这个服务器图片的配置困扰自己很长一段时间，好不容易解决了这个大问题，心情十分愉快就想着写篇博客记录下来，以便为存在有与我有一样需求的人提供帮助　　<strong>︿(￣︶￣)︿</strong><br><a id=\"more\"></a><br>　　但写那篇博客的时候自己对Markdown语法所知甚少，所以最终写出来的博客巨丑无比，自己最后看了都觉得辣眼睛　<strong>┐(´∀｀)┌</strong>,所以之后自己的记录就基本存在于自己的YouDao云笔记上了。直到近来开始学习Web开发的相关知识之后，才觉得书写博客其实是一个很有趣的事情，自己不仅可以在个人博客上记录自己学习的技术知识，也可以记录一些生活上等其他的事情。之前在新浪微博上写过几篇，但总觉得新浪微博更是一个大杂烩一样的平台，所以写了两篇之后自己就想要开始搭建自己的个人博客平台。  </p>\n<p>　　当有搭建自己的个人博客的想法之后，刚开始的做法是想要通过搭建一个博客学习Node.js的相关知识的，自己也确实这么去做了，刚接触Nodejs的时候自己还顺带学习了MongoDB的知识，当然只是学习了一点皮毛，然后又去了解在Nodejs使用十分广泛的Express框架，以及与MongoDB交互的API等。但实在是当时需要学习的技术知识太多，时间跨度太大，以及由于准备寻找实习的原因，导致最后有始无终。<strong>╮(╯﹏╰）╭</strong>  </p>\n<p>　　之后搭建个人博客的事情就一直搁置下来了，由于实习的原因在使用Java开发Web项目，后来自己又想使用Java去搭建一个个人博客，并因此了解到Java有一个非常流行的开源博客项目solo,star的数量达到了5k+,但是自己对于solo的主题却有点不满意，同时这个时候自己又了解到了Hexo Framework,看到hexo的第一眼，马上喜欢上了这个Nodejs博客框架，同时找到了一个自己非常喜欢的主题icarus,于是开始着手学习使用Hexo搭建自己的博客。使用Hexo搭建博客在官网完整的文档和视频说明帮助下，很顺利的完成了一个初步的本地部署并测试基本功能，这时候我就想着如何将这个站点发布提供给其他人访问。想要发布自己的博客站点有很多方式，但对于自己来说主要有下面三个选项:</p>\n<ul>\n<li>部署到阿里云服务器</li>\n<li>部署到Bandwagon服务器</li>\n<li>部署到GithubPages</li>\n</ul>\n<p>阿里云服务器对于学生来说特别便宜，大概120RMB/Year,使用阿里云服务器来部署站点的优点是IP地址在国内，访问速度会比较快，缺点是一但自己毕业之后，服务器的价格就不再是之前的价格了，即使是一个比较low的配置也需要不少的费用，下图是我在 <strong><em>2018/10/20</em></strong> 日去阿里云官网查看的轻量级应用服务器最低配置的价格。<br><img src=\"/images/cost_aliyun.PNG\" alt=\"\" title=\"阿里云服务器价格\"></p>\n<p>　　<strong>(；′⌒`)</strong> 低收入人群表示真心付费不起，所以阿里云这个选项就被我给PASS掉了。至于 <strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 云服务器，个人觉得 <strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 是一个非常便宜实用的美国云服务器供应商，<strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 在国内俗称”搬瓦工”,去年我购买的时候官网还没有被墙，现在已经无法访问了 (╯︵╰),哎这个长城防火墙实在是…反正自己是没法理解设计者的思想…个人觉得这个墙的弊远远大于利，不过这也是自己的个人想法，没有办法去改变现状。回到正题，下图是搬瓦工的官网界面:<br><img src=\"/images/cost_bandwagon.PNG\" alt=\"\"></p>\n<p>　　我们可以看到最便宜的价格是19.9$,但是我们可以从网上找一找优惠码，可以优惠几美刀，毕竟1美刀可是相当6块多RMB呀。对于购买方案的选择，有一个不错的网站自己一直在用，地址是<a href=\"http://banwagong.cn/\" target=\"_blank\" rel=\"noopener\">http://banwagong.cn/</a>,感觉还不错，其实最低配以及满足我们普通用户的需求了，但是问题在于购买的VPS是否是选择的CN2直连线路，如果是CN2线路的话大概延迟会在 <strong><em>150~200ms</em></strong> 之间，个人觉得这个延迟时间是可以接受的。如果再为VPS配置Google的BBR拥塞控制的话，还可以降低一部分延迟，虽然降低的延迟不是很多，但毕竟实在是距离太远，能够做到降低一部分延迟已经很不错了。  </p>\n<p>　　自己平时使用 <strong>Bangwagong</strong> 主要是用于配置SSR服务，在自己摸不着头脑的时候用来Google寻找答案的，或者去查看一些官方站点的Doc，也偶尔看看Youtube视频啦 ٩(๑❛ᴗ❛๑)۶ 。所以这时候刚好碰上了部署站点的需求，所以就想这不是一举两得吗?不仅可以用来满足自己的翻墙需求还可以用来发布自己的博客，于是自己就开始为Hexo配置环境，目标主机是Cent OS7,自己也是倒腾一段时间才终于将所有需要配置的东西都配置好。但是当我在80端口运行自己的nginx服务之后，在自己的主机上居然访问不到nginx的页面？开始自己以为是某个地方配置的不对，后来想到可能是墙的锅，于是打开代理，打开代理之后顺利访问到了nginx默认页面，哎…这时候我的心情是复杂的…所有努力付诸东流<br><img src=\"/images/timg.jpg\" alt=\"\" title=\"心情复杂\"></p>\n<p>　　既然抵挡不过墙的力量，只能另想办法了，那么只剩下最后一个办法了，使用GitHubPages提供的云空间来发布自己的博客了。对于GithubPages这里就不做过多说明了，使用最多的方式是GithubPages和 <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">Jekyll</a> 来部署自己的个人站点，<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll的主题</a>十分丰富，如果有兴趣可以去了解一下。我选择的是 <strong>Git本地客户端</strong> + <strong>Node.js</strong> + <strong>Hexo Framework</strong> + <strong>Icarus</strong> + <strong>GithubPages</strong> + <strong>Atom</strong> 的方式去编写发布自己的个人博客。em…对于一个新人来说搭建这样一个完整的环境还是不太容易的…因为有太多没有接触的东西，但幸运的是Hexo的官网的文档十分简洁详细，并且之前自己使用过一点Nodejs,所以本地部署测试的过程还算比较顺利。  </p>\n<p>　　接下来就是如何发布自己的站点了，使用Hexo部署的deploy命令部署十分方便，但是这个命令的缺点是会将之前repository里的内容全部都干掉重新生成新的静态文件，这样的会导致自己在repository的CNAME和README文件都会被删除，这是自己没法忍受的缺点，所以只能放弃这个命令，转而自己使用Git的版本控制去手动更新新的文件。但是之前自己写的代码要么是通过IDE里自带的VCS要么是使用Github Desktop同步到Github上，感觉图形界面虽然操作方便但是让我对Git的工作方式一点都不了解，还是停留在无脑commit publish状态，想想自己使用了这么长时间的版本控制只会这两个基本的命令实在是惭愧呀。于是下定决心好好到<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git的官网</a>去学习关于版本控制的知识，Git官网有一本可以免费下载的<a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Git Pro</a>，提供多国语言翻译支持，自己就Download到kindle上平时上下班在公交车上阅读，这本书的详细叙述了版本控制的发展历史以及对比了Git与其它版本控制的区别，以及Git的所有使用情景，是一本十分优秀的书籍，很值得推荐一看。在将这本书啃完了前几章之后，就可以很轻松的使用Git command去管理Github的远程仓库了。  </p>\n<p>　　在我的cheng-github.github.io仓库下，我建立了两个分支，master和hexo。使用master分支存放生成的如html、css、images、js等静态页面文件,使用hexo分支存放本地测试的hexo文件，用作备份的需要。如果需要将原来的Gitpages的默认访问域名修改为个人域名可以进行相关配置，具体配置可以自行Google或者Baidu。  </p>\n<p>　　至此博客部署发布算是完成了，ヾ(๑╹◡╹)ﾉ”。希望自己不要忘记写博客的初心，也不要忘记当初决定学习计算机的初心，故而使用封面的图片用于提醒自己。em…最想对自己说…</p>\n<p>　　<strong><em>Follow your own voice,尽情去追逐自己想要的一切吧，即使跌倒也不要灰心，别让你眼底的光芒黯淡，that’s really alive.</em></strong>  </p>\n<p>　　</p>\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<p>　　其实一直以来都隐约有想写博客的想法，记得第一篇博客是发表在我的CSDN个人博客上的，内容是如何为Tomcat配置图片访问路径，以及在Eclipse下对Tomcat服务器目录的理解。之所以写那篇博客是因为这个服务器图片的配置困扰自己很长一段时间，好不容易解决了这个大问题，心情十分愉快就想着写篇博客记录下来，以便为存在有与我有一样需求的人提供帮助　　<strong>︿(￣︶￣)︿</strong><br>","more":"<br>　　但写那篇博客的时候自己对Markdown语法所知甚少，所以最终写出来的博客巨丑无比，自己最后看了都觉得辣眼睛　<strong>┐(´∀｀)┌</strong>,所以之后自己的记录就基本存在于自己的YouDao云笔记上了。直到近来开始学习Web开发的相关知识之后，才觉得书写博客其实是一个很有趣的事情，自己不仅可以在个人博客上记录自己学习的技术知识，也可以记录一些生活上等其他的事情。之前在新浪微博上写过几篇，但总觉得新浪微博更是一个大杂烩一样的平台，所以写了两篇之后自己就想要开始搭建自己的个人博客平台。  </p>\n<p>　　当有搭建自己的个人博客的想法之后，刚开始的做法是想要通过搭建一个博客学习Node.js的相关知识的，自己也确实这么去做了，刚接触Nodejs的时候自己还顺带学习了MongoDB的知识，当然只是学习了一点皮毛，然后又去了解在Nodejs使用十分广泛的Express框架，以及与MongoDB交互的API等。但实在是当时需要学习的技术知识太多，时间跨度太大，以及由于准备寻找实习的原因，导致最后有始无终。<strong>╮(╯﹏╰）╭</strong>  </p>\n<p>　　之后搭建个人博客的事情就一直搁置下来了，由于实习的原因在使用Java开发Web项目，后来自己又想使用Java去搭建一个个人博客，并因此了解到Java有一个非常流行的开源博客项目solo,star的数量达到了5k+,但是自己对于solo的主题却有点不满意，同时这个时候自己又了解到了Hexo Framework,看到hexo的第一眼，马上喜欢上了这个Nodejs博客框架，同时找到了一个自己非常喜欢的主题icarus,于是开始着手学习使用Hexo搭建自己的博客。使用Hexo搭建博客在官网完整的文档和视频说明帮助下，很顺利的完成了一个初步的本地部署并测试基本功能，这时候我就想着如何将这个站点发布提供给其他人访问。想要发布自己的博客站点有很多方式，但对于自己来说主要有下面三个选项:</p>\n<ul>\n<li>部署到阿里云服务器</li>\n<li>部署到Bandwagon服务器</li>\n<li>部署到GithubPages</li>\n</ul>\n<p>阿里云服务器对于学生来说特别便宜，大概120RMB/Year,使用阿里云服务器来部署站点的优点是IP地址在国内，访问速度会比较快，缺点是一但自己毕业之后，服务器的价格就不再是之前的价格了，即使是一个比较low的配置也需要不少的费用，下图是我在 <strong><em>2018/10/20</em></strong> 日去阿里云官网查看的轻量级应用服务器最低配置的价格。<br><img src=\"/images/cost_aliyun.PNG\" alt=\"\" title=\"阿里云服务器价格\"></p>\n<p>　　<strong>(；′⌒`)</strong> 低收入人群表示真心付费不起，所以阿里云这个选项就被我给PASS掉了。至于 <strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 云服务器，个人觉得 <strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 是一个非常便宜实用的美国云服务器供应商，<strong><a href=\"https://bwh1.net\" target=\"_blank\" rel=\"noopener\">Bandwagon</a></strong> 在国内俗称”搬瓦工”,去年我购买的时候官网还没有被墙，现在已经无法访问了 (╯︵╰),哎这个长城防火墙实在是…反正自己是没法理解设计者的思想…个人觉得这个墙的弊远远大于利，不过这也是自己的个人想法，没有办法去改变现状。回到正题，下图是搬瓦工的官网界面:<br><img src=\"/images/cost_bandwagon.PNG\" alt=\"\"></p>\n<p>　　我们可以看到最便宜的价格是19.9$,但是我们可以从网上找一找优惠码，可以优惠几美刀，毕竟1美刀可是相当6块多RMB呀。对于购买方案的选择，有一个不错的网站自己一直在用，地址是<a href=\"http://banwagong.cn/\" target=\"_blank\" rel=\"noopener\">http://banwagong.cn/</a>,感觉还不错，其实最低配以及满足我们普通用户的需求了，但是问题在于购买的VPS是否是选择的CN2直连线路，如果是CN2线路的话大概延迟会在 <strong><em>150~200ms</em></strong> 之间，个人觉得这个延迟时间是可以接受的。如果再为VPS配置Google的BBR拥塞控制的话，还可以降低一部分延迟，虽然降低的延迟不是很多，但毕竟实在是距离太远，能够做到降低一部分延迟已经很不错了。  </p>\n<p>　　自己平时使用 <strong>Bangwagong</strong> 主要是用于配置SSR服务，在自己摸不着头脑的时候用来Google寻找答案的，或者去查看一些官方站点的Doc，也偶尔看看Youtube视频啦 ٩(๑❛ᴗ❛๑)۶ 。所以这时候刚好碰上了部署站点的需求，所以就想这不是一举两得吗?不仅可以用来满足自己的翻墙需求还可以用来发布自己的博客，于是自己就开始为Hexo配置环境，目标主机是Cent OS7,自己也是倒腾一段时间才终于将所有需要配置的东西都配置好。但是当我在80端口运行自己的nginx服务之后，在自己的主机上居然访问不到nginx的页面？开始自己以为是某个地方配置的不对，后来想到可能是墙的锅，于是打开代理，打开代理之后顺利访问到了nginx默认页面，哎…这时候我的心情是复杂的…所有努力付诸东流<br><img src=\"/images/timg.jpg\" alt=\"\" title=\"心情复杂\"></p>\n<p>　　既然抵挡不过墙的力量，只能另想办法了，那么只剩下最后一个办法了，使用GitHubPages提供的云空间来发布自己的博客了。对于GithubPages这里就不做过多说明了，使用最多的方式是GithubPages和 <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">Jekyll</a> 来部署自己的个人站点，<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll的主题</a>十分丰富，如果有兴趣可以去了解一下。我选择的是 <strong>Git本地客户端</strong> + <strong>Node.js</strong> + <strong>Hexo Framework</strong> + <strong>Icarus</strong> + <strong>GithubPages</strong> + <strong>Atom</strong> 的方式去编写发布自己的个人博客。em…对于一个新人来说搭建这样一个完整的环境还是不太容易的…因为有太多没有接触的东西，但幸运的是Hexo的官网的文档十分简洁详细，并且之前自己使用过一点Nodejs,所以本地部署测试的过程还算比较顺利。  </p>\n<p>　　接下来就是如何发布自己的站点了，使用Hexo部署的deploy命令部署十分方便，但是这个命令的缺点是会将之前repository里的内容全部都干掉重新生成新的静态文件，这样的会导致自己在repository的CNAME和README文件都会被删除，这是自己没法忍受的缺点，所以只能放弃这个命令，转而自己使用Git的版本控制去手动更新新的文件。但是之前自己写的代码要么是通过IDE里自带的VCS要么是使用Github Desktop同步到Github上，感觉图形界面虽然操作方便但是让我对Git的工作方式一点都不了解，还是停留在无脑commit publish状态，想想自己使用了这么长时间的版本控制只会这两个基本的命令实在是惭愧呀。于是下定决心好好到<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git的官网</a>去学习关于版本控制的知识，Git官网有一本可以免费下载的<a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Git Pro</a>，提供多国语言翻译支持，自己就Download到kindle上平时上下班在公交车上阅读，这本书的详细叙述了版本控制的发展历史以及对比了Git与其它版本控制的区别，以及Git的所有使用情景，是一本十分优秀的书籍，很值得推荐一看。在将这本书啃完了前几章之后，就可以很轻松的使用Git command去管理Github的远程仓库了。  </p>\n<p>　　在我的cheng-github.github.io仓库下，我建立了两个分支，master和hexo。使用master分支存放生成的如html、css、images、js等静态页面文件,使用hexo分支存放本地测试的hexo文件，用作备份的需要。如果需要将原来的Gitpages的默认访问域名修改为个人域名可以进行相关配置，具体配置可以自行Google或者Baidu。  </p>\n<p>　　至此博客部署发布算是完成了，ヾ(๑╹◡╹)ﾉ”。希望自己不要忘记写博客的初心，也不要忘记当初决定学习计算机的初心，故而使用封面的图片用于提醒自己。em…最想对自己说…</p>\n<p>　　<strong><em>Follow your own voice,尽情去追逐自己想要的一切吧，即使跌倒也不要灰心，别让你眼底的光芒黯淡，that’s really alive.</em></strong>  </p>\n<p>　　</p>\n<p>　　</p>"},{"layout":"post","title":"求最大子序列和的四种实现方式","date":"2018-11-18T08:20:00.000Z","mathjax":true,"_content":"　　在总结求最大子序列和的四种实现方式之前想谈谈为什么自己想要重新学习数据结构。之前在大二下学期的时候已经学过了数据结构这个课程，依稀记得老师一直提醒我们数据结构是计算机的核心课程，并且对于考研或者是找工作面试都是很重要的，特地提醒我们要重视这门课程，希望我们好好学习数据结构。当时自己在上数据结构这个课程之前已经使用过基本的数据结构-链表完成了大一下学期的一个C语言课程设计，记得那是自己使用C语言写的一个程序，虽然仅有一百多行，显示界面也只是一个小黑框，但完成的时候特别激动，因为那是自己真正意义上动手写的第一个完整程序。本来还想找到原来的代码运行一下，但发现自己前一段时间为了清理笔记本空间已经将自己之前写的关于C的代码都删除了** ╮(╯﹏╰）╭**\n<!-- more -->\n　　em....一个订餐管理程序，有显示当前订单列表、添加订餐信息、删除订餐信息、修改订餐信息、根据价格为订单排序、将已有订餐信息写入文件等几个简单的小功能，尤其是添加写入到文件这个模块的时候，自己遇到不知道如何解决的一个地方一直没法正常写入到文件，在CSDN上提问然后得到了一位前辈的指教才顺利的完成的这个功能，thanks　　( • ̀ω•́ )✧ 。这个程序当时给老师展示之后最后拿了93分的成绩，自己对于成绩倒不是特别在意，但这也是老师对自己的一种认可吧，更让自己开心的是探索的过程。那是自己第一次接触数据结构，被链表折磨的死去活来，去图书馆借书学习链表，一本看不懂就再借另外一本，读了好几本不同书籍关于链表的内容才开始慢慢理解它，至今还能回忆起当初冥思苦想的那几天。**(*￣∇￣*)** \n\n　　不知不觉又扯了这么远...回到正题，一个学期学习数据结构的时间肯定是不够的，更何况自己当时还并没有花特别多的时间去钻研数据结构，对于每种数据结构都仅仅是简单按照书上的例子实现了一遍，到了现在该忘都忘的差不多了...(╯︵╰) 但真正让我决定重新学习数据结构的原因不是自己想要温习知识，之前面试阿里的时候，面试结束的面试官问我有什么问题想要问他的，我觉得自己面试过程中回答的不好，所以就问面试官对于自己的学习有什么建议没有。面试官就说，培养一个掌握基本开发技能的普通程序员很容易，但数据结构是十分重要的，理解技术的原理也是十分重要的，还讲violate的原理给我听。加上之前在公司的季度技术交流会上，看见某位大佬秀了一波关于数据库方面的数据结构的知识，当时自己真是热血沸腾的感觉，并且那一刻真正的意识到是时候该找时间好好的学习数据结构了，于是才选择了**《数据结构与算法分析　Java语言描述》-Mark Allen Weiss**这本书，并计划一边学习这本书一边写博客记录学习过的内容。最后说一下自己的粗见吧，数据结构可能暂时在开发小型程序的作用还不是特别明显，搭建好开发环境之后，只要对某种语言比较熟练就可以做到业务上的实现，但是如果涉及到大型的应用的构建，当应用吞吐量很大的时候，一个小的细节对于应用整体的性能的作用就会比较明显了，这时候我们不仅需要了解使用到的技术的原理，而且需要更有技巧的编程，用更少的执行时间去完成相同的任务，相反而不是去粗暴的使用蛮力算法实现需求。所以从长远的角度来看，熟练掌握数据结构是十分必要的。  \n\n　　最大子序列和，就是指在一个元素类型为整型的数组中，求其中连续的一个序列和的最大值，这个序列的开始下标可以是数组中的任意位置。如果我们按照列举所有可能情况的思考方式编写代码:  \n- 第一种方式   \n{% codeblock  lang:java %}\n  public static void main(String[] args){\n      int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n      System.out.println(maxSubSum1(a));\n  }\n\n  /**\n   * 最大子序列和,最简单直接的求最大子序和\n   * @return\n   */\n  private static int maxSubSum1(int[] a){\n      int maxSum = 0;\n\n      for (int i = 0; i < a.length; i++) {\n          for (int j = i; j < a.length; j++) {\n              int thisSum = 0;\n\n              for (int k = i; k <= j; k++) {\n                  thisSum += a[k];\n              }\n              if(thisSum > maxSum){\n                  maxSum = thisSum;\n              }\n          }\n      }\n\n      return maxSum;\n  }\n  /*  输出结果:\n      50\n  */\n{% endcodeblock %}\n　　很明显，这里的最大子序列和为前五个元素的和。下面我们分析一下该算法的时间复杂度。假设我们输入的数组的长度为***N***，忽略声明、调用方法、返回值的开销，仅关注嵌套的for循环所占用的时间，那么所耗费的时间为:　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $  \n\n　　对该表达式从里到外求和:  \n$$ \\displaystyle \\sum_{ k=i }^j1=j-i+1 $$\n　　继续从里往外求和:  \n$$ \\displaystyle \\sum_{ j=i }^{ N-1 }( j-i+1 )=\\dfrac{( N-i+1 )( N-i )}{2} $$\n　　所以有:  \n\n　　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $　  \n\n=　$ \\displaystyle \\sum_{ i=0 }^{ N-1 }{\\dfrac{( N-i+1 )( N-i )}{2}} $  \n\n=　$ \\displaystyle \\sum_{ i=1 }^{ N }{\\dfrac{( N-i+2 )( N-i+1 )}{2}} $  \n\n=　$ \\displaystyle \\sum_{ i=1 }^{ N }{ ( \\dfrac{i^2}{2} - \\dfrac{ 3i + 2iN }{ 2 } + \\dfrac{N^2 + 3N + 2 }{ 2 } ) } $    \n\n=　$ \\displaystyle \\dfrac12 \\sum_{ i=1 }^{ N }{ i^2 } - (\\dfrac{ 3+2N }{ 2 })\\sum_{ i=1 }^{ N }{ i } + (\\dfrac{N^2 + 3N + 2}{ 2 })\\sum_{ i=1 }^{ N }{ 1 } $    \n\n=　$ \\displaystyle \\dfrac12 \\dfrac{ N(N+1)(N+2) }{6} - (\\dfrac{ 3+2N }{ 2 })\\dfrac{ N(N+1) }{2} + \\dfrac{N^2 + 3N + 2}{ 2 }N  $  \n\n=　$ \\displaystyle  \\dfrac{ N(N+1)(N+2) }{ 6 } $  \n\n　　经计算可知该算法的时间复杂度为$ O(N^3) $，其实我们没有必要通过三层的for循环穷举所有的子序列的和，上面的第三层的for循环的计算明显存在冗余，仅仅两个for循环就可以满足求和需求:  \n- 第二种方式  \n{% codeblock  lang:java %}\n    public static void main(String[] args){\n            int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n            System.out.println(maxSubSum2(a));\n    }\n\n    private static int maxSubSum2(int[] a){\n        int maxSum = 0;\n        for (int i = 0; i < a.length; i++) {\n            int thisSum = 0;\n            for (int j = i; j < a.length; j++) {\n                thisSum += a[j];\n\n                if(thisSum > maxSum){\n                    maxSum = thisSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n    /*  输出结果:\n        50\n    */\n{% endcodeblock %}  \n\n　　仅关注嵌套的for循环所占用的时间，那么所耗费的时间最多为: $ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $\n\n　　对该表达式从里到外进行求和计算:\n　　$ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $　  \n\n=　$ \\displaystyle 3\\sum_{ i=0 }^{ N-1 }(N-i) $\n\n=　$ \\displaystyle 3\\sum_{ i=1 }^{ N }( N-i+1 ) $\n\n=　$ \\displaystyle \\dfrac{ 3N(N+1) }{ 2 } $\n\n　　计算知第二种方法的时间复杂度为$ O(N^2) $。第二种方式避免了单独计算每个子序列结果的值，在第一种方式里，当第二层循环的j取最大值的时候，最里面的循环累加的结果包含了j取其它值的情况。而第二种方式正好避免这种冗余的计算，将每次累加的结果与当前最大的结果对比，从而降低了时间复杂度。以为这就是最优秀的方法了吗？然而编程思想的威力远没有这么简单，第三种方式采用了在算法设计中普遍采用的一种方式-***\"分而治之\"***:  \n\n- 第三种方式\n{% codeblock  lang:java %}\n    public static void main(String[] args){\n    //        int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n        int[] a = new int[]{-11, -21, -5, -11, -42};\n        System.out.println(maxSubSum3(a, 0, a.length - 1));\n    }\n\n\n    /**\n     * 最大子序列和  第三种方式\n     * @param a\n     * @return\n     */\n    private static int maxSubSum3(int[] a,int left,int right){\n        // 对于递归方法总会有一个基准情况，这里的left与right相等的时候就是我们这里例子的基准\n        if( left == right ){\n            if( a[ left ] > 0)\n                return a[ left ];\n            else\n                return 0;\n        }\n\n        int center = (left + right) / 2;\n        int maxLeftSum = maxSubSum3(a, left, center);\n        int maxRightSum = maxSubSum3(a, center + 1, right);\n\n        int maxLeftBorderSum = 0, leftBorderSum = 0;\n        for (int i = center; i >= left; i--) {\n            leftBorderSum += a[ i ];\n            if( leftBorderSum > maxLeftBorderSum){\n                maxLeftBorderSum = leftBorderSum;\n            }\n        }\n\n        int maxRightBorderSum = 0, rightBorderSum = 0;\n        for (int i = center + 1; i <= right; i++) {\n            rightBorderSum += a[ i ];\n            if(rightBorderSum > maxRightBorderSum){\n                maxRightBorderSum = rightBorderSum;\n            }\n        }\n\n\n        return max3(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);\n    }\n\n    private static int max3(int a,int b,int c){\n        if (b > a || c > a){\n            if(b > c)\n                return b;\n            else\n                return c;\n        } else {\n            return a;\n        }\n    }\n\n{% endcodeblock %}  \n\n　　显然第三种方式的代码要比前两种复杂，但是复杂不是出发点，我们的目的是减少时间复杂度。在第三种方式中，核心方法是***int maxSubSum3(int[] a,int left,int right)***，递归方法往往都存在着一个基准情况，不然递归就会无限循环调用下去，程序也毫无意义了。在这里15-20行是这个递归方法的基准情况，方法中的23、24行中进行了对自身的调用。接下来分析这个代码是如何执行的，为了更清楚该代码的执行过程，我调试程序的时候特意注释掉了main方法之前在第一种方式和第二种方式使用到的参数，使用数量较少的参数去还原该算法整个过程。方法中有三个参数，***int[] a、int left、int right***，第一次传递到该方法中的实参是数组a的起始下标和结束下标，显然第一次调用该方法是不满足基准情况的，在不满足基准情况下继续往下执行，计算left和right的平均值，如果不能整除则取去掉小数位的数值。然后分别将center作为right的实参传递到***maxSubSum3()***为maxLeftSum赋值，center+1作为left的实参传递到***maxSubSum3()***为maxRightSum赋值。顾名思义，maxLeftSum和maxRightSum其实就是将数组分为左右两块之后左右两个数组的最大子序列和的值。但是我们怎么知道这两个变量的值是左右两个数组的最大子序列和的值呢？仅从外层去理解这个程序是无法得出这个结论的，我们不妨追溯到该程序的基准情况，left=right。  \n\n　　当left与right相等的时候，程序会判断数组对应left的索引下标的值是否大于0，如果大于0，则返回对应值，小于0则返回0。显然这里就是该递归的基准情况了，当基准情况返回到上一层的调用，center的值必然与left是相等的，且right的值必然等于center+1。这个情况不难分析，因为　center = (left + right) / 2,且left与center相等，left不等于right,所以right必然等于center + 1。且该基准情况准只可能对应数组中的起始元素和结束元素，因为在递归调用中为maxLeftSum赋值的时候左边的参数不变，而center会不断减少直到与left相等，而其它方法中执行到了为maxLeftSum赋值的时候已经过了基准条件的筛选，同理为maxRightSum赋值的递归调用也是如此。明白了这一层关系，我们可以从程序的基准情况开始分析，下图的圆形表示从基准情况返回到上一层的时候，maxLeftSum以及maxRightSum的值,如果index对应0和1的值大于0则返回对应的值否则返回0:  \n\n![](/images/maxSubSum/base1.jpg \"最内层递归结束之后\")  \n\n　　26-40行的代码的意思是以中间的虚线左右两边的第一个元素为首元素分别开始往左右找出最大的子序列和，然后将左边与右边的最大的子序列的和相加，再在它和maxLeftSum、maxRightSum三个值中取最大值。当索引仅为0和1的时候这样处理肯定是可以拿到0、1组合的子数组的最大序列和，但如果递归的结果再往上一层，这样的处理是否依旧合适呢？当递归到第二层，上图递归的返回值为下图的maxLeftSum。下图展示了下一层递归的结果:(右边可能的Index有两种情况，一种是仅存在一个元素Index = 2，一种是存在元素Index = 2 和 Index = 3,这里我们为了更好的展示过程取两个元素的情况)\n\n![](/images/maxSubSum/base2.jpg \"递归第二层结束之后\")  \n\n　　这个时候如果还是按照之前的处理，取三者之间的最大值作为最大子序列和的结果是否合适呢？这里需要分情况讨论，现在我们可以确定的是maxLeftSum一定是左边数组最大的子序列的和，maxRightSum一定是右边数组最大的子序列的和。如果存在最大子序列的和不仅是单独取左边和右边里的元素，而是左右两边都需要取值构成最大子序列的和，那么这个对于整体而言的最大子序列一定是包含虚线左右两侧的元素的，因为一个子序列一定是连续的，这样的话就可以按照之前的方法分别从虚线开始往左右两边求最大子序列的和相加一定可以得到整个数组的最大子序列的和。如果不存在最大的子序列的和同时依赖于左和右两边的元素，我们针对maxLeftSum和maxRightSum取较大值即可得到最大子序列和。综合考虑上面两种情况，这样我们在这三个值中取最大值一定可以得到这个数组块的最大子序列和。这个可以递推到无论数组被分为多少块的情况，在数学的证明里也经常使用到这样的方式去证明一个定理，对于某个较小的情况条件成立，我们将这个较小的情况取为一般情况K，然后再证明K+1的情况成立，那么结论一定是成立的，数学里称为归纳假设，同样在这个情况下证明这个递归算法的正确性使用到了相似的方式。  \n\n　　验证了这个算法的正确性之后，不可缺少的工作是去计算这个算法的时间复杂度。假设我们处理的数组长度为***N***，仅对***maxSubSum3(int[] a,int left,int right)***的执行时间进行计算，设其执行时间为T(N)。在这个方法内，15-20行的执行时间为一个常数时间量，设为T(1) = 1；对于26-40行的两个for循环，会遍历$ A_0 到 A_{ N-1 } $的每个元素，在每个循环内部耗费的时间都为常量，因此可设其执行时间为O(N)；接下来就是在23、24上两个递归方法的调用消耗的时间，这两行求解的数组长度大小为N/2，总计消耗的时间为2T(N/2)。忽略常数时间，可以得:  \n\n$$  \\displaystyle T(N) = T(\\dfrac{N}{2}) + O(N) $$\n\n　　 为了简化计算，我们可以使用N代替上式的O(N)，那么T(N) = 2T(N/2) + N,且有T(1) = 1,那么 T(2) = 2\\*2 + 2 = 2\\*2 = 4,T(4) = 2\\*4 + 4 = 3\\*4 = 12,T(8) = 2T(4) + 8 = 2\\*12 + 8 = 4\\*8 = 32,T(16) = 2T(8) + 16 = 2\\*32 + 16 = 5\\*16 = 80 ...... 即若$ N = 2^k $,则有:  \n\n$$  \\displaystyle T(N) = N * (k+1) = NlogN + N = O(NlogN) $$\n\n　　 当然这里的计算结果是假设当$ N = 2^k $的情况，当N不是这个值的时候，需要一些更复杂的分析，但大O的结果是不变的。显然该算法的时间复杂度要比第二种方式低，本来以为到这里已经是最快的解决方式了，可是接下来还有一种比第三种方式时间复杂度更低的算法...而且实现起来居然更简单...不得不为思维的力量折服。 Ｏ(≧▽≦)Ｏ  \n\n- 第四种方式\n{% codeblock  lang:java %}\n    public static void main(String[] args){\n            int[] a = new int[]{11, -21, 5, 11, -42};\n            System.out.println(maxSubSum4(a));\n    }\n\n    /**\n     * 最大子序列求和   第四种写法\n     * @param a\n     * @return\n     */\n    private static int maxSubSum4(int[] a){\n        int maxSum = 0, thisSum = 0;\n\n        for (int i = 0; i < a.length; i++) {\n            thisSum += a[ i ];\n\n            if(thisSum > maxSum){\n                maxSum = thisSum;\n            }else if( thisSum < 0){\n                thisSum = 0;\n            }\n        }\n\n        return maxSum;\n    } \n/*\n  输出结果:\n  16\n*/\n{% endcodeblock %}  \n\n　　这个算法的时间复杂度可以看出来为O(N),但是粗看会质疑这个算法的正确性，因为这里仅有一个for循环去遍历数组中的值，难道这能就求出最大子序列的和？ (╬￣皿￣)=○ 　那我们之前的努力不是徒劳了？别着急，慢慢来看这个算法到底是怎么回事。  \n\n　　分析程序可以得出，当thisSum为负值的时候，就选择抛弃前面的计算结果，选择从第一个非负值开始递增寻找最大子序列和。当在数组中前几个数字为负值的时候，这样的做法明显是正确的，因为负值不可能作为最大子序列和的开始。但是如果这样的一个序列出现在数组的中间的时候呢？我们假设从a[i]到a[j]出现了一个计算序列结果为负数的情况，那么假设可以从p(p为i+1到j之间的一个整数)开始得到一个比当前最大更大的子序列和，由于子序列必定是连续的，且从a[i]到a[p-1]的和是大于0的，那么很明显我们如果从a[i]开始要比从a[p]开始可以得到一个更大的子序列和。然后再做这样一个比较，从i开始和从j+1开始对比，如果存在一个从j+1开始的子序列的和比当前的最大的子序列大的情况，也是由于子序列的连续性，那么显然从j+1开始要比从i开始的值大，因为a[i]到a[j]的和是一个负数。所以如果出现负数的情况，如果后续还存在一个更大的子序列和，那么它的起点必然是在j之后而不可能在j之前。当然如果不存在从i+1开始存在比当前子序列更大的情况，我们继续累加也是不可能得出一个比当前最大子序列和更大的值。所以我们仅考虑存在比当前子序列更大的情况即可。如果存在从i+1开始比当前子序列更大的情况，综前所述，也必然出现在j之后。  \n\n　　看似简单的程序其实蕴含了丰富的思考，掌握了这个求最大和问题的本质。 (=ﾟωﾟ)ﾉ\n\n　　End\n\n\n\n\n\n","source":"_posts/2018-11-19_最大子序列求和.md","raw":"layout: \"post\"\ntitle: \"求最大子序列和的四种实现方式\"\ndate: \"2018-11-18 16:20\"\nmathjax: true\ncategories:\n- [JAVA,DATA_STRACTURE]\ntags:\n- [TECHNOLOGY]\n---\n　　在总结求最大子序列和的四种实现方式之前想谈谈为什么自己想要重新学习数据结构。之前在大二下学期的时候已经学过了数据结构这个课程，依稀记得老师一直提醒我们数据结构是计算机的核心课程，并且对于考研或者是找工作面试都是很重要的，特地提醒我们要重视这门课程，希望我们好好学习数据结构。当时自己在上数据结构这个课程之前已经使用过基本的数据结构-链表完成了大一下学期的一个C语言课程设计，记得那是自己使用C语言写的一个程序，虽然仅有一百多行，显示界面也只是一个小黑框，但完成的时候特别激动，因为那是自己真正意义上动手写的第一个完整程序。本来还想找到原来的代码运行一下，但发现自己前一段时间为了清理笔记本空间已经将自己之前写的关于C的代码都删除了** ╮(╯﹏╰）╭**\n<!-- more -->\n　　em....一个订餐管理程序，有显示当前订单列表、添加订餐信息、删除订餐信息、修改订餐信息、根据价格为订单排序、将已有订餐信息写入文件等几个简单的小功能，尤其是添加写入到文件这个模块的时候，自己遇到不知道如何解决的一个地方一直没法正常写入到文件，在CSDN上提问然后得到了一位前辈的指教才顺利的完成的这个功能，thanks　　( • ̀ω•́ )✧ 。这个程序当时给老师展示之后最后拿了93分的成绩，自己对于成绩倒不是特别在意，但这也是老师对自己的一种认可吧，更让自己开心的是探索的过程。那是自己第一次接触数据结构，被链表折磨的死去活来，去图书馆借书学习链表，一本看不懂就再借另外一本，读了好几本不同书籍关于链表的内容才开始慢慢理解它，至今还能回忆起当初冥思苦想的那几天。**(*￣∇￣*)** \n\n　　不知不觉又扯了这么远...回到正题，一个学期学习数据结构的时间肯定是不够的，更何况自己当时还并没有花特别多的时间去钻研数据结构，对于每种数据结构都仅仅是简单按照书上的例子实现了一遍，到了现在该忘都忘的差不多了...(╯︵╰) 但真正让我决定重新学习数据结构的原因不是自己想要温习知识，之前面试阿里的时候，面试结束的面试官问我有什么问题想要问他的，我觉得自己面试过程中回答的不好，所以就问面试官对于自己的学习有什么建议没有。面试官就说，培养一个掌握基本开发技能的普通程序员很容易，但数据结构是十分重要的，理解技术的原理也是十分重要的，还讲violate的原理给我听。加上之前在公司的季度技术交流会上，看见某位大佬秀了一波关于数据库方面的数据结构的知识，当时自己真是热血沸腾的感觉，并且那一刻真正的意识到是时候该找时间好好的学习数据结构了，于是才选择了**《数据结构与算法分析　Java语言描述》-Mark Allen Weiss**这本书，并计划一边学习这本书一边写博客记录学习过的内容。最后说一下自己的粗见吧，数据结构可能暂时在开发小型程序的作用还不是特别明显，搭建好开发环境之后，只要对某种语言比较熟练就可以做到业务上的实现，但是如果涉及到大型的应用的构建，当应用吞吐量很大的时候，一个小的细节对于应用整体的性能的作用就会比较明显了，这时候我们不仅需要了解使用到的技术的原理，而且需要更有技巧的编程，用更少的执行时间去完成相同的任务，相反而不是去粗暴的使用蛮力算法实现需求。所以从长远的角度来看，熟练掌握数据结构是十分必要的。  \n\n　　最大子序列和，就是指在一个元素类型为整型的数组中，求其中连续的一个序列和的最大值，这个序列的开始下标可以是数组中的任意位置。如果我们按照列举所有可能情况的思考方式编写代码:  \n- 第一种方式   \n{% codeblock  lang:java %}\n  public static void main(String[] args){\n      int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n      System.out.println(maxSubSum1(a));\n  }\n\n  /**\n   * 最大子序列和,最简单直接的求最大子序和\n   * @return\n   */\n  private static int maxSubSum1(int[] a){\n      int maxSum = 0;\n\n      for (int i = 0; i < a.length; i++) {\n          for (int j = i; j < a.length; j++) {\n              int thisSum = 0;\n\n              for (int k = i; k <= j; k++) {\n                  thisSum += a[k];\n              }\n              if(thisSum > maxSum){\n                  maxSum = thisSum;\n              }\n          }\n      }\n\n      return maxSum;\n  }\n  /*  输出结果:\n      50\n  */\n{% endcodeblock %}\n　　很明显，这里的最大子序列和为前五个元素的和。下面我们分析一下该算法的时间复杂度。假设我们输入的数组的长度为***N***，忽略声明、调用方法、返回值的开销，仅关注嵌套的for循环所占用的时间，那么所耗费的时间为:　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $  \n\n　　对该表达式从里到外求和:  \n$$ \\displaystyle \\sum_{ k=i }^j1=j-i+1 $$\n　　继续从里往外求和:  \n$$ \\displaystyle \\sum_{ j=i }^{ N-1 }( j-i+1 )=\\dfrac{( N-i+1 )( N-i )}{2} $$\n　　所以有:  \n\n　　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $　  \n\n=　$ \\displaystyle \\sum_{ i=0 }^{ N-1 }{\\dfrac{( N-i+1 )( N-i )}{2}} $  \n\n=　$ \\displaystyle \\sum_{ i=1 }^{ N }{\\dfrac{( N-i+2 )( N-i+1 )}{2}} $  \n\n=　$ \\displaystyle \\sum_{ i=1 }^{ N }{ ( \\dfrac{i^2}{2} - \\dfrac{ 3i + 2iN }{ 2 } + \\dfrac{N^2 + 3N + 2 }{ 2 } ) } $    \n\n=　$ \\displaystyle \\dfrac12 \\sum_{ i=1 }^{ N }{ i^2 } - (\\dfrac{ 3+2N }{ 2 })\\sum_{ i=1 }^{ N }{ i } + (\\dfrac{N^2 + 3N + 2}{ 2 })\\sum_{ i=1 }^{ N }{ 1 } $    \n\n=　$ \\displaystyle \\dfrac12 \\dfrac{ N(N+1)(N+2) }{6} - (\\dfrac{ 3+2N }{ 2 })\\dfrac{ N(N+1) }{2} + \\dfrac{N^2 + 3N + 2}{ 2 }N  $  \n\n=　$ \\displaystyle  \\dfrac{ N(N+1)(N+2) }{ 6 } $  \n\n　　经计算可知该算法的时间复杂度为$ O(N^3) $，其实我们没有必要通过三层的for循环穷举所有的子序列的和，上面的第三层的for循环的计算明显存在冗余，仅仅两个for循环就可以满足求和需求:  \n- 第二种方式  \n{% codeblock  lang:java %}\n    public static void main(String[] args){\n            int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n            System.out.println(maxSubSum2(a));\n    }\n\n    private static int maxSubSum2(int[] a){\n        int maxSum = 0;\n        for (int i = 0; i < a.length; i++) {\n            int thisSum = 0;\n            for (int j = i; j < a.length; j++) {\n                thisSum += a[j];\n\n                if(thisSum > maxSum){\n                    maxSum = thisSum;\n                }\n            }\n        }\n        return maxSum;\n    }\n    /*  输出结果:\n        50\n    */\n{% endcodeblock %}  \n\n　　仅关注嵌套的for循环所占用的时间，那么所耗费的时间最多为: $ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $\n\n　　对该表达式从里到外进行求和计算:\n　　$ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $　  \n\n=　$ \\displaystyle 3\\sum_{ i=0 }^{ N-1 }(N-i) $\n\n=　$ \\displaystyle 3\\sum_{ i=1 }^{ N }( N-i+1 ) $\n\n=　$ \\displaystyle \\dfrac{ 3N(N+1) }{ 2 } $\n\n　　计算知第二种方法的时间复杂度为$ O(N^2) $。第二种方式避免了单独计算每个子序列结果的值，在第一种方式里，当第二层循环的j取最大值的时候，最里面的循环累加的结果包含了j取其它值的情况。而第二种方式正好避免这种冗余的计算，将每次累加的结果与当前最大的结果对比，从而降低了时间复杂度。以为这就是最优秀的方法了吗？然而编程思想的威力远没有这么简单，第三种方式采用了在算法设计中普遍采用的一种方式-***\"分而治之\"***:  \n\n- 第三种方式\n{% codeblock  lang:java %}\n    public static void main(String[] args){\n    //        int[] a = new int[]{ 19, 2, -20, 14, 35, -3, -21, 10, -22 };\n        int[] a = new int[]{-11, -21, -5, -11, -42};\n        System.out.println(maxSubSum3(a, 0, a.length - 1));\n    }\n\n\n    /**\n     * 最大子序列和  第三种方式\n     * @param a\n     * @return\n     */\n    private static int maxSubSum3(int[] a,int left,int right){\n        // 对于递归方法总会有一个基准情况，这里的left与right相等的时候就是我们这里例子的基准\n        if( left == right ){\n            if( a[ left ] > 0)\n                return a[ left ];\n            else\n                return 0;\n        }\n\n        int center = (left + right) / 2;\n        int maxLeftSum = maxSubSum3(a, left, center);\n        int maxRightSum = maxSubSum3(a, center + 1, right);\n\n        int maxLeftBorderSum = 0, leftBorderSum = 0;\n        for (int i = center; i >= left; i--) {\n            leftBorderSum += a[ i ];\n            if( leftBorderSum > maxLeftBorderSum){\n                maxLeftBorderSum = leftBorderSum;\n            }\n        }\n\n        int maxRightBorderSum = 0, rightBorderSum = 0;\n        for (int i = center + 1; i <= right; i++) {\n            rightBorderSum += a[ i ];\n            if(rightBorderSum > maxRightBorderSum){\n                maxRightBorderSum = rightBorderSum;\n            }\n        }\n\n\n        return max3(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);\n    }\n\n    private static int max3(int a,int b,int c){\n        if (b > a || c > a){\n            if(b > c)\n                return b;\n            else\n                return c;\n        } else {\n            return a;\n        }\n    }\n\n{% endcodeblock %}  \n\n　　显然第三种方式的代码要比前两种复杂，但是复杂不是出发点，我们的目的是减少时间复杂度。在第三种方式中，核心方法是***int maxSubSum3(int[] a,int left,int right)***，递归方法往往都存在着一个基准情况，不然递归就会无限循环调用下去，程序也毫无意义了。在这里15-20行是这个递归方法的基准情况，方法中的23、24行中进行了对自身的调用。接下来分析这个代码是如何执行的，为了更清楚该代码的执行过程，我调试程序的时候特意注释掉了main方法之前在第一种方式和第二种方式使用到的参数，使用数量较少的参数去还原该算法整个过程。方法中有三个参数，***int[] a、int left、int right***，第一次传递到该方法中的实参是数组a的起始下标和结束下标，显然第一次调用该方法是不满足基准情况的，在不满足基准情况下继续往下执行，计算left和right的平均值，如果不能整除则取去掉小数位的数值。然后分别将center作为right的实参传递到***maxSubSum3()***为maxLeftSum赋值，center+1作为left的实参传递到***maxSubSum3()***为maxRightSum赋值。顾名思义，maxLeftSum和maxRightSum其实就是将数组分为左右两块之后左右两个数组的最大子序列和的值。但是我们怎么知道这两个变量的值是左右两个数组的最大子序列和的值呢？仅从外层去理解这个程序是无法得出这个结论的，我们不妨追溯到该程序的基准情况，left=right。  \n\n　　当left与right相等的时候，程序会判断数组对应left的索引下标的值是否大于0，如果大于0，则返回对应值，小于0则返回0。显然这里就是该递归的基准情况了，当基准情况返回到上一层的调用，center的值必然与left是相等的，且right的值必然等于center+1。这个情况不难分析，因为　center = (left + right) / 2,且left与center相等，left不等于right,所以right必然等于center + 1。且该基准情况准只可能对应数组中的起始元素和结束元素，因为在递归调用中为maxLeftSum赋值的时候左边的参数不变，而center会不断减少直到与left相等，而其它方法中执行到了为maxLeftSum赋值的时候已经过了基准条件的筛选，同理为maxRightSum赋值的递归调用也是如此。明白了这一层关系，我们可以从程序的基准情况开始分析，下图的圆形表示从基准情况返回到上一层的时候，maxLeftSum以及maxRightSum的值,如果index对应0和1的值大于0则返回对应的值否则返回0:  \n\n![](/images/maxSubSum/base1.jpg \"最内层递归结束之后\")  \n\n　　26-40行的代码的意思是以中间的虚线左右两边的第一个元素为首元素分别开始往左右找出最大的子序列和，然后将左边与右边的最大的子序列的和相加，再在它和maxLeftSum、maxRightSum三个值中取最大值。当索引仅为0和1的时候这样处理肯定是可以拿到0、1组合的子数组的最大序列和，但如果递归的结果再往上一层，这样的处理是否依旧合适呢？当递归到第二层，上图递归的返回值为下图的maxLeftSum。下图展示了下一层递归的结果:(右边可能的Index有两种情况，一种是仅存在一个元素Index = 2，一种是存在元素Index = 2 和 Index = 3,这里我们为了更好的展示过程取两个元素的情况)\n\n![](/images/maxSubSum/base2.jpg \"递归第二层结束之后\")  \n\n　　这个时候如果还是按照之前的处理，取三者之间的最大值作为最大子序列和的结果是否合适呢？这里需要分情况讨论，现在我们可以确定的是maxLeftSum一定是左边数组最大的子序列的和，maxRightSum一定是右边数组最大的子序列的和。如果存在最大子序列的和不仅是单独取左边和右边里的元素，而是左右两边都需要取值构成最大子序列的和，那么这个对于整体而言的最大子序列一定是包含虚线左右两侧的元素的，因为一个子序列一定是连续的，这样的话就可以按照之前的方法分别从虚线开始往左右两边求最大子序列的和相加一定可以得到整个数组的最大子序列的和。如果不存在最大的子序列的和同时依赖于左和右两边的元素，我们针对maxLeftSum和maxRightSum取较大值即可得到最大子序列和。综合考虑上面两种情况，这样我们在这三个值中取最大值一定可以得到这个数组块的最大子序列和。这个可以递推到无论数组被分为多少块的情况，在数学的证明里也经常使用到这样的方式去证明一个定理，对于某个较小的情况条件成立，我们将这个较小的情况取为一般情况K，然后再证明K+1的情况成立，那么结论一定是成立的，数学里称为归纳假设，同样在这个情况下证明这个递归算法的正确性使用到了相似的方式。  \n\n　　验证了这个算法的正确性之后，不可缺少的工作是去计算这个算法的时间复杂度。假设我们处理的数组长度为***N***，仅对***maxSubSum3(int[] a,int left,int right)***的执行时间进行计算，设其执行时间为T(N)。在这个方法内，15-20行的执行时间为一个常数时间量，设为T(1) = 1；对于26-40行的两个for循环，会遍历$ A_0 到 A_{ N-1 } $的每个元素，在每个循环内部耗费的时间都为常量，因此可设其执行时间为O(N)；接下来就是在23、24上两个递归方法的调用消耗的时间，这两行求解的数组长度大小为N/2，总计消耗的时间为2T(N/2)。忽略常数时间，可以得:  \n\n$$  \\displaystyle T(N) = T(\\dfrac{N}{2}) + O(N) $$\n\n　　 为了简化计算，我们可以使用N代替上式的O(N)，那么T(N) = 2T(N/2) + N,且有T(1) = 1,那么 T(2) = 2\\*2 + 2 = 2\\*2 = 4,T(4) = 2\\*4 + 4 = 3\\*4 = 12,T(8) = 2T(4) + 8 = 2\\*12 + 8 = 4\\*8 = 32,T(16) = 2T(8) + 16 = 2\\*32 + 16 = 5\\*16 = 80 ...... 即若$ N = 2^k $,则有:  \n\n$$  \\displaystyle T(N) = N * (k+1) = NlogN + N = O(NlogN) $$\n\n　　 当然这里的计算结果是假设当$ N = 2^k $的情况，当N不是这个值的时候，需要一些更复杂的分析，但大O的结果是不变的。显然该算法的时间复杂度要比第二种方式低，本来以为到这里已经是最快的解决方式了，可是接下来还有一种比第三种方式时间复杂度更低的算法...而且实现起来居然更简单...不得不为思维的力量折服。 Ｏ(≧▽≦)Ｏ  \n\n- 第四种方式\n{% codeblock  lang:java %}\n    public static void main(String[] args){\n            int[] a = new int[]{11, -21, 5, 11, -42};\n            System.out.println(maxSubSum4(a));\n    }\n\n    /**\n     * 最大子序列求和   第四种写法\n     * @param a\n     * @return\n     */\n    private static int maxSubSum4(int[] a){\n        int maxSum = 0, thisSum = 0;\n\n        for (int i = 0; i < a.length; i++) {\n            thisSum += a[ i ];\n\n            if(thisSum > maxSum){\n                maxSum = thisSum;\n            }else if( thisSum < 0){\n                thisSum = 0;\n            }\n        }\n\n        return maxSum;\n    } \n/*\n  输出结果:\n  16\n*/\n{% endcodeblock %}  \n\n　　这个算法的时间复杂度可以看出来为O(N),但是粗看会质疑这个算法的正确性，因为这里仅有一个for循环去遍历数组中的值，难道这能就求出最大子序列的和？ (╬￣皿￣)=○ 　那我们之前的努力不是徒劳了？别着急，慢慢来看这个算法到底是怎么回事。  \n\n　　分析程序可以得出，当thisSum为负值的时候，就选择抛弃前面的计算结果，选择从第一个非负值开始递增寻找最大子序列和。当在数组中前几个数字为负值的时候，这样的做法明显是正确的，因为负值不可能作为最大子序列和的开始。但是如果这样的一个序列出现在数组的中间的时候呢？我们假设从a[i]到a[j]出现了一个计算序列结果为负数的情况，那么假设可以从p(p为i+1到j之间的一个整数)开始得到一个比当前最大更大的子序列和，由于子序列必定是连续的，且从a[i]到a[p-1]的和是大于0的，那么很明显我们如果从a[i]开始要比从a[p]开始可以得到一个更大的子序列和。然后再做这样一个比较，从i开始和从j+1开始对比，如果存在一个从j+1开始的子序列的和比当前的最大的子序列大的情况，也是由于子序列的连续性，那么显然从j+1开始要比从i开始的值大，因为a[i]到a[j]的和是一个负数。所以如果出现负数的情况，如果后续还存在一个更大的子序列和，那么它的起点必然是在j之后而不可能在j之前。当然如果不存在从i+1开始存在比当前子序列更大的情况，我们继续累加也是不可能得出一个比当前最大子序列和更大的值。所以我们仅考虑存在比当前子序列更大的情况即可。如果存在从i+1开始比当前子序列更大的情况，综前所述，也必然出现在j之后。  \n\n　　看似简单的程序其实蕴含了丰富的思考，掌握了这个求最大和问题的本质。 (=ﾟωﾟ)ﾉ\n\n　　End\n\n\n\n\n\n","slug":"2018-11-19_最大子序列求和","published":1,"updated":"2019-05-19T09:42:05.858Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxa80004fo81tdndbwhh","content":"<p>　　在总结求最大子序列和的四种实现方式之前想谈谈为什么自己想要重新学习数据结构。之前在大二下学期的时候已经学过了数据结构这个课程，依稀记得老师一直提醒我们数据结构是计算机的核心课程，并且对于考研或者是找工作面试都是很重要的，特地提醒我们要重视这门课程，希望我们好好学习数据结构。当时自己在上数据结构这个课程之前已经使用过基本的数据结构-链表完成了大一下学期的一个C语言课程设计，记得那是自己使用C语言写的一个程序，虽然仅有一百多行，显示界面也只是一个小黑框，但完成的时候特别激动，因为那是自己真正意义上动手写的第一个完整程序。本来还想找到原来的代码运行一下，但发现自己前一段时间为了清理笔记本空间已经将自己之前写的关于C的代码都删除了<strong> ╮(╯﹏╰）╭</strong><br><a id=\"more\"></a><br>　　em….一个订餐管理程序，有显示当前订单列表、添加订餐信息、删除订餐信息、修改订餐信息、根据价格为订单排序、将已有订餐信息写入文件等几个简单的小功能，尤其是添加写入到文件这个模块的时候，自己遇到不知道如何解决的一个地方一直没法正常写入到文件，在CSDN上提问然后得到了一位前辈的指教才顺利的完成的这个功能，thanks　　( • ̀ω•́ )✧ 。这个程序当时给老师展示之后最后拿了93分的成绩，自己对于成绩倒不是特别在意，但这也是老师对自己的一种认可吧，更让自己开心的是探索的过程。那是自己第一次接触数据结构，被链表折磨的死去活来，去图书馆借书学习链表，一本看不懂就再借另外一本，读了好几本不同书籍关于链表的内容才开始慢慢理解它，至今还能回忆起当初冥思苦想的那几天。<strong>(<em>￣∇￣</em>)</strong> </p>\n<p>　　不知不觉又扯了这么远…回到正题，一个学期学习数据结构的时间肯定是不够的，更何况自己当时还并没有花特别多的时间去钻研数据结构，对于每种数据结构都仅仅是简单按照书上的例子实现了一遍，到了现在该忘都忘的差不多了…(╯︵╰) 但真正让我决定重新学习数据结构的原因不是自己想要温习知识，之前面试阿里的时候，面试结束的面试官问我有什么问题想要问他的，我觉得自己面试过程中回答的不好，所以就问面试官对于自己的学习有什么建议没有。面试官就说，培养一个掌握基本开发技能的普通程序员很容易，但数据结构是十分重要的，理解技术的原理也是十分重要的，还讲violate的原理给我听。加上之前在公司的季度技术交流会上，看见某位大佬秀了一波关于数据库方面的数据结构的知识，当时自己真是热血沸腾的感觉，并且那一刻真正的意识到是时候该找时间好好的学习数据结构了，于是才选择了<strong>《数据结构与算法分析　Java语言描述》-Mark Allen Weiss</strong>这本书，并计划一边学习这本书一边写博客记录学习过的内容。最后说一下自己的粗见吧，数据结构可能暂时在开发小型程序的作用还不是特别明显，搭建好开发环境之后，只要对某种语言比较熟练就可以做到业务上的实现，但是如果涉及到大型的应用的构建，当应用吞吐量很大的时候，一个小的细节对于应用整体的性能的作用就会比较明显了，这时候我们不仅需要了解使用到的技术的原理，而且需要更有技巧的编程，用更少的执行时间去完成相同的任务，相反而不是去粗暴的使用蛮力算法实现需求。所以从长远的角度来看，熟练掌握数据结构是十分必要的。  </p>\n<p>　　最大子序列和，就是指在一个元素类型为整型的数组中，求其中连续的一个序列和的最大值，这个序列的开始下标可以是数组中的任意位置。如果我们按照列举所有可能情况的思考方式编写代码:  </p>\n<ul>\n<li>第一种方式   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; <span class=\"number\">19</span>, <span class=\"number\">2</span>, -<span class=\"number\">20</span>, <span class=\"number\">14</span>, <span class=\"number\">35</span>, -<span class=\"number\">3</span>, -<span class=\"number\">21</span>, <span class=\"number\">10</span>, -<span class=\"number\">22</span> &#125;;</span><br><span class=\"line\">    System.out.println(maxSubSum1(a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大子序列和,最简单直接的求最大子序和</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i; k &lt;= j; k++) &#123;</span><br><span class=\"line\">                thisSum += a[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n　　很明显，这里的最大子序列和为前五个元素的和。下面我们分析一下该算法的时间复杂度。假设我们输入的数组的长度为<strong><em>N</em></strong>，忽略声明、调用方法、返回值的开销，仅关注嵌套的for循环所占用的时间，那么所耗费的时间为:　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $  </li>\n</ul>\n<p>　　对该表达式从里到外求和:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle \\sum_{ k=i }^j1=j-i+1</script><p>　　继续从里往外求和:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle \\sum_{ j=i }^{ N-1 }( j-i+1 )=\\dfrac{( N-i+1 )( N-i )}{2}</script><p>　　所以有:  </p>\n<p>　　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $　  </p>\n<p>=　$ \\displaystyle \\sum_{ i=0 }^{ N-1 }{\\dfrac{( N-i+1 )( N-i )}{2}} $  </p>\n<p>=　$ \\displaystyle \\sum_{ i=1 }^{ N }{\\dfrac{( N-i+2 )( N-i+1 )}{2}} $  </p>\n<p>=　$ \\displaystyle \\sum_{ i=1 }^{ N }{ ( \\dfrac{i^2}{2} - \\dfrac{ 3i + 2iN }{ 2 } + \\dfrac{N^2 + 3N + 2 }{ 2 } ) } $    </p>\n<p>=　$ \\displaystyle \\dfrac12 \\sum_{ i=1 }^{ N }{ i^2 } - (\\dfrac{ 3+2N }{ 2 })\\sum_{ i=1 }^{ N }{ i } + (\\dfrac{N^2 + 3N + 2}{ 2 })\\sum_{ i=1 }^{ N }{ 1 } $    </p>\n<p>=　$ \\displaystyle \\dfrac12 \\dfrac{ N(N+1)(N+2) }{6} - (\\dfrac{ 3+2N }{ 2 })\\dfrac{ N(N+1) }{2} + \\dfrac{N^2 + 3N + 2}{ 2 }N  $  </p>\n<p>=　$ \\displaystyle  \\dfrac{ N(N+1)(N+2) }{ 6 } $  </p>\n<p>　　经计算可知该算法的时间复杂度为$ O(N^3) $，其实我们没有必要通过三层的for循环穷举所有的子序列的和，上面的第三层的for循环的计算明显存在冗余，仅仅两个for循环就可以满足求和需求:  </p>\n<ul>\n<li>第二种方式  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; <span class=\"number\">19</span>, <span class=\"number\">2</span>, -<span class=\"number\">20</span>, <span class=\"number\">14</span>, <span class=\"number\">35</span>, -<span class=\"number\">3</span>, -<span class=\"number\">21</span>, <span class=\"number\">10</span>, -<span class=\"number\">22</span> &#125;;</span><br><span class=\"line\">        System.out.println(maxSubSum2(a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">            thisSum += a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　仅关注嵌套的for循环所占用的时间，那么所耗费的时间最多为: $ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $</p>\n<p>　　对该表达式从里到外进行求和计算:<br>　　$ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $　  </p>\n<p>=　$ \\displaystyle 3\\sum_{ i=0 }^{ N-1 }(N-i) $</p>\n<p>=　$ \\displaystyle 3\\sum_{ i=1 }^{ N }( N-i+1 ) $</p>\n<p>=　$ \\displaystyle \\dfrac{ 3N(N+1) }{ 2 } $</p>\n<p>　　计算知第二种方法的时间复杂度为$ O(N^2) $。第二种方式避免了单独计算每个子序列结果的值，在第一种方式里，当第二层循环的j取最大值的时候，最里面的循环累加的结果包含了j取其它值的情况。而第二种方式正好避免这种冗余的计算，将每次累加的结果与当前最大的结果对比，从而降低了时间复杂度。以为这就是最优秀的方法了吗？然而编程思想的威力远没有这么简单，第三种方式采用了在算法设计中普遍采用的一种方式-<strong><em>“分而治之”</em></strong>:  </p>\n<ul>\n<li>第三种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        int[] a = new int[]&#123; 19, 2, -20, 14, 35, -3, -21, 10, -22 &#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">11</span>, -<span class=\"number\">21</span>, -<span class=\"number\">5</span>, -<span class=\"number\">11</span>, -<span class=\"number\">42</span>&#125;;</span><br><span class=\"line\">    System.out.println(maxSubSum3(a, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大子序列和  第三种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum3</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对于递归方法总会有一个基准情况，这里的left与right相等的时候就是我们这里例子的基准</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( left == right )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( a[ left ] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[ left ];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLeftSum = maxSubSum3(a, left, center);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxRightSum = maxSubSum3(a, center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLeftBorderSum = <span class=\"number\">0</span>, leftBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = center; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        leftBorderSum += a[ i ];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( leftBorderSum &gt; maxLeftBorderSum)&#123;</span><br><span class=\"line\">            maxLeftBorderSum = leftBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxRightBorderSum = <span class=\"number\">0</span>, rightBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = center + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        rightBorderSum += a[ i ];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rightBorderSum &gt; maxRightBorderSum)&#123;</span><br><span class=\"line\">            maxRightBorderSum = rightBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">max3</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b &gt; a || c &gt; a)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b &gt; c)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　显然第三种方式的代码要比前两种复杂，但是复杂不是出发点，我们的目的是减少时间复杂度。在第三种方式中，核心方法是<strong><em>int maxSubSum3(int[] a,int left,int right)</em></strong>，递归方法往往都存在着一个基准情况，不然递归就会无限循环调用下去，程序也毫无意义了。在这里15-20行是这个递归方法的基准情况，方法中的23、24行中进行了对自身的调用。接下来分析这个代码是如何执行的，为了更清楚该代码的执行过程，我调试程序的时候特意注释掉了main方法之前在第一种方式和第二种方式使用到的参数，使用数量较少的参数去还原该算法整个过程。方法中有三个参数，<strong><em>int[] a、int left、int right</em></strong>，第一次传递到该方法中的实参是数组a的起始下标和结束下标，显然第一次调用该方法是不满足基准情况的，在不满足基准情况下继续往下执行，计算left和right的平均值，如果不能整除则取去掉小数位的数值。然后分别将center作为right的实参传递到<strong><em>maxSubSum3()</em></strong>为maxLeftSum赋值，center+1作为left的实参传递到<strong><em>maxSubSum3()</em></strong>为maxRightSum赋值。顾名思义，maxLeftSum和maxRightSum其实就是将数组分为左右两块之后左右两个数组的最大子序列和的值。但是我们怎么知道这两个变量的值是左右两个数组的最大子序列和的值呢？仅从外层去理解这个程序是无法得出这个结论的，我们不妨追溯到该程序的基准情况，left=right。  </p>\n<p>　　当left与right相等的时候，程序会判断数组对应left的索引下标的值是否大于0，如果大于0，则返回对应值，小于0则返回0。显然这里就是该递归的基准情况了，当基准情况返回到上一层的调用，center的值必然与left是相等的，且right的值必然等于center+1。这个情况不难分析，因为　center = (left + right) / 2,且left与center相等，left不等于right,所以right必然等于center + 1。且该基准情况准只可能对应数组中的起始元素和结束元素，因为在递归调用中为maxLeftSum赋值的时候左边的参数不变，而center会不断减少直到与left相等，而其它方法中执行到了为maxLeftSum赋值的时候已经过了基准条件的筛选，同理为maxRightSum赋值的递归调用也是如此。明白了这一层关系，我们可以从程序的基准情况开始分析，下图的圆形表示从基准情况返回到上一层的时候，maxLeftSum以及maxRightSum的值,如果index对应0和1的值大于0则返回对应的值否则返回0:  </p>\n<p><img src=\"/images/maxSubSum/base1.jpg\" alt=\"\" title=\"最内层递归结束之后\">  </p>\n<p>　　26-40行的代码的意思是以中间的虚线左右两边的第一个元素为首元素分别开始往左右找出最大的子序列和，然后将左边与右边的最大的子序列的和相加，再在它和maxLeftSum、maxRightSum三个值中取最大值。当索引仅为0和1的时候这样处理肯定是可以拿到0、1组合的子数组的最大序列和，但如果递归的结果再往上一层，这样的处理是否依旧合适呢？当递归到第二层，上图递归的返回值为下图的maxLeftSum。下图展示了下一层递归的结果:(右边可能的Index有两种情况，一种是仅存在一个元素Index = 2，一种是存在元素Index = 2 和 Index = 3,这里我们为了更好的展示过程取两个元素的情况)</p>\n<p><img src=\"/images/maxSubSum/base2.jpg\" alt=\"\" title=\"递归第二层结束之后\">  </p>\n<p>　　这个时候如果还是按照之前的处理，取三者之间的最大值作为最大子序列和的结果是否合适呢？这里需要分情况讨论，现在我们可以确定的是maxLeftSum一定是左边数组最大的子序列的和，maxRightSum一定是右边数组最大的子序列的和。如果存在最大子序列的和不仅是单独取左边和右边里的元素，而是左右两边都需要取值构成最大子序列的和，那么这个对于整体而言的最大子序列一定是包含虚线左右两侧的元素的，因为一个子序列一定是连续的，这样的话就可以按照之前的方法分别从虚线开始往左右两边求最大子序列的和相加一定可以得到整个数组的最大子序列的和。如果不存在最大的子序列的和同时依赖于左和右两边的元素，我们针对maxLeftSum和maxRightSum取较大值即可得到最大子序列和。综合考虑上面两种情况，这样我们在这三个值中取最大值一定可以得到这个数组块的最大子序列和。这个可以递推到无论数组被分为多少块的情况，在数学的证明里也经常使用到这样的方式去证明一个定理，对于某个较小的情况条件成立，我们将这个较小的情况取为一般情况K，然后再证明K+1的情况成立，那么结论一定是成立的，数学里称为归纳假设，同样在这个情况下证明这个递归算法的正确性使用到了相似的方式。  </p>\n<p>　　验证了这个算法的正确性之后，不可缺少的工作是去计算这个算法的时间复杂度。假设我们处理的数组长度为<strong><em>N</em></strong>，仅对<strong><em>maxSubSum3(int[] a,int left,int right)</em></strong>的执行时间进行计算，设其执行时间为T(N)。在这个方法内，15-20行的执行时间为一个常数时间量，设为T(1) = 1；对于26-40行的两个for循环，会遍历$ A_0 到 A_{ N-1 } $的每个元素，在每个循环内部耗费的时间都为常量，因此可设其执行时间为O(N)；接下来就是在23、24上两个递归方法的调用消耗的时间，这两行求解的数组长度大小为N/2，总计消耗的时间为2T(N/2)。忽略常数时间，可以得:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle T(N) = T(\\dfrac{N}{2}) + O(N)</script><p>　　 为了简化计算，我们可以使用N代替上式的O(N)，那么T(N) = 2T(N/2) + N,且有T(1) = 1,那么 T(2) = 2*2 + 2 = 2*2 = 4,T(4) = 2*4 + 4 = 3*4 = 12,T(8) = 2T(4) + 8 = 2*12 + 8 = 4*8 = 32,T(16) = 2T(8) + 16 = 2*32 + 16 = 5*16 = 80 …… 即若$ N = 2^k $,则有:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle T(N) = N * (k+1) = NlogN + N = O(NlogN)</script><p>　　 当然这里的计算结果是假设当$ N = 2^k $的情况，当N不是这个值的时候，需要一些更复杂的分析，但大O的结果是不变的。显然该算法的时间复杂度要比第二种方式低，本来以为到这里已经是最快的解决方式了，可是接下来还有一种比第三种方式时间复杂度更低的算法…而且实现起来居然更简单…不得不为思维的力量折服。 Ｏ(≧▽≦)Ｏ  </p>\n<ul>\n<li>第四种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">11</span>, -<span class=\"number\">21</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, -<span class=\"number\">42</span>&#125;;</span><br><span class=\"line\">            System.out.println(maxSubSum4(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最大子序列求和   第四种写法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>, thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            thisSum += a[ i ];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( thisSum &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">  16</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　这个算法的时间复杂度可以看出来为O(N),但是粗看会质疑这个算法的正确性，因为这里仅有一个for循环去遍历数组中的值，难道这能就求出最大子序列的和？ (╬￣皿￣)=○ 　那我们之前的努力不是徒劳了？别着急，慢慢来看这个算法到底是怎么回事。  </p>\n<p>　　分析程序可以得出，当thisSum为负值的时候，就选择抛弃前面的计算结果，选择从第一个非负值开始递增寻找最大子序列和。当在数组中前几个数字为负值的时候，这样的做法明显是正确的，因为负值不可能作为最大子序列和的开始。但是如果这样的一个序列出现在数组的中间的时候呢？我们假设从a[i]到a[j]出现了一个计算序列结果为负数的情况，那么假设可以从p(p为i+1到j之间的一个整数)开始得到一个比当前最大更大的子序列和，由于子序列必定是连续的，且从a[i]到a[p-1]的和是大于0的，那么很明显我们如果从a[i]开始要比从a[p]开始可以得到一个更大的子序列和。然后再做这样一个比较，从i开始和从j+1开始对比，如果存在一个从j+1开始的子序列的和比当前的最大的子序列大的情况，也是由于子序列的连续性，那么显然从j+1开始要比从i开始的值大，因为a[i]到a[j]的和是一个负数。所以如果出现负数的情况，如果后续还存在一个更大的子序列和，那么它的起点必然是在j之后而不可能在j之前。当然如果不存在从i+1开始存在比当前子序列更大的情况，我们继续累加也是不可能得出一个比当前最大子序列和更大的值。所以我们仅考虑存在比当前子序列更大的情况即可。如果存在从i+1开始比当前子序列更大的情况，综前所述，也必然出现在j之后。  </p>\n<p>　　看似简单的程序其实蕴含了丰富的思考，掌握了这个求最大和问题的本质。 (=ﾟωﾟ)ﾉ</p>\n<p>　　End</p>\n","site":{"data":{}},"excerpt":"<p>　　在总结求最大子序列和的四种实现方式之前想谈谈为什么自己想要重新学习数据结构。之前在大二下学期的时候已经学过了数据结构这个课程，依稀记得老师一直提醒我们数据结构是计算机的核心课程，并且对于考研或者是找工作面试都是很重要的，特地提醒我们要重视这门课程，希望我们好好学习数据结构。当时自己在上数据结构这个课程之前已经使用过基本的数据结构-链表完成了大一下学期的一个C语言课程设计，记得那是自己使用C语言写的一个程序，虽然仅有一百多行，显示界面也只是一个小黑框，但完成的时候特别激动，因为那是自己真正意义上动手写的第一个完整程序。本来还想找到原来的代码运行一下，但发现自己前一段时间为了清理笔记本空间已经将自己之前写的关于C的代码都删除了<strong> ╮(╯﹏╰）╭</strong><br>","more":"<br>　　em….一个订餐管理程序，有显示当前订单列表、添加订餐信息、删除订餐信息、修改订餐信息、根据价格为订单排序、将已有订餐信息写入文件等几个简单的小功能，尤其是添加写入到文件这个模块的时候，自己遇到不知道如何解决的一个地方一直没法正常写入到文件，在CSDN上提问然后得到了一位前辈的指教才顺利的完成的这个功能，thanks　　( • ̀ω•́ )✧ 。这个程序当时给老师展示之后最后拿了93分的成绩，自己对于成绩倒不是特别在意，但这也是老师对自己的一种认可吧，更让自己开心的是探索的过程。那是自己第一次接触数据结构，被链表折磨的死去活来，去图书馆借书学习链表，一本看不懂就再借另外一本，读了好几本不同书籍关于链表的内容才开始慢慢理解它，至今还能回忆起当初冥思苦想的那几天。<strong>(<em>￣∇￣</em>)</strong> </p>\n<p>　　不知不觉又扯了这么远…回到正题，一个学期学习数据结构的时间肯定是不够的，更何况自己当时还并没有花特别多的时间去钻研数据结构，对于每种数据结构都仅仅是简单按照书上的例子实现了一遍，到了现在该忘都忘的差不多了…(╯︵╰) 但真正让我决定重新学习数据结构的原因不是自己想要温习知识，之前面试阿里的时候，面试结束的面试官问我有什么问题想要问他的，我觉得自己面试过程中回答的不好，所以就问面试官对于自己的学习有什么建议没有。面试官就说，培养一个掌握基本开发技能的普通程序员很容易，但数据结构是十分重要的，理解技术的原理也是十分重要的，还讲violate的原理给我听。加上之前在公司的季度技术交流会上，看见某位大佬秀了一波关于数据库方面的数据结构的知识，当时自己真是热血沸腾的感觉，并且那一刻真正的意识到是时候该找时间好好的学习数据结构了，于是才选择了<strong>《数据结构与算法分析　Java语言描述》-Mark Allen Weiss</strong>这本书，并计划一边学习这本书一边写博客记录学习过的内容。最后说一下自己的粗见吧，数据结构可能暂时在开发小型程序的作用还不是特别明显，搭建好开发环境之后，只要对某种语言比较熟练就可以做到业务上的实现，但是如果涉及到大型的应用的构建，当应用吞吐量很大的时候，一个小的细节对于应用整体的性能的作用就会比较明显了，这时候我们不仅需要了解使用到的技术的原理，而且需要更有技巧的编程，用更少的执行时间去完成相同的任务，相反而不是去粗暴的使用蛮力算法实现需求。所以从长远的角度来看，熟练掌握数据结构是十分必要的。  </p>\n<p>　　最大子序列和，就是指在一个元素类型为整型的数组中，求其中连续的一个序列和的最大值，这个序列的开始下标可以是数组中的任意位置。如果我们按照列举所有可能情况的思考方式编写代码:  </p>\n<ul>\n<li>第一种方式   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; <span class=\"number\">19</span>, <span class=\"number\">2</span>, -<span class=\"number\">20</span>, <span class=\"number\">14</span>, <span class=\"number\">35</span>, -<span class=\"number\">3</span>, -<span class=\"number\">21</span>, <span class=\"number\">10</span>, -<span class=\"number\">22</span> &#125;;</span><br><span class=\"line\">    System.out.println(maxSubSum1(a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大子序列和,最简单直接的求最大子序和</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i; k &lt;= j; k++) &#123;</span><br><span class=\"line\">                thisSum += a[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n　　很明显，这里的最大子序列和为前五个元素的和。下面我们分析一下该算法的时间复杂度。假设我们输入的数组的长度为<strong><em>N</em></strong>，忽略声明、调用方法、返回值的开销，仅关注嵌套的for循环所占用的时间，那么所耗费的时间为:　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $  </li>\n</ul>\n<p>　　对该表达式从里到外求和:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle \\sum_{ k=i }^j1=j-i+1</script><p>　　继续从里往外求和:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle \\sum_{ j=i }^{ N-1 }( j-i+1 )=\\dfrac{( N-i+1 )( N-i )}{2}</script><p>　　所以有:  </p>\n<p>　　$ \\displaystyle \\sum_{i=0}^{N-1} \\sum_{j=i}^{N-1} \\sum_{k=i}^j1 $　  </p>\n<p>=　$ \\displaystyle \\sum_{ i=0 }^{ N-1 }{\\dfrac{( N-i+1 )( N-i )}{2}} $  </p>\n<p>=　$ \\displaystyle \\sum_{ i=1 }^{ N }{\\dfrac{( N-i+2 )( N-i+1 )}{2}} $  </p>\n<p>=　$ \\displaystyle \\sum_{ i=1 }^{ N }{ ( \\dfrac{i^2}{2} - \\dfrac{ 3i + 2iN }{ 2 } + \\dfrac{N^2 + 3N + 2 }{ 2 } ) } $    </p>\n<p>=　$ \\displaystyle \\dfrac12 \\sum_{ i=1 }^{ N }{ i^2 } - (\\dfrac{ 3+2N }{ 2 })\\sum_{ i=1 }^{ N }{ i } + (\\dfrac{N^2 + 3N + 2}{ 2 })\\sum_{ i=1 }^{ N }{ 1 } $    </p>\n<p>=　$ \\displaystyle \\dfrac12 \\dfrac{ N(N+1)(N+2) }{6} - (\\dfrac{ 3+2N }{ 2 })\\dfrac{ N(N+1) }{2} + \\dfrac{N^2 + 3N + 2}{ 2 }N  $  </p>\n<p>=　$ \\displaystyle  \\dfrac{ N(N+1)(N+2) }{ 6 } $  </p>\n<p>　　经计算可知该算法的时间复杂度为$ O(N^3) $，其实我们没有必要通过三层的for循环穷举所有的子序列的和，上面的第三层的for循环的计算明显存在冗余，仅仅两个for循环就可以满足求和需求:  </p>\n<ul>\n<li>第二种方式  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; <span class=\"number\">19</span>, <span class=\"number\">2</span>, -<span class=\"number\">20</span>, <span class=\"number\">14</span>, <span class=\"number\">35</span>, -<span class=\"number\">3</span>, -<span class=\"number\">21</span>, <span class=\"number\">10</span>, -<span class=\"number\">22</span> &#125;;</span><br><span class=\"line\">        System.out.println(maxSubSum2(a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">            thisSum += a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　仅关注嵌套的for循环所占用的时间，那么所耗费的时间最多为: $ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $</p>\n<p>　　对该表达式从里到外进行求和计算:<br>　　$ \\displaystyle \\sum_{ i=0 }^{ N-1 } \\sum_{ j=i }^{ N-1 }3 $　  </p>\n<p>=　$ \\displaystyle 3\\sum_{ i=0 }^{ N-1 }(N-i) $</p>\n<p>=　$ \\displaystyle 3\\sum_{ i=1 }^{ N }( N-i+1 ) $</p>\n<p>=　$ \\displaystyle \\dfrac{ 3N(N+1) }{ 2 } $</p>\n<p>　　计算知第二种方法的时间复杂度为$ O(N^2) $。第二种方式避免了单独计算每个子序列结果的值，在第一种方式里，当第二层循环的j取最大值的时候，最里面的循环累加的结果包含了j取其它值的情况。而第二种方式正好避免这种冗余的计算，将每次累加的结果与当前最大的结果对比，从而降低了时间复杂度。以为这就是最优秀的方法了吗？然而编程思想的威力远没有这么简单，第三种方式采用了在算法设计中普遍采用的一种方式-<strong><em>“分而治之”</em></strong>:  </p>\n<ul>\n<li>第三种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        int[] a = new int[]&#123; 19, 2, -20, 14, 35, -3, -21, 10, -22 &#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">11</span>, -<span class=\"number\">21</span>, -<span class=\"number\">5</span>, -<span class=\"number\">11</span>, -<span class=\"number\">42</span>&#125;;</span><br><span class=\"line\">    System.out.println(maxSubSum3(a, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大子序列和  第三种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum3</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对于递归方法总会有一个基准情况，这里的left与right相等的时候就是我们这里例子的基准</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( left == right )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( a[ left ] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[ left ];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLeftSum = maxSubSum3(a, left, center);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxRightSum = maxSubSum3(a, center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxLeftBorderSum = <span class=\"number\">0</span>, leftBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = center; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        leftBorderSum += a[ i ];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( leftBorderSum &gt; maxLeftBorderSum)&#123;</span><br><span class=\"line\">            maxLeftBorderSum = leftBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxRightBorderSum = <span class=\"number\">0</span>, rightBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = center + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        rightBorderSum += a[ i ];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rightBorderSum &gt; maxRightBorderSum)&#123;</span><br><span class=\"line\">            maxRightBorderSum = rightBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3(maxLeftSum, maxRightSum, maxLeftBorderSum + maxRightBorderSum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">max3</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b &gt; a || c &gt; a)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b &gt; c)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　显然第三种方式的代码要比前两种复杂，但是复杂不是出发点，我们的目的是减少时间复杂度。在第三种方式中，核心方法是<strong><em>int maxSubSum3(int[] a,int left,int right)</em></strong>，递归方法往往都存在着一个基准情况，不然递归就会无限循环调用下去，程序也毫无意义了。在这里15-20行是这个递归方法的基准情况，方法中的23、24行中进行了对自身的调用。接下来分析这个代码是如何执行的，为了更清楚该代码的执行过程，我调试程序的时候特意注释掉了main方法之前在第一种方式和第二种方式使用到的参数，使用数量较少的参数去还原该算法整个过程。方法中有三个参数，<strong><em>int[] a、int left、int right</em></strong>，第一次传递到该方法中的实参是数组a的起始下标和结束下标，显然第一次调用该方法是不满足基准情况的，在不满足基准情况下继续往下执行，计算left和right的平均值，如果不能整除则取去掉小数位的数值。然后分别将center作为right的实参传递到<strong><em>maxSubSum3()</em></strong>为maxLeftSum赋值，center+1作为left的实参传递到<strong><em>maxSubSum3()</em></strong>为maxRightSum赋值。顾名思义，maxLeftSum和maxRightSum其实就是将数组分为左右两块之后左右两个数组的最大子序列和的值。但是我们怎么知道这两个变量的值是左右两个数组的最大子序列和的值呢？仅从外层去理解这个程序是无法得出这个结论的，我们不妨追溯到该程序的基准情况，left=right。  </p>\n<p>　　当left与right相等的时候，程序会判断数组对应left的索引下标的值是否大于0，如果大于0，则返回对应值，小于0则返回0。显然这里就是该递归的基准情况了，当基准情况返回到上一层的调用，center的值必然与left是相等的，且right的值必然等于center+1。这个情况不难分析，因为　center = (left + right) / 2,且left与center相等，left不等于right,所以right必然等于center + 1。且该基准情况准只可能对应数组中的起始元素和结束元素，因为在递归调用中为maxLeftSum赋值的时候左边的参数不变，而center会不断减少直到与left相等，而其它方法中执行到了为maxLeftSum赋值的时候已经过了基准条件的筛选，同理为maxRightSum赋值的递归调用也是如此。明白了这一层关系，我们可以从程序的基准情况开始分析，下图的圆形表示从基准情况返回到上一层的时候，maxLeftSum以及maxRightSum的值,如果index对应0和1的值大于0则返回对应的值否则返回0:  </p>\n<p><img src=\"/images/maxSubSum/base1.jpg\" alt=\"\" title=\"最内层递归结束之后\">  </p>\n<p>　　26-40行的代码的意思是以中间的虚线左右两边的第一个元素为首元素分别开始往左右找出最大的子序列和，然后将左边与右边的最大的子序列的和相加，再在它和maxLeftSum、maxRightSum三个值中取最大值。当索引仅为0和1的时候这样处理肯定是可以拿到0、1组合的子数组的最大序列和，但如果递归的结果再往上一层，这样的处理是否依旧合适呢？当递归到第二层，上图递归的返回值为下图的maxLeftSum。下图展示了下一层递归的结果:(右边可能的Index有两种情况，一种是仅存在一个元素Index = 2，一种是存在元素Index = 2 和 Index = 3,这里我们为了更好的展示过程取两个元素的情况)</p>\n<p><img src=\"/images/maxSubSum/base2.jpg\" alt=\"\" title=\"递归第二层结束之后\">  </p>\n<p>　　这个时候如果还是按照之前的处理，取三者之间的最大值作为最大子序列和的结果是否合适呢？这里需要分情况讨论，现在我们可以确定的是maxLeftSum一定是左边数组最大的子序列的和，maxRightSum一定是右边数组最大的子序列的和。如果存在最大子序列的和不仅是单独取左边和右边里的元素，而是左右两边都需要取值构成最大子序列的和，那么这个对于整体而言的最大子序列一定是包含虚线左右两侧的元素的，因为一个子序列一定是连续的，这样的话就可以按照之前的方法分别从虚线开始往左右两边求最大子序列的和相加一定可以得到整个数组的最大子序列的和。如果不存在最大的子序列的和同时依赖于左和右两边的元素，我们针对maxLeftSum和maxRightSum取较大值即可得到最大子序列和。综合考虑上面两种情况，这样我们在这三个值中取最大值一定可以得到这个数组块的最大子序列和。这个可以递推到无论数组被分为多少块的情况，在数学的证明里也经常使用到这样的方式去证明一个定理，对于某个较小的情况条件成立，我们将这个较小的情况取为一般情况K，然后再证明K+1的情况成立，那么结论一定是成立的，数学里称为归纳假设，同样在这个情况下证明这个递归算法的正确性使用到了相似的方式。  </p>\n<p>　　验证了这个算法的正确性之后，不可缺少的工作是去计算这个算法的时间复杂度。假设我们处理的数组长度为<strong><em>N</em></strong>，仅对<strong><em>maxSubSum3(int[] a,int left,int right)</em></strong>的执行时间进行计算，设其执行时间为T(N)。在这个方法内，15-20行的执行时间为一个常数时间量，设为T(1) = 1；对于26-40行的两个for循环，会遍历$ A_0 到 A_{ N-1 } $的每个元素，在每个循环内部耗费的时间都为常量，因此可设其执行时间为O(N)；接下来就是在23、24上两个递归方法的调用消耗的时间，这两行求解的数组长度大小为N/2，总计消耗的时间为2T(N/2)。忽略常数时间，可以得:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle T(N) = T(\\dfrac{N}{2}) + O(N)</script><p>　　 为了简化计算，我们可以使用N代替上式的O(N)，那么T(N) = 2T(N/2) + N,且有T(1) = 1,那么 T(2) = 2*2 + 2 = 2*2 = 4,T(4) = 2*4 + 4 = 3*4 = 12,T(8) = 2T(4) + 8 = 2*12 + 8 = 4*8 = 32,T(16) = 2T(8) + 16 = 2*32 + 16 = 5*16 = 80 …… 即若$ N = 2^k $,则有:  </p>\n<script type=\"math/tex; mode=display\">\\displaystyle T(N) = N * (k+1) = NlogN + N = O(NlogN)</script><p>　　 当然这里的计算结果是假设当$ N = 2^k $的情况，当N不是这个值的时候，需要一些更复杂的分析，但大O的结果是不变的。显然该算法的时间复杂度要比第二种方式低，本来以为到这里已经是最快的解决方式了，可是接下来还有一种比第三种方式时间复杂度更低的算法…而且实现起来居然更简单…不得不为思维的力量折服。 Ｏ(≧▽≦)Ｏ  </p>\n<ul>\n<li>第四种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">11</span>, -<span class=\"number\">21</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>, -<span class=\"number\">42</span>&#125;;</span><br><span class=\"line\">            System.out.println(maxSubSum4(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最大子序列求和   第四种写法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubSum4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSum = <span class=\"number\">0</span>, thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            thisSum += a[ i ];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class=\"line\">                maxSum = thisSum;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( thisSum &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                thisSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">  16</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>  \n</li>\n</ul>\n<p>　　这个算法的时间复杂度可以看出来为O(N),但是粗看会质疑这个算法的正确性，因为这里仅有一个for循环去遍历数组中的值，难道这能就求出最大子序列的和？ (╬￣皿￣)=○ 　那我们之前的努力不是徒劳了？别着急，慢慢来看这个算法到底是怎么回事。  </p>\n<p>　　分析程序可以得出，当thisSum为负值的时候，就选择抛弃前面的计算结果，选择从第一个非负值开始递增寻找最大子序列和。当在数组中前几个数字为负值的时候，这样的做法明显是正确的，因为负值不可能作为最大子序列和的开始。但是如果这样的一个序列出现在数组的中间的时候呢？我们假设从a[i]到a[j]出现了一个计算序列结果为负数的情况，那么假设可以从p(p为i+1到j之间的一个整数)开始得到一个比当前最大更大的子序列和，由于子序列必定是连续的，且从a[i]到a[p-1]的和是大于0的，那么很明显我们如果从a[i]开始要比从a[p]开始可以得到一个更大的子序列和。然后再做这样一个比较，从i开始和从j+1开始对比，如果存在一个从j+1开始的子序列的和比当前的最大的子序列大的情况，也是由于子序列的连续性，那么显然从j+1开始要比从i开始的值大，因为a[i]到a[j]的和是一个负数。所以如果出现负数的情况，如果后续还存在一个更大的子序列和，那么它的起点必然是在j之后而不可能在j之前。当然如果不存在从i+1开始存在比当前子序列更大的情况，我们继续累加也是不可能得出一个比当前最大子序列和更大的值。所以我们仅考虑存在比当前子序列更大的情况即可。如果存在从i+1开始比当前子序列更大的情况，综前所述，也必然出现在j之后。  </p>\n<p>　　看似简单的程序其实蕴含了丰富的思考，掌握了这个求最大和问题的本质。 (=ﾟωﾟ)ﾉ</p>\n<p>　　End</p>"},{"layout":"post","title":"Comparator && Comparable in Java","date":"2018-11-06T08:33:00.000Z","_content":"　　Comparator和Comparable是Java中将对象按照数据成员进行排序的两个接口，最近在读**《数据结构与算法分析　Java语言描述》_-Mark Allen Weiss_** ,看到书中的例子使用到了这两个接口，所以就想学习一下Java中这两个接口的使用方式　(｀・ω・´)\n<!-- more -->\n　　在Java中Comparable接口定义为:  \n{% codeblock  lang:java %}\n    package java.lang;\n    import java.util.*;\n\n    public interface Comparable<T> {    \n      public int compareTo(T o);\n    }\n{% endcodeblock %}\n　　接口中仅定义了一个***compareTo()***方法，自定义的对象则可以通过实现这个方法并结合Collections.sort()进行排序。比如自定义一个Order类:\n{% codeblock  lang:java %}\n  public class Order implements Comparable<Order>{\n\n      private int orderNumber;\n      private String orderDes;\n      private LocalDate orderTime;\n\n      public Order(int orderNumber, String orderDes, LocalDate orderTime) {\n          this.orderNumber = orderNumber;\n          this.orderDes = orderDes;\n          this.orderTime = orderTime;\n      }\n\n      @Override\n      public int compareTo(Order o) {\n          return this.getOrderNumber() - o.getOrderNumber();\n      }\n\n      @Override\n      public String toString() {\n          return  this.orderNumber + \"  \" + this.orderDes + \"  \" + this.orderTime;\n      }\n      // ... 省略getter setter\n{% endcodeblock %}\n　　该Order类中定义了三个字段orderNumber、orderDes、orderTime，依次表示订单号、订单描述、订单时间。***compareTo()***方法简单的返回订单号的值的相减结果，第一次单元测试用例如下:\n{% codeblock lang:java %}\n    @Test\n    void testComparableSimple() {\n        ArrayList<Order> lists = new ArrayList<>();\n        lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n        lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n        lists.add(new Order(71,\"order 71\",LocalDate.of(2015,2,7)));\n        lists.add(new Order(691,\"order 691\",LocalDate.of(2011,6,21)));\n        lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n        for (int i = 0; i < lists.size() - 1 ; i++) {\n            System.out.println(\"第\" + i +\"个元素与第\" + (i+1) + \"元素进行比较:\" +\n                    lists.get(i).compareTo(lists.get(i+1)));\n        }\n    }\n  /* 输出结果:\n      第0个元素与第1元素进行比较:-98\n      第1个元素与第2元素进行比较:150\n      第2个元素与第3元素进行比较:-620\n      第3个元素与第4元素进行比较:272\n  */\n{% endcodeblock %}\n　　从上面的输出结果可以看出，Order类实现的Comparable接口的作用就是用于与其它Order对象使用***compareTo()***进行比较并返回一个int值。目前我们还看不出这个方法的作用，但是我们再看下一个单元测试就会明白其的作用了:\n{% codeblock lang:java %}\n  @Test\n  void testComparableSecond() {\n      ArrayList<Order> lists = new ArrayList<>();\n      lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n      lists.add(new Order(71,\"order 71\",LocalDate.of(2015,2,7)));\n      lists.add(new Order(691,\"order 691\",LocalDate.of(2011,6,21)));\n      lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n\n      System.out.println(\"未进行排序前的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n      // 调用Collections.sort()进行排序\n      Collections.sort(lists);\n      System.out.println(\"进行排序之后的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n  }\n  /* 输出结果:\n      未进行排序前的顺序:\n      123  order 123  2018-11-06\n      221  order 221  2012-09-01\n      71  order 71  2015-02-07\n      691  order 691  2011-06-21\n      419  order 419  2009-03-31\n      进行排序之后的顺序:\n      71  order 71  2015-02-07\n      123  order 123  2018-11-06\n      221  order 221  2012-09-01\n      419  order 419  2009-03-31\n      691  order 691  2011-06-21\n  */\n{% endcodeblock %}\n　　从输出结果可以看出lists里的数据根据orderNumber进行了升序排序，而这是因为Order实现了Comparable接口的***compareTo()***方法,我们在该方法中返回相减的结果。当结果为正数，零，或者负数分别表示调用***compareTo()***的对象大于、等于、小于传递到方法中的参数对象，默认升序排序。如果需要降序排序则返回相反数即可。\n　　至于Comparator接口，如果需要使用其来进行排序则需要编写一个类去实现它的***compare()***方法，这里我们编写一个先根据订单号再根据订单日期进行排序的实现类***SortByOrderNumberAndTime.class:***\n{% codeblock lang:java %}\n  public class SortByOrderNumberAndTime implements Comparator<Order> {\n        /**\n         * 根据订单号进行排序，订单号相同则根据时间进行排序\n         * @param o1\n         * @param o2\n         * @return\n         */\n        @Override\n        public int compare(Order o1, Order o2) {\n            int numberOrder = o1.getOrderNumber() - o2.getOrderNumber();\n            int timeOrder = o1.getOrderTime().compareTo(o2.getOrderTime());\n            if(numberOrder == 0 && timeOrder != 0)\n                return timeOrder;\n            else\n                return numberOrder;\n        }\n  }\n{% endcodeblock %}\n　　对应的单元测试:\n{% codeblock lang:java %}\n  @Test\n  void testComparator() {\n      ArrayList<Order> lists = new ArrayList<>();\n      lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2017,2,7)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2015,6,21)));\n      lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n      System.out.println(\"未进行排序前的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n      Collections.sort(lists,new SortByOrderNumberAndTime());\n      System.out.println(\"排序之后的顺序\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n  }\n/*输出结果:\n  未进行排序前的顺序:\n  123  order 123  2018-11-06\n  221  order 221  2012-09-01\n  221  order 221  2017-02-07\n  221  order 221  2015-06-21\n  419  order 419  2009-03-31\n  排序之后的顺序\n  123  order 123  2018-11-06\n  221  order 221  2012-09-01\n  221  order 221  2015-06-21\n  221  order 221  2017-02-07\n  419  order 419  2009-03-31\n*/\n{% endcodeblock %}\n　　我们可以看到lists首先根据订单号然后根据时间先后顺序进行了排序，这里也是依据SortByOrderNumberAndTime类中实现的***compare()***方法进行的排序，并且在compare()里使用到了LocalDate类里的compareTo()方法去比较时间先后顺序，除了LocalDate,Java中许多常用的类也默认提供了对Comparable接口的实现，比如String、Integer、Character、Float、Byte基本数据类型的包装类，具体可以查看官网的Docs。\n　　不论是Comparator接口还是Comparable接口，都是实现排序的一种方式，当然也可以结合一起使用，具体的使用方式还是得取决于最终的需求。\n","source":"_posts/Comparator && Comparable.md","raw":"layout: \"post\"\ntitle: \"Comparator && Comparable in Java\"\ndate: \"2018-11-06 16:33\"\ncategories:\n- [JAVA,DATA_STRACTURE]\ntags:\n- [TECHNOLOGY]\n---\n　　Comparator和Comparable是Java中将对象按照数据成员进行排序的两个接口，最近在读**《数据结构与算法分析　Java语言描述》_-Mark Allen Weiss_** ,看到书中的例子使用到了这两个接口，所以就想学习一下Java中这两个接口的使用方式　(｀・ω・´)\n<!-- more -->\n　　在Java中Comparable接口定义为:  \n{% codeblock  lang:java %}\n    package java.lang;\n    import java.util.*;\n\n    public interface Comparable<T> {    \n      public int compareTo(T o);\n    }\n{% endcodeblock %}\n　　接口中仅定义了一个***compareTo()***方法，自定义的对象则可以通过实现这个方法并结合Collections.sort()进行排序。比如自定义一个Order类:\n{% codeblock  lang:java %}\n  public class Order implements Comparable<Order>{\n\n      private int orderNumber;\n      private String orderDes;\n      private LocalDate orderTime;\n\n      public Order(int orderNumber, String orderDes, LocalDate orderTime) {\n          this.orderNumber = orderNumber;\n          this.orderDes = orderDes;\n          this.orderTime = orderTime;\n      }\n\n      @Override\n      public int compareTo(Order o) {\n          return this.getOrderNumber() - o.getOrderNumber();\n      }\n\n      @Override\n      public String toString() {\n          return  this.orderNumber + \"  \" + this.orderDes + \"  \" + this.orderTime;\n      }\n      // ... 省略getter setter\n{% endcodeblock %}\n　　该Order类中定义了三个字段orderNumber、orderDes、orderTime，依次表示订单号、订单描述、订单时间。***compareTo()***方法简单的返回订单号的值的相减结果，第一次单元测试用例如下:\n{% codeblock lang:java %}\n    @Test\n    void testComparableSimple() {\n        ArrayList<Order> lists = new ArrayList<>();\n        lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n        lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n        lists.add(new Order(71,\"order 71\",LocalDate.of(2015,2,7)));\n        lists.add(new Order(691,\"order 691\",LocalDate.of(2011,6,21)));\n        lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n        for (int i = 0; i < lists.size() - 1 ; i++) {\n            System.out.println(\"第\" + i +\"个元素与第\" + (i+1) + \"元素进行比较:\" +\n                    lists.get(i).compareTo(lists.get(i+1)));\n        }\n    }\n  /* 输出结果:\n      第0个元素与第1元素进行比较:-98\n      第1个元素与第2元素进行比较:150\n      第2个元素与第3元素进行比较:-620\n      第3个元素与第4元素进行比较:272\n  */\n{% endcodeblock %}\n　　从上面的输出结果可以看出，Order类实现的Comparable接口的作用就是用于与其它Order对象使用***compareTo()***进行比较并返回一个int值。目前我们还看不出这个方法的作用，但是我们再看下一个单元测试就会明白其的作用了:\n{% codeblock lang:java %}\n  @Test\n  void testComparableSecond() {\n      ArrayList<Order> lists = new ArrayList<>();\n      lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n      lists.add(new Order(71,\"order 71\",LocalDate.of(2015,2,7)));\n      lists.add(new Order(691,\"order 691\",LocalDate.of(2011,6,21)));\n      lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n\n      System.out.println(\"未进行排序前的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n      // 调用Collections.sort()进行排序\n      Collections.sort(lists);\n      System.out.println(\"进行排序之后的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n  }\n  /* 输出结果:\n      未进行排序前的顺序:\n      123  order 123  2018-11-06\n      221  order 221  2012-09-01\n      71  order 71  2015-02-07\n      691  order 691  2011-06-21\n      419  order 419  2009-03-31\n      进行排序之后的顺序:\n      71  order 71  2015-02-07\n      123  order 123  2018-11-06\n      221  order 221  2012-09-01\n      419  order 419  2009-03-31\n      691  order 691  2011-06-21\n  */\n{% endcodeblock %}\n　　从输出结果可以看出lists里的数据根据orderNumber进行了升序排序，而这是因为Order实现了Comparable接口的***compareTo()***方法,我们在该方法中返回相减的结果。当结果为正数，零，或者负数分别表示调用***compareTo()***的对象大于、等于、小于传递到方法中的参数对象，默认升序排序。如果需要降序排序则返回相反数即可。\n　　至于Comparator接口，如果需要使用其来进行排序则需要编写一个类去实现它的***compare()***方法，这里我们编写一个先根据订单号再根据订单日期进行排序的实现类***SortByOrderNumberAndTime.class:***\n{% codeblock lang:java %}\n  public class SortByOrderNumberAndTime implements Comparator<Order> {\n        /**\n         * 根据订单号进行排序，订单号相同则根据时间进行排序\n         * @param o1\n         * @param o2\n         * @return\n         */\n        @Override\n        public int compare(Order o1, Order o2) {\n            int numberOrder = o1.getOrderNumber() - o2.getOrderNumber();\n            int timeOrder = o1.getOrderTime().compareTo(o2.getOrderTime());\n            if(numberOrder == 0 && timeOrder != 0)\n                return timeOrder;\n            else\n                return numberOrder;\n        }\n  }\n{% endcodeblock %}\n　　对应的单元测试:\n{% codeblock lang:java %}\n  @Test\n  void testComparator() {\n      ArrayList<Order> lists = new ArrayList<>();\n      lists.add(new Order(123,\"order 123\",LocalDate.of(2018,11,6)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2012,9,1)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2017,2,7)));\n      lists.add(new Order(221,\"order 221\",LocalDate.of(2015,6,21)));\n      lists.add(new Order(419,\"order 419\",LocalDate.of(2009,3,31)));\n      System.out.println(\"未进行排序前的顺序:\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n      Collections.sort(lists,new SortByOrderNumberAndTime());\n      System.out.println(\"排序之后的顺序\");\n      for(Order order: lists){\n          System.out.println(order);\n      }\n  }\n/*输出结果:\n  未进行排序前的顺序:\n  123  order 123  2018-11-06\n  221  order 221  2012-09-01\n  221  order 221  2017-02-07\n  221  order 221  2015-06-21\n  419  order 419  2009-03-31\n  排序之后的顺序\n  123  order 123  2018-11-06\n  221  order 221  2012-09-01\n  221  order 221  2015-06-21\n  221  order 221  2017-02-07\n  419  order 419  2009-03-31\n*/\n{% endcodeblock %}\n　　我们可以看到lists首先根据订单号然后根据时间先后顺序进行了排序，这里也是依据SortByOrderNumberAndTime类中实现的***compare()***方法进行的排序，并且在compare()里使用到了LocalDate类里的compareTo()方法去比较时间先后顺序，除了LocalDate,Java中许多常用的类也默认提供了对Comparable接口的实现，比如String、Integer、Character、Float、Byte基本数据类型的包装类，具体可以查看官网的Docs。\n　　不论是Comparator接口还是Comparable接口，都是实现排序的一种方式，当然也可以结合一起使用，具体的使用方式还是得取决于最终的需求。\n","slug":"Comparator && Comparable","published":1,"updated":"2019-05-19T09:42:05.859Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxac0007fo81j2hkiih9","content":"<p>　　Comparator和Comparable是Java中将对象按照数据成员进行排序的两个接口，最近在读<strong>《数据结构与算法分析　Java语言描述》_-Mark Allen Weiss_</strong> ,看到书中的例子使用到了这两个接口，所以就想学习一下Java中这两个接口的使用方式　(｀・ω・´)<br><a id=\"more\"></a><br>　　在Java中Comparable接口定义为:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　接口中仅定义了一个<strong><em>compareTo()</em></strong>方法，自定义的对象则可以通过实现这个方法并结合Collections.sort()进行排序。比如自定义一个Order类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Order</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> orderNumber;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderDes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDate orderTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Order</span><span class=\"params\">(<span class=\"keyword\">int</span> orderNumber, String orderDes, LocalDate orderTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderNumber = orderNumber;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderDes = orderDes;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderTime = orderTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Order o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getOrderNumber() - o.getOrderNumber();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span>.orderNumber + <span class=\"string\">\"  \"</span> + <span class=\"keyword\">this</span>.orderDes + <span class=\"string\">\"  \"</span> + <span class=\"keyword\">this</span>.orderTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... 省略getter setter</span></span><br></pre></td></tr></table></figure><br>　　该Order类中定义了三个字段orderNumber、orderDes、orderTime，依次表示订单号、订单描述、订单时间。<strong><em>compareTo()</em></strong>方法简单的返回订单号的值的相减结果，第一次单元测试用例如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparableSimple</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">71</span>,<span class=\"string\">\"order 71\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">691</span>,<span class=\"string\">\"order 691\"</span>,LocalDate.of(<span class=\"number\">2011</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lists.size() - <span class=\"number\">1</span> ; i++) &#123;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"第\"</span> + i +<span class=\"string\">\"个元素与第\"</span> + (i+<span class=\"number\">1</span>) + <span class=\"string\">\"元素进行比较:\"</span> +</span><br><span class=\"line\">                  lists.get(i).compareTo(lists.get(i+<span class=\"number\">1</span>)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    第0个元素与第1元素进行比较:-98</span></span><br><span class=\"line\"><span class=\"comment\">    第1个元素与第2元素进行比较:150</span></span><br><span class=\"line\"><span class=\"comment\">    第2个元素与第3元素进行比较:-620</span></span><br><span class=\"line\"><span class=\"comment\">    第3个元素与第4元素进行比较:272</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　从上面的输出结果可以看出，Order类实现的Comparable接口的作用就是用于与其它Order对象使用<strong><em>compareTo()</em></strong>进行比较并返回一个int值。目前我们还看不出这个方法的作用，但是我们再看下一个单元测试就会明白其的作用了:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparableSecond</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">71</span>,<span class=\"string\">\"order 71\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">691</span>,<span class=\"string\">\"order 691\"</span>,LocalDate.of(<span class=\"number\">2011</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"未进行排序前的顺序:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">        System.out.println(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用Collections.sort()进行排序</span></span><br><span class=\"line\">    Collections.sort(lists);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"进行排序之后的顺序:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">        System.out.println(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    未进行排序前的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">    123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">    221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">    71  order 71  2015-02-07</span></span><br><span class=\"line\"><span class=\"comment\">    691  order 691  2011-06-21</span></span><br><span class=\"line\"><span class=\"comment\">    419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">    进行排序之后的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">    71  order 71  2015-02-07</span></span><br><span class=\"line\"><span class=\"comment\">    123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">    221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">    419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">    691  order 691  2011-06-21</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　从输出结果可以看出lists里的数据根据orderNumber进行了升序排序，而这是因为Order实现了Comparable接口的<strong><em>compareTo()</em></strong>方法,我们在该方法中返回相减的结果。当结果为正数，零，或者负数分别表示调用<strong><em>compareTo()</em></strong>的对象大于、等于、小于传递到方法中的参数对象，默认升序排序。如果需要降序排序则返回相反数即可。<br>　　至于Comparator接口，如果需要使用其来进行排序则需要编写一个类去实现它的<strong><em>compare()</em></strong>方法，这里我们编写一个先根据订单号再根据订单日期进行排序的实现类<strong><em>SortByOrderNumberAndTime.class:</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortByOrderNumberAndTime</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Order</span>&gt; </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 根据订单号进行排序，订单号相同则根据时间进行排序</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@param</span> o1</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@param</span> o2</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Order o1, Order o2)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> numberOrder = o1.getOrderNumber() - o2.getOrderNumber();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> timeOrder = o1.getOrderTime().compareTo(o2.getOrderTime());</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(numberOrder == <span class=\"number\">0</span> &amp;&amp; timeOrder != <span class=\"number\">0</span>)</span><br><span class=\"line\">              <span class=\"keyword\">return</span> timeOrder;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> numberOrder;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　对应的单元测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2017</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"未进行排序前的顺序:\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">          System.out.println(order);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Collections.sort(lists,<span class=\"keyword\">new</span> SortByOrderNumberAndTime());</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"排序之后的顺序\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">          System.out.println(order);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">  未进行排序前的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">  123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2017-02-07</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2015-06-21</span></span><br><span class=\"line\"><span class=\"comment\">  419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">  排序之后的顺序</span></span><br><span class=\"line\"><span class=\"comment\">  123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2015-06-21</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2017-02-07</span></span><br><span class=\"line\"><span class=\"comment\">  419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　我们可以看到lists首先根据订单号然后根据时间先后顺序进行了排序，这里也是依据SortByOrderNumberAndTime类中实现的<strong><em>compare()</em></strong>方法进行的排序，并且在compare()里使用到了LocalDate类里的compareTo()方法去比较时间先后顺序，除了LocalDate,Java中许多常用的类也默认提供了对Comparable接口的实现，比如String、Integer、Character、Float、Byte基本数据类型的包装类，具体可以查看官网的Docs。<br>　　不论是Comparator接口还是Comparable接口，都是实现排序的一种方式，当然也可以结合一起使用，具体的使用方式还是得取决于最终的需求。</p>\n","site":{"data":{}},"excerpt":"<p>　　Comparator和Comparable是Java中将对象按照数据成员进行排序的两个接口，最近在读<strong>《数据结构与算法分析　Java语言描述》_-Mark Allen Weiss_</strong> ,看到书中的例子使用到了这两个接口，所以就想学习一下Java中这两个接口的使用方式　(｀・ω・´)<br>","more":"<br>　　在Java中Comparable接口定义为:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　接口中仅定义了一个<strong><em>compareTo()</em></strong>方法，自定义的对象则可以通过实现这个方法并结合Collections.sort()进行排序。比如自定义一个Order类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Order</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> orderNumber;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderDes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDate orderTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Order</span><span class=\"params\">(<span class=\"keyword\">int</span> orderNumber, String orderDes, LocalDate orderTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderNumber = orderNumber;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderDes = orderDes;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderTime = orderTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Order o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getOrderNumber() - o.getOrderNumber();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span>.orderNumber + <span class=\"string\">\"  \"</span> + <span class=\"keyword\">this</span>.orderDes + <span class=\"string\">\"  \"</span> + <span class=\"keyword\">this</span>.orderTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... 省略getter setter</span></span><br></pre></td></tr></table></figure><br>　　该Order类中定义了三个字段orderNumber、orderDes、orderTime，依次表示订单号、订单描述、订单时间。<strong><em>compareTo()</em></strong>方法简单的返回订单号的值的相减结果，第一次单元测试用例如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparableSimple</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">71</span>,<span class=\"string\">\"order 71\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">691</span>,<span class=\"string\">\"order 691\"</span>,LocalDate.of(<span class=\"number\">2011</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lists.size() - <span class=\"number\">1</span> ; i++) &#123;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"第\"</span> + i +<span class=\"string\">\"个元素与第\"</span> + (i+<span class=\"number\">1</span>) + <span class=\"string\">\"元素进行比较:\"</span> +</span><br><span class=\"line\">                  lists.get(i).compareTo(lists.get(i+<span class=\"number\">1</span>)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    第0个元素与第1元素进行比较:-98</span></span><br><span class=\"line\"><span class=\"comment\">    第1个元素与第2元素进行比较:150</span></span><br><span class=\"line\"><span class=\"comment\">    第2个元素与第3元素进行比较:-620</span></span><br><span class=\"line\"><span class=\"comment\">    第3个元素与第4元素进行比较:272</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　从上面的输出结果可以看出，Order类实现的Comparable接口的作用就是用于与其它Order对象使用<strong><em>compareTo()</em></strong>进行比较并返回一个int值。目前我们还看不出这个方法的作用，但是我们再看下一个单元测试就会明白其的作用了:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparableSecond</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">71</span>,<span class=\"string\">\"order 71\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">691</span>,<span class=\"string\">\"order 691\"</span>,LocalDate.of(<span class=\"number\">2011</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">    lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"未进行排序前的顺序:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">        System.out.println(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用Collections.sort()进行排序</span></span><br><span class=\"line\">    Collections.sort(lists);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"进行排序之后的顺序:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">        System.out.println(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">    未进行排序前的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">    123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">    221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">    71  order 71  2015-02-07</span></span><br><span class=\"line\"><span class=\"comment\">    691  order 691  2011-06-21</span></span><br><span class=\"line\"><span class=\"comment\">    419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">    进行排序之后的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">    71  order 71  2015-02-07</span></span><br><span class=\"line\"><span class=\"comment\">    123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">    221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">    419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">    691  order 691  2011-06-21</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　从输出结果可以看出lists里的数据根据orderNumber进行了升序排序，而这是因为Order实现了Comparable接口的<strong><em>compareTo()</em></strong>方法,我们在该方法中返回相减的结果。当结果为正数，零，或者负数分别表示调用<strong><em>compareTo()</em></strong>的对象大于、等于、小于传递到方法中的参数对象，默认升序排序。如果需要降序排序则返回相反数即可。<br>　　至于Comparator接口，如果需要使用其来进行排序则需要编写一个类去实现它的<strong><em>compare()</em></strong>方法，这里我们编写一个先根据订单号再根据订单日期进行排序的实现类<strong><em>SortByOrderNumberAndTime.class:</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortByOrderNumberAndTime</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Order</span>&gt; </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 根据订单号进行排序，订单号相同则根据时间进行排序</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@param</span> o1</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@param</span> o2</span></span><br><span class=\"line\"><span class=\"comment\">       * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Order o1, Order o2)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> numberOrder = o1.getOrderNumber() - o2.getOrderNumber();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> timeOrder = o1.getOrderTime().compareTo(o2.getOrderTime());</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(numberOrder == <span class=\"number\">0</span> &amp;&amp; timeOrder != <span class=\"number\">0</span>)</span><br><span class=\"line\">              <span class=\"keyword\">return</span> timeOrder;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> numberOrder;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　对应的单元测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testComparator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ArrayList&lt;Order&gt; lists = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">123</span>,<span class=\"string\">\"order 123\"</span>,LocalDate.of(<span class=\"number\">2018</span>,<span class=\"number\">11</span>,<span class=\"number\">6</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2012</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2017</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">221</span>,<span class=\"string\">\"order 221\"</span>,LocalDate.of(<span class=\"number\">2015</span>,<span class=\"number\">6</span>,<span class=\"number\">21</span>)));</span><br><span class=\"line\">      lists.add(<span class=\"keyword\">new</span> Order(<span class=\"number\">419</span>,<span class=\"string\">\"order 419\"</span>,LocalDate.of(<span class=\"number\">2009</span>,<span class=\"number\">3</span>,<span class=\"number\">31</span>)));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"未进行排序前的顺序:\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">          System.out.println(order);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Collections.sort(lists,<span class=\"keyword\">new</span> SortByOrderNumberAndTime());</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"排序之后的顺序\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(Order order: lists)&#123;</span><br><span class=\"line\">          System.out.println(order);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">  未进行排序前的顺序:</span></span><br><span class=\"line\"><span class=\"comment\">  123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2017-02-07</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2015-06-21</span></span><br><span class=\"line\"><span class=\"comment\">  419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">  排序之后的顺序</span></span><br><span class=\"line\"><span class=\"comment\">  123  order 123  2018-11-06</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2012-09-01</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2015-06-21</span></span><br><span class=\"line\"><span class=\"comment\">  221  order 221  2017-02-07</span></span><br><span class=\"line\"><span class=\"comment\">  419  order 419  2009-03-31</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>　　我们可以看到lists首先根据订单号然后根据时间先后顺序进行了排序，这里也是依据SortByOrderNumberAndTime类中实现的<strong><em>compare()</em></strong>方法进行的排序，并且在compare()里使用到了LocalDate类里的compareTo()方法去比较时间先后顺序，除了LocalDate,Java中许多常用的类也默认提供了对Comparable接口的实现，比如String、Integer、Character、Float、Byte基本数据类型的包装类，具体可以查看官网的Docs。<br>　　不论是Comparator接口还是Comparable接口，都是实现排序的一种方式，当然也可以结合一起使用，具体的使用方式还是得取决于最终的需求。</p>"},{"layout":"post","title":"Keep relax, Keep curious, Keep ur fire","date":"2019-06-30T15:59:00.000Z","_content":"　　已经离开学校两周了，搬到一个新地方很多事情都需要去做，比如熟悉周围环境，打扫新住处的卫生，购置很多平时需要用到的东西等。刚好下周因为项目要发布一版，所以这周就特别的忙，然后任务也比较赶，自己也感到有些累。突然发现已经很长时间没有更新过博客了，其实也不知道写点什么，就随便写点好了。\n<!-- more -->\n\n　　除了工作之外，寻找自己的兴趣真的很重要。这个兴趣或许和工作有关，或许无关，这都没有关系，关键是一定要去找到一些自己感兴趣的事情去让自己思考不一样的东西，与工作无关的东西。看到叔本华的一句话很触动自己，\"长时间习惯于同样的感觉印象，会使我们的智力疲劳和迟钝\"。当时就明白了自己长时间接触代码，自然就会产生抵触的心理，我一直认为这是自己的原因，以为自己的努力不够，总是想多花些时间去学习不知道的知识。但最终获得的效果，让自己开始怀疑自己是否适合继续从事目前的职业，也有了之前去面试销售的行为。\n\n　　又想起老师之前和自己聊过的这个话题，有太多事情可以去做了，没有必要和自己过不去，对自己好一点。人生旅途中的风景不是比目的地更重要吗，谁在乎目的地在哪儿，好好享受旅途上的风景不是重要的多吗？想想这句话真的说的挺好的，但是总觉得替所谓的未来考虑或者做准备已经成为了自己的习惯，想要一时就改变实在是太难了。想想为未来做计划真的有那么重要吗？即使你目前认为未来是什么样的，并为之去努力，但当你努力的为未来做准备的时候，到了那天却发现情况又变的截然不同了，因为事务总是处于不断的变化之中的。并不是努力无用，只是需要用一种更好的方式去努力，明白自己的缺点是什么，抓住事务的规律，认准一个方向，再去努力，而不是无意义的紧绷神经。\n\n　　总而言之，方向比努力更重要。这是自己犯过很多次的错误，总是被好奇心的带动去了解一些东西，觉得自己不明白，用一句成语总结来说就是不明觉厉。但是我们的精力有限，没有办法去将每个东西动弄明白，研究透彻。而且我们也不需要去这么做，因为从大局观的角度来看待问题，不是那件事情我们做不了，而是我们需要将精力放在更加重要的事情上来。站在一个更高的角度看待问题，就是即使我们每件事情都去做，其实我们在有限的时间里可以做到的是大部分人都可以去实现的工作，虽然这种工作确实需要花费一些时间成本去做，但我们最终在整个整体中完成的不过是一些边角料的工作。看上去面面俱到，实则缺乏特点。最终做的不过是一些堆积木的工作而已，而不是去设计核心组件。\n\n　　这是自己不知道犯过多少次的错误，刚开始这些工作算是有些挑战性，但重复的多了，也就真正成为了\"大自然的搬运工\"。所以，要做一个有梦想的搬运工。正如拿破仑所说的，不想当将军的士兵不是好士兵。没有想法的搬运工也不是一个好的搬运工。其实自己很了解自己薄弱点在哪儿，我也是时候好好静下心在数据结构和算法方面多去研究研究，除此之外，多线程这一块也是自己很惨的地方，自己看文档的习惯也不太好，很多东西都无法做到全部理解，总是看完似懂非懂，觉得可以操作起来就行了。从来不会去回顾自己的一些思路，一些没弄明白的地方。\n\n　　虽然自己现在有很多地方动不懂，但就像孔子说的，\"生也有涯而知也无涯\"。学习不过是生活的部分而已，或者说是生命里的一部分，而不是全部，用心去享受生活中很多美好的东西，也不忘用力去追逐自己的梦想，该执着的不妥协，该放弃的不踟躇，不盲目追逐和羡慕，照顾好自己和家人，以及那些对我而言很重要的人，还有，别太认真了，多皮一点，多开心一点。\n\n![](/images/jiaonipi.jfif)\n","source":"_posts/Keep relax, Keep curious, Keep ur fire.md","raw":"layout: \"post\"\ntitle: \"Keep relax, Keep curious, Keep ur fire\"\ndate: \"2019-06-30 23:59\"\ncategories:\n- [LIFE]\ntags:\n- FEELING\n---\n　　已经离开学校两周了，搬到一个新地方很多事情都需要去做，比如熟悉周围环境，打扫新住处的卫生，购置很多平时需要用到的东西等。刚好下周因为项目要发布一版，所以这周就特别的忙，然后任务也比较赶，自己也感到有些累。突然发现已经很长时间没有更新过博客了，其实也不知道写点什么，就随便写点好了。\n<!-- more -->\n\n　　除了工作之外，寻找自己的兴趣真的很重要。这个兴趣或许和工作有关，或许无关，这都没有关系，关键是一定要去找到一些自己感兴趣的事情去让自己思考不一样的东西，与工作无关的东西。看到叔本华的一句话很触动自己，\"长时间习惯于同样的感觉印象，会使我们的智力疲劳和迟钝\"。当时就明白了自己长时间接触代码，自然就会产生抵触的心理，我一直认为这是自己的原因，以为自己的努力不够，总是想多花些时间去学习不知道的知识。但最终获得的效果，让自己开始怀疑自己是否适合继续从事目前的职业，也有了之前去面试销售的行为。\n\n　　又想起老师之前和自己聊过的这个话题，有太多事情可以去做了，没有必要和自己过不去，对自己好一点。人生旅途中的风景不是比目的地更重要吗，谁在乎目的地在哪儿，好好享受旅途上的风景不是重要的多吗？想想这句话真的说的挺好的，但是总觉得替所谓的未来考虑或者做准备已经成为了自己的习惯，想要一时就改变实在是太难了。想想为未来做计划真的有那么重要吗？即使你目前认为未来是什么样的，并为之去努力，但当你努力的为未来做准备的时候，到了那天却发现情况又变的截然不同了，因为事务总是处于不断的变化之中的。并不是努力无用，只是需要用一种更好的方式去努力，明白自己的缺点是什么，抓住事务的规律，认准一个方向，再去努力，而不是无意义的紧绷神经。\n\n　　总而言之，方向比努力更重要。这是自己犯过很多次的错误，总是被好奇心的带动去了解一些东西，觉得自己不明白，用一句成语总结来说就是不明觉厉。但是我们的精力有限，没有办法去将每个东西动弄明白，研究透彻。而且我们也不需要去这么做，因为从大局观的角度来看待问题，不是那件事情我们做不了，而是我们需要将精力放在更加重要的事情上来。站在一个更高的角度看待问题，就是即使我们每件事情都去做，其实我们在有限的时间里可以做到的是大部分人都可以去实现的工作，虽然这种工作确实需要花费一些时间成本去做，但我们最终在整个整体中完成的不过是一些边角料的工作。看上去面面俱到，实则缺乏特点。最终做的不过是一些堆积木的工作而已，而不是去设计核心组件。\n\n　　这是自己不知道犯过多少次的错误，刚开始这些工作算是有些挑战性，但重复的多了，也就真正成为了\"大自然的搬运工\"。所以，要做一个有梦想的搬运工。正如拿破仑所说的，不想当将军的士兵不是好士兵。没有想法的搬运工也不是一个好的搬运工。其实自己很了解自己薄弱点在哪儿，我也是时候好好静下心在数据结构和算法方面多去研究研究，除此之外，多线程这一块也是自己很惨的地方，自己看文档的习惯也不太好，很多东西都无法做到全部理解，总是看完似懂非懂，觉得可以操作起来就行了。从来不会去回顾自己的一些思路，一些没弄明白的地方。\n\n　　虽然自己现在有很多地方动不懂，但就像孔子说的，\"生也有涯而知也无涯\"。学习不过是生活的部分而已，或者说是生命里的一部分，而不是全部，用心去享受生活中很多美好的东西，也不忘用力去追逐自己的梦想，该执着的不妥协，该放弃的不踟躇，不盲目追逐和羡慕，照顾好自己和家人，以及那些对我而言很重要的人，还有，别太认真了，多皮一点，多开心一点。\n\n![](/images/jiaonipi.jfif)\n","slug":"Keep relax, Keep curious, Keep ur fire","published":1,"updated":"2019-07-01T14:27:55.497Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxae0009fo810sclx7f7","content":"<p>　　已经离开学校两周了，搬到一个新地方很多事情都需要去做，比如熟悉周围环境，打扫新住处的卫生，购置很多平时需要用到的东西等。刚好下周因为项目要发布一版，所以这周就特别的忙，然后任务也比较赶，自己也感到有些累。突然发现已经很长时间没有更新过博客了，其实也不知道写点什么，就随便写点好了。<br><a id=\"more\"></a></p>\n<p>　　除了工作之外，寻找自己的兴趣真的很重要。这个兴趣或许和工作有关，或许无关，这都没有关系，关键是一定要去找到一些自己感兴趣的事情去让自己思考不一样的东西，与工作无关的东西。看到叔本华的一句话很触动自己，”长时间习惯于同样的感觉印象，会使我们的智力疲劳和迟钝”。当时就明白了自己长时间接触代码，自然就会产生抵触的心理，我一直认为这是自己的原因，以为自己的努力不够，总是想多花些时间去学习不知道的知识。但最终获得的效果，让自己开始怀疑自己是否适合继续从事目前的职业，也有了之前去面试销售的行为。</p>\n<p>　　又想起老师之前和自己聊过的这个话题，有太多事情可以去做了，没有必要和自己过不去，对自己好一点。人生旅途中的风景不是比目的地更重要吗，谁在乎目的地在哪儿，好好享受旅途上的风景不是重要的多吗？想想这句话真的说的挺好的，但是总觉得替所谓的未来考虑或者做准备已经成为了自己的习惯，想要一时就改变实在是太难了。想想为未来做计划真的有那么重要吗？即使你目前认为未来是什么样的，并为之去努力，但当你努力的为未来做准备的时候，到了那天却发现情况又变的截然不同了，因为事务总是处于不断的变化之中的。并不是努力无用，只是需要用一种更好的方式去努力，明白自己的缺点是什么，抓住事务的规律，认准一个方向，再去努力，而不是无意义的紧绷神经。</p>\n<p>　　总而言之，方向比努力更重要。这是自己犯过很多次的错误，总是被好奇心的带动去了解一些东西，觉得自己不明白，用一句成语总结来说就是不明觉厉。但是我们的精力有限，没有办法去将每个东西动弄明白，研究透彻。而且我们也不需要去这么做，因为从大局观的角度来看待问题，不是那件事情我们做不了，而是我们需要将精力放在更加重要的事情上来。站在一个更高的角度看待问题，就是即使我们每件事情都去做，其实我们在有限的时间里可以做到的是大部分人都可以去实现的工作，虽然这种工作确实需要花费一些时间成本去做，但我们最终在整个整体中完成的不过是一些边角料的工作。看上去面面俱到，实则缺乏特点。最终做的不过是一些堆积木的工作而已，而不是去设计核心组件。</p>\n<p>　　这是自己不知道犯过多少次的错误，刚开始这些工作算是有些挑战性，但重复的多了，也就真正成为了”大自然的搬运工”。所以，要做一个有梦想的搬运工。正如拿破仑所说的，不想当将军的士兵不是好士兵。没有想法的搬运工也不是一个好的搬运工。其实自己很了解自己薄弱点在哪儿，我也是时候好好静下心在数据结构和算法方面多去研究研究，除此之外，多线程这一块也是自己很惨的地方，自己看文档的习惯也不太好，很多东西都无法做到全部理解，总是看完似懂非懂，觉得可以操作起来就行了。从来不会去回顾自己的一些思路，一些没弄明白的地方。</p>\n<p>　　虽然自己现在有很多地方动不懂，但就像孔子说的，”生也有涯而知也无涯”。学习不过是生活的部分而已，或者说是生命里的一部分，而不是全部，用心去享受生活中很多美好的东西，也不忘用力去追逐自己的梦想，该执着的不妥协，该放弃的不踟躇，不盲目追逐和羡慕，照顾好自己和家人，以及那些对我而言很重要的人，还有，别太认真了，多皮一点，多开心一点。</p>\n<p><img src=\"/images/jiaonipi.jfif\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>　　已经离开学校两周了，搬到一个新地方很多事情都需要去做，比如熟悉周围环境，打扫新住处的卫生，购置很多平时需要用到的东西等。刚好下周因为项目要发布一版，所以这周就特别的忙，然后任务也比较赶，自己也感到有些累。突然发现已经很长时间没有更新过博客了，其实也不知道写点什么，就随便写点好了。<br>","more":"</p>\n<p>　　除了工作之外，寻找自己的兴趣真的很重要。这个兴趣或许和工作有关，或许无关，这都没有关系，关键是一定要去找到一些自己感兴趣的事情去让自己思考不一样的东西，与工作无关的东西。看到叔本华的一句话很触动自己，”长时间习惯于同样的感觉印象，会使我们的智力疲劳和迟钝”。当时就明白了自己长时间接触代码，自然就会产生抵触的心理，我一直认为这是自己的原因，以为自己的努力不够，总是想多花些时间去学习不知道的知识。但最终获得的效果，让自己开始怀疑自己是否适合继续从事目前的职业，也有了之前去面试销售的行为。</p>\n<p>　　又想起老师之前和自己聊过的这个话题，有太多事情可以去做了，没有必要和自己过不去，对自己好一点。人生旅途中的风景不是比目的地更重要吗，谁在乎目的地在哪儿，好好享受旅途上的风景不是重要的多吗？想想这句话真的说的挺好的，但是总觉得替所谓的未来考虑或者做准备已经成为了自己的习惯，想要一时就改变实在是太难了。想想为未来做计划真的有那么重要吗？即使你目前认为未来是什么样的，并为之去努力，但当你努力的为未来做准备的时候，到了那天却发现情况又变的截然不同了，因为事务总是处于不断的变化之中的。并不是努力无用，只是需要用一种更好的方式去努力，明白自己的缺点是什么，抓住事务的规律，认准一个方向，再去努力，而不是无意义的紧绷神经。</p>\n<p>　　总而言之，方向比努力更重要。这是自己犯过很多次的错误，总是被好奇心的带动去了解一些东西，觉得自己不明白，用一句成语总结来说就是不明觉厉。但是我们的精力有限，没有办法去将每个东西动弄明白，研究透彻。而且我们也不需要去这么做，因为从大局观的角度来看待问题，不是那件事情我们做不了，而是我们需要将精力放在更加重要的事情上来。站在一个更高的角度看待问题，就是即使我们每件事情都去做，其实我们在有限的时间里可以做到的是大部分人都可以去实现的工作，虽然这种工作确实需要花费一些时间成本去做，但我们最终在整个整体中完成的不过是一些边角料的工作。看上去面面俱到，实则缺乏特点。最终做的不过是一些堆积木的工作而已，而不是去设计核心组件。</p>\n<p>　　这是自己不知道犯过多少次的错误，刚开始这些工作算是有些挑战性，但重复的多了，也就真正成为了”大自然的搬运工”。所以，要做一个有梦想的搬运工。正如拿破仑所说的，不想当将军的士兵不是好士兵。没有想法的搬运工也不是一个好的搬运工。其实自己很了解自己薄弱点在哪儿，我也是时候好好静下心在数据结构和算法方面多去研究研究，除此之外，多线程这一块也是自己很惨的地方，自己看文档的习惯也不太好，很多东西都无法做到全部理解，总是看完似懂非懂，觉得可以操作起来就行了。从来不会去回顾自己的一些思路，一些没弄明白的地方。</p>\n<p>　　虽然自己现在有很多地方动不懂，但就像孔子说的，”生也有涯而知也无涯”。学习不过是生活的部分而已，或者说是生命里的一部分，而不是全部，用心去享受生活中很多美好的东西，也不忘用力去追逐自己的梦想，该执着的不妥协，该放弃的不踟躇，不盲目追逐和羡慕，照顾好自己和家人，以及那些对我而言很重要的人，还有，别太认真了，多皮一点，多开心一点。</p>\n<p><img src=\"/images/jiaonipi.jfif\" alt=\"\"></p>"},{"layout":"post","title":"Every story has an ending","date":"2019-01-26T16:29:00.000Z","_content":"　　现在是27号凌晨十二点半，耳机里播放着金玟岐的《惊天动地》，不禁勾起了自己的一些回忆，让自己想到了那段自己一直无法摆脱失败的感情所带来的痛苦情绪的日子。思考了一会儿，对于自身感情的事情其实自己一直不太愿意拿到一个公开的地方去说，自己觉得这算是一个比较私密的一个话题，只是觉得自己体会就行了。想想自己一天如果失去记忆，还能通过文字了解自己以前做了什么。最后还是想客观的面对这件事情，故而还是决定将这件对自己很特别的一件事记录到博客。\n<!-- more -->\n\n　　2019-1-25，对于我来说是一个特殊的日子，因为这一天自己选择彻底与她告别，那天晚上自己感到特别孤独和抑郁，和朋友一直保持电话，没有特别想说的话，就是不说话也不想对方挂电话，就是不想自己一个人呆着，觉得对方不挂电话就像是有一个人在自己身旁，那个电话持续了51分38秒，直到自己感觉到好一点才挂掉了电话，真的很感谢。不出意外的那个晚上自己躺在床上但一个晚上都没有睡着过，或许是悲伤的情绪充斥着自己的大脑，所以才会一直睡不着吧。想过给她发消息但又被理智拉住，该说的已经说的十分清楚，已经没有必要再去解释什么或是问候关心什么，因为既然决定想让这件事情彻底翻篇就以后不会给主动给她发任何消息了，这应该是需要遵守的最基本的原则了吧，也是我们双方最后的默契。\n\n　　和她从初中开始当同学到现在大学快结束我和她已经认识了十年了，但也仅仅是认识十年而已，其实彼此真正接触了解的时间并不多，仔细思考起来也只有高中时候的QQ聊天，以及高三第二个学期的恋爱到分手，大学之后也只是偶尔聊天而已。直至现在，觉得自己对于她才开始可以说有了一定的了解。说来实在讽刺，开始有所了解的时候却是故事的结局。陈奕迅一首十年，让我不禁在想，十年之后，彼此会是什么样子，到时候应该都有了各自的家庭，那时应该生活中的各种事情会接踵不断，即使会想起今天的事情来，也应该会是一笑置之后继续各自的生活吧。\n\n　　自己对她的感觉，虽然一直口口声声的说着自己喜欢对方，但要问我到底喜欢对方哪一点，自己真的说不上来。但是见面聊天之后，当一切都尘埃落定之后，再去思考这个问题我觉得可以给出自己答案了。以前自己认为的喜欢是每次会见到对方的紧张的情绪，对对方的好奇，到了现在，能够用理智成熟的态度去面对对方之后，去说喜欢对方变成了保护自己的护具，也可以说是为了给自己的一种心理慰藉，或者说是一种对于她的一种虚无不切实的执念，当初喜欢的感觉其实早已经不复存在，看着坐在对面的人，内心不知为何真的很难再起半点波澜，但还是想要不断给自己灌输自己仍然喜欢对面坐着的那个人，看来自己对于她的执念不是一般的重呀，不然也不会在今年被这件事情困扰这么长时间。其实时间过去太长，中间彼此存在太长的空白期，大部分人都不可能对一个好长时间基本不怎么见面的人产生太多的感觉。\n\n　　有时候我会问自己，到底什么是爱，自己想不出一个答案，就开始问自己的一些朋友，第一个朋友说他觉得爱是一种羁绊，当时我理解他指的是对对方的一种牵挂，但对方说这只是一部分吧。问了另外一个朋友，他说他觉得是每次和对方吵架那种想哭的心情，或者说是那种心痛的心情。问了我的表弟，表弟说他觉得是那种每次吃到好吃的东西，或是快乐的东西想要和对方分享的感觉，也会想要替双方的未来去做一些努力和改变。但是我问到一些年长的家人的时候，他们的答案就很统一了，他们觉得双方结婚在一起组建一个家庭最重要的都是双方互相理解，互相帮助，容忍，宽容。当我问自己这个问题的时候，我也在想对于我来说爱到底是什么，我个人所理解的爱是不计后果、不计回报站在对方的立场上想要对对方好的那种最质朴的感觉，即使自己失去一些东西也毫不在乎，任何行为和感觉都是很自然的，而不是带有目的的刻意讨好对方达到自己的目的去做的一些事情。\n\n　　高三是我的思想变化最大的一个时期，那时候碰到了对影响自己最大的一个朋友，也是现在我最好的朋友，当时自己的思想比较容易受到书本的影响，那时候看了许多书，吸取到了不同的作家的思想，发现他们对于人生的见解和态度让当时还处于高三以为高考是自己人生最重要的一件事情的我感到新奇，感到佩服，知道世界上还有另外一群人，一群追求自由、真理、独立而不会循规守矩去干任何事情的人，一群只会听从自己坚持的东西的不畏强权的人，那时候有段时间自己还看林清玄，被他所说的人生无常的文章影响到自己有段时间觉得好像做什么事情都没有意义，╮(╯﹏╰）╭，现在想想以前还是太容易受其它思维影响，这种人生无常的观点还是只是听听就好，代入就不要了，还是要用正常的心态看待所谓的世事无常。那时候还不了解自己想成为什么样的一个人，自己到底是什么样的一个人，但很庆幸有了这些书的陪伴，至少让我有了敢变的不一样的勇气，也让我体验到了很多不一样的东西。到现在自己也越来越清楚自己到底是什么样的一个人，会和什么样的人能够志趣相投，会对什么样的人感到不屑一顾，自己的个性如此鲜明，却直至现在自己才了解到自己的这个特点，记得高中班主任也曾对我说过，\"你其实就是个性太强，其它的没有什么。\"。但这话我当时还不太能体会，直到我发现喜欢接触的人大部分都是个性比较鲜明的人之后，才能慢慢理解班主任说过的话，个性太强在班级可就是老师眼中的捣乱分子，难怪班主任对我这点不满意。 <(￣ ﹌ ￣)>  \n\n　　到了大学之后，自己的这个特点就开始全部显现出来，大概是大学氛围比较轻松，没有了父母的管束，老师的督促，自己就开始完全想干什么就干什么，所以大一第一个学期还挂了两门课，考工图完全不会，线性代数五分钟交卷，高数完全啃老本过考试，其它选修课虽然没过但是分数也是很低。自己也开始反思自己太过自我的方式的问题所在，选择开始慢慢的对浮躁的自己进行一点点的沉淀，那时候碰到了大学影响我最大的物理老师，真的是觉得大物老师是用耐心和爱来教导我这种爱逃课的学生，从大物老师身上我也开始认识到自己确实是太过于浮躁，这样下去什么事情都会干不好，于是从那时起决心彻底改变自己。自认为直到现在我依然很多时候会很浮躁，但是比起自己刚开始进入大学的那段时间进步实在是要大太多。\n\n　　从和她谈到大学快结束，我已经与高中那个自己已经大有不同，发现这些的时候，对于爱情的问题也从之前的腼腆变得尖锐，这也是自己最自然的状态，不会去害怕失去，不会害怕自己不够好，所以我会和将所有问题都和对方聊清楚，拒绝和她开始慢慢去试探对方看是否合适自己，因为自己内心对待爱情的态度是不容许在开始自己被当做一个挑选品的，我也不喜欢在爱情中存在中间地带，因为我足够确定自己的想法，我也希望对方对于自己能够多一些确定，而不是使用试试看合不合适的态度。即使双方在很长时间不联系之后对彼此有很大的陌生感，但在认真沟通之后，我认为确定能够值得去爱的人就应该大胆放手去爱，如果这个都不能确定而非得要先试试合不合自己的味口，说明对方根本不能够确定自己的情感，但这对于一个未来会存在很多其它问题的恋爱来说，这样的不确定肯定是致命的，如果要以这样的方式继续去发展，肯定是未来浪费彼此的感情和时间罢了。所以我觉得很多话都已经说的足够清楚，如果对方却不能够理解还一直在思考不确定是否合适的话，那么就没有继续谈的必要了，不如当断则断。\n\n　　其实说了这么多，和她聊天之后真的是认为两个人现在已经很难走到一起了，其实聊的过程自己已经知道那天的结局，但还是想要尽最大的努力，这样无论如何自己总是尽力了，这样自己才能让自己不带后悔的勇敢去面对结果。这样用力的去做这样一件事情之后，明白对方已经彻底不再是自己寻找的人，自己对于她的执念也从此消失，也是对于这件事的划上一个休止符，同时对于自己来说，终于能够彻底放下过去，真的向着未来迈开大步，能够真正向下一个开始做到义无反顾。\n\n　　有时候我在想爱情也好，婚姻也好，对于自己到底意味着什么，到底是钱钟书写的围城，城里的人想往外走城外的人拼了命想要进去，还是陈奕迅唱的红玫瑰的歌词，那个红，会是短暂的红色浪漫玫瑰之后如蚊子血一样平庸吗，会只是得不到的永远在骚动而已吗。这些东西似乎是任何关系逃不开的话题，但是我依然会相信明天会依然很好，相信自己未来可以将自己的感情处理的很好，不必刻意将这些消极情绪放在心上，未来就算是再大的挑战，我也会选择不退缩的继续走下去。\n\n　　最后想要使用我最喜欢的女歌手的一句话作为结束:\n\n　　\"理智与疯狂，我选择并行\"  -孙燕姿 《跳舞的梵谷》\n\n　　swcheng 2019-1-27 5:07\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Every story has an ending.md","raw":"layout: \"post\"\ntitle: \"Every story has an ending\"\ndate: \"2019-01-27 00:29\"\ncategories:\n- [LIFE]\ntags:\n- EMOTION\n---\n　　现在是27号凌晨十二点半，耳机里播放着金玟岐的《惊天动地》，不禁勾起了自己的一些回忆，让自己想到了那段自己一直无法摆脱失败的感情所带来的痛苦情绪的日子。思考了一会儿，对于自身感情的事情其实自己一直不太愿意拿到一个公开的地方去说，自己觉得这算是一个比较私密的一个话题，只是觉得自己体会就行了。想想自己一天如果失去记忆，还能通过文字了解自己以前做了什么。最后还是想客观的面对这件事情，故而还是决定将这件对自己很特别的一件事记录到博客。\n<!-- more -->\n\n　　2019-1-25，对于我来说是一个特殊的日子，因为这一天自己选择彻底与她告别，那天晚上自己感到特别孤独和抑郁，和朋友一直保持电话，没有特别想说的话，就是不说话也不想对方挂电话，就是不想自己一个人呆着，觉得对方不挂电话就像是有一个人在自己身旁，那个电话持续了51分38秒，直到自己感觉到好一点才挂掉了电话，真的很感谢。不出意外的那个晚上自己躺在床上但一个晚上都没有睡着过，或许是悲伤的情绪充斥着自己的大脑，所以才会一直睡不着吧。想过给她发消息但又被理智拉住，该说的已经说的十分清楚，已经没有必要再去解释什么或是问候关心什么，因为既然决定想让这件事情彻底翻篇就以后不会给主动给她发任何消息了，这应该是需要遵守的最基本的原则了吧，也是我们双方最后的默契。\n\n　　和她从初中开始当同学到现在大学快结束我和她已经认识了十年了，但也仅仅是认识十年而已，其实彼此真正接触了解的时间并不多，仔细思考起来也只有高中时候的QQ聊天，以及高三第二个学期的恋爱到分手，大学之后也只是偶尔聊天而已。直至现在，觉得自己对于她才开始可以说有了一定的了解。说来实在讽刺，开始有所了解的时候却是故事的结局。陈奕迅一首十年，让我不禁在想，十年之后，彼此会是什么样子，到时候应该都有了各自的家庭，那时应该生活中的各种事情会接踵不断，即使会想起今天的事情来，也应该会是一笑置之后继续各自的生活吧。\n\n　　自己对她的感觉，虽然一直口口声声的说着自己喜欢对方，但要问我到底喜欢对方哪一点，自己真的说不上来。但是见面聊天之后，当一切都尘埃落定之后，再去思考这个问题我觉得可以给出自己答案了。以前自己认为的喜欢是每次会见到对方的紧张的情绪，对对方的好奇，到了现在，能够用理智成熟的态度去面对对方之后，去说喜欢对方变成了保护自己的护具，也可以说是为了给自己的一种心理慰藉，或者说是一种对于她的一种虚无不切实的执念，当初喜欢的感觉其实早已经不复存在，看着坐在对面的人，内心不知为何真的很难再起半点波澜，但还是想要不断给自己灌输自己仍然喜欢对面坐着的那个人，看来自己对于她的执念不是一般的重呀，不然也不会在今年被这件事情困扰这么长时间。其实时间过去太长，中间彼此存在太长的空白期，大部分人都不可能对一个好长时间基本不怎么见面的人产生太多的感觉。\n\n　　有时候我会问自己，到底什么是爱，自己想不出一个答案，就开始问自己的一些朋友，第一个朋友说他觉得爱是一种羁绊，当时我理解他指的是对对方的一种牵挂，但对方说这只是一部分吧。问了另外一个朋友，他说他觉得是每次和对方吵架那种想哭的心情，或者说是那种心痛的心情。问了我的表弟，表弟说他觉得是那种每次吃到好吃的东西，或是快乐的东西想要和对方分享的感觉，也会想要替双方的未来去做一些努力和改变。但是我问到一些年长的家人的时候，他们的答案就很统一了，他们觉得双方结婚在一起组建一个家庭最重要的都是双方互相理解，互相帮助，容忍，宽容。当我问自己这个问题的时候，我也在想对于我来说爱到底是什么，我个人所理解的爱是不计后果、不计回报站在对方的立场上想要对对方好的那种最质朴的感觉，即使自己失去一些东西也毫不在乎，任何行为和感觉都是很自然的，而不是带有目的的刻意讨好对方达到自己的目的去做的一些事情。\n\n　　高三是我的思想变化最大的一个时期，那时候碰到了对影响自己最大的一个朋友，也是现在我最好的朋友，当时自己的思想比较容易受到书本的影响，那时候看了许多书，吸取到了不同的作家的思想，发现他们对于人生的见解和态度让当时还处于高三以为高考是自己人生最重要的一件事情的我感到新奇，感到佩服，知道世界上还有另外一群人，一群追求自由、真理、独立而不会循规守矩去干任何事情的人，一群只会听从自己坚持的东西的不畏强权的人，那时候有段时间自己还看林清玄，被他所说的人生无常的文章影响到自己有段时间觉得好像做什么事情都没有意义，╮(╯﹏╰）╭，现在想想以前还是太容易受其它思维影响，这种人生无常的观点还是只是听听就好，代入就不要了，还是要用正常的心态看待所谓的世事无常。那时候还不了解自己想成为什么样的一个人，自己到底是什么样的一个人，但很庆幸有了这些书的陪伴，至少让我有了敢变的不一样的勇气，也让我体验到了很多不一样的东西。到现在自己也越来越清楚自己到底是什么样的一个人，会和什么样的人能够志趣相投，会对什么样的人感到不屑一顾，自己的个性如此鲜明，却直至现在自己才了解到自己的这个特点，记得高中班主任也曾对我说过，\"你其实就是个性太强，其它的没有什么。\"。但这话我当时还不太能体会，直到我发现喜欢接触的人大部分都是个性比较鲜明的人之后，才能慢慢理解班主任说过的话，个性太强在班级可就是老师眼中的捣乱分子，难怪班主任对我这点不满意。 <(￣ ﹌ ￣)>  \n\n　　到了大学之后，自己的这个特点就开始全部显现出来，大概是大学氛围比较轻松，没有了父母的管束，老师的督促，自己就开始完全想干什么就干什么，所以大一第一个学期还挂了两门课，考工图完全不会，线性代数五分钟交卷，高数完全啃老本过考试，其它选修课虽然没过但是分数也是很低。自己也开始反思自己太过自我的方式的问题所在，选择开始慢慢的对浮躁的自己进行一点点的沉淀，那时候碰到了大学影响我最大的物理老师，真的是觉得大物老师是用耐心和爱来教导我这种爱逃课的学生，从大物老师身上我也开始认识到自己确实是太过于浮躁，这样下去什么事情都会干不好，于是从那时起决心彻底改变自己。自认为直到现在我依然很多时候会很浮躁，但是比起自己刚开始进入大学的那段时间进步实在是要大太多。\n\n　　从和她谈到大学快结束，我已经与高中那个自己已经大有不同，发现这些的时候，对于爱情的问题也从之前的腼腆变得尖锐，这也是自己最自然的状态，不会去害怕失去，不会害怕自己不够好，所以我会和将所有问题都和对方聊清楚，拒绝和她开始慢慢去试探对方看是否合适自己，因为自己内心对待爱情的态度是不容许在开始自己被当做一个挑选品的，我也不喜欢在爱情中存在中间地带，因为我足够确定自己的想法，我也希望对方对于自己能够多一些确定，而不是使用试试看合不合适的态度。即使双方在很长时间不联系之后对彼此有很大的陌生感，但在认真沟通之后，我认为确定能够值得去爱的人就应该大胆放手去爱，如果这个都不能确定而非得要先试试合不合自己的味口，说明对方根本不能够确定自己的情感，但这对于一个未来会存在很多其它问题的恋爱来说，这样的不确定肯定是致命的，如果要以这样的方式继续去发展，肯定是未来浪费彼此的感情和时间罢了。所以我觉得很多话都已经说的足够清楚，如果对方却不能够理解还一直在思考不确定是否合适的话，那么就没有继续谈的必要了，不如当断则断。\n\n　　其实说了这么多，和她聊天之后真的是认为两个人现在已经很难走到一起了，其实聊的过程自己已经知道那天的结局，但还是想要尽最大的努力，这样无论如何自己总是尽力了，这样自己才能让自己不带后悔的勇敢去面对结果。这样用力的去做这样一件事情之后，明白对方已经彻底不再是自己寻找的人，自己对于她的执念也从此消失，也是对于这件事的划上一个休止符，同时对于自己来说，终于能够彻底放下过去，真的向着未来迈开大步，能够真正向下一个开始做到义无反顾。\n\n　　有时候我在想爱情也好，婚姻也好，对于自己到底意味着什么，到底是钱钟书写的围城，城里的人想往外走城外的人拼了命想要进去，还是陈奕迅唱的红玫瑰的歌词，那个红，会是短暂的红色浪漫玫瑰之后如蚊子血一样平庸吗，会只是得不到的永远在骚动而已吗。这些东西似乎是任何关系逃不开的话题，但是我依然会相信明天会依然很好，相信自己未来可以将自己的感情处理的很好，不必刻意将这些消极情绪放在心上，未来就算是再大的挑战，我也会选择不退缩的继续走下去。\n\n　　最后想要使用我最喜欢的女歌手的一句话作为结束:\n\n　　\"理智与疯狂，我选择并行\"  -孙燕姿 《跳舞的梵谷》\n\n　　swcheng 2019-1-27 5:07\n\n\n\n\n\n\n\n\n\n\n","slug":"Every story has an ending","published":1,"updated":"2019-05-19T09:42:05.859Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxag000afo81lz21joyh","content":"<p>　　现在是27号凌晨十二点半，耳机里播放着金玟岐的《惊天动地》，不禁勾起了自己的一些回忆，让自己想到了那段自己一直无法摆脱失败的感情所带来的痛苦情绪的日子。思考了一会儿，对于自身感情的事情其实自己一直不太愿意拿到一个公开的地方去说，自己觉得这算是一个比较私密的一个话题，只是觉得自己体会就行了。想想自己一天如果失去记忆，还能通过文字了解自己以前做了什么。最后还是想客观的面对这件事情，故而还是决定将这件对自己很特别的一件事记录到博客。<br><a id=\"more\"></a></p>\n<p>　　2019-1-25，对于我来说是一个特殊的日子，因为这一天自己选择彻底与她告别，那天晚上自己感到特别孤独和抑郁，和朋友一直保持电话，没有特别想说的话，就是不说话也不想对方挂电话，就是不想自己一个人呆着，觉得对方不挂电话就像是有一个人在自己身旁，那个电话持续了51分38秒，直到自己感觉到好一点才挂掉了电话，真的很感谢。不出意外的那个晚上自己躺在床上但一个晚上都没有睡着过，或许是悲伤的情绪充斥着自己的大脑，所以才会一直睡不着吧。想过给她发消息但又被理智拉住，该说的已经说的十分清楚，已经没有必要再去解释什么或是问候关心什么，因为既然决定想让这件事情彻底翻篇就以后不会给主动给她发任何消息了，这应该是需要遵守的最基本的原则了吧，也是我们双方最后的默契。</p>\n<p>　　和她从初中开始当同学到现在大学快结束我和她已经认识了十年了，但也仅仅是认识十年而已，其实彼此真正接触了解的时间并不多，仔细思考起来也只有高中时候的QQ聊天，以及高三第二个学期的恋爱到分手，大学之后也只是偶尔聊天而已。直至现在，觉得自己对于她才开始可以说有了一定的了解。说来实在讽刺，开始有所了解的时候却是故事的结局。陈奕迅一首十年，让我不禁在想，十年之后，彼此会是什么样子，到时候应该都有了各自的家庭，那时应该生活中的各种事情会接踵不断，即使会想起今天的事情来，也应该会是一笑置之后继续各自的生活吧。</p>\n<p>　　自己对她的感觉，虽然一直口口声声的说着自己喜欢对方，但要问我到底喜欢对方哪一点，自己真的说不上来。但是见面聊天之后，当一切都尘埃落定之后，再去思考这个问题我觉得可以给出自己答案了。以前自己认为的喜欢是每次会见到对方的紧张的情绪，对对方的好奇，到了现在，能够用理智成熟的态度去面对对方之后，去说喜欢对方变成了保护自己的护具，也可以说是为了给自己的一种心理慰藉，或者说是一种对于她的一种虚无不切实的执念，当初喜欢的感觉其实早已经不复存在，看着坐在对面的人，内心不知为何真的很难再起半点波澜，但还是想要不断给自己灌输自己仍然喜欢对面坐着的那个人，看来自己对于她的执念不是一般的重呀，不然也不会在今年被这件事情困扰这么长时间。其实时间过去太长，中间彼此存在太长的空白期，大部分人都不可能对一个好长时间基本不怎么见面的人产生太多的感觉。</p>\n<p>　　有时候我会问自己，到底什么是爱，自己想不出一个答案，就开始问自己的一些朋友，第一个朋友说他觉得爱是一种羁绊，当时我理解他指的是对对方的一种牵挂，但对方说这只是一部分吧。问了另外一个朋友，他说他觉得是每次和对方吵架那种想哭的心情，或者说是那种心痛的心情。问了我的表弟，表弟说他觉得是那种每次吃到好吃的东西，或是快乐的东西想要和对方分享的感觉，也会想要替双方的未来去做一些努力和改变。但是我问到一些年长的家人的时候，他们的答案就很统一了，他们觉得双方结婚在一起组建一个家庭最重要的都是双方互相理解，互相帮助，容忍，宽容。当我问自己这个问题的时候，我也在想对于我来说爱到底是什么，我个人所理解的爱是不计后果、不计回报站在对方的立场上想要对对方好的那种最质朴的感觉，即使自己失去一些东西也毫不在乎，任何行为和感觉都是很自然的，而不是带有目的的刻意讨好对方达到自己的目的去做的一些事情。</p>\n<p>　　高三是我的思想变化最大的一个时期，那时候碰到了对影响自己最大的一个朋友，也是现在我最好的朋友，当时自己的思想比较容易受到书本的影响，那时候看了许多书，吸取到了不同的作家的思想，发现他们对于人生的见解和态度让当时还处于高三以为高考是自己人生最重要的一件事情的我感到新奇，感到佩服，知道世界上还有另外一群人，一群追求自由、真理、独立而不会循规守矩去干任何事情的人，一群只会听从自己坚持的东西的不畏强权的人，那时候有段时间自己还看林清玄，被他所说的人生无常的文章影响到自己有段时间觉得好像做什么事情都没有意义，╮(╯﹏╰）╭，现在想想以前还是太容易受其它思维影响，这种人生无常的观点还是只是听听就好，代入就不要了，还是要用正常的心态看待所谓的世事无常。那时候还不了解自己想成为什么样的一个人，自己到底是什么样的一个人，但很庆幸有了这些书的陪伴，至少让我有了敢变的不一样的勇气，也让我体验到了很多不一样的东西。到现在自己也越来越清楚自己到底是什么样的一个人，会和什么样的人能够志趣相投，会对什么样的人感到不屑一顾，自己的个性如此鲜明，却直至现在自己才了解到自己的这个特点，记得高中班主任也曾对我说过，”你其实就是个性太强，其它的没有什么。”。但这话我当时还不太能体会，直到我发现喜欢接触的人大部分都是个性比较鲜明的人之后，才能慢慢理解班主任说过的话，个性太强在班级可就是老师眼中的捣乱分子，难怪班主任对我这点不满意。 &lt;(￣ ﹌ ￣)&gt;  </p>\n<p>　　到了大学之后，自己的这个特点就开始全部显现出来，大概是大学氛围比较轻松，没有了父母的管束，老师的督促，自己就开始完全想干什么就干什么，所以大一第一个学期还挂了两门课，考工图完全不会，线性代数五分钟交卷，高数完全啃老本过考试，其它选修课虽然没过但是分数也是很低。自己也开始反思自己太过自我的方式的问题所在，选择开始慢慢的对浮躁的自己进行一点点的沉淀，那时候碰到了大学影响我最大的物理老师，真的是觉得大物老师是用耐心和爱来教导我这种爱逃课的学生，从大物老师身上我也开始认识到自己确实是太过于浮躁，这样下去什么事情都会干不好，于是从那时起决心彻底改变自己。自认为直到现在我依然很多时候会很浮躁，但是比起自己刚开始进入大学的那段时间进步实在是要大太多。</p>\n<p>　　从和她谈到大学快结束，我已经与高中那个自己已经大有不同，发现这些的时候，对于爱情的问题也从之前的腼腆变得尖锐，这也是自己最自然的状态，不会去害怕失去，不会害怕自己不够好，所以我会和将所有问题都和对方聊清楚，拒绝和她开始慢慢去试探对方看是否合适自己，因为自己内心对待爱情的态度是不容许在开始自己被当做一个挑选品的，我也不喜欢在爱情中存在中间地带，因为我足够确定自己的想法，我也希望对方对于自己能够多一些确定，而不是使用试试看合不合适的态度。即使双方在很长时间不联系之后对彼此有很大的陌生感，但在认真沟通之后，我认为确定能够值得去爱的人就应该大胆放手去爱，如果这个都不能确定而非得要先试试合不合自己的味口，说明对方根本不能够确定自己的情感，但这对于一个未来会存在很多其它问题的恋爱来说，这样的不确定肯定是致命的，如果要以这样的方式继续去发展，肯定是未来浪费彼此的感情和时间罢了。所以我觉得很多话都已经说的足够清楚，如果对方却不能够理解还一直在思考不确定是否合适的话，那么就没有继续谈的必要了，不如当断则断。</p>\n<p>　　其实说了这么多，和她聊天之后真的是认为两个人现在已经很难走到一起了，其实聊的过程自己已经知道那天的结局，但还是想要尽最大的努力，这样无论如何自己总是尽力了，这样自己才能让自己不带后悔的勇敢去面对结果。这样用力的去做这样一件事情之后，明白对方已经彻底不再是自己寻找的人，自己对于她的执念也从此消失，也是对于这件事的划上一个休止符，同时对于自己来说，终于能够彻底放下过去，真的向着未来迈开大步，能够真正向下一个开始做到义无反顾。</p>\n<p>　　有时候我在想爱情也好，婚姻也好，对于自己到底意味着什么，到底是钱钟书写的围城，城里的人想往外走城外的人拼了命想要进去，还是陈奕迅唱的红玫瑰的歌词，那个红，会是短暂的红色浪漫玫瑰之后如蚊子血一样平庸吗，会只是得不到的永远在骚动而已吗。这些东西似乎是任何关系逃不开的话题，但是我依然会相信明天会依然很好，相信自己未来可以将自己的感情处理的很好，不必刻意将这些消极情绪放在心上，未来就算是再大的挑战，我也会选择不退缩的继续走下去。</p>\n<p>　　最后想要使用我最喜欢的女歌手的一句话作为结束:</p>\n<p>　　“理智与疯狂，我选择并行”  -孙燕姿 《跳舞的梵谷》</p>\n<p>　　swcheng 2019-1-27 5:07</p>\n","site":{"data":{}},"excerpt":"<p>　　现在是27号凌晨十二点半，耳机里播放着金玟岐的《惊天动地》，不禁勾起了自己的一些回忆，让自己想到了那段自己一直无法摆脱失败的感情所带来的痛苦情绪的日子。思考了一会儿，对于自身感情的事情其实自己一直不太愿意拿到一个公开的地方去说，自己觉得这算是一个比较私密的一个话题，只是觉得自己体会就行了。想想自己一天如果失去记忆，还能通过文字了解自己以前做了什么。最后还是想客观的面对这件事情，故而还是决定将这件对自己很特别的一件事记录到博客。<br>","more":"</p>\n<p>　　2019-1-25，对于我来说是一个特殊的日子，因为这一天自己选择彻底与她告别，那天晚上自己感到特别孤独和抑郁，和朋友一直保持电话，没有特别想说的话，就是不说话也不想对方挂电话，就是不想自己一个人呆着，觉得对方不挂电话就像是有一个人在自己身旁，那个电话持续了51分38秒，直到自己感觉到好一点才挂掉了电话，真的很感谢。不出意外的那个晚上自己躺在床上但一个晚上都没有睡着过，或许是悲伤的情绪充斥着自己的大脑，所以才会一直睡不着吧。想过给她发消息但又被理智拉住，该说的已经说的十分清楚，已经没有必要再去解释什么或是问候关心什么，因为既然决定想让这件事情彻底翻篇就以后不会给主动给她发任何消息了，这应该是需要遵守的最基本的原则了吧，也是我们双方最后的默契。</p>\n<p>　　和她从初中开始当同学到现在大学快结束我和她已经认识了十年了，但也仅仅是认识十年而已，其实彼此真正接触了解的时间并不多，仔细思考起来也只有高中时候的QQ聊天，以及高三第二个学期的恋爱到分手，大学之后也只是偶尔聊天而已。直至现在，觉得自己对于她才开始可以说有了一定的了解。说来实在讽刺，开始有所了解的时候却是故事的结局。陈奕迅一首十年，让我不禁在想，十年之后，彼此会是什么样子，到时候应该都有了各自的家庭，那时应该生活中的各种事情会接踵不断，即使会想起今天的事情来，也应该会是一笑置之后继续各自的生活吧。</p>\n<p>　　自己对她的感觉，虽然一直口口声声的说着自己喜欢对方，但要问我到底喜欢对方哪一点，自己真的说不上来。但是见面聊天之后，当一切都尘埃落定之后，再去思考这个问题我觉得可以给出自己答案了。以前自己认为的喜欢是每次会见到对方的紧张的情绪，对对方的好奇，到了现在，能够用理智成熟的态度去面对对方之后，去说喜欢对方变成了保护自己的护具，也可以说是为了给自己的一种心理慰藉，或者说是一种对于她的一种虚无不切实的执念，当初喜欢的感觉其实早已经不复存在，看着坐在对面的人，内心不知为何真的很难再起半点波澜，但还是想要不断给自己灌输自己仍然喜欢对面坐着的那个人，看来自己对于她的执念不是一般的重呀，不然也不会在今年被这件事情困扰这么长时间。其实时间过去太长，中间彼此存在太长的空白期，大部分人都不可能对一个好长时间基本不怎么见面的人产生太多的感觉。</p>\n<p>　　有时候我会问自己，到底什么是爱，自己想不出一个答案，就开始问自己的一些朋友，第一个朋友说他觉得爱是一种羁绊，当时我理解他指的是对对方的一种牵挂，但对方说这只是一部分吧。问了另外一个朋友，他说他觉得是每次和对方吵架那种想哭的心情，或者说是那种心痛的心情。问了我的表弟，表弟说他觉得是那种每次吃到好吃的东西，或是快乐的东西想要和对方分享的感觉，也会想要替双方的未来去做一些努力和改变。但是我问到一些年长的家人的时候，他们的答案就很统一了，他们觉得双方结婚在一起组建一个家庭最重要的都是双方互相理解，互相帮助，容忍，宽容。当我问自己这个问题的时候，我也在想对于我来说爱到底是什么，我个人所理解的爱是不计后果、不计回报站在对方的立场上想要对对方好的那种最质朴的感觉，即使自己失去一些东西也毫不在乎，任何行为和感觉都是很自然的，而不是带有目的的刻意讨好对方达到自己的目的去做的一些事情。</p>\n<p>　　高三是我的思想变化最大的一个时期，那时候碰到了对影响自己最大的一个朋友，也是现在我最好的朋友，当时自己的思想比较容易受到书本的影响，那时候看了许多书，吸取到了不同的作家的思想，发现他们对于人生的见解和态度让当时还处于高三以为高考是自己人生最重要的一件事情的我感到新奇，感到佩服，知道世界上还有另外一群人，一群追求自由、真理、独立而不会循规守矩去干任何事情的人，一群只会听从自己坚持的东西的不畏强权的人，那时候有段时间自己还看林清玄，被他所说的人生无常的文章影响到自己有段时间觉得好像做什么事情都没有意义，╮(╯﹏╰）╭，现在想想以前还是太容易受其它思维影响，这种人生无常的观点还是只是听听就好，代入就不要了，还是要用正常的心态看待所谓的世事无常。那时候还不了解自己想成为什么样的一个人，自己到底是什么样的一个人，但很庆幸有了这些书的陪伴，至少让我有了敢变的不一样的勇气，也让我体验到了很多不一样的东西。到现在自己也越来越清楚自己到底是什么样的一个人，会和什么样的人能够志趣相投，会对什么样的人感到不屑一顾，自己的个性如此鲜明，却直至现在自己才了解到自己的这个特点，记得高中班主任也曾对我说过，”你其实就是个性太强，其它的没有什么。”。但这话我当时还不太能体会，直到我发现喜欢接触的人大部分都是个性比较鲜明的人之后，才能慢慢理解班主任说过的话，个性太强在班级可就是老师眼中的捣乱分子，难怪班主任对我这点不满意。 &lt;(￣ ﹌ ￣)&gt;  </p>\n<p>　　到了大学之后，自己的这个特点就开始全部显现出来，大概是大学氛围比较轻松，没有了父母的管束，老师的督促，自己就开始完全想干什么就干什么，所以大一第一个学期还挂了两门课，考工图完全不会，线性代数五分钟交卷，高数完全啃老本过考试，其它选修课虽然没过但是分数也是很低。自己也开始反思自己太过自我的方式的问题所在，选择开始慢慢的对浮躁的自己进行一点点的沉淀，那时候碰到了大学影响我最大的物理老师，真的是觉得大物老师是用耐心和爱来教导我这种爱逃课的学生，从大物老师身上我也开始认识到自己确实是太过于浮躁，这样下去什么事情都会干不好，于是从那时起决心彻底改变自己。自认为直到现在我依然很多时候会很浮躁，但是比起自己刚开始进入大学的那段时间进步实在是要大太多。</p>\n<p>　　从和她谈到大学快结束，我已经与高中那个自己已经大有不同，发现这些的时候，对于爱情的问题也从之前的腼腆变得尖锐，这也是自己最自然的状态，不会去害怕失去，不会害怕自己不够好，所以我会和将所有问题都和对方聊清楚，拒绝和她开始慢慢去试探对方看是否合适自己，因为自己内心对待爱情的态度是不容许在开始自己被当做一个挑选品的，我也不喜欢在爱情中存在中间地带，因为我足够确定自己的想法，我也希望对方对于自己能够多一些确定，而不是使用试试看合不合适的态度。即使双方在很长时间不联系之后对彼此有很大的陌生感，但在认真沟通之后，我认为确定能够值得去爱的人就应该大胆放手去爱，如果这个都不能确定而非得要先试试合不合自己的味口，说明对方根本不能够确定自己的情感，但这对于一个未来会存在很多其它问题的恋爱来说，这样的不确定肯定是致命的，如果要以这样的方式继续去发展，肯定是未来浪费彼此的感情和时间罢了。所以我觉得很多话都已经说的足够清楚，如果对方却不能够理解还一直在思考不确定是否合适的话，那么就没有继续谈的必要了，不如当断则断。</p>\n<p>　　其实说了这么多，和她聊天之后真的是认为两个人现在已经很难走到一起了，其实聊的过程自己已经知道那天的结局，但还是想要尽最大的努力，这样无论如何自己总是尽力了，这样自己才能让自己不带后悔的勇敢去面对结果。这样用力的去做这样一件事情之后，明白对方已经彻底不再是自己寻找的人，自己对于她的执念也从此消失，也是对于这件事的划上一个休止符，同时对于自己来说，终于能够彻底放下过去，真的向着未来迈开大步，能够真正向下一个开始做到义无反顾。</p>\n<p>　　有时候我在想爱情也好，婚姻也好，对于自己到底意味着什么，到底是钱钟书写的围城，城里的人想往外走城外的人拼了命想要进去，还是陈奕迅唱的红玫瑰的歌词，那个红，会是短暂的红色浪漫玫瑰之后如蚊子血一样平庸吗，会只是得不到的永远在骚动而已吗。这些东西似乎是任何关系逃不开的话题，但是我依然会相信明天会依然很好，相信自己未来可以将自己的感情处理的很好，不必刻意将这些消极情绪放在心上，未来就算是再大的挑战，我也会选择不退缩的继续走下去。</p>\n<p>　　最后想要使用我最喜欢的女歌手的一句话作为结束:</p>\n<p>　　“理智与疯狂，我选择并行”  -孙燕姿 《跳舞的梵谷》</p>\n<p>　　swcheng 2019-1-27 5:07</p>"},{"layout":"post","title":"Summarize_2018","date":"2018-12-30T12:48:00.000Z","_content":"　　哇，时间过得好快呀，又要过年啦。ヾ(๑╹◡╹)ﾉ\"　最近心情总是起伏不定，生活作息时间也失去规律，今天终于平复下来了，所以打算将2018年发生的事情进行一个回顾以及总结。自己从小学开始的时候最喜欢做的事情是玩游戏，但自从游戏玩的少之后，我发现自己最大的爱好似乎变成了记录。(*￣∇￣*) 　大概是觉得记录才能展现一件事情的全貌，不想要错过任何一个细节。要是活在古代估计我可能会想要去当个史官什么的吧hhh，说到这个，其实自己有时候会想到如果不选择计算机我会选择什么样的职业，我觉得如果以现在的想法来看，自己多半不太可能继续选择理科，会想去从事与艺术相关的东西吧，也会想当歌手，但自己唱歌水平实在是hhh，不说了，想法虽然天马行空，但自认为我还是一个现实主义者，只能向理想主义者投去羡慕的眼光啦。\n<!-- more -->\n\n>  人生天地之间，若白驹过隙，忽然而已\n\n　　这句话出自《庄子》，大概也是生活的真实写照吧，不知不觉自己的大学生涯就要结束，其实也没什么好感叹的，时间不就是这样，一直无形之中推着人往前走吗，有的人可能觉得大学没做什么事会有什么遗憾之类的，可能对于大多数人来说最多的回答会是大学没谈恋爱会遗憾之类的，当然对于不同的人来说也会有各种各样的答案，对于我自己来说，大部分时间是和计算机其次就是篮球度过的，至于大学没谈恋爱会不会有遗憾，虽然有时候会有些失落，看到人家结对而行，自己总是形单影只，也会感到很孤独，但回顾自己的大部分时间其实还是比较充实的度过的，我个人对于遗憾的定义不是没有在合适的时间没有去做合适的事情，而是在自己在做某件事情的时候，自己没能够将它做到令自己满意的地步，所以我自己大学的遗憾不是自己大学没谈恋爱或是其它什么想做却没做的事情，而是发现自己太多缺点，太多事情没有做的足够好，很多事情都是有始无终。\n\n　　回到正题，2018，发生了很多事情，从年初决定考研，到放弃考研决定工作，哦对了，还有一件很值得说的是到她家楼下喊她的名字，哈哈哈真佩服当时自己的勇气，其实我本质上是属于比较内向的人，这样的事估计对于我来说也不会存在下一次了，从和室友参加华为杯到中途放弃决定将时间投入在参加导师推荐的TI杯，到最后对TI杯的放弃，买了一堆电子元器件，最后啥也没干。去绍兴旅游了一次，学习JS，学习Node, 学习MongoDB, 搭建博客，面试，实习，学了一点Vue，准备毕设题目，辞职，学习Python，学习Scrapy...恩，差不多就这样。感觉大部分都是有关学习的事，(艹皿艹),所以说这大概就是作为单身狗的基本修养吧。\n\n　　年初的时候决定考研，当初自己想的是考研会有很多奖学金就不用再问家里伸手要钱了，而且会有更多自由的时间让我学更多的知识。当时想报考华南理工，想考华南理工的原因一是广州离家比较近，所以以后回家也方便，二是学校也不错。但之后放弃的原因一是因为之前只写过Android，所以自己一来想参加竞赛做一些东西，并且当时又想打开Web开发的神秘大门，但考研就意味着自己要重新开始面对自己极为讨厌的不断重复刷题的生活，让自己做感到痛苦的事情实在是太难了，经过挣扎之后意识到自己就应该直接去做自己当前最想去做的事情，而不是学会向自己不喜欢的东西妥协，如果能学会妥协，那也就不是我自己了，失去了自我，活着也没太大意思。虽然考研是个很不错的选择，但确实不适合自己，放弃了考研，打算参加比赛，动手去做一些东西自己还是比较感兴趣的。\n\n　　当时已经答应室友参加华为杯，并且已经开始了一段时间了，但是之后导师又叫我参加TI杯，我就和导师说了我已经答应别人了，不能背弃承诺去参加另外一个比赛。导师劝说我应该把TI杯的优先级放在前，所以不得已只得和室友说明情况就是华为杯的事情不能参加只能你独自作战了。(我当时被导师劝了一会儿就直接放弃了答应室友的事情，现在反思这样做其实是有很大问题的，答应过别人的事情就应该尽全力去做到，要不然就不要答应别人，即使导师劝我，我也应该继续坚持自己的立场)　之后为了报名参加比赛，导师叫我组织几个人一起参加这个物联网比赛\"TI杯\"，之前我们学校还没有人参加过这个比赛，自己对嵌入式的东西了解很少，我跑了好几个宿舍，去找了一些自己觉得能干事情比较靠谱的人，话说被拒绝的滋味还真不好受呀，尤其是你去找到别人用很诚恳的态度问别人介绍这个比赛，然后阐述自己的想法，询问对方对这个比赛有没有兴趣，有的人却用一种自以为自己很了不起的态度对着你，一幅爱理不理的态度，换谁心情都好不起来了吧，虽然自己遭受到了不好的态度，在前后跑了几次之后总算是将人凑齐了，还是找到了自认为靠谱的人。接下来就是大家开会商讨做一个什么作品参加比赛，经过几次讨论将题目定下来了，我向老师提出我们需要一个实验室，因为没有实验室的话，我们在宿舍弄这个关于硬件方面的东西实在是不太方便，去图书馆的话也不太合适，毕竟大家要在一起合作做一个东西，需要一个实验室大家随时有事情可以进行商讨，也可以及时了解事情的进度等等。老师当时也答应了，说帮我们弄一个实验室，但要过几天才给我们回复。我想，等几天就等几天吧，我就把电子元器件都买好了，也烧写上了Android Things的硬件开发环境，并还写了一个通过代码控制小灯亮和熄的demo,就等着老师什么时候给我们回复。但是等呀等，就是没能等到对方给自己答复，说实话，此刻我的心情有点糟糕，当时心里想你找到我和我说了这个比赛的事情，然后我为了这个比赛放弃另外一个比赛，之后又为了这个比赛主动去找了一些人，甚至后来你说现在好像不能买东西报销，要等一段时间才能报销，我就自掏腰包先买了一些需要用到的东西，最后要求一个实验室，这样重要的一件事根本就没有得到重视，当时说过答应的话似乎也是场面话，如果要我一直催这样一件事情我觉得这个比赛还不如不做，因为即使去做也是我自己一个人在自己瞎玩，最后无非是浪费自己的时间和精力。所以没有得到回复我就不理这个比赛了，之后过了不知多久时间他终于想起这件事情了，还问我们做的怎么样，我还得无奈的解释这个事情没法做。(不是事情没法做，而是心凉了什么事都做不了)\n\n　　感觉怎么这个年度总结这么多消极情绪呢，人家年度结束的时候都是为明年设个什么小目标许个小愿啥的，我却在年度总结里写过去的一年里哪些事情让自己不舒服。(ㄒoㄒ)。希望自己不要再犯同样的错误了，以后无论什么事情在答应别人之前，自己首先应该考虑清楚，且和对方沟通清楚才行，从和对方的沟通中观察对方的态度和想法，一旦答应过的事情就一定无论如何要做到。一些原则性的东西面前一定不能让步。\n\n　　关于比赛的事情告一段落，自己准备学习Web开发方面的知识，因为自己之前只写过Android，而Web的运用场景要比Android要广泛的多，如果自己不涉足这个方面的知识的话觉得自己就像...em...怎么描述...就是有一块你感兴趣的大陆...但不去探险的话实在是太可惜了。所以开始学习JS,并想通过搭建一个博客去锻炼提升自己在这方面的能力，但是博客搭建还没完成，学期就已经快要结束了，只能一边找工作一边继续了。之后就是准备面试，自己之前的面试十分不顺利，自己思考了一下失败的原因是，一是自己在面试方法上存在一些问题，二是对自己的定位不是特别明确，三是自己准备的不够充分。在对自己进行了一些调整之后，开始了新的面试，依稀记得自己在面试TD的时候，自己准备好自己要说的内容之后，并且也是按照我想要说的内容在表达，但是不知为什么我会很紧张，我觉得我不应该是容易紧张的人呀...总而言之那天虽然自己说了很多话，但是实在是紧张的不得了，说话的时候手一直在不停的哆嗦，对于面试官的提问自我觉得回答的还过得去，最后还得知面试官居然是自己的学长hhh。在顺利的找到了自己想要的Java Web开发实习之后，告知对方自己在学校的课程要在短学期结束之后才能去报道，之后就在短学期结束之后(七月二十三号)一直实习到十二月十二号。\n\n　　实习中认识了一些新的人，用了自己没用过的IDEA作为新的开发工具，不过话说回来IDEA和Android Studio的使用方式其实十分相似，我没用多久时间就很快上手了，毕竟都是一个公司的产品，所以使用方式也十分相似，相比较Eclipse来说，IDEA要好用的太多，当然体积也重很多，很吃内存。但相对于其优点来说，这个还是可以接受的。连接数据库使用了我之前没有使用过的Navicat,不过Navicat还是蛮好用的，是一款十分优秀的工具。\n\n　　对于这份实习，开始我是满怀着期待，因为这是自己的一份实习，并且是我想要做的工作，用职业的要求去要求自己，想要大展拳脚一番。到了项目组的第一天发现，一切并不是自己想象的那样，每个人上班能晚则晚，有事就做，没事儿就闲着干其它的事情，经常会聊一些生活中的各种琐事，感觉这完全不是自己所追求的地方，自己渴望的是特别有技术氛围的团队，每个人都拥有对技术的执着，会因为一个观点与你进行理性的争论，这才是自己理想的工作环境。看来理想毕竟还是理想呀，虽然不能实现，但我也会朝着这个方向去追求。虽然一来就对项目组印象就不是特别好，但是自己的初衷是来学习知识的，抱着学习的心态完成每一个mentor交给自己的任务，即使再难，我也会尽全力去弄明白，一时弄不明白就多花时间，直至将任务完成。所以自己保持这样的态度从开始进入到平台测试修改BUG到后来单独承担开发任务，不仅学习到了很多技术上的知识，也学会如何更好的和同事进行沟通交流解决问题，以及其它方面的提升等。\n\n　　实习大部分时间过的比较充实，但还是决定离开这个地方，离开之前自己很纠结要不要参加这个公司的转正答辩，刚开始自己想要参加是因为考虑到自己万一明年找工作不顺利的话起码还手上还有一个offer，但最终我还是决定直接离职，连答辩都不想参加了。在将项目组交给我独立完成的模块开发任务完成的差不多之后，新任务也不打算继续做了，直接阐述了离职想法，并在当天离开项目组。这个项目组除了之前所说的氛围我不喜欢之外，真正让我决定义无反顾离开的还是项目组中有些人让我觉得没法忍受，也不想继续忍受与这样的人继续相处下去。原因这里就不阐述了，每个人都有自己的性格，有自己的脾气，选择隐忍不过是因为自己还有一些工作没有完成，而自己是一个比较负责的人，想做完交给我的工作之后再离开，如果当场翻脸以后如果和这样的人待在项目组会更加难受，所以在做完大部分交给自己的开发任务就义无反顾的离开了，我不能够忍受我厌恶的东西一直在自己身边环绕。或许自己以后在工作中还会碰到类似的人，或许以后不能像还是在学校这样可以任性的做自己想要做的选择，但是我觉得在我可以做选择的时候，就一定要做自己的选择，对于这种人我只想用一句话代替我的心情，\"拉屎都要离他八丈远\"。\n\n　　我不是想抱怨什么，我也不是一个喜欢抱怨的人，在困难面前，我也从不喜欢退缩，更喜欢闭上嘴，硬气的去克服困难。但对于一些事情我持有自己的态度，不能接受的东西或者不认可的事情，就绝不会去做，也不会妥协，这是自己的个人喜好，也是我的态度，正因为这些，我才是我，不是其他任何人。\n\n　　2018，在一年快要结束的十二月份，开始学习Python，学习爬虫框架，这段时间已经使用PyCharm编写了3,541行Python代码，但要完成自己的毕设还有很多工作要去做。在临近毕业的时候选择开始学习Python，是因为自己觉得未来一定是属于大数据的时代，通过数据去更好的了解过去发生的事情，甚至通过数据去预测未来，这才是最棒的事情，未来还有很长的路要走，为成为魔法师而努力吧。✧⁺⸜(●˙▾˙●)⸝⁺✧\n\n　　2018已悄然结束，对于即将到来的2019，希望自己能够调整好心态，给自己多一点耐心，明白专注的力量，不要为了速度而牺牲深度，多一点谦虚，多一点努力，所有学会的知识都是来自于他人的分享与无私贡献，自己也要学会乐于分享自己获取到的知识，最重要的是，无论怎样都要坚持自己选择的道路。\n\n\n　　\n\n\n\n","source":"_posts/Summarize_2018.md","raw":"layout: \"post\"\ntitle: \"Summarize_2018\"\ndate: \"2018-12-30 20:48\"\ncategories:\n- [LIFE]\ntags:\n- FEELING\n---\n　　哇，时间过得好快呀，又要过年啦。ヾ(๑╹◡╹)ﾉ\"　最近心情总是起伏不定，生活作息时间也失去规律，今天终于平复下来了，所以打算将2018年发生的事情进行一个回顾以及总结。自己从小学开始的时候最喜欢做的事情是玩游戏，但自从游戏玩的少之后，我发现自己最大的爱好似乎变成了记录。(*￣∇￣*) 　大概是觉得记录才能展现一件事情的全貌，不想要错过任何一个细节。要是活在古代估计我可能会想要去当个史官什么的吧hhh，说到这个，其实自己有时候会想到如果不选择计算机我会选择什么样的职业，我觉得如果以现在的想法来看，自己多半不太可能继续选择理科，会想去从事与艺术相关的东西吧，也会想当歌手，但自己唱歌水平实在是hhh，不说了，想法虽然天马行空，但自认为我还是一个现实主义者，只能向理想主义者投去羡慕的眼光啦。\n<!-- more -->\n\n>  人生天地之间，若白驹过隙，忽然而已\n\n　　这句话出自《庄子》，大概也是生活的真实写照吧，不知不觉自己的大学生涯就要结束，其实也没什么好感叹的，时间不就是这样，一直无形之中推着人往前走吗，有的人可能觉得大学没做什么事会有什么遗憾之类的，可能对于大多数人来说最多的回答会是大学没谈恋爱会遗憾之类的，当然对于不同的人来说也会有各种各样的答案，对于我自己来说，大部分时间是和计算机其次就是篮球度过的，至于大学没谈恋爱会不会有遗憾，虽然有时候会有些失落，看到人家结对而行，自己总是形单影只，也会感到很孤独，但回顾自己的大部分时间其实还是比较充实的度过的，我个人对于遗憾的定义不是没有在合适的时间没有去做合适的事情，而是在自己在做某件事情的时候，自己没能够将它做到令自己满意的地步，所以我自己大学的遗憾不是自己大学没谈恋爱或是其它什么想做却没做的事情，而是发现自己太多缺点，太多事情没有做的足够好，很多事情都是有始无终。\n\n　　回到正题，2018，发生了很多事情，从年初决定考研，到放弃考研决定工作，哦对了，还有一件很值得说的是到她家楼下喊她的名字，哈哈哈真佩服当时自己的勇气，其实我本质上是属于比较内向的人，这样的事估计对于我来说也不会存在下一次了，从和室友参加华为杯到中途放弃决定将时间投入在参加导师推荐的TI杯，到最后对TI杯的放弃，买了一堆电子元器件，最后啥也没干。去绍兴旅游了一次，学习JS，学习Node, 学习MongoDB, 搭建博客，面试，实习，学了一点Vue，准备毕设题目，辞职，学习Python，学习Scrapy...恩，差不多就这样。感觉大部分都是有关学习的事，(艹皿艹),所以说这大概就是作为单身狗的基本修养吧。\n\n　　年初的时候决定考研，当初自己想的是考研会有很多奖学金就不用再问家里伸手要钱了，而且会有更多自由的时间让我学更多的知识。当时想报考华南理工，想考华南理工的原因一是广州离家比较近，所以以后回家也方便，二是学校也不错。但之后放弃的原因一是因为之前只写过Android，所以自己一来想参加竞赛做一些东西，并且当时又想打开Web开发的神秘大门，但考研就意味着自己要重新开始面对自己极为讨厌的不断重复刷题的生活，让自己做感到痛苦的事情实在是太难了，经过挣扎之后意识到自己就应该直接去做自己当前最想去做的事情，而不是学会向自己不喜欢的东西妥协，如果能学会妥协，那也就不是我自己了，失去了自我，活着也没太大意思。虽然考研是个很不错的选择，但确实不适合自己，放弃了考研，打算参加比赛，动手去做一些东西自己还是比较感兴趣的。\n\n　　当时已经答应室友参加华为杯，并且已经开始了一段时间了，但是之后导师又叫我参加TI杯，我就和导师说了我已经答应别人了，不能背弃承诺去参加另外一个比赛。导师劝说我应该把TI杯的优先级放在前，所以不得已只得和室友说明情况就是华为杯的事情不能参加只能你独自作战了。(我当时被导师劝了一会儿就直接放弃了答应室友的事情，现在反思这样做其实是有很大问题的，答应过别人的事情就应该尽全力去做到，要不然就不要答应别人，即使导师劝我，我也应该继续坚持自己的立场)　之后为了报名参加比赛，导师叫我组织几个人一起参加这个物联网比赛\"TI杯\"，之前我们学校还没有人参加过这个比赛，自己对嵌入式的东西了解很少，我跑了好几个宿舍，去找了一些自己觉得能干事情比较靠谱的人，话说被拒绝的滋味还真不好受呀，尤其是你去找到别人用很诚恳的态度问别人介绍这个比赛，然后阐述自己的想法，询问对方对这个比赛有没有兴趣，有的人却用一种自以为自己很了不起的态度对着你，一幅爱理不理的态度，换谁心情都好不起来了吧，虽然自己遭受到了不好的态度，在前后跑了几次之后总算是将人凑齐了，还是找到了自认为靠谱的人。接下来就是大家开会商讨做一个什么作品参加比赛，经过几次讨论将题目定下来了，我向老师提出我们需要一个实验室，因为没有实验室的话，我们在宿舍弄这个关于硬件方面的东西实在是不太方便，去图书馆的话也不太合适，毕竟大家要在一起合作做一个东西，需要一个实验室大家随时有事情可以进行商讨，也可以及时了解事情的进度等等。老师当时也答应了，说帮我们弄一个实验室，但要过几天才给我们回复。我想，等几天就等几天吧，我就把电子元器件都买好了，也烧写上了Android Things的硬件开发环境，并还写了一个通过代码控制小灯亮和熄的demo,就等着老师什么时候给我们回复。但是等呀等，就是没能等到对方给自己答复，说实话，此刻我的心情有点糟糕，当时心里想你找到我和我说了这个比赛的事情，然后我为了这个比赛放弃另外一个比赛，之后又为了这个比赛主动去找了一些人，甚至后来你说现在好像不能买东西报销，要等一段时间才能报销，我就自掏腰包先买了一些需要用到的东西，最后要求一个实验室，这样重要的一件事根本就没有得到重视，当时说过答应的话似乎也是场面话，如果要我一直催这样一件事情我觉得这个比赛还不如不做，因为即使去做也是我自己一个人在自己瞎玩，最后无非是浪费自己的时间和精力。所以没有得到回复我就不理这个比赛了，之后过了不知多久时间他终于想起这件事情了，还问我们做的怎么样，我还得无奈的解释这个事情没法做。(不是事情没法做，而是心凉了什么事都做不了)\n\n　　感觉怎么这个年度总结这么多消极情绪呢，人家年度结束的时候都是为明年设个什么小目标许个小愿啥的，我却在年度总结里写过去的一年里哪些事情让自己不舒服。(ㄒoㄒ)。希望自己不要再犯同样的错误了，以后无论什么事情在答应别人之前，自己首先应该考虑清楚，且和对方沟通清楚才行，从和对方的沟通中观察对方的态度和想法，一旦答应过的事情就一定无论如何要做到。一些原则性的东西面前一定不能让步。\n\n　　关于比赛的事情告一段落，自己准备学习Web开发方面的知识，因为自己之前只写过Android，而Web的运用场景要比Android要广泛的多，如果自己不涉足这个方面的知识的话觉得自己就像...em...怎么描述...就是有一块你感兴趣的大陆...但不去探险的话实在是太可惜了。所以开始学习JS,并想通过搭建一个博客去锻炼提升自己在这方面的能力，但是博客搭建还没完成，学期就已经快要结束了，只能一边找工作一边继续了。之后就是准备面试，自己之前的面试十分不顺利，自己思考了一下失败的原因是，一是自己在面试方法上存在一些问题，二是对自己的定位不是特别明确，三是自己准备的不够充分。在对自己进行了一些调整之后，开始了新的面试，依稀记得自己在面试TD的时候，自己准备好自己要说的内容之后，并且也是按照我想要说的内容在表达，但是不知为什么我会很紧张，我觉得我不应该是容易紧张的人呀...总而言之那天虽然自己说了很多话，但是实在是紧张的不得了，说话的时候手一直在不停的哆嗦，对于面试官的提问自我觉得回答的还过得去，最后还得知面试官居然是自己的学长hhh。在顺利的找到了自己想要的Java Web开发实习之后，告知对方自己在学校的课程要在短学期结束之后才能去报道，之后就在短学期结束之后(七月二十三号)一直实习到十二月十二号。\n\n　　实习中认识了一些新的人，用了自己没用过的IDEA作为新的开发工具，不过话说回来IDEA和Android Studio的使用方式其实十分相似，我没用多久时间就很快上手了，毕竟都是一个公司的产品，所以使用方式也十分相似，相比较Eclipse来说，IDEA要好用的太多，当然体积也重很多，很吃内存。但相对于其优点来说，这个还是可以接受的。连接数据库使用了我之前没有使用过的Navicat,不过Navicat还是蛮好用的，是一款十分优秀的工具。\n\n　　对于这份实习，开始我是满怀着期待，因为这是自己的一份实习，并且是我想要做的工作，用职业的要求去要求自己，想要大展拳脚一番。到了项目组的第一天发现，一切并不是自己想象的那样，每个人上班能晚则晚，有事就做，没事儿就闲着干其它的事情，经常会聊一些生活中的各种琐事，感觉这完全不是自己所追求的地方，自己渴望的是特别有技术氛围的团队，每个人都拥有对技术的执着，会因为一个观点与你进行理性的争论，这才是自己理想的工作环境。看来理想毕竟还是理想呀，虽然不能实现，但我也会朝着这个方向去追求。虽然一来就对项目组印象就不是特别好，但是自己的初衷是来学习知识的，抱着学习的心态完成每一个mentor交给自己的任务，即使再难，我也会尽全力去弄明白，一时弄不明白就多花时间，直至将任务完成。所以自己保持这样的态度从开始进入到平台测试修改BUG到后来单独承担开发任务，不仅学习到了很多技术上的知识，也学会如何更好的和同事进行沟通交流解决问题，以及其它方面的提升等。\n\n　　实习大部分时间过的比较充实，但还是决定离开这个地方，离开之前自己很纠结要不要参加这个公司的转正答辩，刚开始自己想要参加是因为考虑到自己万一明年找工作不顺利的话起码还手上还有一个offer，但最终我还是决定直接离职，连答辩都不想参加了。在将项目组交给我独立完成的模块开发任务完成的差不多之后，新任务也不打算继续做了，直接阐述了离职想法，并在当天离开项目组。这个项目组除了之前所说的氛围我不喜欢之外，真正让我决定义无反顾离开的还是项目组中有些人让我觉得没法忍受，也不想继续忍受与这样的人继续相处下去。原因这里就不阐述了，每个人都有自己的性格，有自己的脾气，选择隐忍不过是因为自己还有一些工作没有完成，而自己是一个比较负责的人，想做完交给我的工作之后再离开，如果当场翻脸以后如果和这样的人待在项目组会更加难受，所以在做完大部分交给自己的开发任务就义无反顾的离开了，我不能够忍受我厌恶的东西一直在自己身边环绕。或许自己以后在工作中还会碰到类似的人，或许以后不能像还是在学校这样可以任性的做自己想要做的选择，但是我觉得在我可以做选择的时候，就一定要做自己的选择，对于这种人我只想用一句话代替我的心情，\"拉屎都要离他八丈远\"。\n\n　　我不是想抱怨什么，我也不是一个喜欢抱怨的人，在困难面前，我也从不喜欢退缩，更喜欢闭上嘴，硬气的去克服困难。但对于一些事情我持有自己的态度，不能接受的东西或者不认可的事情，就绝不会去做，也不会妥协，这是自己的个人喜好，也是我的态度，正因为这些，我才是我，不是其他任何人。\n\n　　2018，在一年快要结束的十二月份，开始学习Python，学习爬虫框架，这段时间已经使用PyCharm编写了3,541行Python代码，但要完成自己的毕设还有很多工作要去做。在临近毕业的时候选择开始学习Python，是因为自己觉得未来一定是属于大数据的时代，通过数据去更好的了解过去发生的事情，甚至通过数据去预测未来，这才是最棒的事情，未来还有很长的路要走，为成为魔法师而努力吧。✧⁺⸜(●˙▾˙●)⸝⁺✧\n\n　　2018已悄然结束，对于即将到来的2019，希望自己能够调整好心态，给自己多一点耐心，明白专注的力量，不要为了速度而牺牲深度，多一点谦虚，多一点努力，所有学会的知识都是来自于他人的分享与无私贡献，自己也要学会乐于分享自己获取到的知识，最重要的是，无论怎样都要坚持自己选择的道路。\n\n\n　　\n\n\n\n","slug":"Summarize_2018","published":1,"updated":"2019-05-19T09:42:05.860Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxai000efo818phkeeh9","content":"<p>　　哇，时间过得好快呀，又要过年啦。ヾ(๑╹◡╹)ﾉ”　最近心情总是起伏不定，生活作息时间也失去规律，今天终于平复下来了，所以打算将2018年发生的事情进行一个回顾以及总结。自己从小学开始的时候最喜欢做的事情是玩游戏，但自从游戏玩的少之后，我发现自己最大的爱好似乎变成了记录。(<em>￣∇￣</em>) 　大概是觉得记录才能展现一件事情的全貌，不想要错过任何一个细节。要是活在古代估计我可能会想要去当个史官什么的吧hhh，说到这个，其实自己有时候会想到如果不选择计算机我会选择什么样的职业，我觉得如果以现在的想法来看，自己多半不太可能继续选择理科，会想去从事与艺术相关的东西吧，也会想当歌手，但自己唱歌水平实在是hhh，不说了，想法虽然天马行空，但自认为我还是一个现实主义者，只能向理想主义者投去羡慕的眼光啦。<br><a id=\"more\"></a></p>\n<blockquote>\n<p> 人生天地之间，若白驹过隙，忽然而已</p>\n</blockquote>\n<p>　　这句话出自《庄子》，大概也是生活的真实写照吧，不知不觉自己的大学生涯就要结束，其实也没什么好感叹的，时间不就是这样，一直无形之中推着人往前走吗，有的人可能觉得大学没做什么事会有什么遗憾之类的，可能对于大多数人来说最多的回答会是大学没谈恋爱会遗憾之类的，当然对于不同的人来说也会有各种各样的答案，对于我自己来说，大部分时间是和计算机其次就是篮球度过的，至于大学没谈恋爱会不会有遗憾，虽然有时候会有些失落，看到人家结对而行，自己总是形单影只，也会感到很孤独，但回顾自己的大部分时间其实还是比较充实的度过的，我个人对于遗憾的定义不是没有在合适的时间没有去做合适的事情，而是在自己在做某件事情的时候，自己没能够将它做到令自己满意的地步，所以我自己大学的遗憾不是自己大学没谈恋爱或是其它什么想做却没做的事情，而是发现自己太多缺点，太多事情没有做的足够好，很多事情都是有始无终。</p>\n<p>　　回到正题，2018，发生了很多事情，从年初决定考研，到放弃考研决定工作，哦对了，还有一件很值得说的是到她家楼下喊她的名字，哈哈哈真佩服当时自己的勇气，其实我本质上是属于比较内向的人，这样的事估计对于我来说也不会存在下一次了，从和室友参加华为杯到中途放弃决定将时间投入在参加导师推荐的TI杯，到最后对TI杯的放弃，买了一堆电子元器件，最后啥也没干。去绍兴旅游了一次，学习JS，学习Node, 学习MongoDB, 搭建博客，面试，实习，学了一点Vue，准备毕设题目，辞职，学习Python，学习Scrapy…恩，差不多就这样。感觉大部分都是有关学习的事，(艹皿艹),所以说这大概就是作为单身狗的基本修养吧。</p>\n<p>　　年初的时候决定考研，当初自己想的是考研会有很多奖学金就不用再问家里伸手要钱了，而且会有更多自由的时间让我学更多的知识。当时想报考华南理工，想考华南理工的原因一是广州离家比较近，所以以后回家也方便，二是学校也不错。但之后放弃的原因一是因为之前只写过Android，所以自己一来想参加竞赛做一些东西，并且当时又想打开Web开发的神秘大门，但考研就意味着自己要重新开始面对自己极为讨厌的不断重复刷题的生活，让自己做感到痛苦的事情实在是太难了，经过挣扎之后意识到自己就应该直接去做自己当前最想去做的事情，而不是学会向自己不喜欢的东西妥协，如果能学会妥协，那也就不是我自己了，失去了自我，活着也没太大意思。虽然考研是个很不错的选择，但确实不适合自己，放弃了考研，打算参加比赛，动手去做一些东西自己还是比较感兴趣的。</p>\n<p>　　当时已经答应室友参加华为杯，并且已经开始了一段时间了，但是之后导师又叫我参加TI杯，我就和导师说了我已经答应别人了，不能背弃承诺去参加另外一个比赛。导师劝说我应该把TI杯的优先级放在前，所以不得已只得和室友说明情况就是华为杯的事情不能参加只能你独自作战了。(我当时被导师劝了一会儿就直接放弃了答应室友的事情，现在反思这样做其实是有很大问题的，答应过别人的事情就应该尽全力去做到，要不然就不要答应别人，即使导师劝我，我也应该继续坚持自己的立场)　之后为了报名参加比赛，导师叫我组织几个人一起参加这个物联网比赛”TI杯”，之前我们学校还没有人参加过这个比赛，自己对嵌入式的东西了解很少，我跑了好几个宿舍，去找了一些自己觉得能干事情比较靠谱的人，话说被拒绝的滋味还真不好受呀，尤其是你去找到别人用很诚恳的态度问别人介绍这个比赛，然后阐述自己的想法，询问对方对这个比赛有没有兴趣，有的人却用一种自以为自己很了不起的态度对着你，一幅爱理不理的态度，换谁心情都好不起来了吧，虽然自己遭受到了不好的态度，在前后跑了几次之后总算是将人凑齐了，还是找到了自认为靠谱的人。接下来就是大家开会商讨做一个什么作品参加比赛，经过几次讨论将题目定下来了，我向老师提出我们需要一个实验室，因为没有实验室的话，我们在宿舍弄这个关于硬件方面的东西实在是不太方便，去图书馆的话也不太合适，毕竟大家要在一起合作做一个东西，需要一个实验室大家随时有事情可以进行商讨，也可以及时了解事情的进度等等。老师当时也答应了，说帮我们弄一个实验室，但要过几天才给我们回复。我想，等几天就等几天吧，我就把电子元器件都买好了，也烧写上了Android Things的硬件开发环境，并还写了一个通过代码控制小灯亮和熄的demo,就等着老师什么时候给我们回复。但是等呀等，就是没能等到对方给自己答复，说实话，此刻我的心情有点糟糕，当时心里想你找到我和我说了这个比赛的事情，然后我为了这个比赛放弃另外一个比赛，之后又为了这个比赛主动去找了一些人，甚至后来你说现在好像不能买东西报销，要等一段时间才能报销，我就自掏腰包先买了一些需要用到的东西，最后要求一个实验室，这样重要的一件事根本就没有得到重视，当时说过答应的话似乎也是场面话，如果要我一直催这样一件事情我觉得这个比赛还不如不做，因为即使去做也是我自己一个人在自己瞎玩，最后无非是浪费自己的时间和精力。所以没有得到回复我就不理这个比赛了，之后过了不知多久时间他终于想起这件事情了，还问我们做的怎么样，我还得无奈的解释这个事情没法做。(不是事情没法做，而是心凉了什么事都做不了)</p>\n<p>　　感觉怎么这个年度总结这么多消极情绪呢，人家年度结束的时候都是为明年设个什么小目标许个小愿啥的，我却在年度总结里写过去的一年里哪些事情让自己不舒服。(ㄒoㄒ)。希望自己不要再犯同样的错误了，以后无论什么事情在答应别人之前，自己首先应该考虑清楚，且和对方沟通清楚才行，从和对方的沟通中观察对方的态度和想法，一旦答应过的事情就一定无论如何要做到。一些原则性的东西面前一定不能让步。</p>\n<p>　　关于比赛的事情告一段落，自己准备学习Web开发方面的知识，因为自己之前只写过Android，而Web的运用场景要比Android要广泛的多，如果自己不涉足这个方面的知识的话觉得自己就像…em…怎么描述…就是有一块你感兴趣的大陆…但不去探险的话实在是太可惜了。所以开始学习JS,并想通过搭建一个博客去锻炼提升自己在这方面的能力，但是博客搭建还没完成，学期就已经快要结束了，只能一边找工作一边继续了。之后就是准备面试，自己之前的面试十分不顺利，自己思考了一下失败的原因是，一是自己在面试方法上存在一些问题，二是对自己的定位不是特别明确，三是自己准备的不够充分。在对自己进行了一些调整之后，开始了新的面试，依稀记得自己在面试TD的时候，自己准备好自己要说的内容之后，并且也是按照我想要说的内容在表达，但是不知为什么我会很紧张，我觉得我不应该是容易紧张的人呀…总而言之那天虽然自己说了很多话，但是实在是紧张的不得了，说话的时候手一直在不停的哆嗦，对于面试官的提问自我觉得回答的还过得去，最后还得知面试官居然是自己的学长hhh。在顺利的找到了自己想要的Java Web开发实习之后，告知对方自己在学校的课程要在短学期结束之后才能去报道，之后就在短学期结束之后(七月二十三号)一直实习到十二月十二号。</p>\n<p>　　实习中认识了一些新的人，用了自己没用过的IDEA作为新的开发工具，不过话说回来IDEA和Android Studio的使用方式其实十分相似，我没用多久时间就很快上手了，毕竟都是一个公司的产品，所以使用方式也十分相似，相比较Eclipse来说，IDEA要好用的太多，当然体积也重很多，很吃内存。但相对于其优点来说，这个还是可以接受的。连接数据库使用了我之前没有使用过的Navicat,不过Navicat还是蛮好用的，是一款十分优秀的工具。</p>\n<p>　　对于这份实习，开始我是满怀着期待，因为这是自己的一份实习，并且是我想要做的工作，用职业的要求去要求自己，想要大展拳脚一番。到了项目组的第一天发现，一切并不是自己想象的那样，每个人上班能晚则晚，有事就做，没事儿就闲着干其它的事情，经常会聊一些生活中的各种琐事，感觉这完全不是自己所追求的地方，自己渴望的是特别有技术氛围的团队，每个人都拥有对技术的执着，会因为一个观点与你进行理性的争论，这才是自己理想的工作环境。看来理想毕竟还是理想呀，虽然不能实现，但我也会朝着这个方向去追求。虽然一来就对项目组印象就不是特别好，但是自己的初衷是来学习知识的，抱着学习的心态完成每一个mentor交给自己的任务，即使再难，我也会尽全力去弄明白，一时弄不明白就多花时间，直至将任务完成。所以自己保持这样的态度从开始进入到平台测试修改BUG到后来单独承担开发任务，不仅学习到了很多技术上的知识，也学会如何更好的和同事进行沟通交流解决问题，以及其它方面的提升等。</p>\n<p>　　实习大部分时间过的比较充实，但还是决定离开这个地方，离开之前自己很纠结要不要参加这个公司的转正答辩，刚开始自己想要参加是因为考虑到自己万一明年找工作不顺利的话起码还手上还有一个offer，但最终我还是决定直接离职，连答辩都不想参加了。在将项目组交给我独立完成的模块开发任务完成的差不多之后，新任务也不打算继续做了，直接阐述了离职想法，并在当天离开项目组。这个项目组除了之前所说的氛围我不喜欢之外，真正让我决定义无反顾离开的还是项目组中有些人让我觉得没法忍受，也不想继续忍受与这样的人继续相处下去。原因这里就不阐述了，每个人都有自己的性格，有自己的脾气，选择隐忍不过是因为自己还有一些工作没有完成，而自己是一个比较负责的人，想做完交给我的工作之后再离开，如果当场翻脸以后如果和这样的人待在项目组会更加难受，所以在做完大部分交给自己的开发任务就义无反顾的离开了，我不能够忍受我厌恶的东西一直在自己身边环绕。或许自己以后在工作中还会碰到类似的人，或许以后不能像还是在学校这样可以任性的做自己想要做的选择，但是我觉得在我可以做选择的时候，就一定要做自己的选择，对于这种人我只想用一句话代替我的心情，”拉屎都要离他八丈远”。</p>\n<p>　　我不是想抱怨什么，我也不是一个喜欢抱怨的人，在困难面前，我也从不喜欢退缩，更喜欢闭上嘴，硬气的去克服困难。但对于一些事情我持有自己的态度，不能接受的东西或者不认可的事情，就绝不会去做，也不会妥协，这是自己的个人喜好，也是我的态度，正因为这些，我才是我，不是其他任何人。</p>\n<p>　　2018，在一年快要结束的十二月份，开始学习Python，学习爬虫框架，这段时间已经使用PyCharm编写了3,541行Python代码，但要完成自己的毕设还有很多工作要去做。在临近毕业的时候选择开始学习Python，是因为自己觉得未来一定是属于大数据的时代，通过数据去更好的了解过去发生的事情，甚至通过数据去预测未来，这才是最棒的事情，未来还有很长的路要走，为成为魔法师而努力吧。✧⁺⸜(●˙▾˙●)⸝⁺✧</p>\n<p>　　2018已悄然结束，对于即将到来的2019，希望自己能够调整好心态，给自己多一点耐心，明白专注的力量，不要为了速度而牺牲深度，多一点谦虚，多一点努力，所有学会的知识都是来自于他人的分享与无私贡献，自己也要学会乐于分享自己获取到的知识，最重要的是，无论怎样都要坚持自己选择的道路。</p>\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<p>　　哇，时间过得好快呀，又要过年啦。ヾ(๑╹◡╹)ﾉ”　最近心情总是起伏不定，生活作息时间也失去规律，今天终于平复下来了，所以打算将2018年发生的事情进行一个回顾以及总结。自己从小学开始的时候最喜欢做的事情是玩游戏，但自从游戏玩的少之后，我发现自己最大的爱好似乎变成了记录。(<em>￣∇￣</em>) 　大概是觉得记录才能展现一件事情的全貌，不想要错过任何一个细节。要是活在古代估计我可能会想要去当个史官什么的吧hhh，说到这个，其实自己有时候会想到如果不选择计算机我会选择什么样的职业，我觉得如果以现在的想法来看，自己多半不太可能继续选择理科，会想去从事与艺术相关的东西吧，也会想当歌手，但自己唱歌水平实在是hhh，不说了，想法虽然天马行空，但自认为我还是一个现实主义者，只能向理想主义者投去羡慕的眼光啦。<br>","more":"</p>\n<blockquote>\n<p> 人生天地之间，若白驹过隙，忽然而已</p>\n</blockquote>\n<p>　　这句话出自《庄子》，大概也是生活的真实写照吧，不知不觉自己的大学生涯就要结束，其实也没什么好感叹的，时间不就是这样，一直无形之中推着人往前走吗，有的人可能觉得大学没做什么事会有什么遗憾之类的，可能对于大多数人来说最多的回答会是大学没谈恋爱会遗憾之类的，当然对于不同的人来说也会有各种各样的答案，对于我自己来说，大部分时间是和计算机其次就是篮球度过的，至于大学没谈恋爱会不会有遗憾，虽然有时候会有些失落，看到人家结对而行，自己总是形单影只，也会感到很孤独，但回顾自己的大部分时间其实还是比较充实的度过的，我个人对于遗憾的定义不是没有在合适的时间没有去做合适的事情，而是在自己在做某件事情的时候，自己没能够将它做到令自己满意的地步，所以我自己大学的遗憾不是自己大学没谈恋爱或是其它什么想做却没做的事情，而是发现自己太多缺点，太多事情没有做的足够好，很多事情都是有始无终。</p>\n<p>　　回到正题，2018，发生了很多事情，从年初决定考研，到放弃考研决定工作，哦对了，还有一件很值得说的是到她家楼下喊她的名字，哈哈哈真佩服当时自己的勇气，其实我本质上是属于比较内向的人，这样的事估计对于我来说也不会存在下一次了，从和室友参加华为杯到中途放弃决定将时间投入在参加导师推荐的TI杯，到最后对TI杯的放弃，买了一堆电子元器件，最后啥也没干。去绍兴旅游了一次，学习JS，学习Node, 学习MongoDB, 搭建博客，面试，实习，学了一点Vue，准备毕设题目，辞职，学习Python，学习Scrapy…恩，差不多就这样。感觉大部分都是有关学习的事，(艹皿艹),所以说这大概就是作为单身狗的基本修养吧。</p>\n<p>　　年初的时候决定考研，当初自己想的是考研会有很多奖学金就不用再问家里伸手要钱了，而且会有更多自由的时间让我学更多的知识。当时想报考华南理工，想考华南理工的原因一是广州离家比较近，所以以后回家也方便，二是学校也不错。但之后放弃的原因一是因为之前只写过Android，所以自己一来想参加竞赛做一些东西，并且当时又想打开Web开发的神秘大门，但考研就意味着自己要重新开始面对自己极为讨厌的不断重复刷题的生活，让自己做感到痛苦的事情实在是太难了，经过挣扎之后意识到自己就应该直接去做自己当前最想去做的事情，而不是学会向自己不喜欢的东西妥协，如果能学会妥协，那也就不是我自己了，失去了自我，活着也没太大意思。虽然考研是个很不错的选择，但确实不适合自己，放弃了考研，打算参加比赛，动手去做一些东西自己还是比较感兴趣的。</p>\n<p>　　当时已经答应室友参加华为杯，并且已经开始了一段时间了，但是之后导师又叫我参加TI杯，我就和导师说了我已经答应别人了，不能背弃承诺去参加另外一个比赛。导师劝说我应该把TI杯的优先级放在前，所以不得已只得和室友说明情况就是华为杯的事情不能参加只能你独自作战了。(我当时被导师劝了一会儿就直接放弃了答应室友的事情，现在反思这样做其实是有很大问题的，答应过别人的事情就应该尽全力去做到，要不然就不要答应别人，即使导师劝我，我也应该继续坚持自己的立场)　之后为了报名参加比赛，导师叫我组织几个人一起参加这个物联网比赛”TI杯”，之前我们学校还没有人参加过这个比赛，自己对嵌入式的东西了解很少，我跑了好几个宿舍，去找了一些自己觉得能干事情比较靠谱的人，话说被拒绝的滋味还真不好受呀，尤其是你去找到别人用很诚恳的态度问别人介绍这个比赛，然后阐述自己的想法，询问对方对这个比赛有没有兴趣，有的人却用一种自以为自己很了不起的态度对着你，一幅爱理不理的态度，换谁心情都好不起来了吧，虽然自己遭受到了不好的态度，在前后跑了几次之后总算是将人凑齐了，还是找到了自认为靠谱的人。接下来就是大家开会商讨做一个什么作品参加比赛，经过几次讨论将题目定下来了，我向老师提出我们需要一个实验室，因为没有实验室的话，我们在宿舍弄这个关于硬件方面的东西实在是不太方便，去图书馆的话也不太合适，毕竟大家要在一起合作做一个东西，需要一个实验室大家随时有事情可以进行商讨，也可以及时了解事情的进度等等。老师当时也答应了，说帮我们弄一个实验室，但要过几天才给我们回复。我想，等几天就等几天吧，我就把电子元器件都买好了，也烧写上了Android Things的硬件开发环境，并还写了一个通过代码控制小灯亮和熄的demo,就等着老师什么时候给我们回复。但是等呀等，就是没能等到对方给自己答复，说实话，此刻我的心情有点糟糕，当时心里想你找到我和我说了这个比赛的事情，然后我为了这个比赛放弃另外一个比赛，之后又为了这个比赛主动去找了一些人，甚至后来你说现在好像不能买东西报销，要等一段时间才能报销，我就自掏腰包先买了一些需要用到的东西，最后要求一个实验室，这样重要的一件事根本就没有得到重视，当时说过答应的话似乎也是场面话，如果要我一直催这样一件事情我觉得这个比赛还不如不做，因为即使去做也是我自己一个人在自己瞎玩，最后无非是浪费自己的时间和精力。所以没有得到回复我就不理这个比赛了，之后过了不知多久时间他终于想起这件事情了，还问我们做的怎么样，我还得无奈的解释这个事情没法做。(不是事情没法做，而是心凉了什么事都做不了)</p>\n<p>　　感觉怎么这个年度总结这么多消极情绪呢，人家年度结束的时候都是为明年设个什么小目标许个小愿啥的，我却在年度总结里写过去的一年里哪些事情让自己不舒服。(ㄒoㄒ)。希望自己不要再犯同样的错误了，以后无论什么事情在答应别人之前，自己首先应该考虑清楚，且和对方沟通清楚才行，从和对方的沟通中观察对方的态度和想法，一旦答应过的事情就一定无论如何要做到。一些原则性的东西面前一定不能让步。</p>\n<p>　　关于比赛的事情告一段落，自己准备学习Web开发方面的知识，因为自己之前只写过Android，而Web的运用场景要比Android要广泛的多，如果自己不涉足这个方面的知识的话觉得自己就像…em…怎么描述…就是有一块你感兴趣的大陆…但不去探险的话实在是太可惜了。所以开始学习JS,并想通过搭建一个博客去锻炼提升自己在这方面的能力，但是博客搭建还没完成，学期就已经快要结束了，只能一边找工作一边继续了。之后就是准备面试，自己之前的面试十分不顺利，自己思考了一下失败的原因是，一是自己在面试方法上存在一些问题，二是对自己的定位不是特别明确，三是自己准备的不够充分。在对自己进行了一些调整之后，开始了新的面试，依稀记得自己在面试TD的时候，自己准备好自己要说的内容之后，并且也是按照我想要说的内容在表达，但是不知为什么我会很紧张，我觉得我不应该是容易紧张的人呀…总而言之那天虽然自己说了很多话，但是实在是紧张的不得了，说话的时候手一直在不停的哆嗦，对于面试官的提问自我觉得回答的还过得去，最后还得知面试官居然是自己的学长hhh。在顺利的找到了自己想要的Java Web开发实习之后，告知对方自己在学校的课程要在短学期结束之后才能去报道，之后就在短学期结束之后(七月二十三号)一直实习到十二月十二号。</p>\n<p>　　实习中认识了一些新的人，用了自己没用过的IDEA作为新的开发工具，不过话说回来IDEA和Android Studio的使用方式其实十分相似，我没用多久时间就很快上手了，毕竟都是一个公司的产品，所以使用方式也十分相似，相比较Eclipse来说，IDEA要好用的太多，当然体积也重很多，很吃内存。但相对于其优点来说，这个还是可以接受的。连接数据库使用了我之前没有使用过的Navicat,不过Navicat还是蛮好用的，是一款十分优秀的工具。</p>\n<p>　　对于这份实习，开始我是满怀着期待，因为这是自己的一份实习，并且是我想要做的工作，用职业的要求去要求自己，想要大展拳脚一番。到了项目组的第一天发现，一切并不是自己想象的那样，每个人上班能晚则晚，有事就做，没事儿就闲着干其它的事情，经常会聊一些生活中的各种琐事，感觉这完全不是自己所追求的地方，自己渴望的是特别有技术氛围的团队，每个人都拥有对技术的执着，会因为一个观点与你进行理性的争论，这才是自己理想的工作环境。看来理想毕竟还是理想呀，虽然不能实现，但我也会朝着这个方向去追求。虽然一来就对项目组印象就不是特别好，但是自己的初衷是来学习知识的，抱着学习的心态完成每一个mentor交给自己的任务，即使再难，我也会尽全力去弄明白，一时弄不明白就多花时间，直至将任务完成。所以自己保持这样的态度从开始进入到平台测试修改BUG到后来单独承担开发任务，不仅学习到了很多技术上的知识，也学会如何更好的和同事进行沟通交流解决问题，以及其它方面的提升等。</p>\n<p>　　实习大部分时间过的比较充实，但还是决定离开这个地方，离开之前自己很纠结要不要参加这个公司的转正答辩，刚开始自己想要参加是因为考虑到自己万一明年找工作不顺利的话起码还手上还有一个offer，但最终我还是决定直接离职，连答辩都不想参加了。在将项目组交给我独立完成的模块开发任务完成的差不多之后，新任务也不打算继续做了，直接阐述了离职想法，并在当天离开项目组。这个项目组除了之前所说的氛围我不喜欢之外，真正让我决定义无反顾离开的还是项目组中有些人让我觉得没法忍受，也不想继续忍受与这样的人继续相处下去。原因这里就不阐述了，每个人都有自己的性格，有自己的脾气，选择隐忍不过是因为自己还有一些工作没有完成，而自己是一个比较负责的人，想做完交给我的工作之后再离开，如果当场翻脸以后如果和这样的人待在项目组会更加难受，所以在做完大部分交给自己的开发任务就义无反顾的离开了，我不能够忍受我厌恶的东西一直在自己身边环绕。或许自己以后在工作中还会碰到类似的人，或许以后不能像还是在学校这样可以任性的做自己想要做的选择，但是我觉得在我可以做选择的时候，就一定要做自己的选择，对于这种人我只想用一句话代替我的心情，”拉屎都要离他八丈远”。</p>\n<p>　　我不是想抱怨什么，我也不是一个喜欢抱怨的人，在困难面前，我也从不喜欢退缩，更喜欢闭上嘴，硬气的去克服困难。但对于一些事情我持有自己的态度，不能接受的东西或者不认可的事情，就绝不会去做，也不会妥协，这是自己的个人喜好，也是我的态度，正因为这些，我才是我，不是其他任何人。</p>\n<p>　　2018，在一年快要结束的十二月份，开始学习Python，学习爬虫框架，这段时间已经使用PyCharm编写了3,541行Python代码，但要完成自己的毕设还有很多工作要去做。在临近毕业的时候选择开始学习Python，是因为自己觉得未来一定是属于大数据的时代，通过数据去更好的了解过去发生的事情，甚至通过数据去预测未来，这才是最棒的事情，未来还有很长的路要走，为成为魔法师而努力吧。✧⁺⸜(●˙▾˙●)⸝⁺✧</p>\n<p>　　2018已悄然结束，对于即将到来的2019，希望自己能够调整好心态，给自己多一点耐心，明白专注的力量，不要为了速度而牺牲深度，多一点谦虚，多一点努力，所有学会的知识都是来自于他人的分享与无私贡献，自己也要学会乐于分享自己获取到的知识，最重要的是，无论怎样都要坚持自己选择的道路。</p>\n<p>　　</p>"},{"layout":"post","title":"Vue基础-事件处理和表单数据绑定","date":"2019-04-21T10:56:00.000Z","thumbnail":"http://swcheng.com/images/vuelogo.png","_content":"　　创建一个vue对象:\n<!-- more -->\n{% codeblock lang:js %}\n  var example1 = new Vue({\n    el: '#example-1',\n    data: {\n      counter: 0,\n      message: \"\",\n      multiMessage: \"\",\n      checked: false,\n      checkedNames: [],\n      picked: \"One\",\n      selected: \"A\"\n    },\n    methods: {\n      greet: function(event){\n        alert(event)\n        alert(\"Greet from vue\")\n      },\n      say: function(message){\n        alert(message)\n      },\n      warn: function(msg, event){\n        // 这里我们可以直接调用原生对象event\n        if(event) event.preventDefault()\n        alert(msg)\n      },\n      doThis: function(){\n        console.log(\"dothis\")\n      },\n      onSubmit: function(){\n        console.log(\"onSubmit\")\n      },\n      doThat: function(){\n        console.log(\"dothat\")\n      },\n      submit: function(){\n        console.log(\"submit\")\n      }\n    }\n  })\n{% endcodeblock %}\n\n### 监听事件\n　　使用v-on指令去进行基础事件的监听，在触发事件时进行相应处理:\n{% codeblock lang:html %}\n  <div id=\"example-1\">\n    <!-- 基本的事件处理 -->\n    <button v-on:click=\"counter += 1\">Add 1</button>\n    <p>The button above has been clicked {% raw %}{{ counter }}{% endraw %} times.</p>\n  </div>  \n{% endcodeblock %}\n　　这里我们监听的是click的事件，每次点击都会使下面的文字显示增加一次点击的次数，但是一般点击事件不应该直接在html里进行处理，我们应该尽可能的将其写在js代码中。比如:\n{% codeblock lang:html %}\n　<button v-on:click=\"greet\">Greet</button>\n{% endcodeblock %}\n　　点击这个按钮则会调用greet方法，这里我们直接绑定的是在vue对象中定义的方法名而不带任何参数，当然也可以选择在这里选择直接调用一个带参数的方法。并且这里兼顾了属性定义监听和使用DOM定义绑定方法对象两种方式。比如:\n{% codeblock lang:html %}\n  <button v-on:click=\"say(message)\">Say</button>\n{% endcodeblock %}\n　　如果我们需要获取原生的DOM对象，可以使用特殊变量$event将其传递到方法中:\n{% codeblock lang:html %}\n  <button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n    Submit\n  </button>\n{% endcodeblock %}\n　　对于很多事件，我们很多时候不仅仅是需要一个回调方法，我们很多时候还有其它的操作，对于一些常见的设置，为了方便vue提供了事件修饰符，比如:\n- .stop\n- .prevent\n- .capture\n- .self\n- .once\n- .passive\n\n　　下面是对这些修饰符的解释。\n{% codeblock lang:html %}\n  <!-- 点击事件将只会触发一次 2.1.4 新增 -->\n  <a v-on:click.once=\"doThis\"></a>\n\n  <!-- 阻止单击事件继续传播,相当于调用stopPropogation -->\n  <a v-on:click.stop=\"doThis\"></a>\n\n  <!-- 提交事件不再重载页面，相当于阻止了浏览器默认行为，调用了preventDefault() -->\n  <form v-on:submit.prevent=\"onSubmit\"></form>\n\n  <!-- 修饰符可以串联 -->\n  <a v-on:click.stop.prevent=\"doThat\"></a>\n\n  <!-- 甚至可以只有修饰符 -->\n  <form v-on:submit.prevent></form>\n\n  <!-- 添加事件监听器时使用事件捕获模式，这里捕获的是在capture阶段，而非默认的bubble阶段 -->\n  <div v-on:click.capture=\"doThis\">...</div>\n\n  <!-- 只当在 event.target 是当前元素自身时触发处理函数,相当于在event的回调方法中加了判断 -->\n  <!-- 比如判断this === event.target 决定是否执行代码 -->\n  <div v-on:click.self=\"doThat\">...</div>\n\n  <!-- 浏览器滚动事件的默认行为 (即滚动行为) 将会立即触发，为了提升浏览性能，尤其是移动端-->\n  <!-- 而不会等待 `onScroll` 完成  -->\n  <!-- 这其中包含 `event.preventDefault()` 的情况,与一般的实现有所区别  2.3.0 新增 -->\n  <!-- 不可以将.prevet与.passive一起用，因为它们本身就是冲突，如果你这样做了，.prevent会被忽略\n    且同时获得一个警告 -->\n  <div v-on:scroll.passive=\"onScroll\">...</div>\n{% endcodeblock %}\n　　很多时候我们需要监听特定按钮的键盘事件，那么此时我们可以去使用一些按键修饰符。比如:\n{% codeblock lang:html %}\n  <!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` -->\n  <input v-on:keyup.enter=\"submit\">\n{% endcodeblock %}\n　　可以直接将 [KeyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)暴露的任意有效按键名转换为 kebab-case 来作为修饰符。也可以使用按键码去作为修饰符，这keycode已经被废弃了，所以这里也不涉及到该部分的内容。同时会有一些系统修饰键比如ctrl、alt之类的，如果需要触发该类事件可以使用连续的修饰符。这些系统修饰键有:\n- .ctrl\n- .alt\n- .shift\n- .meta\n\n　　比如:\n{% codeblock lang:html %}\n  <!-- Alt + C -->\n  <input @keyup.alt.67=\"clear\">\n\n  <!-- Ctrl + Click -->\n  <div @click.ctrl=\"doSomething\">Do something</div>\n{% endcodeblock %}\n　　\n### 表单数据绑定\n　　在一个表单中只能包含一些表单元素，常见的表单元素有input、textarea、select等。所谓的表单数据绑定在vue中指的是将vue数据对象与表单元素的输入进行绑定，也就是说无论是vue数据对象的变化或者是表单元素的输入，都会同步修改对方的值。在vue中使用v-model指令去实现这一功能，而v-model指令本质也是通过监听用户的输入事件去更新输入。v-model针对不同的元素的不同属性抛出的不同事件进行数据修改，text 和 textarea 元素使用 value 属性和 input 事件；checkbox 和 radio 使用 checked 属性和 change 事件；select 字段将 value 作为 prop 并将 change 作为事件。\n　　下面是一些基本组件的使用的例子:\n{% codeblock lang:html %}\n  <!-- 普通input输入框 -->\n  <input v-model=\"message\" placeholder=\"edit me\">\n  <p>Message is: {% raw %}{{ message }}{% endraw %}</p>\n\n  <!-- 多行输入 -->\n  <span>Multiline message is:</span>\n  <p style=\"white-space: pre-line;\">{% raw %}{{ multiMessage }}{% endraw %}</p>\n  <textarea v-model=\"multiMessage\" placeholder=\"add multiple lines\"></textarea>\n\n  <!-- 单个复选框 -->\n  <input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n  <label for=\"checkbox\">{% raw %}{{ checked }}{% endraw %}</label>\n\n  <!-- 多个复选框，绑定到同一个数组 -->\n  <div id='example-3'>\n    <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n    <label for=\"jack\">Jack</label>\n    <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n    <label for=\"john\">John</label>\n    <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n    <label for=\"mike\">Mike</label>\n    <br>\n    <span>Checked names: {% raw %}{{ checkedNames }}{% endraw %}</span>\n  </div>\n\n  <!-- 单选按钮  -->\n  <input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n  <label for=\"one\">One</label>\n  <br>\n  <input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n  <label for=\"two\">Two</label>\n  <br>\n  <span>Picked: {% raw %}{{ picked }}{% endraw %}</span>\n\n  <!-- 选择框 -->\n  <select v-model=\"selected\">\n    <option  value=\"\">请选择</option>\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <span>Selected: {% raw %}{{ selected }}{% endraw %}</span>\n{% endcodeblock %}\n","source":"_posts/Vue基础-事件处理和表单数据绑定.md","raw":"layout: \"post\"\ntitle: \"Vue基础-事件处理和表单数据绑定\"\ndate: \"2019-04-21 18:56\"\ncategories:\n- [UI,VUE]\ntags:\n- [TECHNOLOGY]\nthumbnail: http://swcheng.com/images/vuelogo.png\n---\n　　创建一个vue对象:\n<!-- more -->\n{% codeblock lang:js %}\n  var example1 = new Vue({\n    el: '#example-1',\n    data: {\n      counter: 0,\n      message: \"\",\n      multiMessage: \"\",\n      checked: false,\n      checkedNames: [],\n      picked: \"One\",\n      selected: \"A\"\n    },\n    methods: {\n      greet: function(event){\n        alert(event)\n        alert(\"Greet from vue\")\n      },\n      say: function(message){\n        alert(message)\n      },\n      warn: function(msg, event){\n        // 这里我们可以直接调用原生对象event\n        if(event) event.preventDefault()\n        alert(msg)\n      },\n      doThis: function(){\n        console.log(\"dothis\")\n      },\n      onSubmit: function(){\n        console.log(\"onSubmit\")\n      },\n      doThat: function(){\n        console.log(\"dothat\")\n      },\n      submit: function(){\n        console.log(\"submit\")\n      }\n    }\n  })\n{% endcodeblock %}\n\n### 监听事件\n　　使用v-on指令去进行基础事件的监听，在触发事件时进行相应处理:\n{% codeblock lang:html %}\n  <div id=\"example-1\">\n    <!-- 基本的事件处理 -->\n    <button v-on:click=\"counter += 1\">Add 1</button>\n    <p>The button above has been clicked {% raw %}{{ counter }}{% endraw %} times.</p>\n  </div>  \n{% endcodeblock %}\n　　这里我们监听的是click的事件，每次点击都会使下面的文字显示增加一次点击的次数，但是一般点击事件不应该直接在html里进行处理，我们应该尽可能的将其写在js代码中。比如:\n{% codeblock lang:html %}\n　<button v-on:click=\"greet\">Greet</button>\n{% endcodeblock %}\n　　点击这个按钮则会调用greet方法，这里我们直接绑定的是在vue对象中定义的方法名而不带任何参数，当然也可以选择在这里选择直接调用一个带参数的方法。并且这里兼顾了属性定义监听和使用DOM定义绑定方法对象两种方式。比如:\n{% codeblock lang:html %}\n  <button v-on:click=\"say(message)\">Say</button>\n{% endcodeblock %}\n　　如果我们需要获取原生的DOM对象，可以使用特殊变量$event将其传递到方法中:\n{% codeblock lang:html %}\n  <button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n    Submit\n  </button>\n{% endcodeblock %}\n　　对于很多事件，我们很多时候不仅仅是需要一个回调方法，我们很多时候还有其它的操作，对于一些常见的设置，为了方便vue提供了事件修饰符，比如:\n- .stop\n- .prevent\n- .capture\n- .self\n- .once\n- .passive\n\n　　下面是对这些修饰符的解释。\n{% codeblock lang:html %}\n  <!-- 点击事件将只会触发一次 2.1.4 新增 -->\n  <a v-on:click.once=\"doThis\"></a>\n\n  <!-- 阻止单击事件继续传播,相当于调用stopPropogation -->\n  <a v-on:click.stop=\"doThis\"></a>\n\n  <!-- 提交事件不再重载页面，相当于阻止了浏览器默认行为，调用了preventDefault() -->\n  <form v-on:submit.prevent=\"onSubmit\"></form>\n\n  <!-- 修饰符可以串联 -->\n  <a v-on:click.stop.prevent=\"doThat\"></a>\n\n  <!-- 甚至可以只有修饰符 -->\n  <form v-on:submit.prevent></form>\n\n  <!-- 添加事件监听器时使用事件捕获模式，这里捕获的是在capture阶段，而非默认的bubble阶段 -->\n  <div v-on:click.capture=\"doThis\">...</div>\n\n  <!-- 只当在 event.target 是当前元素自身时触发处理函数,相当于在event的回调方法中加了判断 -->\n  <!-- 比如判断this === event.target 决定是否执行代码 -->\n  <div v-on:click.self=\"doThat\">...</div>\n\n  <!-- 浏览器滚动事件的默认行为 (即滚动行为) 将会立即触发，为了提升浏览性能，尤其是移动端-->\n  <!-- 而不会等待 `onScroll` 完成  -->\n  <!-- 这其中包含 `event.preventDefault()` 的情况,与一般的实现有所区别  2.3.0 新增 -->\n  <!-- 不可以将.prevet与.passive一起用，因为它们本身就是冲突，如果你这样做了，.prevent会被忽略\n    且同时获得一个警告 -->\n  <div v-on:scroll.passive=\"onScroll\">...</div>\n{% endcodeblock %}\n　　很多时候我们需要监听特定按钮的键盘事件，那么此时我们可以去使用一些按键修饰符。比如:\n{% codeblock lang:html %}\n  <!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` -->\n  <input v-on:keyup.enter=\"submit\">\n{% endcodeblock %}\n　　可以直接将 [KeyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)暴露的任意有效按键名转换为 kebab-case 来作为修饰符。也可以使用按键码去作为修饰符，这keycode已经被废弃了，所以这里也不涉及到该部分的内容。同时会有一些系统修饰键比如ctrl、alt之类的，如果需要触发该类事件可以使用连续的修饰符。这些系统修饰键有:\n- .ctrl\n- .alt\n- .shift\n- .meta\n\n　　比如:\n{% codeblock lang:html %}\n  <!-- Alt + C -->\n  <input @keyup.alt.67=\"clear\">\n\n  <!-- Ctrl + Click -->\n  <div @click.ctrl=\"doSomething\">Do something</div>\n{% endcodeblock %}\n　　\n### 表单数据绑定\n　　在一个表单中只能包含一些表单元素，常见的表单元素有input、textarea、select等。所谓的表单数据绑定在vue中指的是将vue数据对象与表单元素的输入进行绑定，也就是说无论是vue数据对象的变化或者是表单元素的输入，都会同步修改对方的值。在vue中使用v-model指令去实现这一功能，而v-model指令本质也是通过监听用户的输入事件去更新输入。v-model针对不同的元素的不同属性抛出的不同事件进行数据修改，text 和 textarea 元素使用 value 属性和 input 事件；checkbox 和 radio 使用 checked 属性和 change 事件；select 字段将 value 作为 prop 并将 change 作为事件。\n　　下面是一些基本组件的使用的例子:\n{% codeblock lang:html %}\n  <!-- 普通input输入框 -->\n  <input v-model=\"message\" placeholder=\"edit me\">\n  <p>Message is: {% raw %}{{ message }}{% endraw %}</p>\n\n  <!-- 多行输入 -->\n  <span>Multiline message is:</span>\n  <p style=\"white-space: pre-line;\">{% raw %}{{ multiMessage }}{% endraw %}</p>\n  <textarea v-model=\"multiMessage\" placeholder=\"add multiple lines\"></textarea>\n\n  <!-- 单个复选框 -->\n  <input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n  <label for=\"checkbox\">{% raw %}{{ checked }}{% endraw %}</label>\n\n  <!-- 多个复选框，绑定到同一个数组 -->\n  <div id='example-3'>\n    <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n    <label for=\"jack\">Jack</label>\n    <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n    <label for=\"john\">John</label>\n    <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n    <label for=\"mike\">Mike</label>\n    <br>\n    <span>Checked names: {% raw %}{{ checkedNames }}{% endraw %}</span>\n  </div>\n\n  <!-- 单选按钮  -->\n  <input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n  <label for=\"one\">One</label>\n  <br>\n  <input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n  <label for=\"two\">Two</label>\n  <br>\n  <span>Picked: {% raw %}{{ picked }}{% endraw %}</span>\n\n  <!-- 选择框 -->\n  <select v-model=\"selected\">\n    <option  value=\"\">请选择</option>\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <span>Selected: {% raw %}{{ selected }}{% endraw %}</span>\n{% endcodeblock %}\n","slug":"Vue基础-事件处理和表单数据绑定","published":1,"updated":"2019-10-28T01:59:17.216Z","_id":"cjzr1cxak000gfo8184gytrzg","comments":1,"photos":[],"link":"","content":"<p>　　创建一个vue对象:<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example-1'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    counter: <span class=\"number\">0</span>,</span><br><span class=\"line\">    message: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    multiMessage: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    checked: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    checkedNames: [],</span><br><span class=\"line\">    picked: <span class=\"string\">\"One\"</span>,</span><br><span class=\"line\">    selected: <span class=\"string\">\"A\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">      alert(event)</span><br><span class=\"line\">      alert(<span class=\"string\">\"Greet from vue\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">      alert(message)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    warn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg, event</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里我们可以直接调用原生对象event</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(event) event.preventDefault()</span><br><span class=\"line\">      alert(msg)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doThis: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"dothis\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onSubmit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"onSubmit\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doThat: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"dothat\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    submit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"submit\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"监听事件\"><a href=\"#监听事件\" class=\"headerlink\" title=\"监听事件\"></a>监听事件</h3><p>　　使用v-on指令去进行基础事件的监听，在触发事件时进行相应处理:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 基本的事件处理 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"counter += 1\"</span>&gt;</span>Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br></pre></td></tr></table></figure><br>　　这里我们监听的是click的事件，每次点击都会使下面的文字显示增加一次点击的次数，但是一般点击事件不应该直接在html里进行处理，我们应该尽可能的将其写在js代码中。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"greet\"</span>&gt;</span>Greet<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　点击这个按钮则会调用greet方法，这里我们直接绑定的是在vue对象中定义的方法名而不带任何参数，当然也可以选择在这里选择直接调用一个带参数的方法。并且这里兼顾了属性定义监听和使用DOM定义绑定方法对象两种方式。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"say(message)\"</span>&gt;</span>Say<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　如果我们需要获取原生的DOM对象，可以使用特殊变量$event将其传递到方法中:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span></span><br><span class=\"line\">  Submit</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　对于很多事件，我们很多时候不仅仅是需要一个回调方法，我们很多时候还有其它的操作，对于一些常见的设置，为了方便vue提供了事件修饰符，比如:</p>\n<ul>\n<li>.stop</li>\n<li>.prevent</li>\n<li>.capture</li>\n<li>.self</li>\n<li>.once</li>\n<li>.passive</li>\n</ul>\n<p>　　下面是对这些修饰符的解释。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 点击事件将只会触发一次 2.1.4 新增 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件继续传播,相当于调用stopPropogation --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面，相当于阻止了浏览器默认行为，调用了preventDefault() --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 甚至可以只有修饰符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加事件监听器时使用事件捕获模式，这里捕获的是在capture阶段，而非默认的bubble阶段 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数,相当于在event的回调方法中加了判断 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 比如判断this === event.target 决定是否执行代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 浏览器滚动事件的默认行为 (即滚动行为) 将会立即触发，为了提升浏览性能，尤其是移动端--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这其中包含 `event.preventDefault()` 的情况,与一般的实现有所区别  2.3.0 新增 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 不可以将.prevet与.passive一起用，因为它们本身就是冲突，如果你这样做了，.prevent会被忽略</span></span><br><span class=\"line\"><span class=\"comment\">  且同时获得一个警告 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:scroll.passive</span>=<span class=\"string\">\"onScroll\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　很多时候我们需要监听特定按钮的键盘事件，那么此时我们可以去使用一些按键修饰符。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　可以直接将 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\" target=\"_blank\" rel=\"noopener\">KeyboardEvent.key</a>暴露的任意有效按键名转换为 kebab-case 来作为修饰符。也可以使用按键码去作为修饰符，这keycode已经被废弃了，所以这里也不涉及到该部分的内容。同时会有一些系统修饰键比如ctrl、alt之类的，如果需要触发该类事件可以使用连续的修饰符。这些系统修饰键有:</p>\n<ul>\n<li>.ctrl</li>\n<li>.alt</li>\n<li>.shift</li>\n<li>.meta</li>\n</ul>\n<p>　　比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Alt + C --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.alt.67</span>=<span class=\"string\">\"clear\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.ctrl</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>Do something<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n　　</p>\n<h3 id=\"表单数据绑定\"><a href=\"#表单数据绑定\" class=\"headerlink\" title=\"表单数据绑定\"></a>表单数据绑定</h3><p>　　在一个表单中只能包含一些表单元素，常见的表单元素有input、textarea、select等。所谓的表单数据绑定在vue中指的是将vue数据对象与表单元素的输入进行绑定，也就是说无论是vue数据对象的变化或者是表单元素的输入，都会同步修改对方的值。在vue中使用v-model指令去实现这一功能，而v-model指令本质也是通过监听用户的输入事件去更新输入。v-model针对不同的元素的不同属性抛出的不同事件进行数据修改，text 和 textarea 元素使用 value 属性和 input 事件；checkbox 和 radio 使用 checked 属性和 change 事件；select 字段将 value 作为 prop 并将 change 作为事件。<br>　　下面是一些基本组件的使用的例子:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 普通input输入框 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"edit me\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 多行输入 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Multiline message is:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"white-space: pre-line;\"</span>&gt;</span>&#123;&#123; multiMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"multiMessage\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"add multiple lines\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 单个复选框 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 多个复选框，绑定到同一个数组 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'example-3'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 单选按钮  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"one\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"One\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"one\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"two\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Two\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"two\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 选择框 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>　　创建一个vue对象:<br>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example-1'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    counter: <span class=\"number\">0</span>,</span><br><span class=\"line\">    message: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    multiMessage: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    checked: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    checkedNames: [],</span><br><span class=\"line\">    picked: <span class=\"string\">\"One\"</span>,</span><br><span class=\"line\">    selected: <span class=\"string\">\"A\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">      alert(event)</span><br><span class=\"line\">      alert(<span class=\"string\">\"Greet from vue\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">      alert(message)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    warn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg, event</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里我们可以直接调用原生对象event</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(event) event.preventDefault()</span><br><span class=\"line\">      alert(msg)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doThis: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"dothis\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onSubmit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"onSubmit\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doThat: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"dothat\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    submit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"submit\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"监听事件\"><a href=\"#监听事件\" class=\"headerlink\" title=\"监听事件\"></a>监听事件</h3><p>　　使用v-on指令去进行基础事件的监听，在触发事件时进行相应处理:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 基本的事件处理 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"counter += 1\"</span>&gt;</span>Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br></pre></td></tr></table></figure><br>　　这里我们监听的是click的事件，每次点击都会使下面的文字显示增加一次点击的次数，但是一般点击事件不应该直接在html里进行处理，我们应该尽可能的将其写在js代码中。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"greet\"</span>&gt;</span>Greet<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　点击这个按钮则会调用greet方法，这里我们直接绑定的是在vue对象中定义的方法名而不带任何参数，当然也可以选择在这里选择直接调用一个带参数的方法。并且这里兼顾了属性定义监听和使用DOM定义绑定方法对象两种方式。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"say(message)\"</span>&gt;</span>Say<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　如果我们需要获取原生的DOM对象，可以使用特殊变量$event将其传递到方法中:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span></span><br><span class=\"line\">  Submit</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　对于很多事件，我们很多时候不仅仅是需要一个回调方法，我们很多时候还有其它的操作，对于一些常见的设置，为了方便vue提供了事件修饰符，比如:</p>\n<ul>\n<li>.stop</li>\n<li>.prevent</li>\n<li>.capture</li>\n<li>.self</li>\n<li>.once</li>\n<li>.passive</li>\n</ul>\n<p>　　下面是对这些修饰符的解释。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 点击事件将只会触发一次 2.1.4 新增 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件继续传播,相当于调用stopPropogation --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面，相当于阻止了浏览器默认行为，调用了preventDefault() --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 甚至可以只有修饰符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加事件监听器时使用事件捕获模式，这里捕获的是在capture阶段，而非默认的bubble阶段 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数,相当于在event的回调方法中加了判断 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 比如判断this === event.target 决定是否执行代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 浏览器滚动事件的默认行为 (即滚动行为) 将会立即触发，为了提升浏览性能，尤其是移动端--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这其中包含 `event.preventDefault()` 的情况,与一般的实现有所区别  2.3.0 新增 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 不可以将.prevet与.passive一起用，因为它们本身就是冲突，如果你这样做了，.prevent会被忽略</span></span><br><span class=\"line\"><span class=\"comment\">  且同时获得一个警告 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:scroll.passive</span>=<span class=\"string\">\"onScroll\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　很多时候我们需要监听特定按钮的键盘事件，那么此时我们可以去使用一些按键修饰符。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　可以直接将 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\" target=\"_blank\" rel=\"noopener\">KeyboardEvent.key</a>暴露的任意有效按键名转换为 kebab-case 来作为修饰符。也可以使用按键码去作为修饰符，这keycode已经被废弃了，所以这里也不涉及到该部分的内容。同时会有一些系统修饰键比如ctrl、alt之类的，如果需要触发该类事件可以使用连续的修饰符。这些系统修饰键有:</p>\n<ul>\n<li>.ctrl</li>\n<li>.alt</li>\n<li>.shift</li>\n<li>.meta</li>\n</ul>\n<p>　　比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Alt + C --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.alt.67</span>=<span class=\"string\">\"clear\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.ctrl</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>Do something<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n　　</p>\n<h3 id=\"表单数据绑定\"><a href=\"#表单数据绑定\" class=\"headerlink\" title=\"表单数据绑定\"></a>表单数据绑定</h3><p>　　在一个表单中只能包含一些表单元素，常见的表单元素有input、textarea、select等。所谓的表单数据绑定在vue中指的是将vue数据对象与表单元素的输入进行绑定，也就是说无论是vue数据对象的变化或者是表单元素的输入，都会同步修改对方的值。在vue中使用v-model指令去实现这一功能，而v-model指令本质也是通过监听用户的输入事件去更新输入。v-model针对不同的元素的不同属性抛出的不同事件进行数据修改，text 和 textarea 元素使用 value 属性和 input 事件；checkbox 和 radio 使用 checked 属性和 change 事件；select 字段将 value 作为 prop 并将 change 作为事件。<br>　　下面是一些基本组件的使用的例子:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 普通input输入框 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"edit me\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 多行输入 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Multiline message is:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"white-space: pre-line;\"</span>&gt;</span>&#123;&#123; multiMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"multiMessage\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"add multiple lines\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 单个复选框 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 多个复选框，绑定到同一个数组 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'example-3'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 单选按钮  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"one\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"One\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"one\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"two\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Two\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"two\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 选择框 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>"},{"layout":"post","title":"Vue基础-条件列表渲染","date":"2019-04-21T06:22:00.000Z","thumbnail":"http://swcheng.com/images/vuelogo.png","_content":"　　创建一个下面的vue对象:\n<!-- more -->\n{% codeblock lang:js %}\n  Vue.component('my-component',{\n    template: '<li>This is a todo</li>',\n    props: ['item', 'index']\n  });\n\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n        awesome: true,\n        notawesome: true,\n        ok: true,\n        loginType: \"username\",\n        showornot: false,\n        items: [\n          { message: 'Foo' },\n          { message: 'Bar' }\n        ],\n        parentMessgae: \"parent\",\n        forObject: {\n          firstName: \"John\",\n          lastName: \"Sonw\",\n          age: 40\n        }\n    },\n    methods: {\n      toggleLoginType: function(){\n        if(this.loginType == \"username\")\n          this.loginType = \"email\"\n        else\n          this.loginType = \"username\"\n      }\n    }\n  });\n{% endcodeblock %}\n\n### 条件渲染\n　　使用v-if指令进行条件渲染，当属性值为true的时候显示内容否则不显示。\n{% codeblock lang:html %}\n  <p v-if=\"awesome\">I was rendered by if command</p>\n{% endcodeblock %}\n　　当然也可以使用else，甚至else-if,但是需要注意的是，这些语句必须书写在一起。\n{% codeblock lang:html %}\n  <p v-if=\"loginType == 'username'\">Username login</p>\n  <!-- v-else必须紧跟v-if 或 v-else-if后面，否则不会生效 -->\n  <p v-else-if=\"loginType == 'email'\">Email login</p>\n  <p v-else>No, I am the king</p>\n{% endcodeblock %}\n　　如果想要一次渲染多个元素，可以使用template标签:\n{% codeblock lang:html %}\n  <template v-if=\"ok\">\n    <h1>Title</h1>\n    <p>Paragraph 1</p>\n    <p>Paragraph 2</p>\n  </template>\n  <template v-else>\n    <h1>Another</h1>\n    <p>Paragraph 21</p>\n    <p>Paragraph 22</p>\n  </template>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n{% endcodeblock %}\n　　Vue为了尽可能高效的渲染元素，通常会复用现有元素而不是从头开始渲染，如果你需要vue重头开始渲染元素，那么你需要为它们指定key属性。\n{% codeblock lang:html %}\n  <template v-if=\"loginType === 'username'\">\n    <label>Username</label>\n    <input placeholder=\"Enter your username\" key=\"username-input\">\n  </template>\n  <template v-else>\n    <label>Email</label>\n    <input placeholder=\"Enter your email address\" key=\"email-input\">\n  </template>\n{% endcodeblock %}\n\n### 使用v-show\n　　如果我们需要经常切换某个元素是否可见，为了效率起见我们应该使用v-show指令而非v-for。因为v-for是惰性的，只有当条件成立的时候才会渲染元素，而v-show则是无论条件是否成立都会一开始就渲染元素。并且v-show每次切换仅仅修改css的display属性，而v-if则会使条件块内的事件监听器和子组件适当地被销毁和重建，这样明显每次切换开销都要大于v-show。v-show的简单使用用例如下。\n{% codeblock lang:html %}\n  <!-- 对于一些经常需要改变的元素可以使用v-show，即只改变display的值 -->\n  <h1 v-show=\"showornot\">我是vshow代表</h1>\n{% endcodeblock %}\n\n### 列表渲染\n　　使用v-for指令达到渲染一个列表的目的，并且需要使用item in items形式的语法，你也可以使用of去代替in。比如下面这个例子:\n{% codeblock lang:html %}\n  <ul id=\"example-1\">\n    <li v-for=\"item in items\">\n      {% raw %}{{ item.message }}{% endraw %}\n    </li>\n  </ul>\n  <!-- 或者使用of代替in -->\n  <ul id=\"example-1\">\n    <li v-for=\"item of items\">\n      {% raw %}{{ item.message }}{% endraw %}\n    </li>\n  </ul>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n  <ul>\n    <li>Foo</li>\n    <li>Bar</li>\n  </ul>\n{% endcodeblock %}\n　　支持第二个参数作为当前项的索引。甚至你可以在v-for块中访问父级的属性。\n{% codeblock lang:html %}\n  <ul>\n    <li v-for=\"(item, index) in items\">-{% raw %}{{index}}{% endraw %} -{% raw %}{{item.message}}{% endraw %} {% raw %}{{ parentMessgae }}{% endraw %} </li>\n  </ul>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n  <ul>\n    <li>-0 -Foo parent</li>\n    <li>-1 -Bar parent</li>\n  </ul>\n{% endcodeblock %}\n　　除了数组之外，你也可以使用一个对象作为v-for指令的输入。比如:\n{% codeblock lang:html %}\n  <!-- 除了数组之外，你也可以使用对象去作为一个遍历 -->\n  <p v-for=\"prop in forObject\">\n    {% raw %}{{ prop }}{% endraw %}\n  </p>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n    <p>\n            John\n          </p>\n    <p>\n            Sonw\n          </p>\n    <p>\n            40\n          </p>\n{% endcodeblock %}\n　　与数组一样可以接受多个参数。需要注意的是，第一个位置一定是value，第二个位置一定是key，第三个是index。这与js的语言特性有关，因为其有一个arguments变量，而方法中的参数名只是针对其位置对其进行赋值而已。需要注意的是遍历的顺序是按照Object.keys()的结果，但是可能在不同的js引擎是不一致的。并且与v-if类似，vue会智能的复用组件，所以如果有需要可以在v-for遍历的组件上加上key属性去标识每一个组件提示vue不需要进行复用。\n{% codeblock lang:html %}\n  <p v-for=\"(value, key, index) in forObject\" :key=\"index\">\n    {% raw %}{{key}}{% endraw %} : {% raw %}{{value}}{% endraw %} : {% raw %}{{index}}{% endraw %}\n  </p>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n      <p>\n              firstName : John : 0\n            </p>\n      <p>\n              lastName : Sonw : 1\n            </p>\n      <p>\n              age : 40 : 2\n            </p>\n{% endcodeblock %}\n　　类似于v-if，你也可以使用template标签去包含一块需要遍历的内容。\n{% codeblock lang:html %}\n  <ul>\n    <template v-for=\"item in items\">\n      <li>{% raw %}{{ item.msg }}{% endraw %}</li>\n      <li class=\"divider\" role=\"presentation\"></li>\n    </template>\n  </ul>\n{% endcodeblock %}\n　　同样，如果我们不想要使用原始数组，我们也可以使用一个计算属性或者调用一个方法做到灵活运用选择。计算属性的使用与普通属性相似，下面是方法的使用:(注意，vue对数组的更新检测会由于js的限制受到对应的限制，具体查阅官方文档列表渲染部分的说明)\n{% codeblock lang:js %}\n  data: {\n    numbers: [ 1, 2, 3, 4, 5 ]\n  },\n  methods: {\n    even: function (numbers) {\n      return numbers.filter(function (number) {\n        return number % 2 === 0\n      })\n    }\n  }\n{% endcodeblock %}\n{% codeblock lang:html %}\n  <li v-for=\"n in even(numbers)\">{% raw %}{{ n }}{% endraw %}</li>\n{% endcodeblock %}\n　　甚至可以直接取整数:\n{% codeblock lang:html %}\n  <div>\n    <span v-for=\"n in 10\">{% raw %}{{ n }}{% endraw %} </span>\n  </div>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n 1 2 3 4 5 6 7 8 9 10\n{% endcodeblock %}\n\n### 数组更新检测\n　　那么我们的列表经过渲染之后，在很多场景下可能会需要对其进行修改，这就是vue里所谓的数组更新检测。在vue中，包含一些变异方法和一些非变异方法，所谓的变异方法就是修改了原数组的内容，而非变异则是不会对原数组里的内容进行修改。但是对于vue来说，仅当变异方法的调用将会触发视图的更新。比如:\n{% codeblock lang:js %}\n<!-- vue包含了一些数组变异方法，通过调用这些方法我们可以更新引用该数组的视图 -->\n      push()\n      pop()\n      shift()  // 把数组第一个元素删除掉\n      unshift() // 在数组第一个位置新增一个元素\n      splice()  // splice(index1, index2, ...) index1表示插入的位置，index2表示删除元素的数目，\n      ... 表示新增的元素\n      sort()\n      reverse() ，\n      当然也有一些非变异方法，比如:\n      concat()、filter()、slice()，当然也可以手动去调用这些方法去为数组重新赋值\n      concat() 拼凑多个数组、filter用于过滤一些不需要的值、slice相当于substring,返回起始和结束之间的索引 -->\n{% endcodeblock %}\n　　如果你需要使用非变异方法达到修改视图的目的，那么你需要将原来的数组指向非变异方法的返回值。\n{% codeblock lang:js %}\n  example1.items = example1.items.filter(function (item) {\n    return item.message.match(/Foo/)\n  })\n{% endcodeblock %}\n　　由于js的限制，不可以检测通过索引修改数组的一个项以及直接修改数组的长度的变化，为了解决第一种问题，在vue中提供了:\n{% codeblock lang:js %}\n  Vue.set(app.items, indexOfItem, newValue)\n  // 你也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名：\n  vm.$set(vm.items, indexOfItem, newValue)\n  // 或者使用:\n  // Array.prototype.splice,即变异方法\n  app.items.splice(indexOfItem, 1, newValue)\n{% endcodeblock %}\n　　对于第二种问题:\n{% codeblock lang:js %}\n  vm.items.splice(newLength)\n{% endcodeblock %}\n　　还是由于JavaScript的限制，Vue不能检测对象属性的添加或删除，所以对于已经创建的实例，Vue不能动态添加根级别的响应式属性。比如:\n{% codeblock lang:js %}\n  var vm = new Vue({\n    data: {\n      userProfile: {\n        name: 'Anika'\n      }\n    }\n  });\n{% endcodeblock %}\n　　如果你想要动态的添加属性到userProfile对象中:\n{% codeblock lang:js %}\n  Vue.set(vm.userProfile, 'age', 27)\n  // 或者别名方法:\n  vm.$set(vm.userProfile, 'age', 27)\n  // 如果你想要一次性添加多个属性，不可以像下面这样做\n  Object.assign(vm.userProfile, {\n    age: 27,\n    favoriteColor: 'Vue Green'\n  })\n  // 应该这样\n  vm.userProfile = Object.assign({}, vm.userProfile, {\n    age: 27,\n    favoriteColor: 'Vue Green'\n  })\n{% endcodeblock %}\n\n### v-for with v-if\n　　在vue的官方文档中强烈建议不要将v-if和v-for使用在同一个元素上，这样做的目的一般都只有两个:\n- 过滤一个列表中的项目\n- 为了避免渲染本应该被隐藏的列表\n\n　　对于第一种目的，我们可以通过一个计算属性去达到这样的目的，或者也可以调用一个返回数组的方法。比如使用计算属性:\n{% codeblock lang:html %}\n  <p v-for=\"user in users\" v-if=\"user.isActive\"></p>\n  <!-- 你可以将users改成一个计算属性activeUsers -->\n  <p v-for=\"user in activeUsers\"></p>\n\n  computed: {\n    activeUsers: function () {\n      return this.users.filter(function (user) {\n        return user.isActive\n      })\n    }\n  }\n{% endcodeblock %}\n　　第二种，我们可以将v-if移至v-for标签的上层。比如:\n{% codeblock lang:html %}\n  <ul>\n    <li\n      v-for=\"user in users\"\n      v-if=\"shouldShowUsers\"\n      :key=\"user.id\">\n      {% raw %}{{ user.name }}{% endraw %}\n    </li>\n  </ul>\n  <!-- 相反我们应该这样写 -->\n  <ul v-if=\"shouldShowUsers\">\n    <li\n      v-for=\"user in users\"\n      :key=\"user.id\">\n      {% raw %}{{ user.name }}{% endraw %}\n    </li>\n  </ul>\n{% endcodeblock %}\n　　而且，当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。所以如果我们将其放在同一个元素上面，如果我们对数据进行了修改，那么在重渲染的时候又会去遍历整个数据列表。而我们如果选择使用一个计算属性，我们在渲染的时候只遍历活跃用户，渲染更高效，而且这样解藕渲染层的逻辑，可维护性 (对逻辑的更改和扩展) 更强。\n\n### 组件的 v-for\n　　在自定义组件里，你可以像任何普通元素一样用 v-for。并且在2.2.0+ 的版本里，当在组件中使用 v-for 时，key 是必须的。\n{% codeblock lang:html %}\n  <my-component v-for=\"item in items\" :key=\"item.id\"></my-component>\n{% endcodeblock %}\n　　但是区别与一般的元素的是，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要用props。这样做的官方解释是明确数据来源，达到组件复用的目的。二是为了防止组件与v-for过度紧密耦合。比如:\n{% codeblock lang:html %}\n  <my-component\n    v-for=\"(item, index) in items\"\n    v-bind:item=\"item\"\n    v-bind:index=\"index\"\n    v-bind:key=\"item.id\">\n  </my-component>\n{% endcodeblock %}\n　　除了key作为标识需要的属性之外，其它如item和index都是最后赋值到了props这个数组的中所定义的变量名称，然后这些变量名称将会使用在template定义的组件里。\n\n### 小结\n　　条件渲染和列表渲染有点类似于流程控制之类的东西，不过也只是简单的类比。条件和列表是一个很常用的功能，尤其是对于一些列表式的组件，但是还应该知道v-for和v-if配合使用的问题，从性能角度考虑，我们应尽量避免将v-for和v-if使用在同一个标签的上层。\n","source":"_posts/Vue基础-条件列表渲染.md","raw":"layout: \"post\"\ntitle: \"Vue基础-条件列表渲染\"\ndate: \"2019-04-21 14:22\"\ncategories:\n- [UI,VUE]\ntags:\n- [TECHNOLOGY]\nthumbnail: http://swcheng.com/images/vuelogo.png\n---\n　　创建一个下面的vue对象:\n<!-- more -->\n{% codeblock lang:js %}\n  Vue.component('my-component',{\n    template: '<li>This is a todo</li>',\n    props: ['item', 'index']\n  });\n\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n        awesome: true,\n        notawesome: true,\n        ok: true,\n        loginType: \"username\",\n        showornot: false,\n        items: [\n          { message: 'Foo' },\n          { message: 'Bar' }\n        ],\n        parentMessgae: \"parent\",\n        forObject: {\n          firstName: \"John\",\n          lastName: \"Sonw\",\n          age: 40\n        }\n    },\n    methods: {\n      toggleLoginType: function(){\n        if(this.loginType == \"username\")\n          this.loginType = \"email\"\n        else\n          this.loginType = \"username\"\n      }\n    }\n  });\n{% endcodeblock %}\n\n### 条件渲染\n　　使用v-if指令进行条件渲染，当属性值为true的时候显示内容否则不显示。\n{% codeblock lang:html %}\n  <p v-if=\"awesome\">I was rendered by if command</p>\n{% endcodeblock %}\n　　当然也可以使用else，甚至else-if,但是需要注意的是，这些语句必须书写在一起。\n{% codeblock lang:html %}\n  <p v-if=\"loginType == 'username'\">Username login</p>\n  <!-- v-else必须紧跟v-if 或 v-else-if后面，否则不会生效 -->\n  <p v-else-if=\"loginType == 'email'\">Email login</p>\n  <p v-else>No, I am the king</p>\n{% endcodeblock %}\n　　如果想要一次渲染多个元素，可以使用template标签:\n{% codeblock lang:html %}\n  <template v-if=\"ok\">\n    <h1>Title</h1>\n    <p>Paragraph 1</p>\n    <p>Paragraph 2</p>\n  </template>\n  <template v-else>\n    <h1>Another</h1>\n    <p>Paragraph 21</p>\n    <p>Paragraph 22</p>\n  </template>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n{% endcodeblock %}\n　　Vue为了尽可能高效的渲染元素，通常会复用现有元素而不是从头开始渲染，如果你需要vue重头开始渲染元素，那么你需要为它们指定key属性。\n{% codeblock lang:html %}\n  <template v-if=\"loginType === 'username'\">\n    <label>Username</label>\n    <input placeholder=\"Enter your username\" key=\"username-input\">\n  </template>\n  <template v-else>\n    <label>Email</label>\n    <input placeholder=\"Enter your email address\" key=\"email-input\">\n  </template>\n{% endcodeblock %}\n\n### 使用v-show\n　　如果我们需要经常切换某个元素是否可见，为了效率起见我们应该使用v-show指令而非v-for。因为v-for是惰性的，只有当条件成立的时候才会渲染元素，而v-show则是无论条件是否成立都会一开始就渲染元素。并且v-show每次切换仅仅修改css的display属性，而v-if则会使条件块内的事件监听器和子组件适当地被销毁和重建，这样明显每次切换开销都要大于v-show。v-show的简单使用用例如下。\n{% codeblock lang:html %}\n  <!-- 对于一些经常需要改变的元素可以使用v-show，即只改变display的值 -->\n  <h1 v-show=\"showornot\">我是vshow代表</h1>\n{% endcodeblock %}\n\n### 列表渲染\n　　使用v-for指令达到渲染一个列表的目的，并且需要使用item in items形式的语法，你也可以使用of去代替in。比如下面这个例子:\n{% codeblock lang:html %}\n  <ul id=\"example-1\">\n    <li v-for=\"item in items\">\n      {% raw %}{{ item.message }}{% endraw %}\n    </li>\n  </ul>\n  <!-- 或者使用of代替in -->\n  <ul id=\"example-1\">\n    <li v-for=\"item of items\">\n      {% raw %}{{ item.message }}{% endraw %}\n    </li>\n  </ul>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n  <ul>\n    <li>Foo</li>\n    <li>Bar</li>\n  </ul>\n{% endcodeblock %}\n　　支持第二个参数作为当前项的索引。甚至你可以在v-for块中访问父级的属性。\n{% codeblock lang:html %}\n  <ul>\n    <li v-for=\"(item, index) in items\">-{% raw %}{{index}}{% endraw %} -{% raw %}{{item.message}}{% endraw %} {% raw %}{{ parentMessgae }}{% endraw %} </li>\n  </ul>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n  <ul>\n    <li>-0 -Foo parent</li>\n    <li>-1 -Bar parent</li>\n  </ul>\n{% endcodeblock %}\n　　除了数组之外，你也可以使用一个对象作为v-for指令的输入。比如:\n{% codeblock lang:html %}\n  <!-- 除了数组之外，你也可以使用对象去作为一个遍历 -->\n  <p v-for=\"prop in forObject\">\n    {% raw %}{{ prop }}{% endraw %}\n  </p>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n    <p>\n            John\n          </p>\n    <p>\n            Sonw\n          </p>\n    <p>\n            40\n          </p>\n{% endcodeblock %}\n　　与数组一样可以接受多个参数。需要注意的是，第一个位置一定是value，第二个位置一定是key，第三个是index。这与js的语言特性有关，因为其有一个arguments变量，而方法中的参数名只是针对其位置对其进行赋值而已。需要注意的是遍历的顺序是按照Object.keys()的结果，但是可能在不同的js引擎是不一致的。并且与v-if类似，vue会智能的复用组件，所以如果有需要可以在v-for遍历的组件上加上key属性去标识每一个组件提示vue不需要进行复用。\n{% codeblock lang:html %}\n  <p v-for=\"(value, key, index) in forObject\" :key=\"index\">\n    {% raw %}{{key}}{% endraw %} : {% raw %}{{value}}{% endraw %} : {% raw %}{{index}}{% endraw %}\n  </p>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n      <p>\n              firstName : John : 0\n            </p>\n      <p>\n              lastName : Sonw : 1\n            </p>\n      <p>\n              age : 40 : 2\n            </p>\n{% endcodeblock %}\n　　类似于v-if，你也可以使用template标签去包含一块需要遍历的内容。\n{% codeblock lang:html %}\n  <ul>\n    <template v-for=\"item in items\">\n      <li>{% raw %}{{ item.msg }}{% endraw %}</li>\n      <li class=\"divider\" role=\"presentation\"></li>\n    </template>\n  </ul>\n{% endcodeblock %}\n　　同样，如果我们不想要使用原始数组，我们也可以使用一个计算属性或者调用一个方法做到灵活运用选择。计算属性的使用与普通属性相似，下面是方法的使用:(注意，vue对数组的更新检测会由于js的限制受到对应的限制，具体查阅官方文档列表渲染部分的说明)\n{% codeblock lang:js %}\n  data: {\n    numbers: [ 1, 2, 3, 4, 5 ]\n  },\n  methods: {\n    even: function (numbers) {\n      return numbers.filter(function (number) {\n        return number % 2 === 0\n      })\n    }\n  }\n{% endcodeblock %}\n{% codeblock lang:html %}\n  <li v-for=\"n in even(numbers)\">{% raw %}{{ n }}{% endraw %}</li>\n{% endcodeblock %}\n　　甚至可以直接取整数:\n{% codeblock lang:html %}\n  <div>\n    <span v-for=\"n in 10\">{% raw %}{{ n }}{% endraw %} </span>\n  </div>\n{% endcodeblock %}\n　　渲染结果:\n{% codeblock lang:html %}\n 1 2 3 4 5 6 7 8 9 10\n{% endcodeblock %}\n\n### 数组更新检测\n　　那么我们的列表经过渲染之后，在很多场景下可能会需要对其进行修改，这就是vue里所谓的数组更新检测。在vue中，包含一些变异方法和一些非变异方法，所谓的变异方法就是修改了原数组的内容，而非变异则是不会对原数组里的内容进行修改。但是对于vue来说，仅当变异方法的调用将会触发视图的更新。比如:\n{% codeblock lang:js %}\n<!-- vue包含了一些数组变异方法，通过调用这些方法我们可以更新引用该数组的视图 -->\n      push()\n      pop()\n      shift()  // 把数组第一个元素删除掉\n      unshift() // 在数组第一个位置新增一个元素\n      splice()  // splice(index1, index2, ...) index1表示插入的位置，index2表示删除元素的数目，\n      ... 表示新增的元素\n      sort()\n      reverse() ，\n      当然也有一些非变异方法，比如:\n      concat()、filter()、slice()，当然也可以手动去调用这些方法去为数组重新赋值\n      concat() 拼凑多个数组、filter用于过滤一些不需要的值、slice相当于substring,返回起始和结束之间的索引 -->\n{% endcodeblock %}\n　　如果你需要使用非变异方法达到修改视图的目的，那么你需要将原来的数组指向非变异方法的返回值。\n{% codeblock lang:js %}\n  example1.items = example1.items.filter(function (item) {\n    return item.message.match(/Foo/)\n  })\n{% endcodeblock %}\n　　由于js的限制，不可以检测通过索引修改数组的一个项以及直接修改数组的长度的变化，为了解决第一种问题，在vue中提供了:\n{% codeblock lang:js %}\n  Vue.set(app.items, indexOfItem, newValue)\n  // 你也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名：\n  vm.$set(vm.items, indexOfItem, newValue)\n  // 或者使用:\n  // Array.prototype.splice,即变异方法\n  app.items.splice(indexOfItem, 1, newValue)\n{% endcodeblock %}\n　　对于第二种问题:\n{% codeblock lang:js %}\n  vm.items.splice(newLength)\n{% endcodeblock %}\n　　还是由于JavaScript的限制，Vue不能检测对象属性的添加或删除，所以对于已经创建的实例，Vue不能动态添加根级别的响应式属性。比如:\n{% codeblock lang:js %}\n  var vm = new Vue({\n    data: {\n      userProfile: {\n        name: 'Anika'\n      }\n    }\n  });\n{% endcodeblock %}\n　　如果你想要动态的添加属性到userProfile对象中:\n{% codeblock lang:js %}\n  Vue.set(vm.userProfile, 'age', 27)\n  // 或者别名方法:\n  vm.$set(vm.userProfile, 'age', 27)\n  // 如果你想要一次性添加多个属性，不可以像下面这样做\n  Object.assign(vm.userProfile, {\n    age: 27,\n    favoriteColor: 'Vue Green'\n  })\n  // 应该这样\n  vm.userProfile = Object.assign({}, vm.userProfile, {\n    age: 27,\n    favoriteColor: 'Vue Green'\n  })\n{% endcodeblock %}\n\n### v-for with v-if\n　　在vue的官方文档中强烈建议不要将v-if和v-for使用在同一个元素上，这样做的目的一般都只有两个:\n- 过滤一个列表中的项目\n- 为了避免渲染本应该被隐藏的列表\n\n　　对于第一种目的，我们可以通过一个计算属性去达到这样的目的，或者也可以调用一个返回数组的方法。比如使用计算属性:\n{% codeblock lang:html %}\n  <p v-for=\"user in users\" v-if=\"user.isActive\"></p>\n  <!-- 你可以将users改成一个计算属性activeUsers -->\n  <p v-for=\"user in activeUsers\"></p>\n\n  computed: {\n    activeUsers: function () {\n      return this.users.filter(function (user) {\n        return user.isActive\n      })\n    }\n  }\n{% endcodeblock %}\n　　第二种，我们可以将v-if移至v-for标签的上层。比如:\n{% codeblock lang:html %}\n  <ul>\n    <li\n      v-for=\"user in users\"\n      v-if=\"shouldShowUsers\"\n      :key=\"user.id\">\n      {% raw %}{{ user.name }}{% endraw %}\n    </li>\n  </ul>\n  <!-- 相反我们应该这样写 -->\n  <ul v-if=\"shouldShowUsers\">\n    <li\n      v-for=\"user in users\"\n      :key=\"user.id\">\n      {% raw %}{{ user.name }}{% endraw %}\n    </li>\n  </ul>\n{% endcodeblock %}\n　　而且，当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。所以如果我们将其放在同一个元素上面，如果我们对数据进行了修改，那么在重渲染的时候又会去遍历整个数据列表。而我们如果选择使用一个计算属性，我们在渲染的时候只遍历活跃用户，渲染更高效，而且这样解藕渲染层的逻辑，可维护性 (对逻辑的更改和扩展) 更强。\n\n### 组件的 v-for\n　　在自定义组件里，你可以像任何普通元素一样用 v-for。并且在2.2.0+ 的版本里，当在组件中使用 v-for 时，key 是必须的。\n{% codeblock lang:html %}\n  <my-component v-for=\"item in items\" :key=\"item.id\"></my-component>\n{% endcodeblock %}\n　　但是区别与一般的元素的是，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要用props。这样做的官方解释是明确数据来源，达到组件复用的目的。二是为了防止组件与v-for过度紧密耦合。比如:\n{% codeblock lang:html %}\n  <my-component\n    v-for=\"(item, index) in items\"\n    v-bind:item=\"item\"\n    v-bind:index=\"index\"\n    v-bind:key=\"item.id\">\n  </my-component>\n{% endcodeblock %}\n　　除了key作为标识需要的属性之外，其它如item和index都是最后赋值到了props这个数组的中所定义的变量名称，然后这些变量名称将会使用在template定义的组件里。\n\n### 小结\n　　条件渲染和列表渲染有点类似于流程控制之类的东西，不过也只是简单的类比。条件和列表是一个很常用的功能，尤其是对于一些列表式的组件，但是还应该知道v-for和v-if配合使用的问题，从性能角度考虑，我们应尽量避免将v-for和v-if使用在同一个标签的上层。\n","slug":"Vue基础-条件列表渲染","published":1,"updated":"2019-10-28T01:51:31.013Z","_id":"cjzr1cxan000kfo81hf9nzffj","comments":1,"photos":[],"link":"","content":"<p>　　创建一个下面的vue对象:<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>,&#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;li&gt;This is a todo&lt;/li&gt;'</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'item'</span>, <span class=\"string\">'index'</span>]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">      awesome: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      notawesome: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      ok: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      loginType: <span class=\"string\">\"username\"</span>,</span><br><span class=\"line\">      showornot: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      items: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      parentMessgae: <span class=\"string\">\"parent\"</span>,</span><br><span class=\"line\">      forObject: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">\"Sonw\"</span>,</span><br><span class=\"line\">        age: <span class=\"number\">40</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    toggleLoginType: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.loginType == <span class=\"string\">\"username\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loginType = <span class=\"string\">\"email\"</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loginType = <span class=\"string\">\"username\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h3><p>　　使用v-if指令进行条件渲染，当属性值为true的时候显示内容否则不显示。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"awesome\"</span>&gt;</span>I was rendered by if command<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　当然也可以使用else，甚至else-if,但是需要注意的是，这些语句必须书写在一起。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loginType == 'username'\"</span>&gt;</span>Username login<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- v-else必须紧跟v-if 或 v-else-if后面，否则不会生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"loginType == 'email'\"</span>&gt;</span>Email login<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>No, I am the king<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　如果想要一次渲染多个元素，可以使用template标签:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Another<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 21<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 22<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　Vue为了尽可能高效的渲染元素，通常会复用现有元素而不是从头开始渲染，如果你需要vue重头开始渲染元素，那么你需要为它们指定key属性。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"username-input\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your email address\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"email-input\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用v-show\"><a href=\"#使用v-show\" class=\"headerlink\" title=\"使用v-show\"></a>使用v-show</h3><p>　　如果我们需要经常切换某个元素是否可见，为了效率起见我们应该使用v-show指令而非v-for。因为v-for是惰性的，只有当条件成立的时候才会渲染元素，而v-show则是无论条件是否成立都会一开始就渲染元素。并且v-show每次切换仅仅修改css的display属性，而v-if则会使条件块内的事件监听器和子组件适当地被销毁和重建，这样明显每次切换开销都要大于v-show。v-show的简单使用用例如下。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 对于一些经常需要改变的元素可以使用v-show，即只改变display的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"showornot\"</span>&gt;</span>我是vshow代表<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h3><p>　　使用v-for指令达到渲染一个列表的目的，并且需要使用item in items形式的语法，你也可以使用of去代替in。比如下面这个例子:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或者使用of代替in --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item of items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Bar<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　支持第二个参数作为当前项的索引。甚至你可以在v-for块中访问父级的属性。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span>-&#123;&#123;index&#125;&#125; -&#123;&#123;item.message&#125;&#125; &#123;&#123; parentMessgae &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>-0 -Foo parent<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>-1 -Bar parent<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　除了数组之外，你也可以使用一个对象作为v-for指令的输入。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 除了数组之外，你也可以使用对象去作为一个遍历 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"prop in forObject\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; prop &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        John</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        Sonw</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        40</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　与数组一样可以接受多个参数。需要注意的是，第一个位置一定是value，第二个位置一定是key，第三个是index。这与js的语言特性有关，因为其有一个arguments变量，而方法中的参数名只是针对其位置对其进行赋值而已。需要注意的是遍历的顺序是按照Object.keys()的结果，但是可能在不同的js引擎是不一致的。并且与v-if类似，vue会智能的复用组件，所以如果有需要可以在v-for遍历的组件上加上key属性去标识每一个组件提示vue不需要进行复用。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, key, index) in forObject\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125; : &#123;&#123;index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        firstName : John : 0</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        lastName : Sonw : 1</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        age : 40 : 2</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　类似于v-if，你也可以使用template标签去包含一块需要遍历的内容。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"divider\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　同样，如果我们不想要使用原始数组，我们也可以使用一个计算属性或者调用一个方法做到灵活运用选择。计算属性的使用与普通属性相似，下面是方法的使用:(注意，vue对数组的更新检测会由于js的限制受到对应的限制，具体查阅官方文档列表渲染部分的说明)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  numbers: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  even: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">numbers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> number % <span class=\"number\">2</span> === <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in even(numbers)\"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　甚至可以直接取整数:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in 10\"</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4 5 6 7 8 9 10</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组更新检测\"><a href=\"#数组更新检测\" class=\"headerlink\" title=\"数组更新检测\"></a>数组更新检测</h3><p>　　那么我们的列表经过渲染之后，在很多场景下可能会需要对其进行修改，这就是vue里所谓的数组更新检测。在vue中，包含一些变异方法和一些非变异方法，所谓的变异方法就是修改了原数组的内容，而非变异则是不会对原数组里的内容进行修改。但是对于vue来说，仅当变异方法的调用将会触发视图的更新。比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- vue包含了一些数组变异方法，通过调用这些方法我们可以更新引用该数组的视图 --&gt;</span><br><span class=\"line\">      push()</span><br><span class=\"line\">      pop()</span><br><span class=\"line\">      shift()  <span class=\"comment\">// 把数组第一个元素删除掉</span></span><br><span class=\"line\">      unshift() <span class=\"comment\">// 在数组第一个位置新增一个元素</span></span><br><span class=\"line\">      splice()  <span class=\"comment\">// splice(index1, index2, ...) index1表示插入的位置，index2表示删除元素的数目，</span></span><br><span class=\"line\">      ... 表示新增的元素</span><br><span class=\"line\">      sort()</span><br><span class=\"line\">      reverse() ，</span><br><span class=\"line\">      当然也有一些非变异方法，比如:</span><br><span class=\"line\">      concat()、filter()、slice()，当然也可以手动去调用这些方法去为数组重新赋值</span><br><span class=\"line\">      concat() 拼凑多个数组、filter用于过滤一些不需要的值、slice相当于substring,返回起始和结束之间的索引 --&gt;</span><br></pre></td></tr></table></figure><br>　　如果你需要使用非变异方法达到修改视图的目的，那么你需要将原来的数组指向非变异方法的返回值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example1.items = example1.items.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.message.match(<span class=\"regexp\">/Foo/</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>　　由于js的限制，不可以检测通过索引修改数组的一个项以及直接修改数组的长度的变化，为了解决第一种问题，在vue中提供了:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(app.items, indexOfItem, newValue)</span><br><span class=\"line\"><span class=\"comment\">// 你也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名：</span></span><br><span class=\"line\">vm.$set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"><span class=\"comment\">// 或者使用:</span></span><br><span class=\"line\"><span class=\"comment\">// Array.prototype.splice,即变异方法</span></span><br><span class=\"line\">app.items.splice(indexOfItem, <span class=\"number\">1</span>, newValue)</span><br></pre></td></tr></table></figure><br>　　对于第二种问题:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure><br>　　还是由于JavaScript的限制，Vue不能检测对象属性的添加或删除，所以对于已经创建的实例，Vue不能动态添加根级别的响应式属性。比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    userProfile: &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'Anika'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>　　如果你想要动态的添加属性到userProfile对象中:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(vm.userProfile, <span class=\"string\">'age'</span>, <span class=\"number\">27</span>)</span><br><span class=\"line\"><span class=\"comment\">// 或者别名方法:</span></span><br><span class=\"line\">vm.$set(vm.userProfile, <span class=\"string\">'age'</span>, <span class=\"number\">27</span>)</span><br><span class=\"line\"><span class=\"comment\">// 如果你想要一次性添加多个属性，不可以像下面这样做</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(vm.userProfile, &#123;</span><br><span class=\"line\">  age: <span class=\"number\">27</span>,</span><br><span class=\"line\">  favoriteColor: <span class=\"string\">'Vue Green'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 应该这样</span></span><br><span class=\"line\">vm.userProfile = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, vm.userProfile, &#123;</span><br><span class=\"line\">  age: <span class=\"number\">27</span>,</span><br><span class=\"line\">  favoriteColor: <span class=\"string\">'Vue Green'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"v-for-with-v-if\"><a href=\"#v-for-with-v-if\" class=\"headerlink\" title=\"v-for with v-if\"></a>v-for with v-if</h3><p>　　在vue的官方文档中强烈建议不要将v-if和v-for使用在同一个元素上，这样做的目的一般都只有两个:</p>\n<ul>\n<li>过滤一个列表中的项目</li>\n<li>为了避免渲染本应该被隐藏的列表</li>\n</ul>\n<p>　　对于第一种目的，我们可以通过一个计算属性去达到这样的目的，或者也可以调用一个返回数组的方法。比如使用计算属性:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"user.isActive\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 你可以将users改成一个计算属性activeUsers --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in activeUsers\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  activeUsers: function () &#123;</span><br><span class=\"line\">    return this.users.filter(function (user) &#123;</span><br><span class=\"line\">      return user.isActive</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　第二种，我们可以将v-if移至v-for标签的上层。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 相反我们应该这样写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　而且，当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。所以如果我们将其放在同一个元素上面，如果我们对数据进行了修改，那么在重渲染的时候又会去遍历整个数据列表。而我们如果选择使用一个计算属性，我们在渲染的时候只遍历活跃用户，渲染更高效，而且这样解藕渲染层的逻辑，可维护性 (对逻辑的更改和扩展) 更强。</p>\n<h3 id=\"组件的-v-for\"><a href=\"#组件的-v-for\" class=\"headerlink\" title=\"组件的 v-for\"></a>组件的 v-for</h3><p>　　在自定义组件里，你可以像任何普通元素一样用 v-for。并且在2.2.0+ 的版本里，当在组件中使用 v-for 时，key 是必须的。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　但是区别与一般的元素的是，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要用props。这样做的官方解释是明确数据来源，达到组件复用的目的。二是为了防止组件与v-for过度紧密耦合。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:item</span>=<span class=\"string\">\"item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:index</span>=<span class=\"string\">\"index\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　除了key作为标识需要的属性之外，其它如item和index都是最后赋值到了props这个数组的中所定义的变量名称，然后这些变量名称将会使用在template定义的组件里。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>　　条件渲染和列表渲染有点类似于流程控制之类的东西，不过也只是简单的类比。条件和列表是一个很常用的功能，尤其是对于一些列表式的组件，但是还应该知道v-for和v-if配合使用的问题，从性能角度考虑，我们应尽量避免将v-for和v-if使用在同一个标签的上层。</p>\n","site":{"data":{}},"excerpt":"<p>　　创建一个下面的vue对象:<br>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>,&#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;li&gt;This is a todo&lt;/li&gt;'</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'item'</span>, <span class=\"string\">'index'</span>]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">      awesome: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      notawesome: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      ok: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      loginType: <span class=\"string\">\"username\"</span>,</span><br><span class=\"line\">      showornot: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      items: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      parentMessgae: <span class=\"string\">\"parent\"</span>,</span><br><span class=\"line\">      forObject: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">\"Sonw\"</span>,</span><br><span class=\"line\">        age: <span class=\"number\">40</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    toggleLoginType: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.loginType == <span class=\"string\">\"username\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loginType = <span class=\"string\">\"email\"</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loginType = <span class=\"string\">\"username\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h3><p>　　使用v-if指令进行条件渲染，当属性值为true的时候显示内容否则不显示。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"awesome\"</span>&gt;</span>I was rendered by if command<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　当然也可以使用else，甚至else-if,但是需要注意的是，这些语句必须书写在一起。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loginType == 'username'\"</span>&gt;</span>Username login<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- v-else必须紧跟v-if 或 v-else-if后面，否则不会生效 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"loginType == 'email'\"</span>&gt;</span>Email login<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>No, I am the king<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　如果想要一次渲染多个元素，可以使用template标签:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Another<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 21<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 22<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　Vue为了尽可能高效的渲染元素，通常会复用现有元素而不是从头开始渲染，如果你需要vue重头开始渲染元素，那么你需要为它们指定key属性。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"username-input\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your email address\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"email-input\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用v-show\"><a href=\"#使用v-show\" class=\"headerlink\" title=\"使用v-show\"></a>使用v-show</h3><p>　　如果我们需要经常切换某个元素是否可见，为了效率起见我们应该使用v-show指令而非v-for。因为v-for是惰性的，只有当条件成立的时候才会渲染元素，而v-show则是无论条件是否成立都会一开始就渲染元素。并且v-show每次切换仅仅修改css的display属性，而v-if则会使条件块内的事件监听器和子组件适当地被销毁和重建，这样明显每次切换开销都要大于v-show。v-show的简单使用用例如下。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 对于一些经常需要改变的元素可以使用v-show，即只改变display的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"showornot\"</span>&gt;</span>我是vshow代表<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h3><p>　　使用v-for指令达到渲染一个列表的目的，并且需要使用item in items形式的语法，你也可以使用of去代替in。比如下面这个例子:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或者使用of代替in --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item of items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Bar<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　支持第二个参数作为当前项的索引。甚至你可以在v-for块中访问父级的属性。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span>-&#123;&#123;index&#125;&#125; -&#123;&#123;item.message&#125;&#125; &#123;&#123; parentMessgae &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>-0 -Foo parent<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>-1 -Bar parent<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　除了数组之外，你也可以使用一个对象作为v-for指令的输入。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 除了数组之外，你也可以使用对象去作为一个遍历 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"prop in forObject\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; prop &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        John</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        Sonw</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        40</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　与数组一样可以接受多个参数。需要注意的是，第一个位置一定是value，第二个位置一定是key，第三个是index。这与js的语言特性有关，因为其有一个arguments变量，而方法中的参数名只是针对其位置对其进行赋值而已。需要注意的是遍历的顺序是按照Object.keys()的结果，但是可能在不同的js引擎是不一致的。并且与v-if类似，vue会智能的复用组件，所以如果有需要可以在v-for遍历的组件上加上key属性去标识每一个组件提示vue不需要进行复用。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, key, index) in forObject\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125; : &#123;&#123;index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        firstName : John : 0</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        lastName : Sonw : 1</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        age : 40 : 2</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　类似于v-if，你也可以使用template标签去包含一块需要遍历的内容。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"divider\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　同样，如果我们不想要使用原始数组，我们也可以使用一个计算属性或者调用一个方法做到灵活运用选择。计算属性的使用与普通属性相似，下面是方法的使用:(注意，vue对数组的更新检测会由于js的限制受到对应的限制，具体查阅官方文档列表渲染部分的说明)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  numbers: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  even: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">numbers</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> number % <span class=\"number\">2</span> === <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in even(numbers)\"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　甚至可以直接取整数:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in 10\"</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　渲染结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4 5 6 7 8 9 10</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组更新检测\"><a href=\"#数组更新检测\" class=\"headerlink\" title=\"数组更新检测\"></a>数组更新检测</h3><p>　　那么我们的列表经过渲染之后，在很多场景下可能会需要对其进行修改，这就是vue里所谓的数组更新检测。在vue中，包含一些变异方法和一些非变异方法，所谓的变异方法就是修改了原数组的内容，而非变异则是不会对原数组里的内容进行修改。但是对于vue来说，仅当变异方法的调用将会触发视图的更新。比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- vue包含了一些数组变异方法，通过调用这些方法我们可以更新引用该数组的视图 --&gt;</span><br><span class=\"line\">      push()</span><br><span class=\"line\">      pop()</span><br><span class=\"line\">      shift()  <span class=\"comment\">// 把数组第一个元素删除掉</span></span><br><span class=\"line\">      unshift() <span class=\"comment\">// 在数组第一个位置新增一个元素</span></span><br><span class=\"line\">      splice()  <span class=\"comment\">// splice(index1, index2, ...) index1表示插入的位置，index2表示删除元素的数目，</span></span><br><span class=\"line\">      ... 表示新增的元素</span><br><span class=\"line\">      sort()</span><br><span class=\"line\">      reverse() ，</span><br><span class=\"line\">      当然也有一些非变异方法，比如:</span><br><span class=\"line\">      concat()、filter()、slice()，当然也可以手动去调用这些方法去为数组重新赋值</span><br><span class=\"line\">      concat() 拼凑多个数组、filter用于过滤一些不需要的值、slice相当于substring,返回起始和结束之间的索引 --&gt;</span><br></pre></td></tr></table></figure><br>　　如果你需要使用非变异方法达到修改视图的目的，那么你需要将原来的数组指向非变异方法的返回值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example1.items = example1.items.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.message.match(<span class=\"regexp\">/Foo/</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>　　由于js的限制，不可以检测通过索引修改数组的一个项以及直接修改数组的长度的变化，为了解决第一种问题，在vue中提供了:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(app.items, indexOfItem, newValue)</span><br><span class=\"line\"><span class=\"comment\">// 你也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名：</span></span><br><span class=\"line\">vm.$set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"><span class=\"comment\">// 或者使用:</span></span><br><span class=\"line\"><span class=\"comment\">// Array.prototype.splice,即变异方法</span></span><br><span class=\"line\">app.items.splice(indexOfItem, <span class=\"number\">1</span>, newValue)</span><br></pre></td></tr></table></figure><br>　　对于第二种问题:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure><br>　　还是由于JavaScript的限制，Vue不能检测对象属性的添加或删除，所以对于已经创建的实例，Vue不能动态添加根级别的响应式属性。比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    userProfile: &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'Anika'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>　　如果你想要动态的添加属性到userProfile对象中:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(vm.userProfile, <span class=\"string\">'age'</span>, <span class=\"number\">27</span>)</span><br><span class=\"line\"><span class=\"comment\">// 或者别名方法:</span></span><br><span class=\"line\">vm.$set(vm.userProfile, <span class=\"string\">'age'</span>, <span class=\"number\">27</span>)</span><br><span class=\"line\"><span class=\"comment\">// 如果你想要一次性添加多个属性，不可以像下面这样做</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(vm.userProfile, &#123;</span><br><span class=\"line\">  age: <span class=\"number\">27</span>,</span><br><span class=\"line\">  favoriteColor: <span class=\"string\">'Vue Green'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 应该这样</span></span><br><span class=\"line\">vm.userProfile = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, vm.userProfile, &#123;</span><br><span class=\"line\">  age: <span class=\"number\">27</span>,</span><br><span class=\"line\">  favoriteColor: <span class=\"string\">'Vue Green'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"v-for-with-v-if\"><a href=\"#v-for-with-v-if\" class=\"headerlink\" title=\"v-for with v-if\"></a>v-for with v-if</h3><p>　　在vue的官方文档中强烈建议不要将v-if和v-for使用在同一个元素上，这样做的目的一般都只有两个:</p>\n<ul>\n<li>过滤一个列表中的项目</li>\n<li>为了避免渲染本应该被隐藏的列表</li>\n</ul>\n<p>　　对于第一种目的，我们可以通过一个计算属性去达到这样的目的，或者也可以调用一个返回数组的方法。比如使用计算属性:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"user.isActive\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 你可以将users改成一个计算属性activeUsers --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in activeUsers\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  activeUsers: function () &#123;</span><br><span class=\"line\">    return this.users.filter(function (user) &#123;</span><br><span class=\"line\">      return user.isActive</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>　　第二种，我们可以将v-if移至v-for标签的上层。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 相反我们应该这样写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　而且，当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。所以如果我们将其放在同一个元素上面，如果我们对数据进行了修改，那么在重渲染的时候又会去遍历整个数据列表。而我们如果选择使用一个计算属性，我们在渲染的时候只遍历活跃用户，渲染更高效，而且这样解藕渲染层的逻辑，可维护性 (对逻辑的更改和扩展) 更强。</p>\n<h3 id=\"组件的-v-for\"><a href=\"#组件的-v-for\" class=\"headerlink\" title=\"组件的 v-for\"></a>组件的 v-for</h3><p>　　在自定义组件里，你可以像任何普通元素一样用 v-for。并且在2.2.0+ 的版本里，当在组件中使用 v-for 时，key 是必须的。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　但是区别与一般的元素的是，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要用props。这样做的官方解释是明确数据来源，达到组件复用的目的。二是为了防止组件与v-for过度紧密耦合。比如:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:item</span>=<span class=\"string\">\"item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:index</span>=<span class=\"string\">\"index\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　除了key作为标识需要的属性之外，其它如item和index都是最后赋值到了props这个数组的中所定义的变量名称，然后这些变量名称将会使用在template定义的组件里。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>　　条件渲染和列表渲染有点类似于流程控制之类的东西，不过也只是简单的类比。条件和列表是一个很常用的功能，尤其是对于一些列表式的组件，但是还应该知道v-for和v-if配合使用的问题，从性能角度考虑，我们应尽量避免将v-for和v-if使用在同一个标签的上层。</p>"},{"layout":"post","title":"Vue基础-数据绑定","date":"2019-04-20T12:47:00.000Z","thumbnail":"http://swcheng.com/images/vuelogo.png","_content":"　　在引入Vue需要的js文件之后，比如我们在js代码里创建下面这样一个Vue对象:\n<!-- more -->\n\n{% codeblock lang:JavaScript %}\n    // 声明一个组件\n    Vue.component('my-component', {\n      template: '<p class=\"foo bar\">Hi</p>'\n    });\n\n    var app = new Vue(\n    {\n      el: '#app',\n      data: {\n        message: \"Hello World!\",\n        seen: true,\n        dynamicId: \"iamid\",\n        attributeName: \"href\",\n        addre: \"http://www.baidu.com\",\n        isDisable: true,\n        vhtml: \"<input>\",\n        firstName: 'Foo',\n        lastName: 'Bar',\n        fullName: 'Foo Bar'\n        todos: [\n          {text:  \"Learn JavaScript\" },\n          {text:  \"Learn Vue\" },\n          {text:  \"Build something awesome\" }\n        ],\n        groceryList: [\n          {\n            id: 0,\n            text: 'Vegetables'\n          },\n          {\n            id: 1,\n            text: 'Cheese'\n          },\n          {\n            id: 2,\n            text: 'Whatever else humans are supposed to eat'\n          }\n        ],\n        // class和style属性的绑定\n        isActive: true,\n        hasError: true,\n        classObject: {\n          cla1: true,\n          cla2: true\n        },\n        ind1: \"class1\",\n        ind2: \"class2\",\n        activeColor: \"red\",\n        fontSize: 20,\n        styleObject: {\n          color: 'pink',\n          fontSize: '13px'\n        }\n      },\n      methods: {\n        reverseMessage: function(){\n          this.message = this.message.split('').reverse().join('');\n        }\n      },\n      computed: {\n        reversedMessage: function () {\n          return this.message.split('').reverse().join('')\n        }\n      },\n      watch: {\n        firstName: function (val) {\n          this.fullName = val + ' ' + this.lastName\n        },\n        lastName: function (val) {\n          this.fullName = this.firstName + ' ' + val\n        }\n     }\n    });\n\n{% endcodeblock %}\n### 文本解析\n　　可以使用Mustache标签去做原始的文本解析，这样的解析后的结果不会作为html代码输出:\n{% codeblock lang:html %}\n    <span>Message: {% raw %}{{ message }}{% endraw %}</span>\n{% endcodeblock %}\n　　结果显示:\n{% codeblock lang:html %}\n    <span>Message: Hello World!</span>\n{% endcodeblock %}\n　　如果不希望span里的内容随着message的属性变化而变化，可以使用一次赋值，下面的messgae的值不会改变:\n{% codeblock lang:html %}\n    <span v-once>Message: {% raw %}{{ message }}{% endraw %}</span>\n{% endcodeblock %}\n\n### Html解析\n{% codeblock lang:html %}\n    <span v-html=\"vhtml\"></span>\n{% endcodeblock %}\n　　解析后的结果为:\n{% codeblock lang:html %}\n    <span>\n      <input>\n    </span>\n{% endcodeblock %}\n\n### 属性解析\n　　使用v-bind指令:\n{% codeblock lang:html %}\n　　<div v-bind:id=\"dynamicId\"></div>\n{% endcodeblock %}\n　　解析结果:  \n{% codeblock lang:html %}\n　　<div id=\"iamid\"></div>\n{% endcodeblock %}\n　　动态绑定对应属性:\n{% codeblock lang:html %}\n　　<a v-bind:[attributeName]=\"addre\"> ... </a>\n{% endcodeblock %}\n　　该节点对应的vue对象的attributeName的值将作为将要设置的对应属性。如果是href记得要加{% raw %}http://{% endraw %}前缀，不然会当做ftp。一个需要注意的地方是attributeName在有些浏览器会被全部被当做小写去解析，所以这个值我们尽量可能在vue对象中定义为小写。\n\n　　当然也可以解析除了id之外的其它任何属性。注意以上无论是使用v-指令亦或者是Mustache标签，都可以使用js表达式去获得最终的值，但是仅仅可以使用一个js表达式去计算，而不可以写一堆js语句。\n\n### 计算属性\n　　计算属性是我们在vue对象中定义的需要通过一些js代码计算获得最终值的属性，这些属性的变化取决于它需要计算的属性的变化，这个对应的属性被称为响应式依赖。比如这里的message是需要被计算的对象，当message变化的时候reversedMessgae属性就会发生变化。\n{% codeblock lang:html  %}\n    <div id=\"example\">\n      <p>Computed reversed message: \"{% raw %}{{ message }}{% endraw %}\"</p>\n    </div>\n{% endcodeblock %}\n\n　　如果你不想要当响应式依赖改变的时候才可以改变计算属性的值，你可能想要自己手动直接修改，那么可以为这个计算属性添加一个setter方法。(这里的cache意味着你访问这个computed的值的时候，仅当响应式依赖发生改变的时候才会重新执行getter函数，如果没有cache则会每次访问都重新调用getter方法。)下面的示例中，即使我们重写这个set方法，直接给fullName赋予的新值作为newValue出现在setter的第一个参数中，如果我们想要再次访问修改后的计算属性值，我们必须去修改它的响应式依赖，因为当再次访问计算属性就会调用get方法，所以只可以通过间接的修改响应式依赖的方式去达到修改计算属性的目的。\n{% codeblock lang:js %}\ncomputed: {\n  fullName: {\n    cache: false,\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n{% endcodeblock %}\n\n### 侦听属性\n　　侦听属性，就是我们需要进行监听其值的变化的属性，然后执行我们需要的操作。每当firstName或者lastName的值被修改的时候，对应的watch方法就会被调用。\n{% codeblock lang:js  %}\n    watch: {\n      firstName: function (val) {\n        this.fullName = val + ' ' + this.lastName\n      },\n      lastName: function (val) {\n        this.fullName = this.firstName + ' ' + val\n      }\n    }\n{% endcodeblock %}\n\n　　对于class属性以及style属性，如果去做一些字符串拼接和计算，则会特别繁琐，故而vue对这些属性的绑定做了一些特别的处理。\n\n### 计算属性 vs 方法\n　　在vue中，不只是计算属性是可以根据响应式依赖变化去重新计算求值的，我们可以通过定义一个方法返回这个计算值同样可以达到目的。但对于绝大多数情况，从直观的角度来看，使用计算属性是更好的满足这一类需求的方式，但方法的优点是可以传递参数，这样我们可以根据参数的不同编写更加通用的响应式返回值。所以从某种观点出发，方法是更为通用的\"计算属性\"。除此之外，方法并无cache，每次触发重新渲染的时候总会执行方法，对于一些非响应式的依赖值比如Date.now()，方法总会重新计算它们的值。这是二者的优缺点的比较。\n\n### class属性绑定\n　　直接引用vue对象中定义的对象或者手动创建一个对象亦或者是一个属性，或者是使用一个包含对象以及属性的数组:\n{% codeblock lang:html  %}\n  <!-- 直接在双引号中使用js表达式返回一个对象，如果在vue对象中，isAcitve是true则存在这个class否则就是没有 -->\n  <span v-bind:class=\"{ active: isActive, 'text-danger': hasError}\"></span>\n  <!-- 直接引用一个对象 -->\n  <span v-bind:class=\"classObject\"></span>\n  <!-- 传递一个数组，这里是将数组里的属性的值作为标签的类的值 -->\n  <span v-bind:class=\"[ind1, ind2]\"></span>\n  <!-- 也可以将属性和对象共同使用 -->\n  <span v-bind:class=\"[ind1, ind2, classObject]\"></span>\n  <!-- 在数组中还可以使用三元表达式 -->\n  <span v-bind:class=\"[isActive ? ind1: '', ind2]\"></span>\n{% endcodeblock %}\n\n　　解析结果:\n{% codeblock lang:html %}\n  <span class=\"active text-danger\"></span>\n  <span class=\"cla1 cla2\"></span>\n  <span class=\"class1 class2\"></span>\n  <span class=\"class1 class2 cla1 cls2\"></span>\n  <span class=\"class1 class2\"></span>\n{% endcodeblock %}　　\n　　对于自定义组件，如果在定义中就已经存在一些值，那么会在其后进行追加:\n{% codeblock lang:html %}\n  <!-- 组件的定义必须放在最前面 -->\n  <my-component v-bind:class=\"{ active: isActive }\"></my-component>\n{% endcodeblock %}　　  \n　　解析结果:\n{% codeblock lang:html %}\n  <p class=\"foo bar active\">Hi</p>\n{% endcodeblock %}　　\n　　可以与普通的class属性共存，也就是可以使用class与v-bind共同完成属性的设置:\n{% codeblock lang:html %}\n  <!-- 也可以与普通的class属性共存 -->\n<div class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"></div>\n{% endcodeblock %}　\n　　解析结果:\n{% codeblock lang:html %}\n  <div class=\"static active text-danger\"></div>\n{% endcodeblock %}\n\n### 绑定内联样式\n{% codeblock lang:html %}\n  <!-- 绑定内联样式，使用对象去绑定，不过定义在vue对象中更加合适 -->\n  <div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n  <!-- 定义在对象中，当然也可以使用数组来引用多个对象 -->\n  <div v-bind:style=\"styleObject\">123</div>    \n  <!-- 可以为一些属性添加多重值 -->\n  <div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n{% endcodeblock %}\n\n　　解析结果:\n{% codeblock lang:html %}\n  <div style=\"color: red; font-size: 20px;\"></div>\n  <div style=\"color: pink; font-size: 13px;\">123</div>\n  <div style=\"display: flex;\"></div>\n{% endcodeblock %}\n\n### 命令缩写\n{% codeblock lang:html %}\n    <!-- 完整语法 -->\n    <a v-bind:href=\"url\">...</a>\n\n    <!-- 缩写 -->\n    <a :href=\"url\">...</a>\n\n    <!-- 完整语法 -->\n    <a v-on:click=\"doSomething\">...</a>\n\n    <!-- 缩写 -->\n    <a @click=\"doSomething\">...</a>\n{% endcodeblock %}\n\n### 注意\n　　在编写这篇Vue笔记的时候，会出现Mustache标签与Nunjucks语法冲突的问题，解决方案可以查看 [这里](https://github.com/hexojs/hexo/issues/1930 \"Vue.js 中的双大括号{{ Mustache }}与 Nunjucks 解析相冲突\")。\n","source":"_posts/Vue基础-数据绑定.md","raw":"layout: \"post\"\ntitle: \"Vue基础-数据绑定\"\ndate: \"2019-04-20 20:47\"\ncategories:\n- [UI,VUE]\ntags:\n- [TECHNOLOGY]\nthumbnail: http://swcheng.com/images/vuelogo.png\n---\n　　在引入Vue需要的js文件之后，比如我们在js代码里创建下面这样一个Vue对象:\n<!-- more -->\n\n{% codeblock lang:JavaScript %}\n    // 声明一个组件\n    Vue.component('my-component', {\n      template: '<p class=\"foo bar\">Hi</p>'\n    });\n\n    var app = new Vue(\n    {\n      el: '#app',\n      data: {\n        message: \"Hello World!\",\n        seen: true,\n        dynamicId: \"iamid\",\n        attributeName: \"href\",\n        addre: \"http://www.baidu.com\",\n        isDisable: true,\n        vhtml: \"<input>\",\n        firstName: 'Foo',\n        lastName: 'Bar',\n        fullName: 'Foo Bar'\n        todos: [\n          {text:  \"Learn JavaScript\" },\n          {text:  \"Learn Vue\" },\n          {text:  \"Build something awesome\" }\n        ],\n        groceryList: [\n          {\n            id: 0,\n            text: 'Vegetables'\n          },\n          {\n            id: 1,\n            text: 'Cheese'\n          },\n          {\n            id: 2,\n            text: 'Whatever else humans are supposed to eat'\n          }\n        ],\n        // class和style属性的绑定\n        isActive: true,\n        hasError: true,\n        classObject: {\n          cla1: true,\n          cla2: true\n        },\n        ind1: \"class1\",\n        ind2: \"class2\",\n        activeColor: \"red\",\n        fontSize: 20,\n        styleObject: {\n          color: 'pink',\n          fontSize: '13px'\n        }\n      },\n      methods: {\n        reverseMessage: function(){\n          this.message = this.message.split('').reverse().join('');\n        }\n      },\n      computed: {\n        reversedMessage: function () {\n          return this.message.split('').reverse().join('')\n        }\n      },\n      watch: {\n        firstName: function (val) {\n          this.fullName = val + ' ' + this.lastName\n        },\n        lastName: function (val) {\n          this.fullName = this.firstName + ' ' + val\n        }\n     }\n    });\n\n{% endcodeblock %}\n### 文本解析\n　　可以使用Mustache标签去做原始的文本解析，这样的解析后的结果不会作为html代码输出:\n{% codeblock lang:html %}\n    <span>Message: {% raw %}{{ message }}{% endraw %}</span>\n{% endcodeblock %}\n　　结果显示:\n{% codeblock lang:html %}\n    <span>Message: Hello World!</span>\n{% endcodeblock %}\n　　如果不希望span里的内容随着message的属性变化而变化，可以使用一次赋值，下面的messgae的值不会改变:\n{% codeblock lang:html %}\n    <span v-once>Message: {% raw %}{{ message }}{% endraw %}</span>\n{% endcodeblock %}\n\n### Html解析\n{% codeblock lang:html %}\n    <span v-html=\"vhtml\"></span>\n{% endcodeblock %}\n　　解析后的结果为:\n{% codeblock lang:html %}\n    <span>\n      <input>\n    </span>\n{% endcodeblock %}\n\n### 属性解析\n　　使用v-bind指令:\n{% codeblock lang:html %}\n　　<div v-bind:id=\"dynamicId\"></div>\n{% endcodeblock %}\n　　解析结果:  \n{% codeblock lang:html %}\n　　<div id=\"iamid\"></div>\n{% endcodeblock %}\n　　动态绑定对应属性:\n{% codeblock lang:html %}\n　　<a v-bind:[attributeName]=\"addre\"> ... </a>\n{% endcodeblock %}\n　　该节点对应的vue对象的attributeName的值将作为将要设置的对应属性。如果是href记得要加{% raw %}http://{% endraw %}前缀，不然会当做ftp。一个需要注意的地方是attributeName在有些浏览器会被全部被当做小写去解析，所以这个值我们尽量可能在vue对象中定义为小写。\n\n　　当然也可以解析除了id之外的其它任何属性。注意以上无论是使用v-指令亦或者是Mustache标签，都可以使用js表达式去获得最终的值，但是仅仅可以使用一个js表达式去计算，而不可以写一堆js语句。\n\n### 计算属性\n　　计算属性是我们在vue对象中定义的需要通过一些js代码计算获得最终值的属性，这些属性的变化取决于它需要计算的属性的变化，这个对应的属性被称为响应式依赖。比如这里的message是需要被计算的对象，当message变化的时候reversedMessgae属性就会发生变化。\n{% codeblock lang:html  %}\n    <div id=\"example\">\n      <p>Computed reversed message: \"{% raw %}{{ message }}{% endraw %}\"</p>\n    </div>\n{% endcodeblock %}\n\n　　如果你不想要当响应式依赖改变的时候才可以改变计算属性的值，你可能想要自己手动直接修改，那么可以为这个计算属性添加一个setter方法。(这里的cache意味着你访问这个computed的值的时候，仅当响应式依赖发生改变的时候才会重新执行getter函数，如果没有cache则会每次访问都重新调用getter方法。)下面的示例中，即使我们重写这个set方法，直接给fullName赋予的新值作为newValue出现在setter的第一个参数中，如果我们想要再次访问修改后的计算属性值，我们必须去修改它的响应式依赖，因为当再次访问计算属性就会调用get方法，所以只可以通过间接的修改响应式依赖的方式去达到修改计算属性的目的。\n{% codeblock lang:js %}\ncomputed: {\n  fullName: {\n    cache: false,\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n{% endcodeblock %}\n\n### 侦听属性\n　　侦听属性，就是我们需要进行监听其值的变化的属性，然后执行我们需要的操作。每当firstName或者lastName的值被修改的时候，对应的watch方法就会被调用。\n{% codeblock lang:js  %}\n    watch: {\n      firstName: function (val) {\n        this.fullName = val + ' ' + this.lastName\n      },\n      lastName: function (val) {\n        this.fullName = this.firstName + ' ' + val\n      }\n    }\n{% endcodeblock %}\n\n　　对于class属性以及style属性，如果去做一些字符串拼接和计算，则会特别繁琐，故而vue对这些属性的绑定做了一些特别的处理。\n\n### 计算属性 vs 方法\n　　在vue中，不只是计算属性是可以根据响应式依赖变化去重新计算求值的，我们可以通过定义一个方法返回这个计算值同样可以达到目的。但对于绝大多数情况，从直观的角度来看，使用计算属性是更好的满足这一类需求的方式，但方法的优点是可以传递参数，这样我们可以根据参数的不同编写更加通用的响应式返回值。所以从某种观点出发，方法是更为通用的\"计算属性\"。除此之外，方法并无cache，每次触发重新渲染的时候总会执行方法，对于一些非响应式的依赖值比如Date.now()，方法总会重新计算它们的值。这是二者的优缺点的比较。\n\n### class属性绑定\n　　直接引用vue对象中定义的对象或者手动创建一个对象亦或者是一个属性，或者是使用一个包含对象以及属性的数组:\n{% codeblock lang:html  %}\n  <!-- 直接在双引号中使用js表达式返回一个对象，如果在vue对象中，isAcitve是true则存在这个class否则就是没有 -->\n  <span v-bind:class=\"{ active: isActive, 'text-danger': hasError}\"></span>\n  <!-- 直接引用一个对象 -->\n  <span v-bind:class=\"classObject\"></span>\n  <!-- 传递一个数组，这里是将数组里的属性的值作为标签的类的值 -->\n  <span v-bind:class=\"[ind1, ind2]\"></span>\n  <!-- 也可以将属性和对象共同使用 -->\n  <span v-bind:class=\"[ind1, ind2, classObject]\"></span>\n  <!-- 在数组中还可以使用三元表达式 -->\n  <span v-bind:class=\"[isActive ? ind1: '', ind2]\"></span>\n{% endcodeblock %}\n\n　　解析结果:\n{% codeblock lang:html %}\n  <span class=\"active text-danger\"></span>\n  <span class=\"cla1 cla2\"></span>\n  <span class=\"class1 class2\"></span>\n  <span class=\"class1 class2 cla1 cls2\"></span>\n  <span class=\"class1 class2\"></span>\n{% endcodeblock %}　　\n　　对于自定义组件，如果在定义中就已经存在一些值，那么会在其后进行追加:\n{% codeblock lang:html %}\n  <!-- 组件的定义必须放在最前面 -->\n  <my-component v-bind:class=\"{ active: isActive }\"></my-component>\n{% endcodeblock %}　　  \n　　解析结果:\n{% codeblock lang:html %}\n  <p class=\"foo bar active\">Hi</p>\n{% endcodeblock %}　　\n　　可以与普通的class属性共存，也就是可以使用class与v-bind共同完成属性的设置:\n{% codeblock lang:html %}\n  <!-- 也可以与普通的class属性共存 -->\n<div class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"></div>\n{% endcodeblock %}　\n　　解析结果:\n{% codeblock lang:html %}\n  <div class=\"static active text-danger\"></div>\n{% endcodeblock %}\n\n### 绑定内联样式\n{% codeblock lang:html %}\n  <!-- 绑定内联样式，使用对象去绑定，不过定义在vue对象中更加合适 -->\n  <div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n  <!-- 定义在对象中，当然也可以使用数组来引用多个对象 -->\n  <div v-bind:style=\"styleObject\">123</div>    \n  <!-- 可以为一些属性添加多重值 -->\n  <div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n{% endcodeblock %}\n\n　　解析结果:\n{% codeblock lang:html %}\n  <div style=\"color: red; font-size: 20px;\"></div>\n  <div style=\"color: pink; font-size: 13px;\">123</div>\n  <div style=\"display: flex;\"></div>\n{% endcodeblock %}\n\n### 命令缩写\n{% codeblock lang:html %}\n    <!-- 完整语法 -->\n    <a v-bind:href=\"url\">...</a>\n\n    <!-- 缩写 -->\n    <a :href=\"url\">...</a>\n\n    <!-- 完整语法 -->\n    <a v-on:click=\"doSomething\">...</a>\n\n    <!-- 缩写 -->\n    <a @click=\"doSomething\">...</a>\n{% endcodeblock %}\n\n### 注意\n　　在编写这篇Vue笔记的时候，会出现Mustache标签与Nunjucks语法冲突的问题，解决方案可以查看 [这里](https://github.com/hexojs/hexo/issues/1930 \"Vue.js 中的双大括号{{ Mustache }}与 Nunjucks 解析相冲突\")。\n","slug":"Vue基础-数据绑定","published":1,"updated":"2019-10-11T08:15:12.090Z","_id":"cjzr1cxao000mfo81uc2ssqfe","comments":1,"photos":[],"link":"","content":"<p>　　在引入Vue需要的js文件之后，比如我们在js代码里创建下面这样一个Vue对象:<br><a id=\"more\"></a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p class=\"foo bar\"&gt;Hi&lt;/p&gt;'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">\"Hello World!\"</span>,</span><br><span class=\"line\">    seen: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    dynamicId: <span class=\"string\">\"iamid\"</span>,</span><br><span class=\"line\">    attributeName: <span class=\"string\">\"href\"</span>,</span><br><span class=\"line\">    addre: <span class=\"string\">\"http://www.baidu.com\"</span>,</span><br><span class=\"line\">    isDisable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    vhtml: <span class=\"string\">\"&lt;input&gt;\"</span>,</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">    fullName: <span class=\"string\">'Foo Bar'</span></span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:  <span class=\"string\">\"Learn JavaScript\"</span> &#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:  <span class=\"string\">\"Learn Vue\"</span> &#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:  <span class=\"string\">\"Build something awesome\"</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    groceryList: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Vegetables'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Cheese'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Whatever else humans are supposed to eat'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// class和style属性的绑定</span></span><br><span class=\"line\">    isActive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hasError: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    classObject: &#123;</span><br><span class=\"line\">      cla1: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      cla2: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ind1: <span class=\"string\">\"class1\"</span>,</span><br><span class=\"line\">    ind2: <span class=\"string\">\"class2\"</span>,</span><br><span class=\"line\">    activeColor: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">    fontSize: <span class=\"number\">20</span>,</span><br><span class=\"line\">    styleObject: &#123;</span><br><span class=\"line\">      color: <span class=\"string\">'pink'</span>,</span><br><span class=\"line\">      fontSize: <span class=\"string\">'13px'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseMessage: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"文本解析\"><a href=\"#文本解析\" class=\"headerlink\" title=\"文本解析\"></a>文本解析</h3><p>　　可以使用Mustache标签去做原始的文本解析，这样的解析后的结果不会作为html代码输出:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　结果显示:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: Hello World!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　如果不希望span里的内容随着message的属性变化而变化，可以使用一次赋值，下面的messgae的值不会改变:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Html解析\"><a href=\"#Html解析\" class=\"headerlink\" title=\"Html解析\"></a>Html解析</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"vhtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　解析后的结果为:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"属性解析\"><a href=\"#属性解析\" class=\"headerlink\" title=\"属性解析\"></a>属性解析</h3><p>　　使用v-bind指令:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"iamid\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　动态绑定对应属性:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>]=<span class=\"string\">\"addre\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　该节点对应的vue对象的attributeName的值将作为将要设置的对应属性。如果是href记得要加http://前缀，不然会当做ftp。一个需要注意的地方是attributeName在有些浏览器会被全部被当做小写去解析，所以这个值我们尽量可能在vue对象中定义为小写。</p>\n<p>　　当然也可以解析除了id之外的其它任何属性。注意以上无论是使用v-指令亦或者是Mustache标签，都可以使用js表达式去获得最终的值，但是仅仅可以使用一个js表达式去计算，而不可以写一堆js语句。</p>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>　　计算属性是我们在vue对象中定义的需要通过一些js代码计算获得最终值的属性，这些属性的变化取决于它需要计算的属性的变化，这个对应的属性被称为响应式依赖。比如这里的message是需要被计算的对象，当message变化的时候reversedMessgae属性就会发生变化。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: \"&#123;&#123; message &#125;&#125;\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　如果你不想要当响应式依赖改变的时候才可以改变计算属性的值，你可能想要自己手动直接修改，那么可以为这个计算属性添加一个setter方法。(这里的cache意味着你访问这个computed的值的时候，仅当响应式依赖发生改变的时候才会重新执行getter函数，如果没有cache则会每次访问都重新调用getter方法。)下面的示例中，即使我们重写这个set方法，直接给fullName赋予的新值作为newValue出现在setter的第一个参数中，如果我们想要再次访问修改后的计算属性值，我们必须去修改它的响应式依赖，因为当再次访问计算属性就会调用get方法，所以只可以通过间接的修改响应式依赖的方式去达到修改计算属性的目的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  fullName: &#123;</span><br><span class=\"line\">    cache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"侦听属性\"><a href=\"#侦听属性\" class=\"headerlink\" title=\"侦听属性\"></a>侦听属性</h3><p>　　侦听属性，就是我们需要进行监听其值的变化的属性，然后执行我们需要的操作。每当firstName或者lastName的值被修改的时候，对应的watch方法就会被调用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　对于class属性以及style属性，如果去做一些字符串拼接和计算，则会特别繁琐，故而vue对这些属性的绑定做了一些特别的处理。</p>\n<h3 id=\"计算属性-vs-方法\"><a href=\"#计算属性-vs-方法\" class=\"headerlink\" title=\"计算属性 vs 方法\"></a>计算属性 vs 方法</h3><p>　　在vue中，不只是计算属性是可以根据响应式依赖变化去重新计算求值的，我们可以通过定义一个方法返回这个计算值同样可以达到目的。但对于绝大多数情况，从直观的角度来看，使用计算属性是更好的满足这一类需求的方式，但方法的优点是可以传递参数，这样我们可以根据参数的不同编写更加通用的响应式返回值。所以从某种观点出发，方法是更为通用的”计算属性”。除此之外，方法并无cache，每次触发重新渲染的时候总会执行方法，对于一些非响应式的依赖值比如Date.now()，方法总会重新计算它们的值。这是二者的优缺点的比较。</p>\n<h3 id=\"class属性绑定\"><a href=\"#class属性绑定\" class=\"headerlink\" title=\"class属性绑定\"></a>class属性绑定</h3><p>　　直接引用vue对象中定义的对象或者手动创建一个对象亦或者是一个属性，或者是使用一个包含对象以及属性的数组:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 直接在双引号中使用js表达式返回一个对象，如果在vue对象中，isAcitve是true则存在这个class否则就是没有 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 直接引用一个对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 传递一个数组，这里是将数组里的属性的值作为标签的类的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[ind1, ind2]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 也可以将属性和对象共同使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[ind1, ind2, classObject]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在数组中还可以使用三元表达式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[isActive ? ind1: '', ind2]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cla1 cla2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"class1 class2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"class1 class2 cla1 cls2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"class1 class2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>　　<br>　　对于自定义组件，如果在定义中就已经存在一些值，那么会在其后进行追加:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 组件的定义必须放在最前面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>　　<br>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>　　<br>　　可以与普通的class属性共存，也就是可以使用class与v-bind共同完成属性的设置:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">&lt;!-- 也可以与普通的class属性共存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>　<br>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"绑定内联样式\"><a href=\"#绑定内联样式\" class=\"headerlink\" title=\"绑定内联样式\"></a>绑定内联样式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 绑定内联样式，使用对象去绑定，不过定义在vue对象中更加合适 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 定义在对象中，当然也可以使用数组来引用多个对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"styleObject\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可以为一些属性添加多重值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red; font-size: 20px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: pink; font-size: 13px;\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: flex;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令缩写\"><a href=\"#命令缩写\" class=\"headerlink\" title=\"命令缩写\"></a>命令缩写</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>　　在编写这篇Vue笔记的时候，会出现Mustache标签与Nunjucks语法冲突的问题，解决方案可以查看 <a href=\"https://github.com/hexojs/hexo/issues/1930\" title=\"Vue.js 中的双大括号与 Nunjucks 解析相冲突\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n","site":{"data":{}},"excerpt":"<p>　　在引入Vue需要的js文件之后，比如我们在js代码里创建下面这样一个Vue对象:<br>","more":"</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p class=\"foo bar\"&gt;Hi&lt;/p&gt;'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">\"Hello World!\"</span>,</span><br><span class=\"line\">    seen: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    dynamicId: <span class=\"string\">\"iamid\"</span>,</span><br><span class=\"line\">    attributeName: <span class=\"string\">\"href\"</span>,</span><br><span class=\"line\">    addre: <span class=\"string\">\"http://www.baidu.com\"</span>,</span><br><span class=\"line\">    isDisable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    vhtml: <span class=\"string\">\"&lt;input&gt;\"</span>,</span><br><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">    fullName: <span class=\"string\">'Foo Bar'</span></span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:  <span class=\"string\">\"Learn JavaScript\"</span> &#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:  <span class=\"string\">\"Learn Vue\"</span> &#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:  <span class=\"string\">\"Build something awesome\"</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    groceryList: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Vegetables'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Cheese'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Whatever else humans are supposed to eat'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// class和style属性的绑定</span></span><br><span class=\"line\">    isActive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hasError: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    classObject: &#123;</span><br><span class=\"line\">      cla1: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      cla2: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ind1: <span class=\"string\">\"class1\"</span>,</span><br><span class=\"line\">    ind2: <span class=\"string\">\"class2\"</span>,</span><br><span class=\"line\">    activeColor: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">    fontSize: <span class=\"number\">20</span>,</span><br><span class=\"line\">    styleObject: &#123;</span><br><span class=\"line\">      color: <span class=\"string\">'pink'</span>,</span><br><span class=\"line\">      fontSize: <span class=\"string\">'13px'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseMessage: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"文本解析\"><a href=\"#文本解析\" class=\"headerlink\" title=\"文本解析\"></a>文本解析</h3><p>　　可以使用Mustache标签去做原始的文本解析，这样的解析后的结果不会作为html代码输出:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　结果显示:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: Hello World!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　如果不希望span里的内容随着message的属性变化而变化，可以使用一次赋值，下面的messgae的值不会改变:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Html解析\"><a href=\"#Html解析\" class=\"headerlink\" title=\"Html解析\"></a>Html解析</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"vhtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　解析后的结果为:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"属性解析\"><a href=\"#属性解析\" class=\"headerlink\" title=\"属性解析\"></a>属性解析</h3><p>　　使用v-bind指令:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"iamid\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　动态绑定对应属性:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>]=<span class=\"string\">\"addre\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>　　该节点对应的vue对象的attributeName的值将作为将要设置的对应属性。如果是href记得要加http://前缀，不然会当做ftp。一个需要注意的地方是attributeName在有些浏览器会被全部被当做小写去解析，所以这个值我们尽量可能在vue对象中定义为小写。</p>\n<p>　　当然也可以解析除了id之外的其它任何属性。注意以上无论是使用v-指令亦或者是Mustache标签，都可以使用js表达式去获得最终的值，但是仅仅可以使用一个js表达式去计算，而不可以写一堆js语句。</p>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>　　计算属性是我们在vue对象中定义的需要通过一些js代码计算获得最终值的属性，这些属性的变化取决于它需要计算的属性的变化，这个对应的属性被称为响应式依赖。比如这里的message是需要被计算的对象，当message变化的时候reversedMessgae属性就会发生变化。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: \"&#123;&#123; message &#125;&#125;\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　如果你不想要当响应式依赖改变的时候才可以改变计算属性的值，你可能想要自己手动直接修改，那么可以为这个计算属性添加一个setter方法。(这里的cache意味着你访问这个computed的值的时候，仅当响应式依赖发生改变的时候才会重新执行getter函数，如果没有cache则会每次访问都重新调用getter方法。)下面的示例中，即使我们重写这个set方法，直接给fullName赋予的新值作为newValue出现在setter的第一个参数中，如果我们想要再次访问修改后的计算属性值，我们必须去修改它的响应式依赖，因为当再次访问计算属性就会调用get方法，所以只可以通过间接的修改响应式依赖的方式去达到修改计算属性的目的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  fullName: &#123;</span><br><span class=\"line\">    cache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"侦听属性\"><a href=\"#侦听属性\" class=\"headerlink\" title=\"侦听属性\"></a>侦听属性</h3><p>　　侦听属性，就是我们需要进行监听其值的变化的属性，然后执行我们需要的操作。每当firstName或者lastName的值被修改的时候，对应的watch方法就会被调用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　对于class属性以及style属性，如果去做一些字符串拼接和计算，则会特别繁琐，故而vue对这些属性的绑定做了一些特别的处理。</p>\n<h3 id=\"计算属性-vs-方法\"><a href=\"#计算属性-vs-方法\" class=\"headerlink\" title=\"计算属性 vs 方法\"></a>计算属性 vs 方法</h3><p>　　在vue中，不只是计算属性是可以根据响应式依赖变化去重新计算求值的，我们可以通过定义一个方法返回这个计算值同样可以达到目的。但对于绝大多数情况，从直观的角度来看，使用计算属性是更好的满足这一类需求的方式，但方法的优点是可以传递参数，这样我们可以根据参数的不同编写更加通用的响应式返回值。所以从某种观点出发，方法是更为通用的”计算属性”。除此之外，方法并无cache，每次触发重新渲染的时候总会执行方法，对于一些非响应式的依赖值比如Date.now()，方法总会重新计算它们的值。这是二者的优缺点的比较。</p>\n<h3 id=\"class属性绑定\"><a href=\"#class属性绑定\" class=\"headerlink\" title=\"class属性绑定\"></a>class属性绑定</h3><p>　　直接引用vue对象中定义的对象或者手动创建一个对象亦或者是一个属性，或者是使用一个包含对象以及属性的数组:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 直接在双引号中使用js表达式返回一个对象，如果在vue对象中，isAcitve是true则存在这个class否则就是没有 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 直接引用一个对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 传递一个数组，这里是将数组里的属性的值作为标签的类的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[ind1, ind2]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 也可以将属性和对象共同使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[ind1, ind2, classObject]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在数组中还可以使用三元表达式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[isActive ? ind1: '', ind2]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cla1 cla2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"class1 class2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"class1 class2 cla1 cls2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"class1 class2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>　　<br>　　对于自定义组件，如果在定义中就已经存在一些值，那么会在其后进行追加:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 组件的定义必须放在最前面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>　　<br>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>　　<br>　　可以与普通的class属性共存，也就是可以使用class与v-bind共同完成属性的设置:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">&lt;!-- 也可以与普通的class属性共存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>　<br>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"绑定内联样式\"><a href=\"#绑定内联样式\" class=\"headerlink\" title=\"绑定内联样式\"></a>绑定内联样式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 绑定内联样式，使用对象去绑定，不过定义在vue对象中更加合适 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 定义在对象中，当然也可以使用数组来引用多个对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"styleObject\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可以为一些属性添加多重值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　解析结果:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red; font-size: 20px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: pink; font-size: 13px;\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: flex;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令缩写\"><a href=\"#命令缩写\" class=\"headerlink\" title=\"命令缩写\"></a>命令缩写</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>　　在编写这篇Vue笔记的时候，会出现Mustache标签与Nunjucks语法冲突的问题，解决方案可以查看 <a href=\"https://github.com/hexojs/hexo/issues/1930\" title=\"Vue.js 中的双大括号与 Nunjucks 解析相冲突\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>"},{"layout":"post","title":"小半，小梦大半","date":"2019-08-25T08:32:00.000Z","_content":">　　纵容着 喜欢的 讨厌的 宠溺的 厌倦的\n>　　一个个慢慢黯淡\n>\n>　　不明白 残存的 没用的 多余的 不必的\n>　　破烂也在手紧攥\n>　　　　　　　　　　　**-陈粒 «小半»**\n<!-- more -->\n\n　　不太记得是什么时候第一次听陈粒的歌了，看了看网易云歌单的创建时间2017-08-12，应该那时候是第一次觉得陈粒的歌好听吧~\n\n　　但虽然很早建立了陈粒的歌单，但她的歌大多刚开始听的时候确实不是特别喜欢，所以除了其中的某几首之外其它的歌基本不太听。可能有些歌就是需要特别的情景下才适合去听，小半这首歌刚开始只是觉得旋律比较轻快，直到某一天，在从地铁站回学校的路上，小半这首歌意外的播放在耳机里。当时就被这篇博客开头的两句给完全捕获了，喜欢的讨厌的宠溺的厌倦的都慢慢黯淡，简直就是直戳心窝。\n\n　　当时自己就在心中给陈粒贴上了一个\"哲学粒\"的标签，陈粒的词让我不禁想起兰亭集序中的及其所之既倦，情随事迁，感慨系之矣，有异曲同工之妙的感觉。听小半的时候，发现原来自己曾经沉溺过的事情如歌词所述渐渐变的黯淡，再也无法在心里感受到当时那种惊奇，即使有时候想要再去体会从前那种沉溺的感觉，但发现什么都感受不到，这时候才发现一切的喜欢都是和当时的环境和认知紧密关联的，同时也认识到，过去也只适合用来怀念，不适合再去体会。\n\n　　因为小半，陆陆续续又去认真的听了陈粒的很多作品，发现她作品中的词都或多或少的带有某些哲学的味道，但从她的歌声中听到的总是云淡风轻的感觉，这种感觉需要很认真去体会，不像很多歌曲的编曲会刻意在感情的爆发点表现的特别强烈。\n\n　　欣赏陈粒的歌曲可能真的需要一个特别的情景吧，比如最近自己在听的芳草地中的歌词:\n>　　等我的脾气 都成为道理\n\n　　以及\n\n>　　无常留给我浪费力气 等长夜付真心 在安静的芳草地\n\n　　都是用很轻松的节奏去表现，但仔细想都能感受到作词人当时那种情景和内心的强烈感受。还有无所求必满载而归里的:\n\n>　　无所求也求不得\n>　　当我昏昏欲睡 摇摇欲坠\n>　　却学会 放下错与对 是与非\n>　　无所求必满载而归\n\n　　这几句也颇有些哲学的味道，看似是放下了自己追求的东西，放下了自己的执念。但是从另外一个角度来看，得到和失去本身的区别并不大，当你顺利得到某个东西之后，你会很快习惯这个既定的事实，慢慢这个你曾经觉得很重要的东西也会变的稀松平常。而即使经过自身的努力，自己想要的东西并没有遂愿，也并不觉得可惜，因为在这个过程中你已经体会到了太多东西，这些宝贵的经历对你而言其实已经是满载而归了。故而当我们用无所求的心态去做一件事的时候，也就是现在所说的佛系的心态，无论结果如何，我们最终一定会满载而归而不会觉得失落。\n\n　　em...除了上面提到的几首，还有一首桥豆麻袋也是一首节奏很轻快，但很有意思的一首歌，比如其中的:\n\n>　　爬呀爬呀苦了自己\n>　　长路漫漫无目的\n\n　　以及\n\n>　　请再看一下\n>　　还有诈尸的蚯蚓\n\n　　这两句很好理解，不要为了目的而丢失掉寻找乐趣的心态，因为快乐是最难得的，而目的达成只是占快乐很小的一部分。个人体会而言，很多时候自己被一个目的驱使下去做一些事情，无论是主动或是被动，总容易陷入不断赶路的怪圈中，这大多是因为对结果的担忧使自己变得焦虑和不安，在焦虑和不安的驱使下我们不断努力向前赶路，忽略了仔细去感受沿途的快乐，此时占据大脑中的只有未完成的任务，以及如何尽快完成剩下任务。如果长时间处于这种模式下，整个人精神状态越来越差，对做的事也会开始感到麻木，陷入一个没有尽头的死循环，直到自己承载不了的那一天这些积累的负面因素会彻底爆发。\n\n　　目的地真的有那么重要吗？其实真的未必，目的应该更多是提供给我们一个方向，而不是约束。当真正完成目标的那一刻，一切并未发生任何改变，生活还是本来的样子，工作任务还是会断断续续来临。一个目标达成后，就如爬上一座山，就像曾经某人说过的，我也不太记得到底是谁说的，\"海那边还是海，山那边还是山\"。这时候你应该问问自己这个过程中是否真的快乐，或只是在打发生命无聊的时光而已。\n\n　　em...长路漫漫，任何人或事都可以被取代，学着多让自己开心一点吧。\n\n　　还有很多很棒的歌，比如历历万乡的开头两句就很惊艳，怪情歌的比喻也是让人哭笑不得，少有的像祝星一样直抒情情感的调调，总之很棒的一个歌手，虽然还是有很多歌我不喜欢......不过陈粒这个Artist自己是比较佩服的，在环境如此恶劣的情况下这样的歌手能出现在大众的视线里实在是太难了。\n\n　　真希望有机会可以去感受现场，19-8-25，好想听燕姿和粒粒的现场aaaaaaaaaaaaaa!!!!!!!!!!!!!!\n\n\n\n\n\n\n\n\n\n\n　　\n","source":"_posts/小半，小梦大半.md","raw":"layout: \"post\"\ntitle: \"小半，小梦大半\"\ndate: \"2019-08-25 16:32\"\ncategories:\n- [LIFE]\ntags:\n- FEELING\n---\n>　　纵容着 喜欢的 讨厌的 宠溺的 厌倦的\n>　　一个个慢慢黯淡\n>\n>　　不明白 残存的 没用的 多余的 不必的\n>　　破烂也在手紧攥\n>　　　　　　　　　　　**-陈粒 «小半»**\n<!-- more -->\n\n　　不太记得是什么时候第一次听陈粒的歌了，看了看网易云歌单的创建时间2017-08-12，应该那时候是第一次觉得陈粒的歌好听吧~\n\n　　但虽然很早建立了陈粒的歌单，但她的歌大多刚开始听的时候确实不是特别喜欢，所以除了其中的某几首之外其它的歌基本不太听。可能有些歌就是需要特别的情景下才适合去听，小半这首歌刚开始只是觉得旋律比较轻快，直到某一天，在从地铁站回学校的路上，小半这首歌意外的播放在耳机里。当时就被这篇博客开头的两句给完全捕获了，喜欢的讨厌的宠溺的厌倦的都慢慢黯淡，简直就是直戳心窝。\n\n　　当时自己就在心中给陈粒贴上了一个\"哲学粒\"的标签，陈粒的词让我不禁想起兰亭集序中的及其所之既倦，情随事迁，感慨系之矣，有异曲同工之妙的感觉。听小半的时候，发现原来自己曾经沉溺过的事情如歌词所述渐渐变的黯淡，再也无法在心里感受到当时那种惊奇，即使有时候想要再去体会从前那种沉溺的感觉，但发现什么都感受不到，这时候才发现一切的喜欢都是和当时的环境和认知紧密关联的，同时也认识到，过去也只适合用来怀念，不适合再去体会。\n\n　　因为小半，陆陆续续又去认真的听了陈粒的很多作品，发现她作品中的词都或多或少的带有某些哲学的味道，但从她的歌声中听到的总是云淡风轻的感觉，这种感觉需要很认真去体会，不像很多歌曲的编曲会刻意在感情的爆发点表现的特别强烈。\n\n　　欣赏陈粒的歌曲可能真的需要一个特别的情景吧，比如最近自己在听的芳草地中的歌词:\n>　　等我的脾气 都成为道理\n\n　　以及\n\n>　　无常留给我浪费力气 等长夜付真心 在安静的芳草地\n\n　　都是用很轻松的节奏去表现，但仔细想都能感受到作词人当时那种情景和内心的强烈感受。还有无所求必满载而归里的:\n\n>　　无所求也求不得\n>　　当我昏昏欲睡 摇摇欲坠\n>　　却学会 放下错与对 是与非\n>　　无所求必满载而归\n\n　　这几句也颇有些哲学的味道，看似是放下了自己追求的东西，放下了自己的执念。但是从另外一个角度来看，得到和失去本身的区别并不大，当你顺利得到某个东西之后，你会很快习惯这个既定的事实，慢慢这个你曾经觉得很重要的东西也会变的稀松平常。而即使经过自身的努力，自己想要的东西并没有遂愿，也并不觉得可惜，因为在这个过程中你已经体会到了太多东西，这些宝贵的经历对你而言其实已经是满载而归了。故而当我们用无所求的心态去做一件事的时候，也就是现在所说的佛系的心态，无论结果如何，我们最终一定会满载而归而不会觉得失落。\n\n　　em...除了上面提到的几首，还有一首桥豆麻袋也是一首节奏很轻快，但很有意思的一首歌，比如其中的:\n\n>　　爬呀爬呀苦了自己\n>　　长路漫漫无目的\n\n　　以及\n\n>　　请再看一下\n>　　还有诈尸的蚯蚓\n\n　　这两句很好理解，不要为了目的而丢失掉寻找乐趣的心态，因为快乐是最难得的，而目的达成只是占快乐很小的一部分。个人体会而言，很多时候自己被一个目的驱使下去做一些事情，无论是主动或是被动，总容易陷入不断赶路的怪圈中，这大多是因为对结果的担忧使自己变得焦虑和不安，在焦虑和不安的驱使下我们不断努力向前赶路，忽略了仔细去感受沿途的快乐，此时占据大脑中的只有未完成的任务，以及如何尽快完成剩下任务。如果长时间处于这种模式下，整个人精神状态越来越差，对做的事也会开始感到麻木，陷入一个没有尽头的死循环，直到自己承载不了的那一天这些积累的负面因素会彻底爆发。\n\n　　目的地真的有那么重要吗？其实真的未必，目的应该更多是提供给我们一个方向，而不是约束。当真正完成目标的那一刻，一切并未发生任何改变，生活还是本来的样子，工作任务还是会断断续续来临。一个目标达成后，就如爬上一座山，就像曾经某人说过的，我也不太记得到底是谁说的，\"海那边还是海，山那边还是山\"。这时候你应该问问自己这个过程中是否真的快乐，或只是在打发生命无聊的时光而已。\n\n　　em...长路漫漫，任何人或事都可以被取代，学着多让自己开心一点吧。\n\n　　还有很多很棒的歌，比如历历万乡的开头两句就很惊艳，怪情歌的比喻也是让人哭笑不得，少有的像祝星一样直抒情情感的调调，总之很棒的一个歌手，虽然还是有很多歌我不喜欢......不过陈粒这个Artist自己是比较佩服的，在环境如此恶劣的情况下这样的歌手能出现在大众的视线里实在是太难了。\n\n　　真希望有机会可以去感受现场，19-8-25，好想听燕姿和粒粒的现场aaaaaaaaaaaaaa!!!!!!!!!!!!!!\n\n\n\n\n\n\n\n\n\n\n　　\n","slug":"小半，小梦大半","published":1,"updated":"2019-08-25T13:52:26.689Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxaq000qfo81zain011f","content":"<blockquote>\n<p>　　纵容着 喜欢的 讨厌的 宠溺的 厌倦的<br>　　一个个慢慢黯淡</p>\n<p>　　不明白 残存的 没用的 多余的 不必的<br>　　破烂也在手紧攥<br>　　　　　　　　　　　<strong>-陈粒 «小半»</strong><br><a id=\"more\"></a></p>\n</blockquote>\n<p>　　不太记得是什么时候第一次听陈粒的歌了，看了看网易云歌单的创建时间2017-08-12，应该那时候是第一次觉得陈粒的歌好听吧~</p>\n<p>　　但虽然很早建立了陈粒的歌单，但她的歌大多刚开始听的时候确实不是特别喜欢，所以除了其中的某几首之外其它的歌基本不太听。可能有些歌就是需要特别的情景下才适合去听，小半这首歌刚开始只是觉得旋律比较轻快，直到某一天，在从地铁站回学校的路上，小半这首歌意外的播放在耳机里。当时就被这篇博客开头的两句给完全捕获了，喜欢的讨厌的宠溺的厌倦的都慢慢黯淡，简直就是直戳心窝。</p>\n<p>　　当时自己就在心中给陈粒贴上了一个”哲学粒”的标签，陈粒的词让我不禁想起兰亭集序中的及其所之既倦，情随事迁，感慨系之矣，有异曲同工之妙的感觉。听小半的时候，发现原来自己曾经沉溺过的事情如歌词所述渐渐变的黯淡，再也无法在心里感受到当时那种惊奇，即使有时候想要再去体会从前那种沉溺的感觉，但发现什么都感受不到，这时候才发现一切的喜欢都是和当时的环境和认知紧密关联的，同时也认识到，过去也只适合用来怀念，不适合再去体会。</p>\n<p>　　因为小半，陆陆续续又去认真的听了陈粒的很多作品，发现她作品中的词都或多或少的带有某些哲学的味道，但从她的歌声中听到的总是云淡风轻的感觉，这种感觉需要很认真去体会，不像很多歌曲的编曲会刻意在感情的爆发点表现的特别强烈。</p>\n<p>　　欣赏陈粒的歌曲可能真的需要一个特别的情景吧，比如最近自己在听的芳草地中的歌词:</p>\n<blockquote>\n<p>　　等我的脾气 都成为道理</p>\n</blockquote>\n<p>　　以及</p>\n<blockquote>\n<p>　　无常留给我浪费力气 等长夜付真心 在安静的芳草地</p>\n</blockquote>\n<p>　　都是用很轻松的节奏去表现，但仔细想都能感受到作词人当时那种情景和内心的强烈感受。还有无所求必满载而归里的:</p>\n<blockquote>\n<p>　　无所求也求不得<br>　　当我昏昏欲睡 摇摇欲坠<br>　　却学会 放下错与对 是与非<br>　　无所求必满载而归</p>\n</blockquote>\n<p>　　这几句也颇有些哲学的味道，看似是放下了自己追求的东西，放下了自己的执念。但是从另外一个角度来看，得到和失去本身的区别并不大，当你顺利得到某个东西之后，你会很快习惯这个既定的事实，慢慢这个你曾经觉得很重要的东西也会变的稀松平常。而即使经过自身的努力，自己想要的东西并没有遂愿，也并不觉得可惜，因为在这个过程中你已经体会到了太多东西，这些宝贵的经历对你而言其实已经是满载而归了。故而当我们用无所求的心态去做一件事的时候，也就是现在所说的佛系的心态，无论结果如何，我们最终一定会满载而归而不会觉得失落。</p>\n<p>　　em…除了上面提到的几首，还有一首桥豆麻袋也是一首节奏很轻快，但很有意思的一首歌，比如其中的:</p>\n<blockquote>\n<p>　　爬呀爬呀苦了自己<br>　　长路漫漫无目的</p>\n</blockquote>\n<p>　　以及</p>\n<blockquote>\n<p>　　请再看一下<br>　　还有诈尸的蚯蚓</p>\n</blockquote>\n<p>　　这两句很好理解，不要为了目的而丢失掉寻找乐趣的心态，因为快乐是最难得的，而目的达成只是占快乐很小的一部分。个人体会而言，很多时候自己被一个目的驱使下去做一些事情，无论是主动或是被动，总容易陷入不断赶路的怪圈中，这大多是因为对结果的担忧使自己变得焦虑和不安，在焦虑和不安的驱使下我们不断努力向前赶路，忽略了仔细去感受沿途的快乐，此时占据大脑中的只有未完成的任务，以及如何尽快完成剩下任务。如果长时间处于这种模式下，整个人精神状态越来越差，对做的事也会开始感到麻木，陷入一个没有尽头的死循环，直到自己承载不了的那一天这些积累的负面因素会彻底爆发。</p>\n<p>　　目的地真的有那么重要吗？其实真的未必，目的应该更多是提供给我们一个方向，而不是约束。当真正完成目标的那一刻，一切并未发生任何改变，生活还是本来的样子，工作任务还是会断断续续来临。一个目标达成后，就如爬上一座山，就像曾经某人说过的，我也不太记得到底是谁说的，”海那边还是海，山那边还是山”。这时候你应该问问自己这个过程中是否真的快乐，或只是在打发生命无聊的时光而已。</p>\n<p>　　em…长路漫漫，任何人或事都可以被取代，学着多让自己开心一点吧。</p>\n<p>　　还有很多很棒的歌，比如历历万乡的开头两句就很惊艳，怪情歌的比喻也是让人哭笑不得，少有的像祝星一样直抒情情感的调调，总之很棒的一个歌手，虽然还是有很多歌我不喜欢……不过陈粒这个Artist自己是比较佩服的，在环境如此恶劣的情况下这样的歌手能出现在大众的视线里实在是太难了。</p>\n<p>　　真希望有机会可以去感受现场，19-8-25，好想听燕姿和粒粒的现场aaaaaaaaaaaaaa!!!!!!!!!!!!!!</p>\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>　　纵容着 喜欢的 讨厌的 宠溺的 厌倦的<br>　　一个个慢慢黯淡</p>\n<p>　　不明白 残存的 没用的 多余的 不必的<br>　　破烂也在手紧攥<br>　　　　　　　　　　　<strong>-陈粒 «小半»</strong><br>","more":"</p>\n</blockquote>\n<p>　　不太记得是什么时候第一次听陈粒的歌了，看了看网易云歌单的创建时间2017-08-12，应该那时候是第一次觉得陈粒的歌好听吧~</p>\n<p>　　但虽然很早建立了陈粒的歌单，但她的歌大多刚开始听的时候确实不是特别喜欢，所以除了其中的某几首之外其它的歌基本不太听。可能有些歌就是需要特别的情景下才适合去听，小半这首歌刚开始只是觉得旋律比较轻快，直到某一天，在从地铁站回学校的路上，小半这首歌意外的播放在耳机里。当时就被这篇博客开头的两句给完全捕获了，喜欢的讨厌的宠溺的厌倦的都慢慢黯淡，简直就是直戳心窝。</p>\n<p>　　当时自己就在心中给陈粒贴上了一个”哲学粒”的标签，陈粒的词让我不禁想起兰亭集序中的及其所之既倦，情随事迁，感慨系之矣，有异曲同工之妙的感觉。听小半的时候，发现原来自己曾经沉溺过的事情如歌词所述渐渐变的黯淡，再也无法在心里感受到当时那种惊奇，即使有时候想要再去体会从前那种沉溺的感觉，但发现什么都感受不到，这时候才发现一切的喜欢都是和当时的环境和认知紧密关联的，同时也认识到，过去也只适合用来怀念，不适合再去体会。</p>\n<p>　　因为小半，陆陆续续又去认真的听了陈粒的很多作品，发现她作品中的词都或多或少的带有某些哲学的味道，但从她的歌声中听到的总是云淡风轻的感觉，这种感觉需要很认真去体会，不像很多歌曲的编曲会刻意在感情的爆发点表现的特别强烈。</p>\n<p>　　欣赏陈粒的歌曲可能真的需要一个特别的情景吧，比如最近自己在听的芳草地中的歌词:</p>\n<blockquote>\n<p>　　等我的脾气 都成为道理</p>\n</blockquote>\n<p>　　以及</p>\n<blockquote>\n<p>　　无常留给我浪费力气 等长夜付真心 在安静的芳草地</p>\n</blockquote>\n<p>　　都是用很轻松的节奏去表现，但仔细想都能感受到作词人当时那种情景和内心的强烈感受。还有无所求必满载而归里的:</p>\n<blockquote>\n<p>　　无所求也求不得<br>　　当我昏昏欲睡 摇摇欲坠<br>　　却学会 放下错与对 是与非<br>　　无所求必满载而归</p>\n</blockquote>\n<p>　　这几句也颇有些哲学的味道，看似是放下了自己追求的东西，放下了自己的执念。但是从另外一个角度来看，得到和失去本身的区别并不大，当你顺利得到某个东西之后，你会很快习惯这个既定的事实，慢慢这个你曾经觉得很重要的东西也会变的稀松平常。而即使经过自身的努力，自己想要的东西并没有遂愿，也并不觉得可惜，因为在这个过程中你已经体会到了太多东西，这些宝贵的经历对你而言其实已经是满载而归了。故而当我们用无所求的心态去做一件事的时候，也就是现在所说的佛系的心态，无论结果如何，我们最终一定会满载而归而不会觉得失落。</p>\n<p>　　em…除了上面提到的几首，还有一首桥豆麻袋也是一首节奏很轻快，但很有意思的一首歌，比如其中的:</p>\n<blockquote>\n<p>　　爬呀爬呀苦了自己<br>　　长路漫漫无目的</p>\n</blockquote>\n<p>　　以及</p>\n<blockquote>\n<p>　　请再看一下<br>　　还有诈尸的蚯蚓</p>\n</blockquote>\n<p>　　这两句很好理解，不要为了目的而丢失掉寻找乐趣的心态，因为快乐是最难得的，而目的达成只是占快乐很小的一部分。个人体会而言，很多时候自己被一个目的驱使下去做一些事情，无论是主动或是被动，总容易陷入不断赶路的怪圈中，这大多是因为对结果的担忧使自己变得焦虑和不安，在焦虑和不安的驱使下我们不断努力向前赶路，忽略了仔细去感受沿途的快乐，此时占据大脑中的只有未完成的任务，以及如何尽快完成剩下任务。如果长时间处于这种模式下，整个人精神状态越来越差，对做的事也会开始感到麻木，陷入一个没有尽头的死循环，直到自己承载不了的那一天这些积累的负面因素会彻底爆发。</p>\n<p>　　目的地真的有那么重要吗？其实真的未必，目的应该更多是提供给我们一个方向，而不是约束。当真正完成目标的那一刻，一切并未发生任何改变，生活还是本来的样子，工作任务还是会断断续续来临。一个目标达成后，就如爬上一座山，就像曾经某人说过的，我也不太记得到底是谁说的，”海那边还是海，山那边还是山”。这时候你应该问问自己这个过程中是否真的快乐，或只是在打发生命无聊的时光而已。</p>\n<p>　　em…长路漫漫，任何人或事都可以被取代，学着多让自己开心一点吧。</p>\n<p>　　还有很多很棒的歌，比如历历万乡的开头两句就很惊艳，怪情歌的比喻也是让人哭笑不得，少有的像祝星一样直抒情情感的调调，总之很棒的一个歌手，虽然还是有很多歌我不喜欢……不过陈粒这个Artist自己是比较佩服的，在环境如此恶劣的情况下这样的歌手能出现在大众的视线里实在是太难了。</p>\n<p>　　真希望有机会可以去感受现场，19-8-25，好想听燕姿和粒粒的现场aaaaaaaaaaaaaa!!!!!!!!!!!!!!</p>\n<p>　　</p>"},{"layout":"post","title":"上海仙人掌养殖基地之旅","date":"2019-03-03T07:17:00.000Z","thumbnail":"http://swcheng.com/images/heying.jpg","_content":"　　计划这周六去上海仙人掌养殖基地看看，上网搜索了一下，然后一个叫做上海金欣仙人掌种植专业合作社的名字出现在我的视野里。在高德地图上搜索位置，发现在金山区，已经基本属于上海最南部分靠海的区域，从学校出发到那里，差不多是横跨了整个上海市，｢(ﾟﾍﾟ)。我们可以从地图上看出来到底这两个地方距离到底有多远...\n<!-- more -->\n![](/images/xianren_distance.jpg \"两地距离\")\n\n　　然后昨天也正好下雨，约好朋友九点一起去的，但早上九点给人家发消息打电话都没有回应...估计是把这事儿忘了昨天玩的太晚然后还没起床，我就等了半个小时，打了三个电话，都没人接。看着外面下着下雨，约好的朋友又没来，看着室友都还在睡觉，心里有点想放弃，觉得要不今天当个咸鱼宅在宿舍得了，但是这个念头马上被自己否决了，想起自己给自己定的目标周六日一定不学习，并且按照自己的性格，这么快放弃自己都要鄙视自己。于是哼着\"环游世界，不在乎明天天气\"开心的出发了啦啦啦  o(＊＾▽＾＊)o♪\n\n　　但自己没有听从高德地图的指示，内心觉得高德地图上指示的纯公交线路肯定慢的一批。所以我按照目的地的位置，又参照了地铁线路图，我决先乘8号线-1号线-5号线，到上海最南的一个地铁站奉贤新城，然后到了奉贤新城再乘公交去目的地。但是我打到奉贤新城的时候，已经是十二点了，于是决定先吃个饭再出发...本来以为奉贤新城肯定能找到吃饭的地方，但是让我感到意外的是这里虽然是周六，但没几个人出现在应该是最繁华的地方，看了看地铁站旁边的商业广场，居然都没有开业...我心想这是什么鬼...于是自己只好导航到附近的永和大王，但按照地图导航也走了1km才打目的地，看着空旷的地方，街道上都没几个人，旁边的房子倒是建的挺不错的。吃完饭看看时间已经是一点了，于是又按照地图上的导航，两次换乘公交，在公交车上睡了一觉，然后醒了发现时间已经到了差不多两点多，这会儿终于快到目的车站了。\n\n　　下了车，再按照地图上的指示，左转右转终于到了目的地，看着眼前本应该是一片仙人掌种植基地的地址但却是一片荒地在我眼前...那种被高德地图欺骗的感觉涌上心头...心中默念\"去TM的篮球梦\"。没法只好一路问这个村的村民以及在最后问了一个保安大哥之后终于找到了我想到的地方，当自己看到标牌以及前面的种植大棚的时候抑郁不住激动心中的心情赶紧拍个照。\n\n![](/images/destination_xianren.jpg \"目的地\")\n\n![](/images/xianren_brand.jpg \"仙人掌基地标语\")\n\n![](/images/dapeng.jpg \"种植大棚\")\n\n　　刚进去被门口叫的很凶的狗吓得够呛，但那狗很奇怪，叫的很凶但却一点都没有要咬人的意思，于是胆战心惊的走过狗之后继续往里走，结果又是一群狗，这回是没栓链子的一群狗，我不敢往前走了，就大喊向前大喊\"有人吗\"。看见一个人从里面出来我顿时松了一口气，心想总算是找到组织了。\n\n　　朱大哥一个人守在种植基地，人很好也很热情，刚进去就给我倒了杯仙人掌泡的水，然后就开始聊天。开始和我讲仙人掌是如何治好他的病的，当上海的四个专家都说他是没法恢复到之前的状态的时候，并且花了四五十w都没法治好的病，但是就是因为仙人掌，他的病神奇的得以完全康复，而且现在看不出与普通人有任何不同。同时也是因为这个原因，大哥毫不怀疑的决定自己种植仙人掌，这一种就是十七八年。\n\n　　我没坐下多久，随后又有两个人来到了这里，和我来玩的目的不同，他们是来这里了解仙人掌的种植以及这里的发展情况的。那天聊了很长时间，大概内容是朱大哥与仙人掌结缘到自己建立仙人掌养殖基地的一些事情，听闻了朱大哥从决定种植仙人掌创业过程遇到的种种经历之后，心中对于他只有敬佩能够形容，我觉得他用自己的行动完美诠释了仙人掌的花语，坚强而坚定。我在想有几个人可以做到将房子和车卖掉去种仙人掌，体会那种没钱所有人都不愿意借钱给而当你有钱的时候大家都争着借钱给你的落差感，在付出了400-500w的投入之后没有看到收获，甚至就连合作的两个伙伴都选择离去，但他依然选择继续走下去的那份坚定与决绝，我觉得可以毫不夸张的说他将自己的生命与仙人掌绑定在了一起。抛开这些经历不说，还让我感到佩服的是朱大哥对于品格的那种坚守，即便选择没钱也绝不做违反自己原则违背良心的事情，我觉得在我们这个时代这种品格真的已经不多了。\n\n　　其实我不想去抨击这个世界说人们有多虚伪虚伪，为了利益可以多么没有底线，但不想也不得不去承认，这确实是一个事实。但我个人觉得无论世界怎样好或者怎样坏，一定要恪守自己的原则，即使恪守原则是要付出代价，但我宁愿想真实一些也不愿用虚伪换回所谓的尊严。其实很多事大家都是心知肚明，只是没有人有勇气去做那个打破规则的人，也害怕那个代价自己难以承受，每个人都会做出自己的选择，但是我觉得为了自己的利益而不考虑他人情况的事情自己真的做不出。\n\n　　有时候我有点感叹的想，好像我们面前的一些公众人物如刘强东、马云、王健林等的言论被人拿过来炒来炒去，媒体总是会对这些人投入了过多而从不愿对那些真正选择坚守品格但却经济拮据的人投以目光。我有时候在想这个时代衡量一个人是否被人尊敬的标准似乎成为了财富的多少，我承认这些人能够成功确实不乏有他们的个人魅力，不然也没法成为现在的巨头而不是其它人，而且这些能够如此成功的人我认为都是有着时势造英雄的因素，因为有很多人比他们还要努力，比他们还要值得尊敬，所以对于他们仍需要以客观的态度来看。我甚至觉得他们在公众面前说的很多话，自己本身都做不到，有时候可能是说的太多，反而失去了质实的那颗心。\n\n　　这个世界虽然算不上特别好，但也算不上特别坏，不要去抱怨不公，只要肯坚持努力，机会总是在不远处等待着你。我只希望自己在每次做出选择的时候，能够做到问心无愧，有时候太在意别人的言论只会让自己更难受，自己在心里给自己一个答案就行了，剩下的就交给时间吧。\n\n　　PS:最后附上我和朱大哥的合影hhh。\n\n![](/images/heying.jpg \"合影\")\n\n\n\n\n","source":"_posts/上海仙人掌养殖基地之旅.md","raw":"layout: \"post\"\ntitle: \"上海仙人掌养殖基地之旅\"\ndate: \"2019-03-03 15:17\"\ncategories:\n- [LIFE]\ntags:\n- STROLL\nthumbnail: http://swcheng.com/images/heying.jpg\n---\n　　计划这周六去上海仙人掌养殖基地看看，上网搜索了一下，然后一个叫做上海金欣仙人掌种植专业合作社的名字出现在我的视野里。在高德地图上搜索位置，发现在金山区，已经基本属于上海最南部分靠海的区域，从学校出发到那里，差不多是横跨了整个上海市，｢(ﾟﾍﾟ)。我们可以从地图上看出来到底这两个地方距离到底有多远...\n<!-- more -->\n![](/images/xianren_distance.jpg \"两地距离\")\n\n　　然后昨天也正好下雨，约好朋友九点一起去的，但早上九点给人家发消息打电话都没有回应...估计是把这事儿忘了昨天玩的太晚然后还没起床，我就等了半个小时，打了三个电话，都没人接。看着外面下着下雨，约好的朋友又没来，看着室友都还在睡觉，心里有点想放弃，觉得要不今天当个咸鱼宅在宿舍得了，但是这个念头马上被自己否决了，想起自己给自己定的目标周六日一定不学习，并且按照自己的性格，这么快放弃自己都要鄙视自己。于是哼着\"环游世界，不在乎明天天气\"开心的出发了啦啦啦  o(＊＾▽＾＊)o♪\n\n　　但自己没有听从高德地图的指示，内心觉得高德地图上指示的纯公交线路肯定慢的一批。所以我按照目的地的位置，又参照了地铁线路图，我决先乘8号线-1号线-5号线，到上海最南的一个地铁站奉贤新城，然后到了奉贤新城再乘公交去目的地。但是我打到奉贤新城的时候，已经是十二点了，于是决定先吃个饭再出发...本来以为奉贤新城肯定能找到吃饭的地方，但是让我感到意外的是这里虽然是周六，但没几个人出现在应该是最繁华的地方，看了看地铁站旁边的商业广场，居然都没有开业...我心想这是什么鬼...于是自己只好导航到附近的永和大王，但按照地图导航也走了1km才打目的地，看着空旷的地方，街道上都没几个人，旁边的房子倒是建的挺不错的。吃完饭看看时间已经是一点了，于是又按照地图上的导航，两次换乘公交，在公交车上睡了一觉，然后醒了发现时间已经到了差不多两点多，这会儿终于快到目的车站了。\n\n　　下了车，再按照地图上的指示，左转右转终于到了目的地，看着眼前本应该是一片仙人掌种植基地的地址但却是一片荒地在我眼前...那种被高德地图欺骗的感觉涌上心头...心中默念\"去TM的篮球梦\"。没法只好一路问这个村的村民以及在最后问了一个保安大哥之后终于找到了我想到的地方，当自己看到标牌以及前面的种植大棚的时候抑郁不住激动心中的心情赶紧拍个照。\n\n![](/images/destination_xianren.jpg \"目的地\")\n\n![](/images/xianren_brand.jpg \"仙人掌基地标语\")\n\n![](/images/dapeng.jpg \"种植大棚\")\n\n　　刚进去被门口叫的很凶的狗吓得够呛，但那狗很奇怪，叫的很凶但却一点都没有要咬人的意思，于是胆战心惊的走过狗之后继续往里走，结果又是一群狗，这回是没栓链子的一群狗，我不敢往前走了，就大喊向前大喊\"有人吗\"。看见一个人从里面出来我顿时松了一口气，心想总算是找到组织了。\n\n　　朱大哥一个人守在种植基地，人很好也很热情，刚进去就给我倒了杯仙人掌泡的水，然后就开始聊天。开始和我讲仙人掌是如何治好他的病的，当上海的四个专家都说他是没法恢复到之前的状态的时候，并且花了四五十w都没法治好的病，但是就是因为仙人掌，他的病神奇的得以完全康复，而且现在看不出与普通人有任何不同。同时也是因为这个原因，大哥毫不怀疑的决定自己种植仙人掌，这一种就是十七八年。\n\n　　我没坐下多久，随后又有两个人来到了这里，和我来玩的目的不同，他们是来这里了解仙人掌的种植以及这里的发展情况的。那天聊了很长时间，大概内容是朱大哥与仙人掌结缘到自己建立仙人掌养殖基地的一些事情，听闻了朱大哥从决定种植仙人掌创业过程遇到的种种经历之后，心中对于他只有敬佩能够形容，我觉得他用自己的行动完美诠释了仙人掌的花语，坚强而坚定。我在想有几个人可以做到将房子和车卖掉去种仙人掌，体会那种没钱所有人都不愿意借钱给而当你有钱的时候大家都争着借钱给你的落差感，在付出了400-500w的投入之后没有看到收获，甚至就连合作的两个伙伴都选择离去，但他依然选择继续走下去的那份坚定与决绝，我觉得可以毫不夸张的说他将自己的生命与仙人掌绑定在了一起。抛开这些经历不说，还让我感到佩服的是朱大哥对于品格的那种坚守，即便选择没钱也绝不做违反自己原则违背良心的事情，我觉得在我们这个时代这种品格真的已经不多了。\n\n　　其实我不想去抨击这个世界说人们有多虚伪虚伪，为了利益可以多么没有底线，但不想也不得不去承认，这确实是一个事实。但我个人觉得无论世界怎样好或者怎样坏，一定要恪守自己的原则，即使恪守原则是要付出代价，但我宁愿想真实一些也不愿用虚伪换回所谓的尊严。其实很多事大家都是心知肚明，只是没有人有勇气去做那个打破规则的人，也害怕那个代价自己难以承受，每个人都会做出自己的选择，但是我觉得为了自己的利益而不考虑他人情况的事情自己真的做不出。\n\n　　有时候我有点感叹的想，好像我们面前的一些公众人物如刘强东、马云、王健林等的言论被人拿过来炒来炒去，媒体总是会对这些人投入了过多而从不愿对那些真正选择坚守品格但却经济拮据的人投以目光。我有时候在想这个时代衡量一个人是否被人尊敬的标准似乎成为了财富的多少，我承认这些人能够成功确实不乏有他们的个人魅力，不然也没法成为现在的巨头而不是其它人，而且这些能够如此成功的人我认为都是有着时势造英雄的因素，因为有很多人比他们还要努力，比他们还要值得尊敬，所以对于他们仍需要以客观的态度来看。我甚至觉得他们在公众面前说的很多话，自己本身都做不到，有时候可能是说的太多，反而失去了质实的那颗心。\n\n　　这个世界虽然算不上特别好，但也算不上特别坏，不要去抱怨不公，只要肯坚持努力，机会总是在不远处等待着你。我只希望自己在每次做出选择的时候，能够做到问心无愧，有时候太在意别人的言论只会让自己更难受，自己在心里给自己一个答案就行了，剩下的就交给时间吧。\n\n　　PS:最后附上我和朱大哥的合影hhh。\n\n![](/images/heying.jpg \"合影\")\n\n\n\n\n","slug":"上海仙人掌养殖基地之旅","published":1,"updated":"2019-05-19T09:42:05.864Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxar000sfo81wvzpiti2","content":"<p>　　计划这周六去上海仙人掌养殖基地看看，上网搜索了一下，然后一个叫做上海金欣仙人掌种植专业合作社的名字出现在我的视野里。在高德地图上搜索位置，发现在金山区，已经基本属于上海最南部分靠海的区域，从学校出发到那里，差不多是横跨了整个上海市，｢(ﾟﾍﾟ)。我们可以从地图上看出来到底这两个地方距离到底有多远…<br><a id=\"more\"></a><br><img src=\"/images/xianren_distance.jpg\" alt=\"\" title=\"两地距离\"></p>\n<p>　　然后昨天也正好下雨，约好朋友九点一起去的，但早上九点给人家发消息打电话都没有回应…估计是把这事儿忘了昨天玩的太晚然后还没起床，我就等了半个小时，打了三个电话，都没人接。看着外面下着下雨，约好的朋友又没来，看着室友都还在睡觉，心里有点想放弃，觉得要不今天当个咸鱼宅在宿舍得了，但是这个念头马上被自己否决了，想起自己给自己定的目标周六日一定不学习，并且按照自己的性格，这么快放弃自己都要鄙视自己。于是哼着”环游世界，不在乎明天天气”开心的出发了啦啦啦  o(＊＾▽＾＊)o♪</p>\n<p>　　但自己没有听从高德地图的指示，内心觉得高德地图上指示的纯公交线路肯定慢的一批。所以我按照目的地的位置，又参照了地铁线路图，我决先乘8号线-1号线-5号线，到上海最南的一个地铁站奉贤新城，然后到了奉贤新城再乘公交去目的地。但是我打到奉贤新城的时候，已经是十二点了，于是决定先吃个饭再出发…本来以为奉贤新城肯定能找到吃饭的地方，但是让我感到意外的是这里虽然是周六，但没几个人出现在应该是最繁华的地方，看了看地铁站旁边的商业广场，居然都没有开业…我心想这是什么鬼…于是自己只好导航到附近的永和大王，但按照地图导航也走了1km才打目的地，看着空旷的地方，街道上都没几个人，旁边的房子倒是建的挺不错的。吃完饭看看时间已经是一点了，于是又按照地图上的导航，两次换乘公交，在公交车上睡了一觉，然后醒了发现时间已经到了差不多两点多，这会儿终于快到目的车站了。</p>\n<p>　　下了车，再按照地图上的指示，左转右转终于到了目的地，看着眼前本应该是一片仙人掌种植基地的地址但却是一片荒地在我眼前…那种被高德地图欺骗的感觉涌上心头…心中默念”去TM的篮球梦”。没法只好一路问这个村的村民以及在最后问了一个保安大哥之后终于找到了我想到的地方，当自己看到标牌以及前面的种植大棚的时候抑郁不住激动心中的心情赶紧拍个照。</p>\n<p><img src=\"/images/destination_xianren.jpg\" alt=\"\" title=\"目的地\"></p>\n<p><img src=\"/images/xianren_brand.jpg\" alt=\"\" title=\"仙人掌基地标语\"></p>\n<p><img src=\"/images/dapeng.jpg\" alt=\"\" title=\"种植大棚\"></p>\n<p>　　刚进去被门口叫的很凶的狗吓得够呛，但那狗很奇怪，叫的很凶但却一点都没有要咬人的意思，于是胆战心惊的走过狗之后继续往里走，结果又是一群狗，这回是没栓链子的一群狗，我不敢往前走了，就大喊向前大喊”有人吗”。看见一个人从里面出来我顿时松了一口气，心想总算是找到组织了。</p>\n<p>　　朱大哥一个人守在种植基地，人很好也很热情，刚进去就给我倒了杯仙人掌泡的水，然后就开始聊天。开始和我讲仙人掌是如何治好他的病的，当上海的四个专家都说他是没法恢复到之前的状态的时候，并且花了四五十w都没法治好的病，但是就是因为仙人掌，他的病神奇的得以完全康复，而且现在看不出与普通人有任何不同。同时也是因为这个原因，大哥毫不怀疑的决定自己种植仙人掌，这一种就是十七八年。</p>\n<p>　　我没坐下多久，随后又有两个人来到了这里，和我来玩的目的不同，他们是来这里了解仙人掌的种植以及这里的发展情况的。那天聊了很长时间，大概内容是朱大哥与仙人掌结缘到自己建立仙人掌养殖基地的一些事情，听闻了朱大哥从决定种植仙人掌创业过程遇到的种种经历之后，心中对于他只有敬佩能够形容，我觉得他用自己的行动完美诠释了仙人掌的花语，坚强而坚定。我在想有几个人可以做到将房子和车卖掉去种仙人掌，体会那种没钱所有人都不愿意借钱给而当你有钱的时候大家都争着借钱给你的落差感，在付出了400-500w的投入之后没有看到收获，甚至就连合作的两个伙伴都选择离去，但他依然选择继续走下去的那份坚定与决绝，我觉得可以毫不夸张的说他将自己的生命与仙人掌绑定在了一起。抛开这些经历不说，还让我感到佩服的是朱大哥对于品格的那种坚守，即便选择没钱也绝不做违反自己原则违背良心的事情，我觉得在我们这个时代这种品格真的已经不多了。</p>\n<p>　　其实我不想去抨击这个世界说人们有多虚伪虚伪，为了利益可以多么没有底线，但不想也不得不去承认，这确实是一个事实。但我个人觉得无论世界怎样好或者怎样坏，一定要恪守自己的原则，即使恪守原则是要付出代价，但我宁愿想真实一些也不愿用虚伪换回所谓的尊严。其实很多事大家都是心知肚明，只是没有人有勇气去做那个打破规则的人，也害怕那个代价自己难以承受，每个人都会做出自己的选择，但是我觉得为了自己的利益而不考虑他人情况的事情自己真的做不出。</p>\n<p>　　有时候我有点感叹的想，好像我们面前的一些公众人物如刘强东、马云、王健林等的言论被人拿过来炒来炒去，媒体总是会对这些人投入了过多而从不愿对那些真正选择坚守品格但却经济拮据的人投以目光。我有时候在想这个时代衡量一个人是否被人尊敬的标准似乎成为了财富的多少，我承认这些人能够成功确实不乏有他们的个人魅力，不然也没法成为现在的巨头而不是其它人，而且这些能够如此成功的人我认为都是有着时势造英雄的因素，因为有很多人比他们还要努力，比他们还要值得尊敬，所以对于他们仍需要以客观的态度来看。我甚至觉得他们在公众面前说的很多话，自己本身都做不到，有时候可能是说的太多，反而失去了质实的那颗心。</p>\n<p>　　这个世界虽然算不上特别好，但也算不上特别坏，不要去抱怨不公，只要肯坚持努力，机会总是在不远处等待着你。我只希望自己在每次做出选择的时候，能够做到问心无愧，有时候太在意别人的言论只会让自己更难受，自己在心里给自己一个答案就行了，剩下的就交给时间吧。</p>\n<p>　　PS:最后附上我和朱大哥的合影hhh。</p>\n<p><img src=\"/images/heying.jpg\" alt=\"\" title=\"合影\"></p>\n","site":{"data":{}},"excerpt":"<p>　　计划这周六去上海仙人掌养殖基地看看，上网搜索了一下，然后一个叫做上海金欣仙人掌种植专业合作社的名字出现在我的视野里。在高德地图上搜索位置，发现在金山区，已经基本属于上海最南部分靠海的区域，从学校出发到那里，差不多是横跨了整个上海市，｢(ﾟﾍﾟ)。我们可以从地图上看出来到底这两个地方距离到底有多远…<br>","more":"<br><img src=\"/images/xianren_distance.jpg\" alt=\"\" title=\"两地距离\"></p>\n<p>　　然后昨天也正好下雨，约好朋友九点一起去的，但早上九点给人家发消息打电话都没有回应…估计是把这事儿忘了昨天玩的太晚然后还没起床，我就等了半个小时，打了三个电话，都没人接。看着外面下着下雨，约好的朋友又没来，看着室友都还在睡觉，心里有点想放弃，觉得要不今天当个咸鱼宅在宿舍得了，但是这个念头马上被自己否决了，想起自己给自己定的目标周六日一定不学习，并且按照自己的性格，这么快放弃自己都要鄙视自己。于是哼着”环游世界，不在乎明天天气”开心的出发了啦啦啦  o(＊＾▽＾＊)o♪</p>\n<p>　　但自己没有听从高德地图的指示，内心觉得高德地图上指示的纯公交线路肯定慢的一批。所以我按照目的地的位置，又参照了地铁线路图，我决先乘8号线-1号线-5号线，到上海最南的一个地铁站奉贤新城，然后到了奉贤新城再乘公交去目的地。但是我打到奉贤新城的时候，已经是十二点了，于是决定先吃个饭再出发…本来以为奉贤新城肯定能找到吃饭的地方，但是让我感到意外的是这里虽然是周六，但没几个人出现在应该是最繁华的地方，看了看地铁站旁边的商业广场，居然都没有开业…我心想这是什么鬼…于是自己只好导航到附近的永和大王，但按照地图导航也走了1km才打目的地，看着空旷的地方，街道上都没几个人，旁边的房子倒是建的挺不错的。吃完饭看看时间已经是一点了，于是又按照地图上的导航，两次换乘公交，在公交车上睡了一觉，然后醒了发现时间已经到了差不多两点多，这会儿终于快到目的车站了。</p>\n<p>　　下了车，再按照地图上的指示，左转右转终于到了目的地，看着眼前本应该是一片仙人掌种植基地的地址但却是一片荒地在我眼前…那种被高德地图欺骗的感觉涌上心头…心中默念”去TM的篮球梦”。没法只好一路问这个村的村民以及在最后问了一个保安大哥之后终于找到了我想到的地方，当自己看到标牌以及前面的种植大棚的时候抑郁不住激动心中的心情赶紧拍个照。</p>\n<p><img src=\"/images/destination_xianren.jpg\" alt=\"\" title=\"目的地\"></p>\n<p><img src=\"/images/xianren_brand.jpg\" alt=\"\" title=\"仙人掌基地标语\"></p>\n<p><img src=\"/images/dapeng.jpg\" alt=\"\" title=\"种植大棚\"></p>\n<p>　　刚进去被门口叫的很凶的狗吓得够呛，但那狗很奇怪，叫的很凶但却一点都没有要咬人的意思，于是胆战心惊的走过狗之后继续往里走，结果又是一群狗，这回是没栓链子的一群狗，我不敢往前走了，就大喊向前大喊”有人吗”。看见一个人从里面出来我顿时松了一口气，心想总算是找到组织了。</p>\n<p>　　朱大哥一个人守在种植基地，人很好也很热情，刚进去就给我倒了杯仙人掌泡的水，然后就开始聊天。开始和我讲仙人掌是如何治好他的病的，当上海的四个专家都说他是没法恢复到之前的状态的时候，并且花了四五十w都没法治好的病，但是就是因为仙人掌，他的病神奇的得以完全康复，而且现在看不出与普通人有任何不同。同时也是因为这个原因，大哥毫不怀疑的决定自己种植仙人掌，这一种就是十七八年。</p>\n<p>　　我没坐下多久，随后又有两个人来到了这里，和我来玩的目的不同，他们是来这里了解仙人掌的种植以及这里的发展情况的。那天聊了很长时间，大概内容是朱大哥与仙人掌结缘到自己建立仙人掌养殖基地的一些事情，听闻了朱大哥从决定种植仙人掌创业过程遇到的种种经历之后，心中对于他只有敬佩能够形容，我觉得他用自己的行动完美诠释了仙人掌的花语，坚强而坚定。我在想有几个人可以做到将房子和车卖掉去种仙人掌，体会那种没钱所有人都不愿意借钱给而当你有钱的时候大家都争着借钱给你的落差感，在付出了400-500w的投入之后没有看到收获，甚至就连合作的两个伙伴都选择离去，但他依然选择继续走下去的那份坚定与决绝，我觉得可以毫不夸张的说他将自己的生命与仙人掌绑定在了一起。抛开这些经历不说，还让我感到佩服的是朱大哥对于品格的那种坚守，即便选择没钱也绝不做违反自己原则违背良心的事情，我觉得在我们这个时代这种品格真的已经不多了。</p>\n<p>　　其实我不想去抨击这个世界说人们有多虚伪虚伪，为了利益可以多么没有底线，但不想也不得不去承认，这确实是一个事实。但我个人觉得无论世界怎样好或者怎样坏，一定要恪守自己的原则，即使恪守原则是要付出代价，但我宁愿想真实一些也不愿用虚伪换回所谓的尊严。其实很多事大家都是心知肚明，只是没有人有勇气去做那个打破规则的人，也害怕那个代价自己难以承受，每个人都会做出自己的选择，但是我觉得为了自己的利益而不考虑他人情况的事情自己真的做不出。</p>\n<p>　　有时候我有点感叹的想，好像我们面前的一些公众人物如刘强东、马云、王健林等的言论被人拿过来炒来炒去，媒体总是会对这些人投入了过多而从不愿对那些真正选择坚守品格但却经济拮据的人投以目光。我有时候在想这个时代衡量一个人是否被人尊敬的标准似乎成为了财富的多少，我承认这些人能够成功确实不乏有他们的个人魅力，不然也没法成为现在的巨头而不是其它人，而且这些能够如此成功的人我认为都是有着时势造英雄的因素，因为有很多人比他们还要努力，比他们还要值得尊敬，所以对于他们仍需要以客观的态度来看。我甚至觉得他们在公众面前说的很多话，自己本身都做不到，有时候可能是说的太多，反而失去了质实的那颗心。</p>\n<p>　　这个世界虽然算不上特别好，但也算不上特别坏，不要去抱怨不公，只要肯坚持努力，机会总是在不远处等待着你。我只希望自己在每次做出选择的时候，能够做到问心无愧，有时候太在意别人的言论只会让自己更难受，自己在心里给自己一个答案就行了，剩下的就交给时间吧。</p>\n<p>　　PS:最后附上我和朱大哥的合影hhh。</p>\n<p><img src=\"/images/heying.jpg\" alt=\"\" title=\"合影\"></p>"},{"layout":"post","title":"开启新的运动,Yeah!","date":"2019-02-23T11:05:00.000Z","thumbnail":"http://swcheng.com/images/myhuaban.jpg","_content":"　　不知道从什么时候起，觉得篮球好像很难点燃自己的热情了，也许是经常自己一个人和不同的路人打球，每个路人对待打球的态度不同，有的打球认真，有的打球随意，很难找到那种归属感。刚开始还好，但这样打的时间一长，就会经常打球感到无所谓的感觉，完全失去了当时打球的竞技的感觉。也就渐渐失去了对篮球的认真，变成了所谓的养生篮球，讲的直白点就是变成了篮球场上失去梦想的咸鱼。\n<!-- more -->\n\n　　在今年2月13号的一天，那天下着雨，按照常理来说，又没有室内场地，是不可能去打球的，但我表弟明天就要从我家回去了，如果这次不和他打球就今年就没有机会一起和他打球了，所以我们决定即使下雨也还是要去打球。\n\n![](/images/lanqiu.jpg)\n\n　　我对篮球开始感兴趣的时候是在高一的时候，那时候和家里因为学习上的原因经常发生矛盾和争吵，不喜欢回家，和一个家在外县的同学也是刚好一起在宿舍，他提议我们去打球，我觉得打球是个新鲜事情对于我来说，就很高兴的答应了。自从那次打球以后，自己就不自觉的爱上了那种球入框的感觉，开始逐渐走上打球的不归路。这一打就是一个整个高中和大学，但是我打球打的晚，不像他们初中或小学就开始了打球这样，所以自己属于最菜的那种，也就是所谓的黑铁选手，(✪ω✪)。\n\n　　所以作为黑铁和一群白银黄金选手进行游戏是经常遭受冷落的，这体现在不仅是在球场上很少拿到球，甚至有时候是遭到一些比较激进的人的言语攻击，那时候别提心里有多难受了。所以自己没事儿就去球场练球，想要提高一下自己的篮球基本功，但都是自己一个人没头脑的练习，其实从现在看来，练习篮球最后还是系统的有方法的练习，这样才能达到比较好的训练效果。但自己也没想那么多，就凭着热爱去不断练习感觉呗，一个人也能玩的特别高兴，记得是在高二的那年暑假，自己没事儿就去学校篮球场打球，即使下雨，也是高高兴兴的要去打球。印象比较深的是那个暑假自己在雨中打球第二天那个篮球就起了个包，之后那个包越来越大，很快那个球就根本没法打了，那也是自己寿命最短的一个球。\n\n　　在13号那天自己在下了雨的场地打球，回忆起之前同样在雨中打球的感觉，好像篮球带给自己的快乐越来越少，已经完全体会不到这个运动的乐趣了。身体冷心也冷，在一番思想斗争之后我决定放弃篮球，寻找新的运动，开启一个新的学习新的挑战想要寻求新的体验。那张照片也是为了纪念自己的一个结束以及寻找下一个开始。\n\n　　不打篮球该选择什么作为新的作为新的运动呢，想起上次在学校玩的滑板，觉得挺难的，摔了很多次都没能掌握到那个平衡点，一旦速度上去之后就往后摔倒。但看别人能够玩的那么好，那么顺畅，就觉得特别舒服，而且觉得这是一个特别酷的运动，就一个人在那里玩，不用去理会周围人的眼光，一种天涯任我行的感觉。所以最终决定玩滑板。既然决定好了，那么就是实施的过程了，查到了号称上海最大的滑板店铺聚点滑板，就开心的跑过去了 (๑¯∀¯๑)\n\n　　那是一个地下室，坐落在常熟路，从学校过去大概要花一个多小时，那个地下室要拐好几个路口才能顺利走到目的地，但是进去的路口不会让你觉得很单调，周围都有图案让你觉得来对了地方，走过最后一个路标终于看到了目的地。(｡◕ˇ∀ˇ◕)\n\n![](/images/huabandian.jpg)\n\n　　还没进入店铺就是琳琅满目的滑板，ヽ(￣▽￣)ﾉ。其实我有些担心会找不到自己喜欢的板面，但是还是细心的去浏览每一个滑板，希望找到自己心仪的那块板。进来没看多久，热情的老板就上来询问，知道我是初学者然后就开始给我介绍两种板，一种是代步类型，一种是带一些技术的板，作为一个有一丢丢梦想的萌新，当然不能选择代步式啦，果断选择了第二种。第二种的话，可以选择组装类别的也可以选择已经是成品的。组装的好处是可以自己DIY，但价格会稍微贵一些，成品的话就会选择的空间很小，板面也是只能选择现有的那些。思考了一会儿，我觉得还是选择组装的吧，毕竟后续想再倒腾也可以再在原有的基础上改装嘛，只要价格不要太夸张就没问题。\n\n　　既然选择了组装，就要开始选择一个板面，然后就是轮子类型和轴承类型，这是主要的东西，我选择了我比较喜欢的板面，然后后面的轮子以及轴承都是选择差不多店里最便宜的产品，毕竟作为学生党来说经济能力有限，而且对于一个菜鸡来说硬件上的区别影响微乎其微，所以想着能少则少。想起自己昨天还网购了一批东西，心想这个月肯定是要勒紧裤腰带过日子了。 (〃´皿`)\n　　\n　　em......少吃点少花点没事，反正也饿不死...开心的是自己终于组装好自己的第一块滑板了，duangduangduan！！！\n\n![](/images/myhuaban.jpg)\n\n　　感觉玩滑板不仅是对自己技术上的挑战，更多对于自己而言会是心理上的挑战，祝自己玩的嗨皮啦啦啦 =.=\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/开启新的运动,Yeah!.md","raw":"layout: \"post\"\ntitle: \"开启新的运动,Yeah!\"\ndate: \"2019-02-23 19:05\"\ncategories:\n- [LIFE]\ntags:\n- SPORTS\nthumbnail: http://swcheng.com/images/myhuaban.jpg\n---\n　　不知道从什么时候起，觉得篮球好像很难点燃自己的热情了，也许是经常自己一个人和不同的路人打球，每个路人对待打球的态度不同，有的打球认真，有的打球随意，很难找到那种归属感。刚开始还好，但这样打的时间一长，就会经常打球感到无所谓的感觉，完全失去了当时打球的竞技的感觉。也就渐渐失去了对篮球的认真，变成了所谓的养生篮球，讲的直白点就是变成了篮球场上失去梦想的咸鱼。\n<!-- more -->\n\n　　在今年2月13号的一天，那天下着雨，按照常理来说，又没有室内场地，是不可能去打球的，但我表弟明天就要从我家回去了，如果这次不和他打球就今年就没有机会一起和他打球了，所以我们决定即使下雨也还是要去打球。\n\n![](/images/lanqiu.jpg)\n\n　　我对篮球开始感兴趣的时候是在高一的时候，那时候和家里因为学习上的原因经常发生矛盾和争吵，不喜欢回家，和一个家在外县的同学也是刚好一起在宿舍，他提议我们去打球，我觉得打球是个新鲜事情对于我来说，就很高兴的答应了。自从那次打球以后，自己就不自觉的爱上了那种球入框的感觉，开始逐渐走上打球的不归路。这一打就是一个整个高中和大学，但是我打球打的晚，不像他们初中或小学就开始了打球这样，所以自己属于最菜的那种，也就是所谓的黑铁选手，(✪ω✪)。\n\n　　所以作为黑铁和一群白银黄金选手进行游戏是经常遭受冷落的，这体现在不仅是在球场上很少拿到球，甚至有时候是遭到一些比较激进的人的言语攻击，那时候别提心里有多难受了。所以自己没事儿就去球场练球，想要提高一下自己的篮球基本功，但都是自己一个人没头脑的练习，其实从现在看来，练习篮球最后还是系统的有方法的练习，这样才能达到比较好的训练效果。但自己也没想那么多，就凭着热爱去不断练习感觉呗，一个人也能玩的特别高兴，记得是在高二的那年暑假，自己没事儿就去学校篮球场打球，即使下雨，也是高高兴兴的要去打球。印象比较深的是那个暑假自己在雨中打球第二天那个篮球就起了个包，之后那个包越来越大，很快那个球就根本没法打了，那也是自己寿命最短的一个球。\n\n　　在13号那天自己在下了雨的场地打球，回忆起之前同样在雨中打球的感觉，好像篮球带给自己的快乐越来越少，已经完全体会不到这个运动的乐趣了。身体冷心也冷，在一番思想斗争之后我决定放弃篮球，寻找新的运动，开启一个新的学习新的挑战想要寻求新的体验。那张照片也是为了纪念自己的一个结束以及寻找下一个开始。\n\n　　不打篮球该选择什么作为新的作为新的运动呢，想起上次在学校玩的滑板，觉得挺难的，摔了很多次都没能掌握到那个平衡点，一旦速度上去之后就往后摔倒。但看别人能够玩的那么好，那么顺畅，就觉得特别舒服，而且觉得这是一个特别酷的运动，就一个人在那里玩，不用去理会周围人的眼光，一种天涯任我行的感觉。所以最终决定玩滑板。既然决定好了，那么就是实施的过程了，查到了号称上海最大的滑板店铺聚点滑板，就开心的跑过去了 (๑¯∀¯๑)\n\n　　那是一个地下室，坐落在常熟路，从学校过去大概要花一个多小时，那个地下室要拐好几个路口才能顺利走到目的地，但是进去的路口不会让你觉得很单调，周围都有图案让你觉得来对了地方，走过最后一个路标终于看到了目的地。(｡◕ˇ∀ˇ◕)\n\n![](/images/huabandian.jpg)\n\n　　还没进入店铺就是琳琅满目的滑板，ヽ(￣▽￣)ﾉ。其实我有些担心会找不到自己喜欢的板面，但是还是细心的去浏览每一个滑板，希望找到自己心仪的那块板。进来没看多久，热情的老板就上来询问，知道我是初学者然后就开始给我介绍两种板，一种是代步类型，一种是带一些技术的板，作为一个有一丢丢梦想的萌新，当然不能选择代步式啦，果断选择了第二种。第二种的话，可以选择组装类别的也可以选择已经是成品的。组装的好处是可以自己DIY，但价格会稍微贵一些，成品的话就会选择的空间很小，板面也是只能选择现有的那些。思考了一会儿，我觉得还是选择组装的吧，毕竟后续想再倒腾也可以再在原有的基础上改装嘛，只要价格不要太夸张就没问题。\n\n　　既然选择了组装，就要开始选择一个板面，然后就是轮子类型和轴承类型，这是主要的东西，我选择了我比较喜欢的板面，然后后面的轮子以及轴承都是选择差不多店里最便宜的产品，毕竟作为学生党来说经济能力有限，而且对于一个菜鸡来说硬件上的区别影响微乎其微，所以想着能少则少。想起自己昨天还网购了一批东西，心想这个月肯定是要勒紧裤腰带过日子了。 (〃´皿`)\n　　\n　　em......少吃点少花点没事，反正也饿不死...开心的是自己终于组装好自己的第一块滑板了，duangduangduan！！！\n\n![](/images/myhuaban.jpg)\n\n　　感觉玩滑板不仅是对自己技术上的挑战，更多对于自己而言会是心理上的挑战，祝自己玩的嗨皮啦啦啦 =.=\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"开启新的运动,Yeah!","published":1,"updated":"2019-05-19T09:42:05.865Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxas000vfo81ut6lrcld","content":"<p>　　不知道从什么时候起，觉得篮球好像很难点燃自己的热情了，也许是经常自己一个人和不同的路人打球，每个路人对待打球的态度不同，有的打球认真，有的打球随意，很难找到那种归属感。刚开始还好，但这样打的时间一长，就会经常打球感到无所谓的感觉，完全失去了当时打球的竞技的感觉。也就渐渐失去了对篮球的认真，变成了所谓的养生篮球，讲的直白点就是变成了篮球场上失去梦想的咸鱼。<br><a id=\"more\"></a></p>\n<p>　　在今年2月13号的一天，那天下着雨，按照常理来说，又没有室内场地，是不可能去打球的，但我表弟明天就要从我家回去了，如果这次不和他打球就今年就没有机会一起和他打球了，所以我们决定即使下雨也还是要去打球。</p>\n<p><img src=\"/images/lanqiu.jpg\" alt=\"\"></p>\n<p>　　我对篮球开始感兴趣的时候是在高一的时候，那时候和家里因为学习上的原因经常发生矛盾和争吵，不喜欢回家，和一个家在外县的同学也是刚好一起在宿舍，他提议我们去打球，我觉得打球是个新鲜事情对于我来说，就很高兴的答应了。自从那次打球以后，自己就不自觉的爱上了那种球入框的感觉，开始逐渐走上打球的不归路。这一打就是一个整个高中和大学，但是我打球打的晚，不像他们初中或小学就开始了打球这样，所以自己属于最菜的那种，也就是所谓的黑铁选手，(✪ω✪)。</p>\n<p>　　所以作为黑铁和一群白银黄金选手进行游戏是经常遭受冷落的，这体现在不仅是在球场上很少拿到球，甚至有时候是遭到一些比较激进的人的言语攻击，那时候别提心里有多难受了。所以自己没事儿就去球场练球，想要提高一下自己的篮球基本功，但都是自己一个人没头脑的练习，其实从现在看来，练习篮球最后还是系统的有方法的练习，这样才能达到比较好的训练效果。但自己也没想那么多，就凭着热爱去不断练习感觉呗，一个人也能玩的特别高兴，记得是在高二的那年暑假，自己没事儿就去学校篮球场打球，即使下雨，也是高高兴兴的要去打球。印象比较深的是那个暑假自己在雨中打球第二天那个篮球就起了个包，之后那个包越来越大，很快那个球就根本没法打了，那也是自己寿命最短的一个球。</p>\n<p>　　在13号那天自己在下了雨的场地打球，回忆起之前同样在雨中打球的感觉，好像篮球带给自己的快乐越来越少，已经完全体会不到这个运动的乐趣了。身体冷心也冷，在一番思想斗争之后我决定放弃篮球，寻找新的运动，开启一个新的学习新的挑战想要寻求新的体验。那张照片也是为了纪念自己的一个结束以及寻找下一个开始。</p>\n<p>　　不打篮球该选择什么作为新的作为新的运动呢，想起上次在学校玩的滑板，觉得挺难的，摔了很多次都没能掌握到那个平衡点，一旦速度上去之后就往后摔倒。但看别人能够玩的那么好，那么顺畅，就觉得特别舒服，而且觉得这是一个特别酷的运动，就一个人在那里玩，不用去理会周围人的眼光，一种天涯任我行的感觉。所以最终决定玩滑板。既然决定好了，那么就是实施的过程了，查到了号称上海最大的滑板店铺聚点滑板，就开心的跑过去了 (๑¯∀¯๑)</p>\n<p>　　那是一个地下室，坐落在常熟路，从学校过去大概要花一个多小时，那个地下室要拐好几个路口才能顺利走到目的地，但是进去的路口不会让你觉得很单调，周围都有图案让你觉得来对了地方，走过最后一个路标终于看到了目的地。(｡◕ˇ∀ˇ◕)</p>\n<p><img src=\"/images/huabandian.jpg\" alt=\"\"></p>\n<p>　　还没进入店铺就是琳琅满目的滑板，ヽ(￣▽￣)ﾉ。其实我有些担心会找不到自己喜欢的板面，但是还是细心的去浏览每一个滑板，希望找到自己心仪的那块板。进来没看多久，热情的老板就上来询问，知道我是初学者然后就开始给我介绍两种板，一种是代步类型，一种是带一些技术的板，作为一个有一丢丢梦想的萌新，当然不能选择代步式啦，果断选择了第二种。第二种的话，可以选择组装类别的也可以选择已经是成品的。组装的好处是可以自己DIY，但价格会稍微贵一些，成品的话就会选择的空间很小，板面也是只能选择现有的那些。思考了一会儿，我觉得还是选择组装的吧，毕竟后续想再倒腾也可以再在原有的基础上改装嘛，只要价格不要太夸张就没问题。</p>\n<p>　　既然选择了组装，就要开始选择一个板面，然后就是轮子类型和轴承类型，这是主要的东西，我选择了我比较喜欢的板面，然后后面的轮子以及轴承都是选择差不多店里最便宜的产品，毕竟作为学生党来说经济能力有限，而且对于一个菜鸡来说硬件上的区别影响微乎其微，所以想着能少则少。想起自己昨天还网购了一批东西，心想这个月肯定是要勒紧裤腰带过日子了。 (〃´皿`)<br>　　<br>　　em……少吃点少花点没事，反正也饿不死…开心的是自己终于组装好自己的第一块滑板了，duangduangduan！！！</p>\n<p><img src=\"/images/myhuaban.jpg\" alt=\"\"></p>\n<p>　　感觉玩滑板不仅是对自己技术上的挑战，更多对于自己而言会是心理上的挑战，祝自己玩的嗨皮啦啦啦 =.=</p>\n","site":{"data":{}},"excerpt":"<p>　　不知道从什么时候起，觉得篮球好像很难点燃自己的热情了，也许是经常自己一个人和不同的路人打球，每个路人对待打球的态度不同，有的打球认真，有的打球随意，很难找到那种归属感。刚开始还好，但这样打的时间一长，就会经常打球感到无所谓的感觉，完全失去了当时打球的竞技的感觉。也就渐渐失去了对篮球的认真，变成了所谓的养生篮球，讲的直白点就是变成了篮球场上失去梦想的咸鱼。<br>","more":"</p>\n<p>　　在今年2月13号的一天，那天下着雨，按照常理来说，又没有室内场地，是不可能去打球的，但我表弟明天就要从我家回去了，如果这次不和他打球就今年就没有机会一起和他打球了，所以我们决定即使下雨也还是要去打球。</p>\n<p><img src=\"/images/lanqiu.jpg\" alt=\"\"></p>\n<p>　　我对篮球开始感兴趣的时候是在高一的时候，那时候和家里因为学习上的原因经常发生矛盾和争吵，不喜欢回家，和一个家在外县的同学也是刚好一起在宿舍，他提议我们去打球，我觉得打球是个新鲜事情对于我来说，就很高兴的答应了。自从那次打球以后，自己就不自觉的爱上了那种球入框的感觉，开始逐渐走上打球的不归路。这一打就是一个整个高中和大学，但是我打球打的晚，不像他们初中或小学就开始了打球这样，所以自己属于最菜的那种，也就是所谓的黑铁选手，(✪ω✪)。</p>\n<p>　　所以作为黑铁和一群白银黄金选手进行游戏是经常遭受冷落的，这体现在不仅是在球场上很少拿到球，甚至有时候是遭到一些比较激进的人的言语攻击，那时候别提心里有多难受了。所以自己没事儿就去球场练球，想要提高一下自己的篮球基本功，但都是自己一个人没头脑的练习，其实从现在看来，练习篮球最后还是系统的有方法的练习，这样才能达到比较好的训练效果。但自己也没想那么多，就凭着热爱去不断练习感觉呗，一个人也能玩的特别高兴，记得是在高二的那年暑假，自己没事儿就去学校篮球场打球，即使下雨，也是高高兴兴的要去打球。印象比较深的是那个暑假自己在雨中打球第二天那个篮球就起了个包，之后那个包越来越大，很快那个球就根本没法打了，那也是自己寿命最短的一个球。</p>\n<p>　　在13号那天自己在下了雨的场地打球，回忆起之前同样在雨中打球的感觉，好像篮球带给自己的快乐越来越少，已经完全体会不到这个运动的乐趣了。身体冷心也冷，在一番思想斗争之后我决定放弃篮球，寻找新的运动，开启一个新的学习新的挑战想要寻求新的体验。那张照片也是为了纪念自己的一个结束以及寻找下一个开始。</p>\n<p>　　不打篮球该选择什么作为新的作为新的运动呢，想起上次在学校玩的滑板，觉得挺难的，摔了很多次都没能掌握到那个平衡点，一旦速度上去之后就往后摔倒。但看别人能够玩的那么好，那么顺畅，就觉得特别舒服，而且觉得这是一个特别酷的运动，就一个人在那里玩，不用去理会周围人的眼光，一种天涯任我行的感觉。所以最终决定玩滑板。既然决定好了，那么就是实施的过程了，查到了号称上海最大的滑板店铺聚点滑板，就开心的跑过去了 (๑¯∀¯๑)</p>\n<p>　　那是一个地下室，坐落在常熟路，从学校过去大概要花一个多小时，那个地下室要拐好几个路口才能顺利走到目的地，但是进去的路口不会让你觉得很单调，周围都有图案让你觉得来对了地方，走过最后一个路标终于看到了目的地。(｡◕ˇ∀ˇ◕)</p>\n<p><img src=\"/images/huabandian.jpg\" alt=\"\"></p>\n<p>　　还没进入店铺就是琳琅满目的滑板，ヽ(￣▽￣)ﾉ。其实我有些担心会找不到自己喜欢的板面，但是还是细心的去浏览每一个滑板，希望找到自己心仪的那块板。进来没看多久，热情的老板就上来询问，知道我是初学者然后就开始给我介绍两种板，一种是代步类型，一种是带一些技术的板，作为一个有一丢丢梦想的萌新，当然不能选择代步式啦，果断选择了第二种。第二种的话，可以选择组装类别的也可以选择已经是成品的。组装的好处是可以自己DIY，但价格会稍微贵一些，成品的话就会选择的空间很小，板面也是只能选择现有的那些。思考了一会儿，我觉得还是选择组装的吧，毕竟后续想再倒腾也可以再在原有的基础上改装嘛，只要价格不要太夸张就没问题。</p>\n<p>　　既然选择了组装，就要开始选择一个板面，然后就是轮子类型和轴承类型，这是主要的东西，我选择了我比较喜欢的板面，然后后面的轮子以及轴承都是选择差不多店里最便宜的产品，毕竟作为学生党来说经济能力有限，而且对于一个菜鸡来说硬件上的区别影响微乎其微，所以想着能少则少。想起自己昨天还网购了一批东西，心想这个月肯定是要勒紧裤腰带过日子了。 (〃´皿`)<br>　　<br>　　em……少吃点少花点没事，反正也饿不死…开心的是自己终于组装好自己的第一块滑板了，duangduangduan！！！</p>\n<p><img src=\"/images/myhuaban.jpg\" alt=\"\"></p>\n<p>　　感觉玩滑板不仅是对自己技术上的挑战，更多对于自己而言会是心理上的挑战，祝自己玩的嗨皮啦啦啦 =.=</p>"},{"layout":"post","title":"找回走失的童心","date":"2019-02-03T13:41:00.000Z","_content":"　　前几天无聊的时候到小学附近逛了逛，小学附近很多东西都变了，但看到那熟悉的小摊，自己感觉仿佛好像回到了那个时候，那个每天都会在小摊寻找自己喜欢的东西的小时候。学校的每一个角落都充斥着快乐的记忆，只需要看一眼就能想起那时候在这个地方做过什么。小时候，每次放学回家都不会想要回家，快乐的是和小伙伴每次都选择试试看能不能走不同的路回家，好奇的探索每条路上的一切，感觉自己只要看一眼某个方向就能想起那时候在路上的快乐回忆，每条路都知道会通往哪里，美好的童年~\n<!-- more -->\n\n　　小时候有太多太多的记忆，那时候对任何事儿都充满好奇心，那时候什么事情都会想要去尝试，那时候觉得任何一件小事都会觉得特别开心，抓一只蝗虫、在田里抓鱼回去养着、在一个废弃的水芯笔的收集堆里仔细寻找还能够使用的水笔、在回家的下坡尽情的冲刺、和小伙伴比谁先到学校而快乐轻盈的奔跑、为收集108将的卡片而疯狂的买方便面......想到这里，忍不住给儿时的小伙伴打了个电话，问问他是否家还住在原来的地方，hhh，电话接通，人家还没起床，约好在小时候那个熟悉的加油站见面。然后就到他家坐坐，就像小时候那样，经常会到他家那里去玩，聊了聊小时候发生的事儿，都觉得小时候的快乐特别简单，感慨现在想要获得快乐怎么越来越难，我还用我们专业课老师喜欢给我们说的一句话自嘲现在的状态，\"没目标的时候觉得特别无聊，有目标但又达不到的时候觉得特别痛苦，人生真的是在痛苦和无聊中摇摆\"。听完真觉得有点想笑，只是当时不知道为什么会这样。\n\n　　好像一直被时间着急推着往前走，不断会有人告诉你，为了未来应该怎样怎样去做，什么是黑什么是白，什么是对什么是错，可从来没有人会告诉你说，从来没有那么纯白或者纯黑的颜色，生活本应该是黑白掺杂的灰色，即使是纯白的东西，也是需要与黑色互相衬托才能够显示出它的精彩。从来没有人问过自己到底喜欢什么，好像喜不喜欢没那么重要，心中的感受也不重要，所有一切只不过是为了那个还没到来的未来，没有对未来产生感受，就已经逐渐习惯了变得接受看似约定俗成的东西，习惯忍耐乏味，习惯为了未来妥协去做自己不喜欢的事情，习惯了被规则指引限制了思维。其实真的不需要去恐惧未来，也不用刻意去为未来担心，别太着急给自己太多包袱，应该多给自己一点时间去感受去比较去领悟，去体会甚至是大家看来是错的东西，跌倒的时候也能够哈哈一笑站起来继续往前走。保持良好的心态，即使短时间目标无法达成也总可以达到目标，只不过是慢一点而已，用一个乐观的态度去面对生活，尽力完成自己工作的职责，业余时间可以培养自己的爱好，尝试不同的事情，跟随自己的好奇心，探索自己想要探索的事情，用心去体会生活，而不要使用一成不变的态度去看待生活，最重要的是，保持那份孩子一般容易快乐的心情，即使犯错也能够做到毫不在意，依旧可以开心的做到重新来过。\n\n　　可能有的人会说，人长大了，就应该变得怎样怎样，小时候喜欢的东西太过幼稚那时候喜欢不过是还小，长大了自然就该放弃那些现在看来十分幼稚的事情。我觉得在生活中，随着年龄的增长，依旧还能够保持那颗容易快乐的童心的人确实是比较少。前几天到曾经的高中校园去逛，本来以为我们进不去，打算买一包烟，偷偷塞给保安大哥然后混进去  (￣▽￣)／。可没想到，去的那天他们刚刚放假，就很顺利的进去了。那天天气也是特别的好，在校园里逛来逛去打算回去的时候，那时候大家都放学回家了，但在学校食堂后面碰到一个独自玩滑板的女孩子，觉得很特别，和朋友商量了一下就过去和对方打招呼，还让对方教我们玩滑板 (￣▽￣)~* 。后来玩了一会儿滑板之后还聊了一会儿天，那个女孩让我印象感觉到很深刻的一些话是这样的，\"我觉得他们好像在逼着自己成长这样\"，我当时和朋友对这个话的理解可能都没到她这样说的含义，我朋友觉得是因为现在的学习把人逼得太快，其实没有必要，就像一个跑步，你慢一点走其实最后也能走到。我的理解是面对学习未来的压力过于大，逼着自己去接受一些规则从而去做一些事情。还有印象比较深的是我问她说你喜欢玩滑板，又是一个女孩子，担心别人会用不一样的眼光看你吗?记得她当时的回答是这样的，\"那别人说什么其实只是他们会那么说，就像现在微博上对于一些事情很多人都有不同的想法，但是过一阵子他们可能又不会在意了\"。她的话语真让我感到吃惊，我觉得自己在她这个年龄真的做不到她这样的思考。我之后又问了一个问题，大概意思就是你会不会为了自己喜欢的东西去疯狂的追求，记得她是这样回答的，\"但现在的事情也要做好呀，做好了当前的事情才能够去做那些喜欢的事情\"。朋友说和她聊天有种自己老了的感觉，我没他那么明显的感受，但觉得自己好像也变得不如像她一样单纯只是为了玩儿去做一些事情，做事情似乎更加在意目的和结果，在乎输赢，大概这也是老了的结果 (ー`´ー)。\n\n　　写到这里，其实能理解的人也能够明白了，不能明白的大概就不会明白吧。恩，回到这篇文章的主题，找回走失的童心，记得我初中给自己起了个QQ昵称叫\"我是奥特曼\"，然后还是一个奥特曼的头像，hhhh，幻想自己是奥特曼简直不能太萌，小时候自己最喜欢摆的POS好像也是奥特曼的放大招的姿势hhh，真的很怀念那真正属于儿童时期的自己呀。\n\n　　黑多一点也好，白多一些也没什么关系。无论是黑还是白都要自己去写，不要做被动物园管理员驯服的动物，而要去做自己的奥特曼，怪兽什么的，被打倒了，爬起来再打就是，实在打不过，回去补个能量下次再来，两次不行就三次，实在打不过就叫兄弟，就没有被怪兽吓倒过的奥特曼。\n\n　　![](/images/aoteguaishou.jpg \"兄弟，下次动手轻点\")\n　　\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/找回走失的童心.md","raw":"layout: \"post\"\ntitle: \"找回走失的童心\"\ndate: \"2019-02-03 21:41\"\ncategories:\n- [LIFE]\ntags:\n- FEELING\n---\n　　前几天无聊的时候到小学附近逛了逛，小学附近很多东西都变了，但看到那熟悉的小摊，自己感觉仿佛好像回到了那个时候，那个每天都会在小摊寻找自己喜欢的东西的小时候。学校的每一个角落都充斥着快乐的记忆，只需要看一眼就能想起那时候在这个地方做过什么。小时候，每次放学回家都不会想要回家，快乐的是和小伙伴每次都选择试试看能不能走不同的路回家，好奇的探索每条路上的一切，感觉自己只要看一眼某个方向就能想起那时候在路上的快乐回忆，每条路都知道会通往哪里，美好的童年~\n<!-- more -->\n\n　　小时候有太多太多的记忆，那时候对任何事儿都充满好奇心，那时候什么事情都会想要去尝试，那时候觉得任何一件小事都会觉得特别开心，抓一只蝗虫、在田里抓鱼回去养着、在一个废弃的水芯笔的收集堆里仔细寻找还能够使用的水笔、在回家的下坡尽情的冲刺、和小伙伴比谁先到学校而快乐轻盈的奔跑、为收集108将的卡片而疯狂的买方便面......想到这里，忍不住给儿时的小伙伴打了个电话，问问他是否家还住在原来的地方，hhh，电话接通，人家还没起床，约好在小时候那个熟悉的加油站见面。然后就到他家坐坐，就像小时候那样，经常会到他家那里去玩，聊了聊小时候发生的事儿，都觉得小时候的快乐特别简单，感慨现在想要获得快乐怎么越来越难，我还用我们专业课老师喜欢给我们说的一句话自嘲现在的状态，\"没目标的时候觉得特别无聊，有目标但又达不到的时候觉得特别痛苦，人生真的是在痛苦和无聊中摇摆\"。听完真觉得有点想笑，只是当时不知道为什么会这样。\n\n　　好像一直被时间着急推着往前走，不断会有人告诉你，为了未来应该怎样怎样去做，什么是黑什么是白，什么是对什么是错，可从来没有人会告诉你说，从来没有那么纯白或者纯黑的颜色，生活本应该是黑白掺杂的灰色，即使是纯白的东西，也是需要与黑色互相衬托才能够显示出它的精彩。从来没有人问过自己到底喜欢什么，好像喜不喜欢没那么重要，心中的感受也不重要，所有一切只不过是为了那个还没到来的未来，没有对未来产生感受，就已经逐渐习惯了变得接受看似约定俗成的东西，习惯忍耐乏味，习惯为了未来妥协去做自己不喜欢的事情，习惯了被规则指引限制了思维。其实真的不需要去恐惧未来，也不用刻意去为未来担心，别太着急给自己太多包袱，应该多给自己一点时间去感受去比较去领悟，去体会甚至是大家看来是错的东西，跌倒的时候也能够哈哈一笑站起来继续往前走。保持良好的心态，即使短时间目标无法达成也总可以达到目标，只不过是慢一点而已，用一个乐观的态度去面对生活，尽力完成自己工作的职责，业余时间可以培养自己的爱好，尝试不同的事情，跟随自己的好奇心，探索自己想要探索的事情，用心去体会生活，而不要使用一成不变的态度去看待生活，最重要的是，保持那份孩子一般容易快乐的心情，即使犯错也能够做到毫不在意，依旧可以开心的做到重新来过。\n\n　　可能有的人会说，人长大了，就应该变得怎样怎样，小时候喜欢的东西太过幼稚那时候喜欢不过是还小，长大了自然就该放弃那些现在看来十分幼稚的事情。我觉得在生活中，随着年龄的增长，依旧还能够保持那颗容易快乐的童心的人确实是比较少。前几天到曾经的高中校园去逛，本来以为我们进不去，打算买一包烟，偷偷塞给保安大哥然后混进去  (￣▽￣)／。可没想到，去的那天他们刚刚放假，就很顺利的进去了。那天天气也是特别的好，在校园里逛来逛去打算回去的时候，那时候大家都放学回家了，但在学校食堂后面碰到一个独自玩滑板的女孩子，觉得很特别，和朋友商量了一下就过去和对方打招呼，还让对方教我们玩滑板 (￣▽￣)~* 。后来玩了一会儿滑板之后还聊了一会儿天，那个女孩让我印象感觉到很深刻的一些话是这样的，\"我觉得他们好像在逼着自己成长这样\"，我当时和朋友对这个话的理解可能都没到她这样说的含义，我朋友觉得是因为现在的学习把人逼得太快，其实没有必要，就像一个跑步，你慢一点走其实最后也能走到。我的理解是面对学习未来的压力过于大，逼着自己去接受一些规则从而去做一些事情。还有印象比较深的是我问她说你喜欢玩滑板，又是一个女孩子，担心别人会用不一样的眼光看你吗?记得她当时的回答是这样的，\"那别人说什么其实只是他们会那么说，就像现在微博上对于一些事情很多人都有不同的想法，但是过一阵子他们可能又不会在意了\"。她的话语真让我感到吃惊，我觉得自己在她这个年龄真的做不到她这样的思考。我之后又问了一个问题，大概意思就是你会不会为了自己喜欢的东西去疯狂的追求，记得她是这样回答的，\"但现在的事情也要做好呀，做好了当前的事情才能够去做那些喜欢的事情\"。朋友说和她聊天有种自己老了的感觉，我没他那么明显的感受，但觉得自己好像也变得不如像她一样单纯只是为了玩儿去做一些事情，做事情似乎更加在意目的和结果，在乎输赢，大概这也是老了的结果 (ー`´ー)。\n\n　　写到这里，其实能理解的人也能够明白了，不能明白的大概就不会明白吧。恩，回到这篇文章的主题，找回走失的童心，记得我初中给自己起了个QQ昵称叫\"我是奥特曼\"，然后还是一个奥特曼的头像，hhhh，幻想自己是奥特曼简直不能太萌，小时候自己最喜欢摆的POS好像也是奥特曼的放大招的姿势hhh，真的很怀念那真正属于儿童时期的自己呀。\n\n　　黑多一点也好，白多一些也没什么关系。无论是黑还是白都要自己去写，不要做被动物园管理员驯服的动物，而要去做自己的奥特曼，怪兽什么的，被打倒了，爬起来再打就是，实在打不过，回去补个能量下次再来，两次不行就三次，实在打不过就叫兄弟，就没有被怪兽吓倒过的奥特曼。\n\n　　![](/images/aoteguaishou.jpg \"兄弟，下次动手轻点\")\n　　\n\n\n\n\n\n\n\n\n\n\n\n","slug":"找回走失的童心","published":1,"updated":"2019-05-19T09:42:05.865Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxat000yfo81ean9m7ga","content":"<p>　　前几天无聊的时候到小学附近逛了逛，小学附近很多东西都变了，但看到那熟悉的小摊，自己感觉仿佛好像回到了那个时候，那个每天都会在小摊寻找自己喜欢的东西的小时候。学校的每一个角落都充斥着快乐的记忆，只需要看一眼就能想起那时候在这个地方做过什么。小时候，每次放学回家都不会想要回家，快乐的是和小伙伴每次都选择试试看能不能走不同的路回家，好奇的探索每条路上的一切，感觉自己只要看一眼某个方向就能想起那时候在路上的快乐回忆，每条路都知道会通往哪里，美好的童年~<br><a id=\"more\"></a></p>\n<p>　　小时候有太多太多的记忆，那时候对任何事儿都充满好奇心，那时候什么事情都会想要去尝试，那时候觉得任何一件小事都会觉得特别开心，抓一只蝗虫、在田里抓鱼回去养着、在一个废弃的水芯笔的收集堆里仔细寻找还能够使用的水笔、在回家的下坡尽情的冲刺、和小伙伴比谁先到学校而快乐轻盈的奔跑、为收集108将的卡片而疯狂的买方便面……想到这里，忍不住给儿时的小伙伴打了个电话，问问他是否家还住在原来的地方，hhh，电话接通，人家还没起床，约好在小时候那个熟悉的加油站见面。然后就到他家坐坐，就像小时候那样，经常会到他家那里去玩，聊了聊小时候发生的事儿，都觉得小时候的快乐特别简单，感慨现在想要获得快乐怎么越来越难，我还用我们专业课老师喜欢给我们说的一句话自嘲现在的状态，”没目标的时候觉得特别无聊，有目标但又达不到的时候觉得特别痛苦，人生真的是在痛苦和无聊中摇摆”。听完真觉得有点想笑，只是当时不知道为什么会这样。</p>\n<p>　　好像一直被时间着急推着往前走，不断会有人告诉你，为了未来应该怎样怎样去做，什么是黑什么是白，什么是对什么是错，可从来没有人会告诉你说，从来没有那么纯白或者纯黑的颜色，生活本应该是黑白掺杂的灰色，即使是纯白的东西，也是需要与黑色互相衬托才能够显示出它的精彩。从来没有人问过自己到底喜欢什么，好像喜不喜欢没那么重要，心中的感受也不重要，所有一切只不过是为了那个还没到来的未来，没有对未来产生感受，就已经逐渐习惯了变得接受看似约定俗成的东西，习惯忍耐乏味，习惯为了未来妥协去做自己不喜欢的事情，习惯了被规则指引限制了思维。其实真的不需要去恐惧未来，也不用刻意去为未来担心，别太着急给自己太多包袱，应该多给自己一点时间去感受去比较去领悟，去体会甚至是大家看来是错的东西，跌倒的时候也能够哈哈一笑站起来继续往前走。保持良好的心态，即使短时间目标无法达成也总可以达到目标，只不过是慢一点而已，用一个乐观的态度去面对生活，尽力完成自己工作的职责，业余时间可以培养自己的爱好，尝试不同的事情，跟随自己的好奇心，探索自己想要探索的事情，用心去体会生活，而不要使用一成不变的态度去看待生活，最重要的是，保持那份孩子一般容易快乐的心情，即使犯错也能够做到毫不在意，依旧可以开心的做到重新来过。</p>\n<p>　　可能有的人会说，人长大了，就应该变得怎样怎样，小时候喜欢的东西太过幼稚那时候喜欢不过是还小，长大了自然就该放弃那些现在看来十分幼稚的事情。我觉得在生活中，随着年龄的增长，依旧还能够保持那颗容易快乐的童心的人确实是比较少。前几天到曾经的高中校园去逛，本来以为我们进不去，打算买一包烟，偷偷塞给保安大哥然后混进去  (￣▽￣)／。可没想到，去的那天他们刚刚放假，就很顺利的进去了。那天天气也是特别的好，在校园里逛来逛去打算回去的时候，那时候大家都放学回家了，但在学校食堂后面碰到一个独自玩滑板的女孩子，觉得很特别，和朋友商量了一下就过去和对方打招呼，还让对方教我们玩滑板 (￣▽￣)~* 。后来玩了一会儿滑板之后还聊了一会儿天，那个女孩让我印象感觉到很深刻的一些话是这样的，”我觉得他们好像在逼着自己成长这样”，我当时和朋友对这个话的理解可能都没到她这样说的含义，我朋友觉得是因为现在的学习把人逼得太快，其实没有必要，就像一个跑步，你慢一点走其实最后也能走到。我的理解是面对学习未来的压力过于大，逼着自己去接受一些规则从而去做一些事情。还有印象比较深的是我问她说你喜欢玩滑板，又是一个女孩子，担心别人会用不一样的眼光看你吗?记得她当时的回答是这样的，”那别人说什么其实只是他们会那么说，就像现在微博上对于一些事情很多人都有不同的想法，但是过一阵子他们可能又不会在意了”。她的话语真让我感到吃惊，我觉得自己在她这个年龄真的做不到她这样的思考。我之后又问了一个问题，大概意思就是你会不会为了自己喜欢的东西去疯狂的追求，记得她是这样回答的，”但现在的事情也要做好呀，做好了当前的事情才能够去做那些喜欢的事情”。朋友说和她聊天有种自己老了的感觉，我没他那么明显的感受，但觉得自己好像也变得不如像她一样单纯只是为了玩儿去做一些事情，做事情似乎更加在意目的和结果，在乎输赢，大概这也是老了的结果 (ー`´ー)。</p>\n<p>　　写到这里，其实能理解的人也能够明白了，不能明白的大概就不会明白吧。恩，回到这篇文章的主题，找回走失的童心，记得我初中给自己起了个QQ昵称叫”我是奥特曼”，然后还是一个奥特曼的头像，hhhh，幻想自己是奥特曼简直不能太萌，小时候自己最喜欢摆的POS好像也是奥特曼的放大招的姿势hhh，真的很怀念那真正属于儿童时期的自己呀。</p>\n<p>　　黑多一点也好，白多一些也没什么关系。无论是黑还是白都要自己去写，不要做被动物园管理员驯服的动物，而要去做自己的奥特曼，怪兽什么的，被打倒了，爬起来再打就是，实在打不过，回去补个能量下次再来，两次不行就三次，实在打不过就叫兄弟，就没有被怪兽吓倒过的奥特曼。</p>\n<p>　　<img src=\"/images/aoteguaishou.jpg\" alt=\"\" title=\"兄弟，下次动手轻点\">\n　　</p>\n","site":{"data":{}},"excerpt":"<p>　　前几天无聊的时候到小学附近逛了逛，小学附近很多东西都变了，但看到那熟悉的小摊，自己感觉仿佛好像回到了那个时候，那个每天都会在小摊寻找自己喜欢的东西的小时候。学校的每一个角落都充斥着快乐的记忆，只需要看一眼就能想起那时候在这个地方做过什么。小时候，每次放学回家都不会想要回家，快乐的是和小伙伴每次都选择试试看能不能走不同的路回家，好奇的探索每条路上的一切，感觉自己只要看一眼某个方向就能想起那时候在路上的快乐回忆，每条路都知道会通往哪里，美好的童年~<br>","more":"</p>\n<p>　　小时候有太多太多的记忆，那时候对任何事儿都充满好奇心，那时候什么事情都会想要去尝试，那时候觉得任何一件小事都会觉得特别开心，抓一只蝗虫、在田里抓鱼回去养着、在一个废弃的水芯笔的收集堆里仔细寻找还能够使用的水笔、在回家的下坡尽情的冲刺、和小伙伴比谁先到学校而快乐轻盈的奔跑、为收集108将的卡片而疯狂的买方便面……想到这里，忍不住给儿时的小伙伴打了个电话，问问他是否家还住在原来的地方，hhh，电话接通，人家还没起床，约好在小时候那个熟悉的加油站见面。然后就到他家坐坐，就像小时候那样，经常会到他家那里去玩，聊了聊小时候发生的事儿，都觉得小时候的快乐特别简单，感慨现在想要获得快乐怎么越来越难，我还用我们专业课老师喜欢给我们说的一句话自嘲现在的状态，”没目标的时候觉得特别无聊，有目标但又达不到的时候觉得特别痛苦，人生真的是在痛苦和无聊中摇摆”。听完真觉得有点想笑，只是当时不知道为什么会这样。</p>\n<p>　　好像一直被时间着急推着往前走，不断会有人告诉你，为了未来应该怎样怎样去做，什么是黑什么是白，什么是对什么是错，可从来没有人会告诉你说，从来没有那么纯白或者纯黑的颜色，生活本应该是黑白掺杂的灰色，即使是纯白的东西，也是需要与黑色互相衬托才能够显示出它的精彩。从来没有人问过自己到底喜欢什么，好像喜不喜欢没那么重要，心中的感受也不重要，所有一切只不过是为了那个还没到来的未来，没有对未来产生感受，就已经逐渐习惯了变得接受看似约定俗成的东西，习惯忍耐乏味，习惯为了未来妥协去做自己不喜欢的事情，习惯了被规则指引限制了思维。其实真的不需要去恐惧未来，也不用刻意去为未来担心，别太着急给自己太多包袱，应该多给自己一点时间去感受去比较去领悟，去体会甚至是大家看来是错的东西，跌倒的时候也能够哈哈一笑站起来继续往前走。保持良好的心态，即使短时间目标无法达成也总可以达到目标，只不过是慢一点而已，用一个乐观的态度去面对生活，尽力完成自己工作的职责，业余时间可以培养自己的爱好，尝试不同的事情，跟随自己的好奇心，探索自己想要探索的事情，用心去体会生活，而不要使用一成不变的态度去看待生活，最重要的是，保持那份孩子一般容易快乐的心情，即使犯错也能够做到毫不在意，依旧可以开心的做到重新来过。</p>\n<p>　　可能有的人会说，人长大了，就应该变得怎样怎样，小时候喜欢的东西太过幼稚那时候喜欢不过是还小，长大了自然就该放弃那些现在看来十分幼稚的事情。我觉得在生活中，随着年龄的增长，依旧还能够保持那颗容易快乐的童心的人确实是比较少。前几天到曾经的高中校园去逛，本来以为我们进不去，打算买一包烟，偷偷塞给保安大哥然后混进去  (￣▽￣)／。可没想到，去的那天他们刚刚放假，就很顺利的进去了。那天天气也是特别的好，在校园里逛来逛去打算回去的时候，那时候大家都放学回家了，但在学校食堂后面碰到一个独自玩滑板的女孩子，觉得很特别，和朋友商量了一下就过去和对方打招呼，还让对方教我们玩滑板 (￣▽￣)~* 。后来玩了一会儿滑板之后还聊了一会儿天，那个女孩让我印象感觉到很深刻的一些话是这样的，”我觉得他们好像在逼着自己成长这样”，我当时和朋友对这个话的理解可能都没到她这样说的含义，我朋友觉得是因为现在的学习把人逼得太快，其实没有必要，就像一个跑步，你慢一点走其实最后也能走到。我的理解是面对学习未来的压力过于大，逼着自己去接受一些规则从而去做一些事情。还有印象比较深的是我问她说你喜欢玩滑板，又是一个女孩子，担心别人会用不一样的眼光看你吗?记得她当时的回答是这样的，”那别人说什么其实只是他们会那么说，就像现在微博上对于一些事情很多人都有不同的想法，但是过一阵子他们可能又不会在意了”。她的话语真让我感到吃惊，我觉得自己在她这个年龄真的做不到她这样的思考。我之后又问了一个问题，大概意思就是你会不会为了自己喜欢的东西去疯狂的追求，记得她是这样回答的，”但现在的事情也要做好呀，做好了当前的事情才能够去做那些喜欢的事情”。朋友说和她聊天有种自己老了的感觉，我没他那么明显的感受，但觉得自己好像也变得不如像她一样单纯只是为了玩儿去做一些事情，做事情似乎更加在意目的和结果，在乎输赢，大概这也是老了的结果 (ー`´ー)。</p>\n<p>　　写到这里，其实能理解的人也能够明白了，不能明白的大概就不会明白吧。恩，回到这篇文章的主题，找回走失的童心，记得我初中给自己起了个QQ昵称叫”我是奥特曼”，然后还是一个奥特曼的头像，hhhh，幻想自己是奥特曼简直不能太萌，小时候自己最喜欢摆的POS好像也是奥特曼的放大招的姿势hhh，真的很怀念那真正属于儿童时期的自己呀。</p>\n<p>　　黑多一点也好，白多一些也没什么关系。无论是黑还是白都要自己去写，不要做被动物园管理员驯服的动物，而要去做自己的奥特曼，怪兽什么的，被打倒了，爬起来再打就是，实在打不过，回去补个能量下次再来，两次不行就三次，实在打不过就叫兄弟，就没有被怪兽吓倒过的奥特曼。</p>\n<p>　　<img src=\"/images/aoteguaishou.jpg\" alt=\"\" title=\"兄弟，下次动手轻点\">\n　　</p>"},{"layout":"post","title":"找工作的一些感受","date":"2019-04-19T12:09:00.000Z","_content":"　　因为去年的辞职，而且是在没有找到下一份工作的情况的裸辞，所以今年开学之后做的第一件事情重写简历，然后投简历寻找下一份工作。但是让我没想到的是自己寻找工作的过程会这样的不顺利，也在这个过程中体会到了找工作的不易，以及自身力量的渺小。\n<!-- more -->\n\n　　前后先是接到一些来自hr的电话，因为自己投递了不同城市的职位，所以接到了不同城市的电话，有来自北京的，也有来自上海的，但大多还是来自上海的电话。问的问题基本上是这么几个，你几月份毕业，四六级过了吗，专业成绩排名，有拿过什么奖吗，为什么从前一个公司离职，一周能来实习几天，什么时候可以过来实习，期望薪资是多少......还有hr问我你认为自己适合搞技术么。\n\n　　刚开始找工作自己还算是比较自信，自以为凭借自己现在掌握的知识水平，如果有公司愿意去培养一个新人，应该是可以能够获得一份自己想到去做的职位，所以自己刚开始在简历上写的是大数据开发岗位而不是自己之前实习做过的Web开发。但是自己所有的职位也都会去投递，包括大数据、Web、以及爬虫，因为想着即使人家不要我也可以混个面试经验，看看他们都问些什么。刚开始是十分想去做自己想去做的东西，所以当接到hr的电话的时候，我会问对方有没有大数据的业务，以及是否可以在完成本职工作的情况下去任职不同形式的工作，还会和对方聊由于自己毕设的原因所以可能不会去实习，即使去实习也是快要到毕业的时候，因为自己想要花更多时间在自己的毕业设计上面，以及在被问到薪资的时候毫不犹豫的说12-15k。\n\n　　所以在之前以前面的方式和hr聊过之后，基本没有hr会再去联系我。开始自己没有明白原因，直到后来在拉勾上也不知道投过多少份简历和在BOSS上投过不知道多少份简历之后，以及面试过几家公司之后，才弄懂之前的原因。我觉得原因有一下几个，第一因为招聘的是应届生，所以其实对经验的要求并没有那么高，地位属于最低的那一群，人家觉得差不多能用就可以，拿过来实习一段时间就可以去干活，即使你可能比别人要强一点，但是人家根本不很care你如何，唯一的区别可能就是hr筛选简历的一个优势而已。第二是自己报的工资要求高了一些，除了像BAT或者其他大一点的公司可以对应届生开出11k以上的薪资，对于一些小一点的公司，基本不太能对一个应届生开出那么高的人力成本。第三我不接受马上去实习，前面也提到了，公司其实是希望你能够马上去为它们干活快速熟悉业务，因为这样你在和他们签订合同之前就可以尽快产生效益。第四，互联网寒冬，很多公司招聘的岗位都在缩减，甚至有些都在春季停止了招聘，所以就业的机会也变少了许多。\n\n　　在经历了前面的经历之后，基本没有得到回复。在得到不友好的回馈之后，也明白了不是你想去干什么就可以的，招聘永远是看你是否存在它们需要的经验，能否为它们产生它们需要的利益，事实就是这样。而且大公司的招聘流程都很长，久到让你等到绝望，如果想要进入大公司应该提前很久去做准备，小一点的公司的话招聘流程不会那么久，如果你想换一个大一点的公司进去取取经，那么就应该在离职前很久就做准备，不然你就会感受到裸辞之后一个较长的失业期。其实裸辞是一个不理智的行为，因为找工作的话很多公司是看你是不是完全适合它们公司的业务，因为即使他们缺人，业务也可以照常走，也不会那么着急的去招你进去，他们完全不着急，因为招聘对于他们来说只是工作的一小部分，但是对于一个失业的求职者来说就恰恰相反了。\n\n　　记得第一次面试是去一家叫什么图丽信息的公司，那天我跟在hr后面进门的时候看到手机有信息，就打开手机看看是什么内容。后来居然被那个技术总监认为自己进门在玩手机这么不认真，我实在对那个技术总监牛批的态度搞得有些不爽，一幅上位者的嘴脸。我就故意说为什么不可以看消息，万一有什么重要的消息怎么办。接下来就是他看到我在前面填的一个表很多没填的地方，我就说不想填，因为很多内容你们有我的简历，属于重复内容，不需要填，面试官看我态度这么硬，还问自己家里条件是不是很好，还有自己是不是对他们公司根本看不上。本来没有什么，就是很讨厌他那种作为技术总监一上来就给自己一种不尊重的自以为是的感觉，我宁愿不要这份工作也不愿去理会这种人。因为即使去了以后也只会更难受。\n\n　　总之那天就是自己今年面试的第一个公司，也是自己和他们的技术总监互相看不上暗中互怼的一次面试。因为那个公司位置比较偏僻，所以自己从他们公司出来，转乘公交之后突然迷了路，也不想直接回学校。下了车自己就走在一条空荡的小街，冷风肆意吹在自己的身体上，身体忍不住颤抖，肚子很饿，但又没碰到一家餐馆，只能挨着饿空着肚子继续往前走，想着自己处于失业状态，如果没工作就连买饭的钱都没有，但作为生存最低的要求是可以有钱能够买口饭吃。这让我想起乔布斯在辍学之后，睡在同学宿舍的地板，回收可乐瓶维持买口饭吃，并为了吃饭走上七英里的路程，穿过波特兰市区去到一个被叫做Hare Krishna的神庙，仅仅是因为这家寺庙每周日有灵修活动和免费聚餐。还有周星驰在电影新喜剧之王里描述那种为了演戏不要钱只是为了吃口饭的场景。以前这种只是在书里和电影里看到却无法感同身受，那一刻自己是有真的体会到那种为了生存无奈的感觉，也感受到生活好像不过就是这样，忙忙碌碌只是为了吃口饭，有个地方可以落脚，真是空洞又现实。\n\n　　也就是在那段时间，自己开始思考自己的职业道路，想要试着去跟随自己内心的想法，仅凭着感觉去做其它的职业而不问结果，想着混差点又怎样呢。所以之后自己在三月二十号去面试了宇视科技的销售岗位，它们在我们学校进行面试，可以说挺会替学生考虑，避免了我们学校一群人往他们公司奔波而最终没有面试通过的失落感。因为自己没打印成绩单的原因，所以提早去教务处打印成绩单，然后直接去到面试的地点。因为我提前十多分钟到了，而这时他们的面试人员以及都到了，我就直接和他们的销售面试官开始了面试。\n\n　　其实对于这种正在开拓市场的公司，销售在这种公司的地位是很高的。这也是自己后来才开始明白的，也正是这帮销售，才是公司真正的收入的起点。但是要想把销售干好，没有很深的积累和很好的口才是不太可能的一件事情。\n\n　　之后面试官就拿着他们手上我的简历开始对我的询问，与一般的技术面试的开场就不同，首先对我说你是南昌人?我想了想，还是回答了我是湖南永州人，可能之前在你们的资料上没有认真填写信息所以你手上看到的我是南昌人。面试官又说，那你是湖南人，你们那里是有很多土匪呀。我只能笑着说刚改革开放那段时间是这样的，尤其是在湘西那一块儿。之后就是我和面试官之间长达四十分钟的聊天,不过真的很轻松愉快，一次很难忘的经历。-.-\n\n　　面试官看上去的年龄大概有四十多接近五十的样子，开始和面试官聊了我之前的一些在学校的实践经历以及自己在认识到一些事情的本质之后的失望与不屑，以及在自己长时间的努力之后但结果却差强人意的失落感，以及那之后很长时间都没能走出那段低落的状态，还有简单的谈了谈自己对为什么想要做销售的原因和理解等等。面试官是一个很不错的人，因为让我觉得他是在用真心和我交谈，我也能感受到他是一个十分负责人的人，也针对自己的一些经历和想法给自己提出建议，是一个很成熟温和的北方男人。我很感谢也很开心能够和他这样一位对问题了解深刻的人去聊天探讨，毕竟这样的对话还是很少很难得的。\n\n　　具体细节就不在博客中记录了，因为很多都是使用事实和比喻进行讨论与论证，但最后我确实是被他说服了。他最后给我的建议是，不能够在自己对一件事情没有多一些准备和了解的情况下去做决定，而且应该选择一条路去不断往下深入，由于社会的现实与残酷，更加应该选择自己当前最擅长的东西去做，如果对一个东西有足够的兴趣，可以不妨在养活自己的前提下去实践。\n\n　　这种方式我在认真思考之后，觉得是较为理性的方式。按照自己的性格来的话可能会说追求自己想要的东西就会不遗余力，喜欢把自己逼到绝境爆发出来的那种力量，但是许多事情更加需要理性去处理，要弄明白自己的真正的内心的感受的时候才去做决定比较合适，即使是需要把自己逼到绝境，也是需要自身有一些积累才行，这种积累更是一种成熟，在行动之前多了一份对自身与他人的理解，对社会现实的认识。\n\n　　所以以后自己无论想去做尝试的时候，不妨可以自行去往深入探索，而不能仅停留在感觉上的认识，对自己多一些沉淀，在真正对其有一些理解的时候，再去做选择或许更为合适。\n\n　　另外一个面试官教我的理论让我印象特别深，他对我说，你是不是想要证明自己。我仔细想了想，虽然不是喜欢张扬的人，但确实是想要证明自己，所以我果断的说对的。然后他对我说，你知道为什么很多热点就突然消失了吗？我仔细想了一会儿，就回答说因为他们根本不关心。面试官后来阐述说的其实和我的回答差不多，其实每个人都对与自己无关的事情不会投入很多关注，无论这个人有过多高的成就，虽然他说的很冷漠，但是却直戳事实。\n\n　　记得看过一篇文章，写的是作者在一个餐厅靠窗的位置吃饭，突然就一个东西从楼上掉下来，把餐厅的玻璃都砸碎了，差点砸到他，可想而知如果砸到他那么肯定是性命不保。当时那个东西掉下来的瞬间把整个餐厅的人都吓到了，也对作者的安全感到唏嘘，但很快他们就开始自己吃自己的饭，一切好像从未发生过一样。作者感慨他在生命受到威胁的时候，周围人的表现，让他真正认识理解到人们的冷漠。当然这不是针对人性善恶的讨论，只是一种对意识形态的观点。\n\n　　其实表述这么多，只是想简单的说明一个道理，人真正的幸福不可能来自于他人，去做真的可以令你感到轻松愉快的事情，只有你自己真正开心快乐才是真正获得了幸福，而且这只能是来自于自己的内心。如果你期望幸福来自于在他人心中的形象，那么让你失望的几率比较高。最近在读叔本华的人生的智慧，他在书中也恰好提到了同样的观点，我看到这部分的时候也感到十分认同。当然我不是对他在书中写的全部观点都表示赞同，从他的文字可以感受到这是一个有些孤傲高冷的人，但我认为这是他性格上的缺陷，也导致了他的有些文字有些偏颇而不够完美。虽然在我心中不够完美，自己还是很喜欢这个哲学家，因为他在这本书中写的很多事情都是具备着深刻的思考。\n\n　　记得叔本华阐述了一个十分有趣的观点，他认为你观察自己周围的这些人，如果你想要了解这个人，你只要知道让他们感到开心的是什么事情就可以知道他是一个什么样的人。看到他写的这个内容我不禁会心一笑，难怪他会说你要是想和从聊天中获取到快乐你必然是失望的，因为一百个人很难有一个不是傻子，还有女人都是浅薄无趣的这样的话。虽然这样的话可能会让很多人站起来反驳，说这人绝对是个傻逼，你算什么东西也敢批判女性。但我认为，如果没有任何独立思考的意识，那么其言论看来也是可笑的。\n\n　　想清楚这些事情之后，开始修改简历，重新开始找工作。之后陆续去面试了不同规模的公司，最后也得到了offer。每次我去面试的时候，我都会把自己填的表格写的题目的那一瞬间拍照记录下来，因为我想提醒自己记住这个场景。这一刻的无奈，这一刻的沮丧，这一刻的难受，这一刻的渺小，并提醒自己说自己真的很tm讨厌填表，也决不能有下次再有填表的可能。\n　　\n　　这一次的经历也是在教会自己，对任何事情或的人的期望都应该在自己心里减少，因为只有自己才可以让自己散发出光芒，所有的愤怒、失落其实都应该去归根于自身的无知和意志的薄弱。可以输，但不能怂。\n\n　　Last but not least,you can only enjoy yourself,not anyone else.And just share with people having the same hobby.\n\n\n\n\n\n","source":"_posts/找工作的一些感受.md","raw":"layout: \"post\"\ntitle: \"找工作的一些感受\"\ndate: \"2019-04-19 20:09\"\ncategories:\n- [LIFE]\ntags:\n- EXPERIENCE\n---\n　　因为去年的辞职，而且是在没有找到下一份工作的情况的裸辞，所以今年开学之后做的第一件事情重写简历，然后投简历寻找下一份工作。但是让我没想到的是自己寻找工作的过程会这样的不顺利，也在这个过程中体会到了找工作的不易，以及自身力量的渺小。\n<!-- more -->\n\n　　前后先是接到一些来自hr的电话，因为自己投递了不同城市的职位，所以接到了不同城市的电话，有来自北京的，也有来自上海的，但大多还是来自上海的电话。问的问题基本上是这么几个，你几月份毕业，四六级过了吗，专业成绩排名，有拿过什么奖吗，为什么从前一个公司离职，一周能来实习几天，什么时候可以过来实习，期望薪资是多少......还有hr问我你认为自己适合搞技术么。\n\n　　刚开始找工作自己还算是比较自信，自以为凭借自己现在掌握的知识水平，如果有公司愿意去培养一个新人，应该是可以能够获得一份自己想到去做的职位，所以自己刚开始在简历上写的是大数据开发岗位而不是自己之前实习做过的Web开发。但是自己所有的职位也都会去投递，包括大数据、Web、以及爬虫，因为想着即使人家不要我也可以混个面试经验，看看他们都问些什么。刚开始是十分想去做自己想去做的东西，所以当接到hr的电话的时候，我会问对方有没有大数据的业务，以及是否可以在完成本职工作的情况下去任职不同形式的工作，还会和对方聊由于自己毕设的原因所以可能不会去实习，即使去实习也是快要到毕业的时候，因为自己想要花更多时间在自己的毕业设计上面，以及在被问到薪资的时候毫不犹豫的说12-15k。\n\n　　所以在之前以前面的方式和hr聊过之后，基本没有hr会再去联系我。开始自己没有明白原因，直到后来在拉勾上也不知道投过多少份简历和在BOSS上投过不知道多少份简历之后，以及面试过几家公司之后，才弄懂之前的原因。我觉得原因有一下几个，第一因为招聘的是应届生，所以其实对经验的要求并没有那么高，地位属于最低的那一群，人家觉得差不多能用就可以，拿过来实习一段时间就可以去干活，即使你可能比别人要强一点，但是人家根本不很care你如何，唯一的区别可能就是hr筛选简历的一个优势而已。第二是自己报的工资要求高了一些，除了像BAT或者其他大一点的公司可以对应届生开出11k以上的薪资，对于一些小一点的公司，基本不太能对一个应届生开出那么高的人力成本。第三我不接受马上去实习，前面也提到了，公司其实是希望你能够马上去为它们干活快速熟悉业务，因为这样你在和他们签订合同之前就可以尽快产生效益。第四，互联网寒冬，很多公司招聘的岗位都在缩减，甚至有些都在春季停止了招聘，所以就业的机会也变少了许多。\n\n　　在经历了前面的经历之后，基本没有得到回复。在得到不友好的回馈之后，也明白了不是你想去干什么就可以的，招聘永远是看你是否存在它们需要的经验，能否为它们产生它们需要的利益，事实就是这样。而且大公司的招聘流程都很长，久到让你等到绝望，如果想要进入大公司应该提前很久去做准备，小一点的公司的话招聘流程不会那么久，如果你想换一个大一点的公司进去取取经，那么就应该在离职前很久就做准备，不然你就会感受到裸辞之后一个较长的失业期。其实裸辞是一个不理智的行为，因为找工作的话很多公司是看你是不是完全适合它们公司的业务，因为即使他们缺人，业务也可以照常走，也不会那么着急的去招你进去，他们完全不着急，因为招聘对于他们来说只是工作的一小部分，但是对于一个失业的求职者来说就恰恰相反了。\n\n　　记得第一次面试是去一家叫什么图丽信息的公司，那天我跟在hr后面进门的时候看到手机有信息，就打开手机看看是什么内容。后来居然被那个技术总监认为自己进门在玩手机这么不认真，我实在对那个技术总监牛批的态度搞得有些不爽，一幅上位者的嘴脸。我就故意说为什么不可以看消息，万一有什么重要的消息怎么办。接下来就是他看到我在前面填的一个表很多没填的地方，我就说不想填，因为很多内容你们有我的简历，属于重复内容，不需要填，面试官看我态度这么硬，还问自己家里条件是不是很好，还有自己是不是对他们公司根本看不上。本来没有什么，就是很讨厌他那种作为技术总监一上来就给自己一种不尊重的自以为是的感觉，我宁愿不要这份工作也不愿去理会这种人。因为即使去了以后也只会更难受。\n\n　　总之那天就是自己今年面试的第一个公司，也是自己和他们的技术总监互相看不上暗中互怼的一次面试。因为那个公司位置比较偏僻，所以自己从他们公司出来，转乘公交之后突然迷了路，也不想直接回学校。下了车自己就走在一条空荡的小街，冷风肆意吹在自己的身体上，身体忍不住颤抖，肚子很饿，但又没碰到一家餐馆，只能挨着饿空着肚子继续往前走，想着自己处于失业状态，如果没工作就连买饭的钱都没有，但作为生存最低的要求是可以有钱能够买口饭吃。这让我想起乔布斯在辍学之后，睡在同学宿舍的地板，回收可乐瓶维持买口饭吃，并为了吃饭走上七英里的路程，穿过波特兰市区去到一个被叫做Hare Krishna的神庙，仅仅是因为这家寺庙每周日有灵修活动和免费聚餐。还有周星驰在电影新喜剧之王里描述那种为了演戏不要钱只是为了吃口饭的场景。以前这种只是在书里和电影里看到却无法感同身受，那一刻自己是有真的体会到那种为了生存无奈的感觉，也感受到生活好像不过就是这样，忙忙碌碌只是为了吃口饭，有个地方可以落脚，真是空洞又现实。\n\n　　也就是在那段时间，自己开始思考自己的职业道路，想要试着去跟随自己内心的想法，仅凭着感觉去做其它的职业而不问结果，想着混差点又怎样呢。所以之后自己在三月二十号去面试了宇视科技的销售岗位，它们在我们学校进行面试，可以说挺会替学生考虑，避免了我们学校一群人往他们公司奔波而最终没有面试通过的失落感。因为自己没打印成绩单的原因，所以提早去教务处打印成绩单，然后直接去到面试的地点。因为我提前十多分钟到了，而这时他们的面试人员以及都到了，我就直接和他们的销售面试官开始了面试。\n\n　　其实对于这种正在开拓市场的公司，销售在这种公司的地位是很高的。这也是自己后来才开始明白的，也正是这帮销售，才是公司真正的收入的起点。但是要想把销售干好，没有很深的积累和很好的口才是不太可能的一件事情。\n\n　　之后面试官就拿着他们手上我的简历开始对我的询问，与一般的技术面试的开场就不同，首先对我说你是南昌人?我想了想，还是回答了我是湖南永州人，可能之前在你们的资料上没有认真填写信息所以你手上看到的我是南昌人。面试官又说，那你是湖南人，你们那里是有很多土匪呀。我只能笑着说刚改革开放那段时间是这样的，尤其是在湘西那一块儿。之后就是我和面试官之间长达四十分钟的聊天,不过真的很轻松愉快，一次很难忘的经历。-.-\n\n　　面试官看上去的年龄大概有四十多接近五十的样子，开始和面试官聊了我之前的一些在学校的实践经历以及自己在认识到一些事情的本质之后的失望与不屑，以及在自己长时间的努力之后但结果却差强人意的失落感，以及那之后很长时间都没能走出那段低落的状态，还有简单的谈了谈自己对为什么想要做销售的原因和理解等等。面试官是一个很不错的人，因为让我觉得他是在用真心和我交谈，我也能感受到他是一个十分负责人的人，也针对自己的一些经历和想法给自己提出建议，是一个很成熟温和的北方男人。我很感谢也很开心能够和他这样一位对问题了解深刻的人去聊天探讨，毕竟这样的对话还是很少很难得的。\n\n　　具体细节就不在博客中记录了，因为很多都是使用事实和比喻进行讨论与论证，但最后我确实是被他说服了。他最后给我的建议是，不能够在自己对一件事情没有多一些准备和了解的情况下去做决定，而且应该选择一条路去不断往下深入，由于社会的现实与残酷，更加应该选择自己当前最擅长的东西去做，如果对一个东西有足够的兴趣，可以不妨在养活自己的前提下去实践。\n\n　　这种方式我在认真思考之后，觉得是较为理性的方式。按照自己的性格来的话可能会说追求自己想要的东西就会不遗余力，喜欢把自己逼到绝境爆发出来的那种力量，但是许多事情更加需要理性去处理，要弄明白自己的真正的内心的感受的时候才去做决定比较合适，即使是需要把自己逼到绝境，也是需要自身有一些积累才行，这种积累更是一种成熟，在行动之前多了一份对自身与他人的理解，对社会现实的认识。\n\n　　所以以后自己无论想去做尝试的时候，不妨可以自行去往深入探索，而不能仅停留在感觉上的认识，对自己多一些沉淀，在真正对其有一些理解的时候，再去做选择或许更为合适。\n\n　　另外一个面试官教我的理论让我印象特别深，他对我说，你是不是想要证明自己。我仔细想了想，虽然不是喜欢张扬的人，但确实是想要证明自己，所以我果断的说对的。然后他对我说，你知道为什么很多热点就突然消失了吗？我仔细想了一会儿，就回答说因为他们根本不关心。面试官后来阐述说的其实和我的回答差不多，其实每个人都对与自己无关的事情不会投入很多关注，无论这个人有过多高的成就，虽然他说的很冷漠，但是却直戳事实。\n\n　　记得看过一篇文章，写的是作者在一个餐厅靠窗的位置吃饭，突然就一个东西从楼上掉下来，把餐厅的玻璃都砸碎了，差点砸到他，可想而知如果砸到他那么肯定是性命不保。当时那个东西掉下来的瞬间把整个餐厅的人都吓到了，也对作者的安全感到唏嘘，但很快他们就开始自己吃自己的饭，一切好像从未发生过一样。作者感慨他在生命受到威胁的时候，周围人的表现，让他真正认识理解到人们的冷漠。当然这不是针对人性善恶的讨论，只是一种对意识形态的观点。\n\n　　其实表述这么多，只是想简单的说明一个道理，人真正的幸福不可能来自于他人，去做真的可以令你感到轻松愉快的事情，只有你自己真正开心快乐才是真正获得了幸福，而且这只能是来自于自己的内心。如果你期望幸福来自于在他人心中的形象，那么让你失望的几率比较高。最近在读叔本华的人生的智慧，他在书中也恰好提到了同样的观点，我看到这部分的时候也感到十分认同。当然我不是对他在书中写的全部观点都表示赞同，从他的文字可以感受到这是一个有些孤傲高冷的人，但我认为这是他性格上的缺陷，也导致了他的有些文字有些偏颇而不够完美。虽然在我心中不够完美，自己还是很喜欢这个哲学家，因为他在这本书中写的很多事情都是具备着深刻的思考。\n\n　　记得叔本华阐述了一个十分有趣的观点，他认为你观察自己周围的这些人，如果你想要了解这个人，你只要知道让他们感到开心的是什么事情就可以知道他是一个什么样的人。看到他写的这个内容我不禁会心一笑，难怪他会说你要是想和从聊天中获取到快乐你必然是失望的，因为一百个人很难有一个不是傻子，还有女人都是浅薄无趣的这样的话。虽然这样的话可能会让很多人站起来反驳，说这人绝对是个傻逼，你算什么东西也敢批判女性。但我认为，如果没有任何独立思考的意识，那么其言论看来也是可笑的。\n\n　　想清楚这些事情之后，开始修改简历，重新开始找工作。之后陆续去面试了不同规模的公司，最后也得到了offer。每次我去面试的时候，我都会把自己填的表格写的题目的那一瞬间拍照记录下来，因为我想提醒自己记住这个场景。这一刻的无奈，这一刻的沮丧，这一刻的难受，这一刻的渺小，并提醒自己说自己真的很tm讨厌填表，也决不能有下次再有填表的可能。\n　　\n　　这一次的经历也是在教会自己，对任何事情或的人的期望都应该在自己心里减少，因为只有自己才可以让自己散发出光芒，所有的愤怒、失落其实都应该去归根于自身的无知和意志的薄弱。可以输，但不能怂。\n\n　　Last but not least,you can only enjoy yourself,not anyone else.And just share with people having the same hobby.\n\n\n\n\n\n","slug":"找工作的一些感受","published":1,"updated":"2019-05-19T09:42:05.866Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxav0011fo81mjsefbvp","content":"<p>　　因为去年的辞职，而且是在没有找到下一份工作的情况的裸辞，所以今年开学之后做的第一件事情重写简历，然后投简历寻找下一份工作。但是让我没想到的是自己寻找工作的过程会这样的不顺利，也在这个过程中体会到了找工作的不易，以及自身力量的渺小。<br><a id=\"more\"></a></p>\n<p>　　前后先是接到一些来自hr的电话，因为自己投递了不同城市的职位，所以接到了不同城市的电话，有来自北京的，也有来自上海的，但大多还是来自上海的电话。问的问题基本上是这么几个，你几月份毕业，四六级过了吗，专业成绩排名，有拿过什么奖吗，为什么从前一个公司离职，一周能来实习几天，什么时候可以过来实习，期望薪资是多少……还有hr问我你认为自己适合搞技术么。</p>\n<p>　　刚开始找工作自己还算是比较自信，自以为凭借自己现在掌握的知识水平，如果有公司愿意去培养一个新人，应该是可以能够获得一份自己想到去做的职位，所以自己刚开始在简历上写的是大数据开发岗位而不是自己之前实习做过的Web开发。但是自己所有的职位也都会去投递，包括大数据、Web、以及爬虫，因为想着即使人家不要我也可以混个面试经验，看看他们都问些什么。刚开始是十分想去做自己想去做的东西，所以当接到hr的电话的时候，我会问对方有没有大数据的业务，以及是否可以在完成本职工作的情况下去任职不同形式的工作，还会和对方聊由于自己毕设的原因所以可能不会去实习，即使去实习也是快要到毕业的时候，因为自己想要花更多时间在自己的毕业设计上面，以及在被问到薪资的时候毫不犹豫的说12-15k。</p>\n<p>　　所以在之前以前面的方式和hr聊过之后，基本没有hr会再去联系我。开始自己没有明白原因，直到后来在拉勾上也不知道投过多少份简历和在BOSS上投过不知道多少份简历之后，以及面试过几家公司之后，才弄懂之前的原因。我觉得原因有一下几个，第一因为招聘的是应届生，所以其实对经验的要求并没有那么高，地位属于最低的那一群，人家觉得差不多能用就可以，拿过来实习一段时间就可以去干活，即使你可能比别人要强一点，但是人家根本不很care你如何，唯一的区别可能就是hr筛选简历的一个优势而已。第二是自己报的工资要求高了一些，除了像BAT或者其他大一点的公司可以对应届生开出11k以上的薪资，对于一些小一点的公司，基本不太能对一个应届生开出那么高的人力成本。第三我不接受马上去实习，前面也提到了，公司其实是希望你能够马上去为它们干活快速熟悉业务，因为这样你在和他们签订合同之前就可以尽快产生效益。第四，互联网寒冬，很多公司招聘的岗位都在缩减，甚至有些都在春季停止了招聘，所以就业的机会也变少了许多。</p>\n<p>　　在经历了前面的经历之后，基本没有得到回复。在得到不友好的回馈之后，也明白了不是你想去干什么就可以的，招聘永远是看你是否存在它们需要的经验，能否为它们产生它们需要的利益，事实就是这样。而且大公司的招聘流程都很长，久到让你等到绝望，如果想要进入大公司应该提前很久去做准备，小一点的公司的话招聘流程不会那么久，如果你想换一个大一点的公司进去取取经，那么就应该在离职前很久就做准备，不然你就会感受到裸辞之后一个较长的失业期。其实裸辞是一个不理智的行为，因为找工作的话很多公司是看你是不是完全适合它们公司的业务，因为即使他们缺人，业务也可以照常走，也不会那么着急的去招你进去，他们完全不着急，因为招聘对于他们来说只是工作的一小部分，但是对于一个失业的求职者来说就恰恰相反了。</p>\n<p>　　记得第一次面试是去一家叫什么图丽信息的公司，那天我跟在hr后面进门的时候看到手机有信息，就打开手机看看是什么内容。后来居然被那个技术总监认为自己进门在玩手机这么不认真，我实在对那个技术总监牛批的态度搞得有些不爽，一幅上位者的嘴脸。我就故意说为什么不可以看消息，万一有什么重要的消息怎么办。接下来就是他看到我在前面填的一个表很多没填的地方，我就说不想填，因为很多内容你们有我的简历，属于重复内容，不需要填，面试官看我态度这么硬，还问自己家里条件是不是很好，还有自己是不是对他们公司根本看不上。本来没有什么，就是很讨厌他那种作为技术总监一上来就给自己一种不尊重的自以为是的感觉，我宁愿不要这份工作也不愿去理会这种人。因为即使去了以后也只会更难受。</p>\n<p>　　总之那天就是自己今年面试的第一个公司，也是自己和他们的技术总监互相看不上暗中互怼的一次面试。因为那个公司位置比较偏僻，所以自己从他们公司出来，转乘公交之后突然迷了路，也不想直接回学校。下了车自己就走在一条空荡的小街，冷风肆意吹在自己的身体上，身体忍不住颤抖，肚子很饿，但又没碰到一家餐馆，只能挨着饿空着肚子继续往前走，想着自己处于失业状态，如果没工作就连买饭的钱都没有，但作为生存最低的要求是可以有钱能够买口饭吃。这让我想起乔布斯在辍学之后，睡在同学宿舍的地板，回收可乐瓶维持买口饭吃，并为了吃饭走上七英里的路程，穿过波特兰市区去到一个被叫做Hare Krishna的神庙，仅仅是因为这家寺庙每周日有灵修活动和免费聚餐。还有周星驰在电影新喜剧之王里描述那种为了演戏不要钱只是为了吃口饭的场景。以前这种只是在书里和电影里看到却无法感同身受，那一刻自己是有真的体会到那种为了生存无奈的感觉，也感受到生活好像不过就是这样，忙忙碌碌只是为了吃口饭，有个地方可以落脚，真是空洞又现实。</p>\n<p>　　也就是在那段时间，自己开始思考自己的职业道路，想要试着去跟随自己内心的想法，仅凭着感觉去做其它的职业而不问结果，想着混差点又怎样呢。所以之后自己在三月二十号去面试了宇视科技的销售岗位，它们在我们学校进行面试，可以说挺会替学生考虑，避免了我们学校一群人往他们公司奔波而最终没有面试通过的失落感。因为自己没打印成绩单的原因，所以提早去教务处打印成绩单，然后直接去到面试的地点。因为我提前十多分钟到了，而这时他们的面试人员以及都到了，我就直接和他们的销售面试官开始了面试。</p>\n<p>　　其实对于这种正在开拓市场的公司，销售在这种公司的地位是很高的。这也是自己后来才开始明白的，也正是这帮销售，才是公司真正的收入的起点。但是要想把销售干好，没有很深的积累和很好的口才是不太可能的一件事情。</p>\n<p>　　之后面试官就拿着他们手上我的简历开始对我的询问，与一般的技术面试的开场就不同，首先对我说你是南昌人?我想了想，还是回答了我是湖南永州人，可能之前在你们的资料上没有认真填写信息所以你手上看到的我是南昌人。面试官又说，那你是湖南人，你们那里是有很多土匪呀。我只能笑着说刚改革开放那段时间是这样的，尤其是在湘西那一块儿。之后就是我和面试官之间长达四十分钟的聊天,不过真的很轻松愉快，一次很难忘的经历。-.-</p>\n<p>　　面试官看上去的年龄大概有四十多接近五十的样子，开始和面试官聊了我之前的一些在学校的实践经历以及自己在认识到一些事情的本质之后的失望与不屑，以及在自己长时间的努力之后但结果却差强人意的失落感，以及那之后很长时间都没能走出那段低落的状态，还有简单的谈了谈自己对为什么想要做销售的原因和理解等等。面试官是一个很不错的人，因为让我觉得他是在用真心和我交谈，我也能感受到他是一个十分负责人的人，也针对自己的一些经历和想法给自己提出建议，是一个很成熟温和的北方男人。我很感谢也很开心能够和他这样一位对问题了解深刻的人去聊天探讨，毕竟这样的对话还是很少很难得的。</p>\n<p>　　具体细节就不在博客中记录了，因为很多都是使用事实和比喻进行讨论与论证，但最后我确实是被他说服了。他最后给我的建议是，不能够在自己对一件事情没有多一些准备和了解的情况下去做决定，而且应该选择一条路去不断往下深入，由于社会的现实与残酷，更加应该选择自己当前最擅长的东西去做，如果对一个东西有足够的兴趣，可以不妨在养活自己的前提下去实践。</p>\n<p>　　这种方式我在认真思考之后，觉得是较为理性的方式。按照自己的性格来的话可能会说追求自己想要的东西就会不遗余力，喜欢把自己逼到绝境爆发出来的那种力量，但是许多事情更加需要理性去处理，要弄明白自己的真正的内心的感受的时候才去做决定比较合适，即使是需要把自己逼到绝境，也是需要自身有一些积累才行，这种积累更是一种成熟，在行动之前多了一份对自身与他人的理解，对社会现实的认识。</p>\n<p>　　所以以后自己无论想去做尝试的时候，不妨可以自行去往深入探索，而不能仅停留在感觉上的认识，对自己多一些沉淀，在真正对其有一些理解的时候，再去做选择或许更为合适。</p>\n<p>　　另外一个面试官教我的理论让我印象特别深，他对我说，你是不是想要证明自己。我仔细想了想，虽然不是喜欢张扬的人，但确实是想要证明自己，所以我果断的说对的。然后他对我说，你知道为什么很多热点就突然消失了吗？我仔细想了一会儿，就回答说因为他们根本不关心。面试官后来阐述说的其实和我的回答差不多，其实每个人都对与自己无关的事情不会投入很多关注，无论这个人有过多高的成就，虽然他说的很冷漠，但是却直戳事实。</p>\n<p>　　记得看过一篇文章，写的是作者在一个餐厅靠窗的位置吃饭，突然就一个东西从楼上掉下来，把餐厅的玻璃都砸碎了，差点砸到他，可想而知如果砸到他那么肯定是性命不保。当时那个东西掉下来的瞬间把整个餐厅的人都吓到了，也对作者的安全感到唏嘘，但很快他们就开始自己吃自己的饭，一切好像从未发生过一样。作者感慨他在生命受到威胁的时候，周围人的表现，让他真正认识理解到人们的冷漠。当然这不是针对人性善恶的讨论，只是一种对意识形态的观点。</p>\n<p>　　其实表述这么多，只是想简单的说明一个道理，人真正的幸福不可能来自于他人，去做真的可以令你感到轻松愉快的事情，只有你自己真正开心快乐才是真正获得了幸福，而且这只能是来自于自己的内心。如果你期望幸福来自于在他人心中的形象，那么让你失望的几率比较高。最近在读叔本华的人生的智慧，他在书中也恰好提到了同样的观点，我看到这部分的时候也感到十分认同。当然我不是对他在书中写的全部观点都表示赞同，从他的文字可以感受到这是一个有些孤傲高冷的人，但我认为这是他性格上的缺陷，也导致了他的有些文字有些偏颇而不够完美。虽然在我心中不够完美，自己还是很喜欢这个哲学家，因为他在这本书中写的很多事情都是具备着深刻的思考。</p>\n<p>　　记得叔本华阐述了一个十分有趣的观点，他认为你观察自己周围的这些人，如果你想要了解这个人，你只要知道让他们感到开心的是什么事情就可以知道他是一个什么样的人。看到他写的这个内容我不禁会心一笑，难怪他会说你要是想和从聊天中获取到快乐你必然是失望的，因为一百个人很难有一个不是傻子，还有女人都是浅薄无趣的这样的话。虽然这样的话可能会让很多人站起来反驳，说这人绝对是个傻逼，你算什么东西也敢批判女性。但我认为，如果没有任何独立思考的意识，那么其言论看来也是可笑的。</p>\n<p>　　想清楚这些事情之后，开始修改简历，重新开始找工作。之后陆续去面试了不同规模的公司，最后也得到了offer。每次我去面试的时候，我都会把自己填的表格写的题目的那一瞬间拍照记录下来，因为我想提醒自己记住这个场景。这一刻的无奈，这一刻的沮丧，这一刻的难受，这一刻的渺小，并提醒自己说自己真的很tm讨厌填表，也决不能有下次再有填表的可能。<br>　　<br>　　这一次的经历也是在教会自己，对任何事情或的人的期望都应该在自己心里减少，因为只有自己才可以让自己散发出光芒，所有的愤怒、失落其实都应该去归根于自身的无知和意志的薄弱。可以输，但不能怂。</p>\n<p>　　Last but not least,you can only enjoy yourself,not anyone else.And just share with people having the same hobby.</p>\n","site":{"data":{}},"excerpt":"<p>　　因为去年的辞职，而且是在没有找到下一份工作的情况的裸辞，所以今年开学之后做的第一件事情重写简历，然后投简历寻找下一份工作。但是让我没想到的是自己寻找工作的过程会这样的不顺利，也在这个过程中体会到了找工作的不易，以及自身力量的渺小。<br>","more":"</p>\n<p>　　前后先是接到一些来自hr的电话，因为自己投递了不同城市的职位，所以接到了不同城市的电话，有来自北京的，也有来自上海的，但大多还是来自上海的电话。问的问题基本上是这么几个，你几月份毕业，四六级过了吗，专业成绩排名，有拿过什么奖吗，为什么从前一个公司离职，一周能来实习几天，什么时候可以过来实习，期望薪资是多少……还有hr问我你认为自己适合搞技术么。</p>\n<p>　　刚开始找工作自己还算是比较自信，自以为凭借自己现在掌握的知识水平，如果有公司愿意去培养一个新人，应该是可以能够获得一份自己想到去做的职位，所以自己刚开始在简历上写的是大数据开发岗位而不是自己之前实习做过的Web开发。但是自己所有的职位也都会去投递，包括大数据、Web、以及爬虫，因为想着即使人家不要我也可以混个面试经验，看看他们都问些什么。刚开始是十分想去做自己想去做的东西，所以当接到hr的电话的时候，我会问对方有没有大数据的业务，以及是否可以在完成本职工作的情况下去任职不同形式的工作，还会和对方聊由于自己毕设的原因所以可能不会去实习，即使去实习也是快要到毕业的时候，因为自己想要花更多时间在自己的毕业设计上面，以及在被问到薪资的时候毫不犹豫的说12-15k。</p>\n<p>　　所以在之前以前面的方式和hr聊过之后，基本没有hr会再去联系我。开始自己没有明白原因，直到后来在拉勾上也不知道投过多少份简历和在BOSS上投过不知道多少份简历之后，以及面试过几家公司之后，才弄懂之前的原因。我觉得原因有一下几个，第一因为招聘的是应届生，所以其实对经验的要求并没有那么高，地位属于最低的那一群，人家觉得差不多能用就可以，拿过来实习一段时间就可以去干活，即使你可能比别人要强一点，但是人家根本不很care你如何，唯一的区别可能就是hr筛选简历的一个优势而已。第二是自己报的工资要求高了一些，除了像BAT或者其他大一点的公司可以对应届生开出11k以上的薪资，对于一些小一点的公司，基本不太能对一个应届生开出那么高的人力成本。第三我不接受马上去实习，前面也提到了，公司其实是希望你能够马上去为它们干活快速熟悉业务，因为这样你在和他们签订合同之前就可以尽快产生效益。第四，互联网寒冬，很多公司招聘的岗位都在缩减，甚至有些都在春季停止了招聘，所以就业的机会也变少了许多。</p>\n<p>　　在经历了前面的经历之后，基本没有得到回复。在得到不友好的回馈之后，也明白了不是你想去干什么就可以的，招聘永远是看你是否存在它们需要的经验，能否为它们产生它们需要的利益，事实就是这样。而且大公司的招聘流程都很长，久到让你等到绝望，如果想要进入大公司应该提前很久去做准备，小一点的公司的话招聘流程不会那么久，如果你想换一个大一点的公司进去取取经，那么就应该在离职前很久就做准备，不然你就会感受到裸辞之后一个较长的失业期。其实裸辞是一个不理智的行为，因为找工作的话很多公司是看你是不是完全适合它们公司的业务，因为即使他们缺人，业务也可以照常走，也不会那么着急的去招你进去，他们完全不着急，因为招聘对于他们来说只是工作的一小部分，但是对于一个失业的求职者来说就恰恰相反了。</p>\n<p>　　记得第一次面试是去一家叫什么图丽信息的公司，那天我跟在hr后面进门的时候看到手机有信息，就打开手机看看是什么内容。后来居然被那个技术总监认为自己进门在玩手机这么不认真，我实在对那个技术总监牛批的态度搞得有些不爽，一幅上位者的嘴脸。我就故意说为什么不可以看消息，万一有什么重要的消息怎么办。接下来就是他看到我在前面填的一个表很多没填的地方，我就说不想填，因为很多内容你们有我的简历，属于重复内容，不需要填，面试官看我态度这么硬，还问自己家里条件是不是很好，还有自己是不是对他们公司根本看不上。本来没有什么，就是很讨厌他那种作为技术总监一上来就给自己一种不尊重的自以为是的感觉，我宁愿不要这份工作也不愿去理会这种人。因为即使去了以后也只会更难受。</p>\n<p>　　总之那天就是自己今年面试的第一个公司，也是自己和他们的技术总监互相看不上暗中互怼的一次面试。因为那个公司位置比较偏僻，所以自己从他们公司出来，转乘公交之后突然迷了路，也不想直接回学校。下了车自己就走在一条空荡的小街，冷风肆意吹在自己的身体上，身体忍不住颤抖，肚子很饿，但又没碰到一家餐馆，只能挨着饿空着肚子继续往前走，想着自己处于失业状态，如果没工作就连买饭的钱都没有，但作为生存最低的要求是可以有钱能够买口饭吃。这让我想起乔布斯在辍学之后，睡在同学宿舍的地板，回收可乐瓶维持买口饭吃，并为了吃饭走上七英里的路程，穿过波特兰市区去到一个被叫做Hare Krishna的神庙，仅仅是因为这家寺庙每周日有灵修活动和免费聚餐。还有周星驰在电影新喜剧之王里描述那种为了演戏不要钱只是为了吃口饭的场景。以前这种只是在书里和电影里看到却无法感同身受，那一刻自己是有真的体会到那种为了生存无奈的感觉，也感受到生活好像不过就是这样，忙忙碌碌只是为了吃口饭，有个地方可以落脚，真是空洞又现实。</p>\n<p>　　也就是在那段时间，自己开始思考自己的职业道路，想要试着去跟随自己内心的想法，仅凭着感觉去做其它的职业而不问结果，想着混差点又怎样呢。所以之后自己在三月二十号去面试了宇视科技的销售岗位，它们在我们学校进行面试，可以说挺会替学生考虑，避免了我们学校一群人往他们公司奔波而最终没有面试通过的失落感。因为自己没打印成绩单的原因，所以提早去教务处打印成绩单，然后直接去到面试的地点。因为我提前十多分钟到了，而这时他们的面试人员以及都到了，我就直接和他们的销售面试官开始了面试。</p>\n<p>　　其实对于这种正在开拓市场的公司，销售在这种公司的地位是很高的。这也是自己后来才开始明白的，也正是这帮销售，才是公司真正的收入的起点。但是要想把销售干好，没有很深的积累和很好的口才是不太可能的一件事情。</p>\n<p>　　之后面试官就拿着他们手上我的简历开始对我的询问，与一般的技术面试的开场就不同，首先对我说你是南昌人?我想了想，还是回答了我是湖南永州人，可能之前在你们的资料上没有认真填写信息所以你手上看到的我是南昌人。面试官又说，那你是湖南人，你们那里是有很多土匪呀。我只能笑着说刚改革开放那段时间是这样的，尤其是在湘西那一块儿。之后就是我和面试官之间长达四十分钟的聊天,不过真的很轻松愉快，一次很难忘的经历。-.-</p>\n<p>　　面试官看上去的年龄大概有四十多接近五十的样子，开始和面试官聊了我之前的一些在学校的实践经历以及自己在认识到一些事情的本质之后的失望与不屑，以及在自己长时间的努力之后但结果却差强人意的失落感，以及那之后很长时间都没能走出那段低落的状态，还有简单的谈了谈自己对为什么想要做销售的原因和理解等等。面试官是一个很不错的人，因为让我觉得他是在用真心和我交谈，我也能感受到他是一个十分负责人的人，也针对自己的一些经历和想法给自己提出建议，是一个很成熟温和的北方男人。我很感谢也很开心能够和他这样一位对问题了解深刻的人去聊天探讨，毕竟这样的对话还是很少很难得的。</p>\n<p>　　具体细节就不在博客中记录了，因为很多都是使用事实和比喻进行讨论与论证，但最后我确实是被他说服了。他最后给我的建议是，不能够在自己对一件事情没有多一些准备和了解的情况下去做决定，而且应该选择一条路去不断往下深入，由于社会的现实与残酷，更加应该选择自己当前最擅长的东西去做，如果对一个东西有足够的兴趣，可以不妨在养活自己的前提下去实践。</p>\n<p>　　这种方式我在认真思考之后，觉得是较为理性的方式。按照自己的性格来的话可能会说追求自己想要的东西就会不遗余力，喜欢把自己逼到绝境爆发出来的那种力量，但是许多事情更加需要理性去处理，要弄明白自己的真正的内心的感受的时候才去做决定比较合适，即使是需要把自己逼到绝境，也是需要自身有一些积累才行，这种积累更是一种成熟，在行动之前多了一份对自身与他人的理解，对社会现实的认识。</p>\n<p>　　所以以后自己无论想去做尝试的时候，不妨可以自行去往深入探索，而不能仅停留在感觉上的认识，对自己多一些沉淀，在真正对其有一些理解的时候，再去做选择或许更为合适。</p>\n<p>　　另外一个面试官教我的理论让我印象特别深，他对我说，你是不是想要证明自己。我仔细想了想，虽然不是喜欢张扬的人，但确实是想要证明自己，所以我果断的说对的。然后他对我说，你知道为什么很多热点就突然消失了吗？我仔细想了一会儿，就回答说因为他们根本不关心。面试官后来阐述说的其实和我的回答差不多，其实每个人都对与自己无关的事情不会投入很多关注，无论这个人有过多高的成就，虽然他说的很冷漠，但是却直戳事实。</p>\n<p>　　记得看过一篇文章，写的是作者在一个餐厅靠窗的位置吃饭，突然就一个东西从楼上掉下来，把餐厅的玻璃都砸碎了，差点砸到他，可想而知如果砸到他那么肯定是性命不保。当时那个东西掉下来的瞬间把整个餐厅的人都吓到了，也对作者的安全感到唏嘘，但很快他们就开始自己吃自己的饭，一切好像从未发生过一样。作者感慨他在生命受到威胁的时候，周围人的表现，让他真正认识理解到人们的冷漠。当然这不是针对人性善恶的讨论，只是一种对意识形态的观点。</p>\n<p>　　其实表述这么多，只是想简单的说明一个道理，人真正的幸福不可能来自于他人，去做真的可以令你感到轻松愉快的事情，只有你自己真正开心快乐才是真正获得了幸福，而且这只能是来自于自己的内心。如果你期望幸福来自于在他人心中的形象，那么让你失望的几率比较高。最近在读叔本华的人生的智慧，他在书中也恰好提到了同样的观点，我看到这部分的时候也感到十分认同。当然我不是对他在书中写的全部观点都表示赞同，从他的文字可以感受到这是一个有些孤傲高冷的人，但我认为这是他性格上的缺陷，也导致了他的有些文字有些偏颇而不够完美。虽然在我心中不够完美，自己还是很喜欢这个哲学家，因为他在这本书中写的很多事情都是具备着深刻的思考。</p>\n<p>　　记得叔本华阐述了一个十分有趣的观点，他认为你观察自己周围的这些人，如果你想要了解这个人，你只要知道让他们感到开心的是什么事情就可以知道他是一个什么样的人。看到他写的这个内容我不禁会心一笑，难怪他会说你要是想和从聊天中获取到快乐你必然是失望的，因为一百个人很难有一个不是傻子，还有女人都是浅薄无趣的这样的话。虽然这样的话可能会让很多人站起来反驳，说这人绝对是个傻逼，你算什么东西也敢批判女性。但我认为，如果没有任何独立思考的意识，那么其言论看来也是可笑的。</p>\n<p>　　想清楚这些事情之后，开始修改简历，重新开始找工作。之后陆续去面试了不同规模的公司，最后也得到了offer。每次我去面试的时候，我都会把自己填的表格写的题目的那一瞬间拍照记录下来，因为我想提醒自己记住这个场景。这一刻的无奈，这一刻的沮丧，这一刻的难受，这一刻的渺小，并提醒自己说自己真的很tm讨厌填表，也决不能有下次再有填表的可能。<br>　　<br>　　这一次的经历也是在教会自己，对任何事情或的人的期望都应该在自己心里减少，因为只有自己才可以让自己散发出光芒，所有的愤怒、失落其实都应该去归根于自身的无知和意志的薄弱。可以输，但不能怂。</p>\n<p>　　Last but not least,you can only enjoy yourself,not anyone else.And just share with people having the same hobby.</p>"},{"layout":"post","title":"早上五点的清晨","date":"2019-03-18T11:17:00.000Z","thumbnail":"http://swcheng.com/images/realmorning.jpg","_content":"　　不知什么原因，昨天十点半上床睡觉的自己，今天凌晨三点十多分我就醒了，看了下手机闪烁的绿灯，是有没有查看的通知。打开手机一看，原来是我妈发过来的三条信息，发送时间显示是凌晨1:19分，查看了聊天信息后，原来是我昨天和我妈聊天聊到自己关于自己职业的一些思考，觉得做技术好像对于自己来说没有觉得特别开心，感觉一直是在进行一段孤独的旅程，并感慨根据自己对于自己的了解来说，想要在技术上有所成就，做出一些能够真正了不起的事情，还是得进入一个非常好的团队才行，但这种事情是可遇而不可求的，我觉得自己似乎不会那么幸运。而且长时间坐在计算机前面写代码确实是一件非常伤身体的事情，因为去年的时候我去医院检查眼睛就发现自己因为经常熬夜磕代码导致晶状体轻度浑浊，眼睛前面有时候会感觉到一些黑色的漂浮物在游荡，除此之外还有许多我没有和我妈说过的事情，只不过自己都选择隐瞒在心里。\n<!-- more -->\n　　我觉得能够真正做出影响某个行业的事情或者改变人们生活的事情的人只有两种，要么是对于某个事情有着真正发自内心的热爱，要么是拥有惊人的自制力。从大学开始正式接触计算机，(之前只能算作会用电脑打游戏)因为到了大学自己才真正拥有自己的电脑，当初想要学习计算机主要有两个原因，一是自己确实比较喜欢玩游戏，所以也比较喜欢玩电脑；二是和朋友一致认为计算机是一个将来可以搞出一个名堂的行业，所以决定投入到其中去。到了大学开始学习编程语言之类的课程，其实刚开始学编程也没有什么特别的技巧，就是硬磕，程序运行不起来直到调试到运行起来为止，之后就是渐渐养成一些对程序的认识的意识，就代码看的多了，记的东西多了，也渐渐能够对一些简单的逻辑代码做到顺其自然。\n\n　　我自认为在学习代码的过程中有很多探索的乐趣，因为自己是在自己的好奇心的驱使下去解决一个又一个的问题，但是逐渐发现自己陷入了一个瓶颈，对于很多东西似乎只懂得如何去使用，却不明白它其中的原理。这时候才认识到之前阿里老程序员的建议，不过真的要做到对原理的探索确实是一件非常困难的事情，自己确实还离那个水平差距很远，但不知道为什么，自己却很难再去向这一步迈出探索的步伐，好像就像梵高的那句话说的一样，每个人的心里都有一团火，却从不曾拿出来暖和自己，而自己心里的那团火好像已经快要熄灭，无论怎样想要将其拿出来暖和自己都做不到。\n\n　　我发现自己也特别喜欢与不同的人聊天，去了解一个人思想，一个人的经历，发现每个人的不同，思考一个人的生活轨迹，以及为什么会这样进行下去的原因。每一次与人的交流都让自己觉得特别开心，因为自己的思维触碰到了一些新的东西，当然也会有不开心的时候，不过这是因为对方的思考问题的态度让要么我觉得与自己对人生的态度相悖，要么就是太简单的无所谓让我感受不到生活的乐趣。每次思维的碰触都让我觉得比较兴奋，而此刻我也觉得这是自己可以真正感到快乐轻松的事情，对比与代码的感觉，所以我昨晚和我妈聊天的时候才会想要去说自己要不改行去做一些其它的事情之类的话。\n\n　　我妈发的信息的内容的大概意思是想要表达的是钱很难赚，世界上没有两全其美的事情，其实当时我的心情是有点生气，有点觉得我妈不够能理解自己，也觉得自己好像每次做一次决定都会遭到家里人的阻挠而不是得到鼓励。其实我真的有认真思考过每次决定，而不是随意去做一个决定，只是总是没有得到理解和支持。甚至当时自己对家人还感到一些失望。但是现在我再去看同样的消息内容，我再去看同样的话语的时候，理解到感受到的是我妈焦急的心情，也觉得自己其实有很多话没有能够对她说的足够清楚所以才导致我妈不够能理解自己。但是自己就是一个不太爱什么话都说的人，希望自己以后可以做到多去大胆随意的表达自己的一些想法。\n\n　　今天是因为老友要来上海参加复试，为了去火车站接他自己五点多就起床，洗漱之后就匆匆往上海南出发。凌晨五点的校园除了鸟叫，路边还没熄灭的灯光，以及在宿舍门口没带卡等待着开门的一个彪形大汉，(吓我一跳..=.-)，就是夜色笼罩着整个校园，走在空旷的580大路上，感觉特别开心，无所顾忌的在校园里唱着女神的第一首专辑的第一首歌超快感，心里默念\"很孤独，却很爽\"。\n\n　　那一刻自己真的是觉得，自己被太多的思虑拖得失去了自己本来的色彩，为何不踏着轻松愉快的节奏，去简单的做任何事情，just do it.这不是自己17年一直让自己坚持下去的信条嘛，所以与其再去陷入不开心的思考，不如把握好当前的每一秒钟，别让其在无意义的思考中流逝，所以，当自己下次再对生活感到心灰意冷的时候，不妨再去体会一下早上五点的清晨。\n\n![](/images/realmorning.jpg \"真正的早晨\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/早上五点的清晨.md","raw":"layout: \"post\"\ntitle: \"早上五点的清晨\"\ndate: \"2019-03-18 19:17\"\ncategories:\n- [LIFE]\ntags:\n- FEELING\nthumbnail: http://swcheng.com/images/realmorning.jpg\n---\n　　不知什么原因，昨天十点半上床睡觉的自己，今天凌晨三点十多分我就醒了，看了下手机闪烁的绿灯，是有没有查看的通知。打开手机一看，原来是我妈发过来的三条信息，发送时间显示是凌晨1:19分，查看了聊天信息后，原来是我昨天和我妈聊天聊到自己关于自己职业的一些思考，觉得做技术好像对于自己来说没有觉得特别开心，感觉一直是在进行一段孤独的旅程，并感慨根据自己对于自己的了解来说，想要在技术上有所成就，做出一些能够真正了不起的事情，还是得进入一个非常好的团队才行，但这种事情是可遇而不可求的，我觉得自己似乎不会那么幸运。而且长时间坐在计算机前面写代码确实是一件非常伤身体的事情，因为去年的时候我去医院检查眼睛就发现自己因为经常熬夜磕代码导致晶状体轻度浑浊，眼睛前面有时候会感觉到一些黑色的漂浮物在游荡，除此之外还有许多我没有和我妈说过的事情，只不过自己都选择隐瞒在心里。\n<!-- more -->\n　　我觉得能够真正做出影响某个行业的事情或者改变人们生活的事情的人只有两种，要么是对于某个事情有着真正发自内心的热爱，要么是拥有惊人的自制力。从大学开始正式接触计算机，(之前只能算作会用电脑打游戏)因为到了大学自己才真正拥有自己的电脑，当初想要学习计算机主要有两个原因，一是自己确实比较喜欢玩游戏，所以也比较喜欢玩电脑；二是和朋友一致认为计算机是一个将来可以搞出一个名堂的行业，所以决定投入到其中去。到了大学开始学习编程语言之类的课程，其实刚开始学编程也没有什么特别的技巧，就是硬磕，程序运行不起来直到调试到运行起来为止，之后就是渐渐养成一些对程序的认识的意识，就代码看的多了，记的东西多了，也渐渐能够对一些简单的逻辑代码做到顺其自然。\n\n　　我自认为在学习代码的过程中有很多探索的乐趣，因为自己是在自己的好奇心的驱使下去解决一个又一个的问题，但是逐渐发现自己陷入了一个瓶颈，对于很多东西似乎只懂得如何去使用，却不明白它其中的原理。这时候才认识到之前阿里老程序员的建议，不过真的要做到对原理的探索确实是一件非常困难的事情，自己确实还离那个水平差距很远，但不知道为什么，自己却很难再去向这一步迈出探索的步伐，好像就像梵高的那句话说的一样，每个人的心里都有一团火，却从不曾拿出来暖和自己，而自己心里的那团火好像已经快要熄灭，无论怎样想要将其拿出来暖和自己都做不到。\n\n　　我发现自己也特别喜欢与不同的人聊天，去了解一个人思想，一个人的经历，发现每个人的不同，思考一个人的生活轨迹，以及为什么会这样进行下去的原因。每一次与人的交流都让自己觉得特别开心，因为自己的思维触碰到了一些新的东西，当然也会有不开心的时候，不过这是因为对方的思考问题的态度让要么我觉得与自己对人生的态度相悖，要么就是太简单的无所谓让我感受不到生活的乐趣。每次思维的碰触都让我觉得比较兴奋，而此刻我也觉得这是自己可以真正感到快乐轻松的事情，对比与代码的感觉，所以我昨晚和我妈聊天的时候才会想要去说自己要不改行去做一些其它的事情之类的话。\n\n　　我妈发的信息的内容的大概意思是想要表达的是钱很难赚，世界上没有两全其美的事情，其实当时我的心情是有点生气，有点觉得我妈不够能理解自己，也觉得自己好像每次做一次决定都会遭到家里人的阻挠而不是得到鼓励。其实我真的有认真思考过每次决定，而不是随意去做一个决定，只是总是没有得到理解和支持。甚至当时自己对家人还感到一些失望。但是现在我再去看同样的消息内容，我再去看同样的话语的时候，理解到感受到的是我妈焦急的心情，也觉得自己其实有很多话没有能够对她说的足够清楚所以才导致我妈不够能理解自己。但是自己就是一个不太爱什么话都说的人，希望自己以后可以做到多去大胆随意的表达自己的一些想法。\n\n　　今天是因为老友要来上海参加复试，为了去火车站接他自己五点多就起床，洗漱之后就匆匆往上海南出发。凌晨五点的校园除了鸟叫，路边还没熄灭的灯光，以及在宿舍门口没带卡等待着开门的一个彪形大汉，(吓我一跳..=.-)，就是夜色笼罩着整个校园，走在空旷的580大路上，感觉特别开心，无所顾忌的在校园里唱着女神的第一首专辑的第一首歌超快感，心里默念\"很孤独，却很爽\"。\n\n　　那一刻自己真的是觉得，自己被太多的思虑拖得失去了自己本来的色彩，为何不踏着轻松愉快的节奏，去简单的做任何事情，just do it.这不是自己17年一直让自己坚持下去的信条嘛，所以与其再去陷入不开心的思考，不如把握好当前的每一秒钟，别让其在无意义的思考中流逝，所以，当自己下次再对生活感到心灰意冷的时候，不妨再去体会一下早上五点的清晨。\n\n![](/images/realmorning.jpg \"真正的早晨\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"早上五点的清晨","published":1,"updated":"2019-05-19T09:42:05.867Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxaw0014fo81du5gcnhi","content":"<p>　　不知什么原因，昨天十点半上床睡觉的自己，今天凌晨三点十多分我就醒了，看了下手机闪烁的绿灯，是有没有查看的通知。打开手机一看，原来是我妈发过来的三条信息，发送时间显示是凌晨1:19分，查看了聊天信息后，原来是我昨天和我妈聊天聊到自己关于自己职业的一些思考，觉得做技术好像对于自己来说没有觉得特别开心，感觉一直是在进行一段孤独的旅程，并感慨根据自己对于自己的了解来说，想要在技术上有所成就，做出一些能够真正了不起的事情，还是得进入一个非常好的团队才行，但这种事情是可遇而不可求的，我觉得自己似乎不会那么幸运。而且长时间坐在计算机前面写代码确实是一件非常伤身体的事情，因为去年的时候我去医院检查眼睛就发现自己因为经常熬夜磕代码导致晶状体轻度浑浊，眼睛前面有时候会感觉到一些黑色的漂浮物在游荡，除此之外还有许多我没有和我妈说过的事情，只不过自己都选择隐瞒在心里。<br><a id=\"more\"></a><br>　　我觉得能够真正做出影响某个行业的事情或者改变人们生活的事情的人只有两种，要么是对于某个事情有着真正发自内心的热爱，要么是拥有惊人的自制力。从大学开始正式接触计算机，(之前只能算作会用电脑打游戏)因为到了大学自己才真正拥有自己的电脑，当初想要学习计算机主要有两个原因，一是自己确实比较喜欢玩游戏，所以也比较喜欢玩电脑；二是和朋友一致认为计算机是一个将来可以搞出一个名堂的行业，所以决定投入到其中去。到了大学开始学习编程语言之类的课程，其实刚开始学编程也没有什么特别的技巧，就是硬磕，程序运行不起来直到调试到运行起来为止，之后就是渐渐养成一些对程序的认识的意识，就代码看的多了，记的东西多了，也渐渐能够对一些简单的逻辑代码做到顺其自然。</p>\n<p>　　我自认为在学习代码的过程中有很多探索的乐趣，因为自己是在自己的好奇心的驱使下去解决一个又一个的问题，但是逐渐发现自己陷入了一个瓶颈，对于很多东西似乎只懂得如何去使用，却不明白它其中的原理。这时候才认识到之前阿里老程序员的建议，不过真的要做到对原理的探索确实是一件非常困难的事情，自己确实还离那个水平差距很远，但不知道为什么，自己却很难再去向这一步迈出探索的步伐，好像就像梵高的那句话说的一样，每个人的心里都有一团火，却从不曾拿出来暖和自己，而自己心里的那团火好像已经快要熄灭，无论怎样想要将其拿出来暖和自己都做不到。</p>\n<p>　　我发现自己也特别喜欢与不同的人聊天，去了解一个人思想，一个人的经历，发现每个人的不同，思考一个人的生活轨迹，以及为什么会这样进行下去的原因。每一次与人的交流都让自己觉得特别开心，因为自己的思维触碰到了一些新的东西，当然也会有不开心的时候，不过这是因为对方的思考问题的态度让要么我觉得与自己对人生的态度相悖，要么就是太简单的无所谓让我感受不到生活的乐趣。每次思维的碰触都让我觉得比较兴奋，而此刻我也觉得这是自己可以真正感到快乐轻松的事情，对比与代码的感觉，所以我昨晚和我妈聊天的时候才会想要去说自己要不改行去做一些其它的事情之类的话。</p>\n<p>　　我妈发的信息的内容的大概意思是想要表达的是钱很难赚，世界上没有两全其美的事情，其实当时我的心情是有点生气，有点觉得我妈不够能理解自己，也觉得自己好像每次做一次决定都会遭到家里人的阻挠而不是得到鼓励。其实我真的有认真思考过每次决定，而不是随意去做一个决定，只是总是没有得到理解和支持。甚至当时自己对家人还感到一些失望。但是现在我再去看同样的消息内容，我再去看同样的话语的时候，理解到感受到的是我妈焦急的心情，也觉得自己其实有很多话没有能够对她说的足够清楚所以才导致我妈不够能理解自己。但是自己就是一个不太爱什么话都说的人，希望自己以后可以做到多去大胆随意的表达自己的一些想法。</p>\n<p>　　今天是因为老友要来上海参加复试，为了去火车站接他自己五点多就起床，洗漱之后就匆匆往上海南出发。凌晨五点的校园除了鸟叫，路边还没熄灭的灯光，以及在宿舍门口没带卡等待着开门的一个彪形大汉，(吓我一跳..=.-)，就是夜色笼罩着整个校园，走在空旷的580大路上，感觉特别开心，无所顾忌的在校园里唱着女神的第一首专辑的第一首歌超快感，心里默念”很孤独，却很爽”。</p>\n<p>　　那一刻自己真的是觉得，自己被太多的思虑拖得失去了自己本来的色彩，为何不踏着轻松愉快的节奏，去简单的做任何事情，just do it.这不是自己17年一直让自己坚持下去的信条嘛，所以与其再去陷入不开心的思考，不如把握好当前的每一秒钟，别让其在无意义的思考中流逝，所以，当自己下次再对生活感到心灰意冷的时候，不妨再去体会一下早上五点的清晨。</p>\n<p><img src=\"/images/realmorning.jpg\" alt=\"\" title=\"真正的早晨\"></p>\n","site":{"data":{}},"excerpt":"<p>　　不知什么原因，昨天十点半上床睡觉的自己，今天凌晨三点十多分我就醒了，看了下手机闪烁的绿灯，是有没有查看的通知。打开手机一看，原来是我妈发过来的三条信息，发送时间显示是凌晨1:19分，查看了聊天信息后，原来是我昨天和我妈聊天聊到自己关于自己职业的一些思考，觉得做技术好像对于自己来说没有觉得特别开心，感觉一直是在进行一段孤独的旅程，并感慨根据自己对于自己的了解来说，想要在技术上有所成就，做出一些能够真正了不起的事情，还是得进入一个非常好的团队才行，但这种事情是可遇而不可求的，我觉得自己似乎不会那么幸运。而且长时间坐在计算机前面写代码确实是一件非常伤身体的事情，因为去年的时候我去医院检查眼睛就发现自己因为经常熬夜磕代码导致晶状体轻度浑浊，眼睛前面有时候会感觉到一些黑色的漂浮物在游荡，除此之外还有许多我没有和我妈说过的事情，只不过自己都选择隐瞒在心里。<br>","more":"<br>　　我觉得能够真正做出影响某个行业的事情或者改变人们生活的事情的人只有两种，要么是对于某个事情有着真正发自内心的热爱，要么是拥有惊人的自制力。从大学开始正式接触计算机，(之前只能算作会用电脑打游戏)因为到了大学自己才真正拥有自己的电脑，当初想要学习计算机主要有两个原因，一是自己确实比较喜欢玩游戏，所以也比较喜欢玩电脑；二是和朋友一致认为计算机是一个将来可以搞出一个名堂的行业，所以决定投入到其中去。到了大学开始学习编程语言之类的课程，其实刚开始学编程也没有什么特别的技巧，就是硬磕，程序运行不起来直到调试到运行起来为止，之后就是渐渐养成一些对程序的认识的意识，就代码看的多了，记的东西多了，也渐渐能够对一些简单的逻辑代码做到顺其自然。</p>\n<p>　　我自认为在学习代码的过程中有很多探索的乐趣，因为自己是在自己的好奇心的驱使下去解决一个又一个的问题，但是逐渐发现自己陷入了一个瓶颈，对于很多东西似乎只懂得如何去使用，却不明白它其中的原理。这时候才认识到之前阿里老程序员的建议，不过真的要做到对原理的探索确实是一件非常困难的事情，自己确实还离那个水平差距很远，但不知道为什么，自己却很难再去向这一步迈出探索的步伐，好像就像梵高的那句话说的一样，每个人的心里都有一团火，却从不曾拿出来暖和自己，而自己心里的那团火好像已经快要熄灭，无论怎样想要将其拿出来暖和自己都做不到。</p>\n<p>　　我发现自己也特别喜欢与不同的人聊天，去了解一个人思想，一个人的经历，发现每个人的不同，思考一个人的生活轨迹，以及为什么会这样进行下去的原因。每一次与人的交流都让自己觉得特别开心，因为自己的思维触碰到了一些新的东西，当然也会有不开心的时候，不过这是因为对方的思考问题的态度让要么我觉得与自己对人生的态度相悖，要么就是太简单的无所谓让我感受不到生活的乐趣。每次思维的碰触都让我觉得比较兴奋，而此刻我也觉得这是自己可以真正感到快乐轻松的事情，对比与代码的感觉，所以我昨晚和我妈聊天的时候才会想要去说自己要不改行去做一些其它的事情之类的话。</p>\n<p>　　我妈发的信息的内容的大概意思是想要表达的是钱很难赚，世界上没有两全其美的事情，其实当时我的心情是有点生气，有点觉得我妈不够能理解自己，也觉得自己好像每次做一次决定都会遭到家里人的阻挠而不是得到鼓励。其实我真的有认真思考过每次决定，而不是随意去做一个决定，只是总是没有得到理解和支持。甚至当时自己对家人还感到一些失望。但是现在我再去看同样的消息内容，我再去看同样的话语的时候，理解到感受到的是我妈焦急的心情，也觉得自己其实有很多话没有能够对她说的足够清楚所以才导致我妈不够能理解自己。但是自己就是一个不太爱什么话都说的人，希望自己以后可以做到多去大胆随意的表达自己的一些想法。</p>\n<p>　　今天是因为老友要来上海参加复试，为了去火车站接他自己五点多就起床，洗漱之后就匆匆往上海南出发。凌晨五点的校园除了鸟叫，路边还没熄灭的灯光，以及在宿舍门口没带卡等待着开门的一个彪形大汉，(吓我一跳..=.-)，就是夜色笼罩着整个校园，走在空旷的580大路上，感觉特别开心，无所顾忌的在校园里唱着女神的第一首专辑的第一首歌超快感，心里默念”很孤独，却很爽”。</p>\n<p>　　那一刻自己真的是觉得，自己被太多的思虑拖得失去了自己本来的色彩，为何不踏着轻松愉快的节奏，去简单的做任何事情，just do it.这不是自己17年一直让自己坚持下去的信条嘛，所以与其再去陷入不开心的思考，不如把握好当前的每一秒钟，别让其在无意义的思考中流逝，所以，当自己下次再对生活感到心灰意冷的时候，不妨再去体会一下早上五点的清晨。</p>\n<p><img src=\"/images/realmorning.jpg\" alt=\"\" title=\"真正的早晨\"></p>"},{"layout":"post","title":"抓取喜爱123音频文件","date":"2018-11-24T12:25:00.000Z","_content":"　　滴...你的表弟已上线，问你是否可以帮他把英语听力下载到他的MP3。(；′⌒`)...开始我以为他是不会如何将文件放在MP3的磁盘里面，就对他说将文件下载后放到移动磁盘就OK。然后他又说他老爸找不到下载地址，额....我心想下载地址你找不到我也没办法帮他去远程找下载地址呀...接着表弟就发了个微信分享的链接给我...但当时我不在宿舍，就说回去帮他看看。  \n<!-- more -->  \n\n![](/images/data_scraping/messgae_biaodi.png \"来自表弟的消息 罒ω罒 \")  \n\n　　回到宿舍已经是八点半，用电脑登录微信，打开表弟给的微信分享，其实就是使用微信的内置浏览器打开了一个地址。复制了链接地址改为使用Chrome打开，看到了下面的[在线听听力的界面](http://xiai123.com/rjbxmbyy9.html?from=groupmessage&isappinstalled=0)。\n\n![](/images/data_scraping/xiai_chrome.png \"表弟发来的MP3在线听地址\")  \n\n　　接下来把这个界面点了点，并没有发现听力的下载地址，看来是有意不提供下载地址，于是打开了调试模式查看网页对应的源码，想看看是否能在html界面中找到听力文件的地址，但是定位到对应的按钮点击的html代码，只看到了一个ul列表，里面的li标签只定义了一个class属性。看来音频地址是不会直接保存在html页面中的，(PS: 如果直接保存在html也太容易被获取到了吧) 于是接着查看它的源码。在chorme调试模式下定位到source tab页面，查看当前页面下的所有文件，显然我们的答案不可能存在css、img文件夹里，过滤掉css、img文件夹里的内容，仅关注js文件，下面两个文件出现在视野里:\n\n![](/images/data_scraping/js文件列表.png \"js文件列表\")  \n　　\n　　那明显第一个是jquery在生产环境的名称，第二个文件叫***smusic.min.js***，里都有些什么内容呢?不妨打开看个究竟。这个js文件最外层是用一个 ***!function(l) {}(window);*** 包裹了一些方法的定义，一些变量的声明，但其中核心内容是设计者在其中定义了一个p对象，在js中对象的定义方式与函数声明的语法一样，区别定义一个函数还是一个对象取决于设计者使用它们的方式，如果定义的是一个对象，一般后续会使用 ***new xxx(...);*** 形式的语法去创建一个对象，而如果是作为方法调用则直接在js代码中使用 ***xxx(...);*** 形式的语法去执行调用。为什么说这个p是核心对象呢？原因是在对象p的prototype属性中定义了大量与播放音频文件相关的方法，这些方法包括 ***config、createListDom、setBuffer、resetPlayer、setVolume、initPlay、play、pause、getRandomIndex、playByMode、action、init*** ，顾名思义，init()方法中会执行一些初始化对象需要调用的方法和表达式，action()方法的内容是为不同的按钮添加点击事件，playByMode、play、pause、setVolume、resetPlayer则是与播放mp3音频操作相关的方法，config则是进行一些相关的配置...如果对这些方法具体的内容有兴趣，可以去仔细研究一下每一步它的执行，但在这里就不做过于详细的阐述了。  \n\n**注意:**\n- js中没有java中的继承，它实现不同对象间共享变量、方法的方式是使用一个共享的原型对象，在这个原型对象中定义的方法和变量可以在任何一个通过其构造函数创建的对象中直接使用  \n- **!function(l) {}(window);　** 的作用与 **　(funcion(){})();** 一样，都是定义一个匿名函数接着进行对自身的调用，这种方式是在前面加上了!符号提示编译器这不是一个函数声明，而是一个表达式，从而实现与后者相同的效果。其它的运算符如 **+、-** 等也可以实现同样的作用，如果有兴趣可以研究一下它们之间的区别。  \n\n　　粗略的研究了一下 ***smusic.min.js*** 的内容，下一步就可以通过断点来追踪具体的执行过程了，我选择的是将这个断点打在了p对象的构造函数里面调用init()方法的地方，结果如下图所示，下图需要关注的地方被红圈标注出来了。  \n\n![](/images/data_scraping/breakpoint.png \"断点\")  \n　　\n　　在对象p的构造函数中很容易可以注意到,为config进行了赋值，接着调用了原型对象中的init()方法。在这个构造函数中，很容易注意到**musicList**变量，可以将这个变量添加到watch里面追踪值的变化，然后可以看到其具体的内容，明显这里的musicList是一个数组，数组里的内容如下图所示:  \n\n![](/images/data_scraping/jsoncontent.png \"数组里的内容\")\n\n　　显然这是一个json数组，里面的json对象包括了四个键值对，**title、cover、singer、src**，红色方框标注的内容是对应mp3文件的地址，这就是我们要寻找的东西啦。开始我的做法是在调试的时候直接将这个json数组里的内容copy到文件里，但是这样做会有一个问题，这个问题会导致我们拿不到正确的文件地址，原因是chrome在调试模式查看值的时候，如果一条记录的值过于长，不会显示所有的内容，而是会将结尾字符串的部分内容替换为...，但是我一开始并没有注意到这个问题，而是直接拿着这个url调用java的http api去下载，导致出现404错误，提示找不到对应的文件...刚开始我还以为这个站点做了安全措施...但是其实并没有...只是自己拿的方式有问题，正确的方式应该是使用**JSON.stringify()**将这个数组转为字符串，然后再存入到文件里。(当然也有将json字符串转换为对象的方法，需要使用**JSON.parse()**方法，注意参数需要使用单引号，因为json字符串的内容包含双引号，如果再使用双引号去包裹参数就会提示语法错误)\n\n<p>　　到了这里其实已经完成的差不多了，下面都是Java需要解决的问题了，由于存在172条记录，如果手动去提取地址再下载未免太麻烦，所以我的做法是使用Java的io流读取这个文件里的内容到一个StringBuffer对象中，当然也可以使用StringBuilder，这两个的主要区别是StringBuffer是线程安全，StringBuilder不是线程安全的。由于我使用的是单线程下载，所以无论是使用StringBuffer还是StringBuilder其实都一样。将文件的内容读取到StringBuffer对象中之后，就可以愉快的进行我们想要的操作了。将所有的地址提取出来可以使用Java里的正则表达式，其核心的两个对象是<strong>Pattern</strong>和<strong>Matcher</strong>。匹配方式有三种，分别是matches、lookingAt、find，这三种的区别是matches是用于匹配整个字符串，就是说需要pattern和输入的字符串完全相等的时候才会返回true。lookingAt方法会匹配输入字符串的开头，仅当输入的字符串的开头部分满足匹配模式的时候返回true。find方法会扫描整个输入字符串，并且是逐个寻找满足条件的匹配模式，直到找不到匹配的内容为止。在这个需求里，匹配需要的地址就很容易啦，字符串内容的开头一定是<strong>http://ting.xiai123.com/mp3/</strong>，结尾一定是.mp3，这样去编写匹配模式就Ok。将匹配到的所有的url存入一个字符串数组中，接下来就是逐个去下载的问题啦，这里就不一一介绍了，自己踩的一个坑是将地址进行URLEncoder的时候选择了全部的地址，其实只需要将结尾部分进行重新编码就ok了，但是使用Java调用<strong>URLEncoder.encode()</strong>方法还存在着一个问题就是空白符会被替换成+，正确的替换结果应该是%20，无奈自己只能再调用一个replaceAll方法去替换。</p>\n\n　　如果对这些代码有兴趣的话可以在这里下载，[https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download](https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download)。如果这个站点的源码有更多兴趣可以打一些断点，在Call Stack跟踪方法执行流程，以及Watch关键变量的值。  \n\n　　这个网站没有作任何的保护措施，但是我还是一直弄到晚上一点才搞定，同时自己也发现抓取一个站点的数据其实是特别有意思的，听说Python对此有更强大的支持，赶紧去了解一下。(*´ﾟ∀ﾟ｀)ﾉ   \n\n　　End\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/抓取喜爱123听故事音频文件.md","raw":"layout: \"post\"\ntitle: \"抓取喜爱123音频文件\"\ndate: \"2018-11-24 20:25\"\ncategories:\n- [DATA SCRAPING]\ntags:\n- [TECHNOLOGY]\n---\n　　滴...你的表弟已上线，问你是否可以帮他把英语听力下载到他的MP3。(；′⌒`)...开始我以为他是不会如何将文件放在MP3的磁盘里面，就对他说将文件下载后放到移动磁盘就OK。然后他又说他老爸找不到下载地址，额....我心想下载地址你找不到我也没办法帮他去远程找下载地址呀...接着表弟就发了个微信分享的链接给我...但当时我不在宿舍，就说回去帮他看看。  \n<!-- more -->  \n\n![](/images/data_scraping/messgae_biaodi.png \"来自表弟的消息 罒ω罒 \")  \n\n　　回到宿舍已经是八点半，用电脑登录微信，打开表弟给的微信分享，其实就是使用微信的内置浏览器打开了一个地址。复制了链接地址改为使用Chrome打开，看到了下面的[在线听听力的界面](http://xiai123.com/rjbxmbyy9.html?from=groupmessage&isappinstalled=0)。\n\n![](/images/data_scraping/xiai_chrome.png \"表弟发来的MP3在线听地址\")  \n\n　　接下来把这个界面点了点，并没有发现听力的下载地址，看来是有意不提供下载地址，于是打开了调试模式查看网页对应的源码，想看看是否能在html界面中找到听力文件的地址，但是定位到对应的按钮点击的html代码，只看到了一个ul列表，里面的li标签只定义了一个class属性。看来音频地址是不会直接保存在html页面中的，(PS: 如果直接保存在html也太容易被获取到了吧) 于是接着查看它的源码。在chorme调试模式下定位到source tab页面，查看当前页面下的所有文件，显然我们的答案不可能存在css、img文件夹里，过滤掉css、img文件夹里的内容，仅关注js文件，下面两个文件出现在视野里:\n\n![](/images/data_scraping/js文件列表.png \"js文件列表\")  \n　　\n　　那明显第一个是jquery在生产环境的名称，第二个文件叫***smusic.min.js***，里都有些什么内容呢?不妨打开看个究竟。这个js文件最外层是用一个 ***!function(l) {}(window);*** 包裹了一些方法的定义，一些变量的声明，但其中核心内容是设计者在其中定义了一个p对象，在js中对象的定义方式与函数声明的语法一样，区别定义一个函数还是一个对象取决于设计者使用它们的方式，如果定义的是一个对象，一般后续会使用 ***new xxx(...);*** 形式的语法去创建一个对象，而如果是作为方法调用则直接在js代码中使用 ***xxx(...);*** 形式的语法去执行调用。为什么说这个p是核心对象呢？原因是在对象p的prototype属性中定义了大量与播放音频文件相关的方法，这些方法包括 ***config、createListDom、setBuffer、resetPlayer、setVolume、initPlay、play、pause、getRandomIndex、playByMode、action、init*** ，顾名思义，init()方法中会执行一些初始化对象需要调用的方法和表达式，action()方法的内容是为不同的按钮添加点击事件，playByMode、play、pause、setVolume、resetPlayer则是与播放mp3音频操作相关的方法，config则是进行一些相关的配置...如果对这些方法具体的内容有兴趣，可以去仔细研究一下每一步它的执行，但在这里就不做过于详细的阐述了。  \n\n**注意:**\n- js中没有java中的继承，它实现不同对象间共享变量、方法的方式是使用一个共享的原型对象，在这个原型对象中定义的方法和变量可以在任何一个通过其构造函数创建的对象中直接使用  \n- **!function(l) {}(window);　** 的作用与 **　(funcion(){})();** 一样，都是定义一个匿名函数接着进行对自身的调用，这种方式是在前面加上了!符号提示编译器这不是一个函数声明，而是一个表达式，从而实现与后者相同的效果。其它的运算符如 **+、-** 等也可以实现同样的作用，如果有兴趣可以研究一下它们之间的区别。  \n\n　　粗略的研究了一下 ***smusic.min.js*** 的内容，下一步就可以通过断点来追踪具体的执行过程了，我选择的是将这个断点打在了p对象的构造函数里面调用init()方法的地方，结果如下图所示，下图需要关注的地方被红圈标注出来了。  \n\n![](/images/data_scraping/breakpoint.png \"断点\")  \n　　\n　　在对象p的构造函数中很容易可以注意到,为config进行了赋值，接着调用了原型对象中的init()方法。在这个构造函数中，很容易注意到**musicList**变量，可以将这个变量添加到watch里面追踪值的变化，然后可以看到其具体的内容，明显这里的musicList是一个数组，数组里的内容如下图所示:  \n\n![](/images/data_scraping/jsoncontent.png \"数组里的内容\")\n\n　　显然这是一个json数组，里面的json对象包括了四个键值对，**title、cover、singer、src**，红色方框标注的内容是对应mp3文件的地址，这就是我们要寻找的东西啦。开始我的做法是在调试的时候直接将这个json数组里的内容copy到文件里，但是这样做会有一个问题，这个问题会导致我们拿不到正确的文件地址，原因是chrome在调试模式查看值的时候，如果一条记录的值过于长，不会显示所有的内容，而是会将结尾字符串的部分内容替换为...，但是我一开始并没有注意到这个问题，而是直接拿着这个url调用java的http api去下载，导致出现404错误，提示找不到对应的文件...刚开始我还以为这个站点做了安全措施...但是其实并没有...只是自己拿的方式有问题，正确的方式应该是使用**JSON.stringify()**将这个数组转为字符串，然后再存入到文件里。(当然也有将json字符串转换为对象的方法，需要使用**JSON.parse()**方法，注意参数需要使用单引号，因为json字符串的内容包含双引号，如果再使用双引号去包裹参数就会提示语法错误)\n\n<p>　　到了这里其实已经完成的差不多了，下面都是Java需要解决的问题了，由于存在172条记录，如果手动去提取地址再下载未免太麻烦，所以我的做法是使用Java的io流读取这个文件里的内容到一个StringBuffer对象中，当然也可以使用StringBuilder，这两个的主要区别是StringBuffer是线程安全，StringBuilder不是线程安全的。由于我使用的是单线程下载，所以无论是使用StringBuffer还是StringBuilder其实都一样。将文件的内容读取到StringBuffer对象中之后，就可以愉快的进行我们想要的操作了。将所有的地址提取出来可以使用Java里的正则表达式，其核心的两个对象是<strong>Pattern</strong>和<strong>Matcher</strong>。匹配方式有三种，分别是matches、lookingAt、find，这三种的区别是matches是用于匹配整个字符串，就是说需要pattern和输入的字符串完全相等的时候才会返回true。lookingAt方法会匹配输入字符串的开头，仅当输入的字符串的开头部分满足匹配模式的时候返回true。find方法会扫描整个输入字符串，并且是逐个寻找满足条件的匹配模式，直到找不到匹配的内容为止。在这个需求里，匹配需要的地址就很容易啦，字符串内容的开头一定是<strong>http://ting.xiai123.com/mp3/</strong>，结尾一定是.mp3，这样去编写匹配模式就Ok。将匹配到的所有的url存入一个字符串数组中，接下来就是逐个去下载的问题啦，这里就不一一介绍了，自己踩的一个坑是将地址进行URLEncoder的时候选择了全部的地址，其实只需要将结尾部分进行重新编码就ok了，但是使用Java调用<strong>URLEncoder.encode()</strong>方法还存在着一个问题就是空白符会被替换成+，正确的替换结果应该是%20，无奈自己只能再调用一个replaceAll方法去替换。</p>\n\n　　如果对这些代码有兴趣的话可以在这里下载，[https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download](https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download)。如果这个站点的源码有更多兴趣可以打一些断点，在Call Stack跟踪方法执行流程，以及Watch关键变量的值。  \n\n　　这个网站没有作任何的保护措施，但是我还是一直弄到晚上一点才搞定，同时自己也发现抓取一个站点的数据其实是特别有意思的，听说Python对此有更强大的支持，赶紧去了解一下。(*´ﾟ∀ﾟ｀)ﾉ   \n\n　　End\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"抓取喜爱123听故事音频文件","published":1,"updated":"2019-05-19T09:42:05.867Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxay0019fo81b9wlwxct","content":"<p>　　滴…你的表弟已上线，问你是否可以帮他把英语听力下载到他的MP3。(；′⌒`)…开始我以为他是不会如何将文件放在MP3的磁盘里面，就对他说将文件下载后放到移动磁盘就OK。然后他又说他老爸找不到下载地址，额….我心想下载地址你找不到我也没办法帮他去远程找下载地址呀…接着表弟就发了个微信分享的链接给我…但当时我不在宿舍，就说回去帮他看看。<br><a id=\"more\"></a>  </p>\n<p><img src=\"/images/data_scraping/messgae_biaodi.png\" alt=\"\" title=\"来自表弟的消息 罒ω罒 \">  </p>\n<p>　　回到宿舍已经是八点半，用电脑登录微信，打开表弟给的微信分享，其实就是使用微信的内置浏览器打开了一个地址。复制了链接地址改为使用Chrome打开，看到了下面的<a href=\"http://xiai123.com/rjbxmbyy9.html?from=groupmessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">在线听听力的界面</a>。</p>\n<p><img src=\"/images/data_scraping/xiai_chrome.png\" alt=\"\" title=\"表弟发来的MP3在线听地址\">  </p>\n<p>　　接下来把这个界面点了点，并没有发现听力的下载地址，看来是有意不提供下载地址，于是打开了调试模式查看网页对应的源码，想看看是否能在html界面中找到听力文件的地址，但是定位到对应的按钮点击的html代码，只看到了一个ul列表，里面的li标签只定义了一个class属性。看来音频地址是不会直接保存在html页面中的，(PS: 如果直接保存在html也太容易被获取到了吧) 于是接着查看它的源码。在chorme调试模式下定位到source tab页面，查看当前页面下的所有文件，显然我们的答案不可能存在css、img文件夹里，过滤掉css、img文件夹里的内容，仅关注js文件，下面两个文件出现在视野里:</p>\n<p><img src=\"/images/data_scraping/js文件列表.png\" alt=\"\" title=\"js文件列表\"><br>　　<br>　　那明显第一个是jquery在生产环境的名称，第二个文件叫<strong><em>smusic.min.js</em></strong>，里都有些什么内容呢?不妨打开看个究竟。这个js文件最外层是用一个 <strong><em>!function(l) {}(window);</em></strong> 包裹了一些方法的定义，一些变量的声明，但其中核心内容是设计者在其中定义了一个p对象，在js中对象的定义方式与函数声明的语法一样，区别定义一个函数还是一个对象取决于设计者使用它们的方式，如果定义的是一个对象，一般后续会使用 <strong><em>new xxx(…);</em></strong> 形式的语法去创建一个对象，而如果是作为方法调用则直接在js代码中使用 <strong><em>xxx(…);</em></strong> 形式的语法去执行调用。为什么说这个p是核心对象呢？原因是在对象p的prototype属性中定义了大量与播放音频文件相关的方法，这些方法包括 <strong><em>config、createListDom、setBuffer、resetPlayer、setVolume、initPlay、play、pause、getRandomIndex、playByMode、action、init</em></strong> ，顾名思义，init()方法中会执行一些初始化对象需要调用的方法和表达式，action()方法的内容是为不同的按钮添加点击事件，playByMode、play、pause、setVolume、resetPlayer则是与播放mp3音频操作相关的方法，config则是进行一些相关的配置…如果对这些方法具体的内容有兴趣，可以去仔细研究一下每一步它的执行，但在这里就不做过于详细的阐述了。  </p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>js中没有java中的继承，它实现不同对象间共享变量、方法的方式是使用一个共享的原型对象，在这个原型对象中定义的方法和变量可以在任何一个通过其构造函数创建的对象中直接使用  </li>\n<li><strong>!function(l) {}(window);　</strong> 的作用与 <strong>　(funcion(){})();</strong> 一样，都是定义一个匿名函数接着进行对自身的调用，这种方式是在前面加上了!符号提示编译器这不是一个函数声明，而是一个表达式，从而实现与后者相同的效果。其它的运算符如 <strong>+、-</strong> 等也可以实现同样的作用，如果有兴趣可以研究一下它们之间的区别。  </li>\n</ul>\n<p>　　粗略的研究了一下 <strong><em>smusic.min.js</em></strong> 的内容，下一步就可以通过断点来追踪具体的执行过程了，我选择的是将这个断点打在了p对象的构造函数里面调用init()方法的地方，结果如下图所示，下图需要关注的地方被红圈标注出来了。  </p>\n<p><img src=\"/images/data_scraping/breakpoint.png\" alt=\"\" title=\"断点\"><br>　　<br>　　在对象p的构造函数中很容易可以注意到,为config进行了赋值，接着调用了原型对象中的init()方法。在这个构造函数中，很容易注意到<strong>musicList</strong>变量，可以将这个变量添加到watch里面追踪值的变化，然后可以看到其具体的内容，明显这里的musicList是一个数组，数组里的内容如下图所示:  </p>\n<p><img src=\"/images/data_scraping/jsoncontent.png\" alt=\"\" title=\"数组里的内容\"></p>\n<p>　　显然这是一个json数组，里面的json对象包括了四个键值对，<strong>title、cover、singer、src</strong>，红色方框标注的内容是对应mp3文件的地址，这就是我们要寻找的东西啦。开始我的做法是在调试的时候直接将这个json数组里的内容copy到文件里，但是这样做会有一个问题，这个问题会导致我们拿不到正确的文件地址，原因是chrome在调试模式查看值的时候，如果一条记录的值过于长，不会显示所有的内容，而是会将结尾字符串的部分内容替换为…，但是我一开始并没有注意到这个问题，而是直接拿着这个url调用java的http api去下载，导致出现404错误，提示找不到对应的文件…刚开始我还以为这个站点做了安全措施…但是其实并没有…只是自己拿的方式有问题，正确的方式应该是使用<strong>JSON.stringify()</strong>将这个数组转为字符串，然后再存入到文件里。(当然也有将json字符串转换为对象的方法，需要使用<strong>JSON.parse()</strong>方法，注意参数需要使用单引号，因为json字符串的内容包含双引号，如果再使用双引号去包裹参数就会提示语法错误)</p>\n<p>　　到了这里其实已经完成的差不多了，下面都是Java需要解决的问题了，由于存在172条记录，如果手动去提取地址再下载未免太麻烦，所以我的做法是使用Java的io流读取这个文件里的内容到一个StringBuffer对象中，当然也可以使用StringBuilder，这两个的主要区别是StringBuffer是线程安全，StringBuilder不是线程安全的。由于我使用的是单线程下载，所以无论是使用StringBuffer还是StringBuilder其实都一样。将文件的内容读取到StringBuffer对象中之后，就可以愉快的进行我们想要的操作了。将所有的地址提取出来可以使用Java里的正则表达式，其核心的两个对象是<strong>Pattern</strong>和<strong>Matcher</strong>。匹配方式有三种，分别是matches、lookingAt、find，这三种的区别是matches是用于匹配整个字符串，就是说需要pattern和输入的字符串完全相等的时候才会返回true。lookingAt方法会匹配输入字符串的开头，仅当输入的字符串的开头部分满足匹配模式的时候返回true。find方法会扫描整个输入字符串，并且是逐个寻找满足条件的匹配模式，直到找不到匹配的内容为止。在这个需求里，匹配需要的地址就很容易啦，字符串内容的开头一定是<strong>http://ting.xiai123.com/mp3/</strong>，结尾一定是.mp3，这样去编写匹配模式就Ok。将匹配到的所有的url存入一个字符串数组中，接下来就是逐个去下载的问题啦，这里就不一一介绍了，自己踩的一个坑是将地址进行URLEncoder的时候选择了全部的地址，其实只需要将结尾部分进行重新编码就ok了，但是使用Java调用<strong>URLEncoder.encode()</strong>方法还存在着一个问题就是空白符会被替换成+，正确的替换结果应该是%20，无奈自己只能再调用一个replaceAll方法去替换。</p>\n\n<p>　　如果对这些代码有兴趣的话可以在这里下载，<a href=\"https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download\" target=\"_blank\" rel=\"noopener\">https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download</a>。如果这个站点的源码有更多兴趣可以打一些断点，在Call Stack跟踪方法执行流程，以及Watch关键变量的值。  </p>\n<p>　　这个网站没有作任何的保护措施，但是我还是一直弄到晚上一点才搞定，同时自己也发现抓取一个站点的数据其实是特别有意思的，听说Python对此有更强大的支持，赶紧去了解一下。(*´ﾟ∀ﾟ｀)ﾉ   </p>\n<p>　　End</p>\n","site":{"data":{}},"excerpt":"<p>　　滴…你的表弟已上线，问你是否可以帮他把英语听力下载到他的MP3。(；′⌒`)…开始我以为他是不会如何将文件放在MP3的磁盘里面，就对他说将文件下载后放到移动磁盘就OK。然后他又说他老爸找不到下载地址，额….我心想下载地址你找不到我也没办法帮他去远程找下载地址呀…接着表弟就发了个微信分享的链接给我…但当时我不在宿舍，就说回去帮他看看。<br>","more":"</p>\n<p><img src=\"/images/data_scraping/messgae_biaodi.png\" alt=\"\" title=\"来自表弟的消息 罒ω罒 \">  </p>\n<p>　　回到宿舍已经是八点半，用电脑登录微信，打开表弟给的微信分享，其实就是使用微信的内置浏览器打开了一个地址。复制了链接地址改为使用Chrome打开，看到了下面的<a href=\"http://xiai123.com/rjbxmbyy9.html?from=groupmessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">在线听听力的界面</a>。</p>\n<p><img src=\"/images/data_scraping/xiai_chrome.png\" alt=\"\" title=\"表弟发来的MP3在线听地址\">  </p>\n<p>　　接下来把这个界面点了点，并没有发现听力的下载地址，看来是有意不提供下载地址，于是打开了调试模式查看网页对应的源码，想看看是否能在html界面中找到听力文件的地址，但是定位到对应的按钮点击的html代码，只看到了一个ul列表，里面的li标签只定义了一个class属性。看来音频地址是不会直接保存在html页面中的，(PS: 如果直接保存在html也太容易被获取到了吧) 于是接着查看它的源码。在chorme调试模式下定位到source tab页面，查看当前页面下的所有文件，显然我们的答案不可能存在css、img文件夹里，过滤掉css、img文件夹里的内容，仅关注js文件，下面两个文件出现在视野里:</p>\n<p><img src=\"/images/data_scraping/js文件列表.png\" alt=\"\" title=\"js文件列表\"><br>　　<br>　　那明显第一个是jquery在生产环境的名称，第二个文件叫<strong><em>smusic.min.js</em></strong>，里都有些什么内容呢?不妨打开看个究竟。这个js文件最外层是用一个 <strong><em>!function(l) {}(window);</em></strong> 包裹了一些方法的定义，一些变量的声明，但其中核心内容是设计者在其中定义了一个p对象，在js中对象的定义方式与函数声明的语法一样，区别定义一个函数还是一个对象取决于设计者使用它们的方式，如果定义的是一个对象，一般后续会使用 <strong><em>new xxx(…);</em></strong> 形式的语法去创建一个对象，而如果是作为方法调用则直接在js代码中使用 <strong><em>xxx(…);</em></strong> 形式的语法去执行调用。为什么说这个p是核心对象呢？原因是在对象p的prototype属性中定义了大量与播放音频文件相关的方法，这些方法包括 <strong><em>config、createListDom、setBuffer、resetPlayer、setVolume、initPlay、play、pause、getRandomIndex、playByMode、action、init</em></strong> ，顾名思义，init()方法中会执行一些初始化对象需要调用的方法和表达式，action()方法的内容是为不同的按钮添加点击事件，playByMode、play、pause、setVolume、resetPlayer则是与播放mp3音频操作相关的方法，config则是进行一些相关的配置…如果对这些方法具体的内容有兴趣，可以去仔细研究一下每一步它的执行，但在这里就不做过于详细的阐述了。  </p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>js中没有java中的继承，它实现不同对象间共享变量、方法的方式是使用一个共享的原型对象，在这个原型对象中定义的方法和变量可以在任何一个通过其构造函数创建的对象中直接使用  </li>\n<li><strong>!function(l) {}(window);　</strong> 的作用与 <strong>　(funcion(){})();</strong> 一样，都是定义一个匿名函数接着进行对自身的调用，这种方式是在前面加上了!符号提示编译器这不是一个函数声明，而是一个表达式，从而实现与后者相同的效果。其它的运算符如 <strong>+、-</strong> 等也可以实现同样的作用，如果有兴趣可以研究一下它们之间的区别。  </li>\n</ul>\n<p>　　粗略的研究了一下 <strong><em>smusic.min.js</em></strong> 的内容，下一步就可以通过断点来追踪具体的执行过程了，我选择的是将这个断点打在了p对象的构造函数里面调用init()方法的地方，结果如下图所示，下图需要关注的地方被红圈标注出来了。  </p>\n<p><img src=\"/images/data_scraping/breakpoint.png\" alt=\"\" title=\"断点\"><br>　　<br>　　在对象p的构造函数中很容易可以注意到,为config进行了赋值，接着调用了原型对象中的init()方法。在这个构造函数中，很容易注意到<strong>musicList</strong>变量，可以将这个变量添加到watch里面追踪值的变化，然后可以看到其具体的内容，明显这里的musicList是一个数组，数组里的内容如下图所示:  </p>\n<p><img src=\"/images/data_scraping/jsoncontent.png\" alt=\"\" title=\"数组里的内容\"></p>\n<p>　　显然这是一个json数组，里面的json对象包括了四个键值对，<strong>title、cover、singer、src</strong>，红色方框标注的内容是对应mp3文件的地址，这就是我们要寻找的东西啦。开始我的做法是在调试的时候直接将这个json数组里的内容copy到文件里，但是这样做会有一个问题，这个问题会导致我们拿不到正确的文件地址，原因是chrome在调试模式查看值的时候，如果一条记录的值过于长，不会显示所有的内容，而是会将结尾字符串的部分内容替换为…，但是我一开始并没有注意到这个问题，而是直接拿着这个url调用java的http api去下载，导致出现404错误，提示找不到对应的文件…刚开始我还以为这个站点做了安全措施…但是其实并没有…只是自己拿的方式有问题，正确的方式应该是使用<strong>JSON.stringify()</strong>将这个数组转为字符串，然后再存入到文件里。(当然也有将json字符串转换为对象的方法，需要使用<strong>JSON.parse()</strong>方法，注意参数需要使用单引号，因为json字符串的内容包含双引号，如果再使用双引号去包裹参数就会提示语法错误)</p>\n<p>　　到了这里其实已经完成的差不多了，下面都是Java需要解决的问题了，由于存在172条记录，如果手动去提取地址再下载未免太麻烦，所以我的做法是使用Java的io流读取这个文件里的内容到一个StringBuffer对象中，当然也可以使用StringBuilder，这两个的主要区别是StringBuffer是线程安全，StringBuilder不是线程安全的。由于我使用的是单线程下载，所以无论是使用StringBuffer还是StringBuilder其实都一样。将文件的内容读取到StringBuffer对象中之后，就可以愉快的进行我们想要的操作了。将所有的地址提取出来可以使用Java里的正则表达式，其核心的两个对象是<strong>Pattern</strong>和<strong>Matcher</strong>。匹配方式有三种，分别是matches、lookingAt、find，这三种的区别是matches是用于匹配整个字符串，就是说需要pattern和输入的字符串完全相等的时候才会返回true。lookingAt方法会匹配输入字符串的开头，仅当输入的字符串的开头部分满足匹配模式的时候返回true。find方法会扫描整个输入字符串，并且是逐个寻找满足条件的匹配模式，直到找不到匹配的内容为止。在这个需求里，匹配需要的地址就很容易啦，字符串内容的开头一定是<strong>http://ting.xiai123.com/mp3/</strong>，结尾一定是.mp3，这样去编写匹配模式就Ok。将匹配到的所有的url存入一个字符串数组中，接下来就是逐个去下载的问题啦，这里就不一一介绍了，自己踩的一个坑是将地址进行URLEncoder的时候选择了全部的地址，其实只需要将结尾部分进行重新编码就ok了，但是使用Java调用<strong>URLEncoder.encode()</strong>方法还存在着一个问题就是空白符会被替换成+，正确的替换结果应该是%20，无奈自己只能再调用一个replaceAll方法去替换。</p>\n\n<p>　　如果对这些代码有兴趣的话可以在这里下载，<a href=\"https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download\" target=\"_blank\" rel=\"noopener\">https://github.com/cheng-github/DataStructure_Java/tree/master/src/test/java/download</a>。如果这个站点的源码有更多兴趣可以打一些断点，在Call Stack跟踪方法执行流程，以及Watch关键变量的值。  </p>\n<p>　　这个网站没有作任何的保护措施，但是我还是一直弄到晚上一点才搞定，同时自己也发现抓取一个站点的数据其实是特别有意思的，听说Python对此有更强大的支持，赶紧去了解一下。(*´ﾟ∀ﾟ｀)ﾉ   </p>\n<p>　　End</p>"},{"layout":"post","title":"确认过眼神，你是我的仙人掌","date":"2019-02-26T13:44:00.000Z","thumbnail":"http://swcheng.com/images/xianrenzhang.jpg","_content":"　　出于对仙人掌的喜爱一直想画一幅仙人掌的图画...然后发现了一张十分好看的仙人掌图画，就想着自己模仿一下。确认过眼神，于是一个晚上的时间都投入在它身上了。(^_−)☆\n<!-- more --> \n\n![](/images/xianrenzhang.jpg )  \n\n　　我觉得很大的缺点是整幅画颜色太淡了，感觉自己买的画笔无论我怎么用力去填涂都还是这么淡的颜色。还有感觉那个盆被我描绘的有些宽，应该再窄一些。还有就是由于颜色太淡，填涂的饱和与淡的层次感完全显示不出来，存在很多缺点，希望下次能画的好一点。=-=\n\n\n\n\n\n\n","source":"_posts/确认过眼神，你是我的仙人掌.md","raw":"layout: \"post\"\ntitle: \"确认过眼神，你是我的仙人掌\"\ndate: \"2019-02-26 21:44\"\ncategories:\n- [LIFE]\ntags:\n- DRAWING\nthumbnail: http://swcheng.com/images/xianrenzhang.jpg\n---\n　　出于对仙人掌的喜爱一直想画一幅仙人掌的图画...然后发现了一张十分好看的仙人掌图画，就想着自己模仿一下。确认过眼神，于是一个晚上的时间都投入在它身上了。(^_−)☆\n<!-- more --> \n\n![](/images/xianrenzhang.jpg )  \n\n　　我觉得很大的缺点是整幅画颜色太淡了，感觉自己买的画笔无论我怎么用力去填涂都还是这么淡的颜色。还有感觉那个盆被我描绘的有些宽，应该再窄一些。还有就是由于颜色太淡，填涂的饱和与淡的层次感完全显示不出来，存在很多缺点，希望下次能画的好一点。=-=\n\n\n\n\n\n\n","slug":"确认过眼神，你是我的仙人掌","published":1,"updated":"2019-05-19T09:42:05.868Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxaz001cfo81g1eg5bdp","content":"<p>　　出于对仙人掌的喜爱一直想画一幅仙人掌的图画…然后发现了一张十分好看的仙人掌图画，就想着自己模仿一下。确认过眼神，于是一个晚上的时间都投入在它身上了。(^_−)☆<br><a id=\"more\"></a> </p>\n<p><img src=\"/images/xianrenzhang.jpg\" alt=\"\">  </p>\n<p>　　我觉得很大的缺点是整幅画颜色太淡了，感觉自己买的画笔无论我怎么用力去填涂都还是这么淡的颜色。还有感觉那个盆被我描绘的有些宽，应该再窄一些。还有就是由于颜色太淡，填涂的饱和与淡的层次感完全显示不出来，存在很多缺点，希望下次能画的好一点。=-=</p>\n","site":{"data":{}},"excerpt":"<p>　　出于对仙人掌的喜爱一直想画一幅仙人掌的图画…然后发现了一张十分好看的仙人掌图画，就想着自己模仿一下。确认过眼神，于是一个晚上的时间都投入在它身上了。(^_−)☆<br>","more":"</p>\n<p><img src=\"/images/xianrenzhang.jpg\" alt=\"\">  </p>\n<p>　　我觉得很大的缺点是整幅画颜色太淡了，感觉自己买的画笔无论我怎么用力去填涂都还是这么淡的颜色。还有感觉那个盆被我描绘的有些宽，应该再窄一些。还有就是由于颜色太淡，填涂的饱和与淡的层次感完全显示不出来，存在很多缺点，希望下次能画的好一点。=-=</p>"},{"layout":"post","title":"花卉市场&龙华古寺之旅","date":"2019-03-10T13:43:00.000Z","_content":"　　这周为了完成将腾讯新闻爬取到数据库的任务，搞得自己有点精疲力尽，眼睛也有些受不了长时间的工作，意识又陷入被程序捕获的状态，所以我在写完这个代码之后，当即决定去操场跑步先放松一下自己的身体。再想着周六日去哪儿逛逛放松一下自己的精神。 \n<!-- more -->　　\n\n　　为了编写这个程序，在经历了使用Scrapy+Splash的失望的情绪之后，决定愤然不使用框架，自己使用Python Http请求库requests编写程序根据程序请求的api实现自动化抓取新闻数据并最终写入数据库。虽然最后也完成了这个任务，但是还是觉得这之间有太多的小细节搞得我痛苦不已，经常会被腾讯新闻参差不齐的json数据返回结果解析搞得头疼不已，加上它本身的url格式不同且请求数据方式不同，所以我不得不将程序的逻辑复杂化。\n\n　　em...所以在写完这个程序之后，自己在感慨框架确实是一个好东西，至少每个站点的数据请求方式以及模式都不相同，如果每次我们想要爬取一个站点的数据都去编写一个这样的逻辑，实在是一个费劲的工作，而框架就为我们解决这类问题提供了一个通用的方法，不得不为前辈们的智慧心血感到佩服。工作归工作，生活还是蛮重要的，还是回到文章的正题，花卉市场以及龙华古寺之旅 u_u\n\n　　上海有很多花卉市场，但是经过考虑之后，我选择了钦青花卉市场，因为看评论以及评分好像都还不错，距离也还行，就决定去了。\n\n![](/images/huahui_route.jpg \"上海钦青花卉市场路线\")\n\n　　一路奔波，终于到达了目的地，从外面来看好像还不错 (✪ω✪)\n\n![](/images/qinqinghuahi.jpg \"上海钦青花卉市场\")\n\n　　然后就是到里面到处逛，发现了很多好看的植物...我看着这些植物...有一瞬间感觉自己也只是一个会移动的生命而已，除此之外和它们一样只是在简单的存在着的生命体而已，没有什么特别之处。其它的好像也没什么值得说的，不如贴一些图片吧 ヾ(ｏ･ω･)ﾉ \n\n![](/images/flowers/pic1.jpg \"\")\n![](/images/flowers/pic2.jpg \"\")\n![](/images/flowers/pic3.jpg \"\")\n![](/images/flowers/pic4.jpg \"\")\n![](/images/flowers/pic5.jpg \"\")\n![](/images/flowers/pic6.jpg \"\")\n![](/images/flowers/pic7.jpg \"\")\n![](/images/flowers/pic8.jpg \"\")\n![](/images/flowers/pic9.jpg \"\")\n![](/images/flowers/pic10.jpg \"\")\n![](/images/flowers/pic11.jpg \"\")\n\n　　逛了前面的花卉市场，这后面紧接着还有一个市场，像是以前传统一点的老花卉市场，虽然装修上不如前面的花卉市场，不过也很有意思。里面除了有一些花卉之外，还有一些动物，比如鱼、鸟、兔子、乌龟等之类的。本来自己是有买几条鱼回去养的念头的，但是后来想想还是算了，毕竟一个小鱼缸里放几条鱼感觉也怪没意思的，一点都不具备观赏性，也不热闹，甚至还会感到有些冷清。而且宿舍也不具备那个条件，不如等以后又条件了自己再弄一个大鱼缸，再搞个氧气泵，这样就可以开心的养各种各样的鱼了。看着这些鱼类，不禁让自己回忆起曾经在北京去过的一个水族馆，当时第一次看到那么多种类的海底动物，感觉很震撼，第一次觉得水底世界特别的美，下次一定还要去一次水族馆...就是门票费感觉不太便宜 T_T\n\n　　不多说了，赶紧贴一些图片吧。(感觉蓝色的鹦鹉贼好看 (๑╹◡╹)ﾉ\"\"\")\n\n![](/images/flowers/pic12.jpg \"\")\n![](/images/flowers/pic13.jpg \"\")\n![](/images/flowers/pic14.jpg \"\")\n![](/images/flowers/pic15.jpg \"\")\n![](/images/flowers/pic16.jpg \"\")\n![](/images/flowers/pic17.jpg \"\")\n![](/images/flowers/pic18.jpg \"\")\n![](/images/flowers/pic19.jpg \"\")\n![](/images/flowers/pic20.jpg \"\")\n![](/images/flowers/pic21.jpg \"\")\n![](/images/flowers/pic22.jpg \"\")\n![](/images/flowers/pic23.jpg \"\")\n![](/images/flowers/pic24.jpg \"\")\n![](/images/flowers/pic25.jpg \"\")\n![](/images/flowers/pic26.jpg \"\")\n![](/images/flowers/pic27.jpg \"\")\n![](/images/flowers/pic28.jpg \"\")\n![](/images/flowers/pic29.jpg \"\")\n![](/images/flowers/pic30.jpg \"\")\n![](/images/flowers/pic31.jpg \"\")\n![](/images/flowers/pic32.jpg \"\")\n![](/images/flowers/pic33.jpg \"\")\n![](/images/flowers/pic34.jpg \"\")\n![](/images/flowers/pic35.jpg \"\")\n\n　　花鸟市场逛完之后，本来看时间还早，打算去下一个花鸟市场看看有什么不一样没有，但是还是机缘巧合的在路中发现了龙华寺，早就听说过这个寺庙了。因为易中天每年春节都要来上海龙华古寺参禅斗诗，所以当自己路过龙华寺的时候，多半是掺杂的是对易大师的敬仰，就兴冲冲的往龙华寺奔去了。仔细回想为什么自己会如此喜欢易中天，还是结缘于他的品三国系列，除了他的品三国之外，我也听了很多关于他在其它方面的言论，以及读过他的读城记，也去了解过他的一些经历，可以说是自己非常喜欢的一位大师了，至今在自己的宿舍还摆着他的书，虽然这些书自己现在还并没有怎么看.. (´･ᴗ･`)\n\n![](/images/flowers/pic36.jpg \"\")\n\n　　突然有点怀念超喜欢易中天还处于高中时候，也超喜欢我高中的物理老师易大师，我觉得他们都是真正属于自由率性的人，好像前几天自己还做梦梦到自己又碰到自己的高中物理老师，自己很高兴但对方好像不怎么爱理我...(﹂_﹂)。其实有想要回家的时候把易大师约出来吃个饭的，但是手机号码在自己之前的手机里被自己搞丢了。并且又想到自己还经历比较浅，也没搞出什么名堂，不如再过几年等自己再成长一段时间再去找他唠嗑聊天，或许那时候会聊得比较好吧。\n\n　　em...还是将目光切换到龙华古寺...既然来了，不如入乡随俗，那当然少不了拜佛祖、拜菩萨，许下了自己的小心愿。嗯...肯定许的不是下面这个愿望。\n\n{% codeblock  lang:java %}\n/*\n               _ooOoo_\n              o8888888o\n              88\" . \"88\n              (| -_- |)\n              O\\  =  /O\n           ____/`---'\\____\n         .'  \\\\|     |//  `.\n        /  \\\\|||  :  |||//  \\\n       /  _||||| -:- |||||-  \\\n       |   | \\\\\\  -  /// |   |\n       | \\_|  ''\\---/''  |   |\n       \\  .-\\__  `-`  ___/-. /\n     ___`. .'  /--.--\\  `. . __\n  .\"\" '<  `.___\\_<|>_/___.'  >'\"\".\n | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |\n \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /\n======`-.____`-.___\\_____/___.-`____.-'======\n               `=---='\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        佛祖保佑       永无BUG\n*/\n{% endcodeblock %}\n\n　　附上一些龙华寺的照片。\n\n![](/images/flowers/pic37.jpg \"\")\n![](/images/flowers/pic38.jpg \"\")\n![](/images/flowers/pic39.jpg \"\")\n![](/images/flowers/pic40.jpg \"\")\n\n　　又去逛了旁边的龙华烈士陵园。\n\n![](/images/flowers/pic41.jpg \"\")\n![](/images/flowers/pic42.jpg \"\")\n![](/images/flowers/pic43.jpg \"\")\n![](/images/flowers/pic44.jpg \"\")\n\n　　最后叶挺将军的诗句让我觉得特别震撼，记得这是小学语文课本上的文章，当时不知道什么叫狗洞，还以为是在一个监狱里特地为囚犯打了一个狗洞可以钻出去。-.-。尤其是最后一句\"我应该在烈火与热血中得到永生\"，我体会到了话语中为了心中的理想不顾一切的热血与疯狂，他们注定是时代的缔造者。北伐期间的叶挺独立团，即使距离现在这么多年，也依旧不能不对这支铁血之师报以敬畏之心。\n\n　　All dream never die.\n\n\n\n\n\n\n\n","source":"_posts/花卉市场&龙华古寺之旅.md","raw":"layout: \"post\"\ntitle: \"花卉市场&龙华古寺之旅\"\ndate: \"2019-03-10 21:43\"\ncategories:\n- [LIFE]\ntags:\n- STROLL\n---\n　　这周为了完成将腾讯新闻爬取到数据库的任务，搞得自己有点精疲力尽，眼睛也有些受不了长时间的工作，意识又陷入被程序捕获的状态，所以我在写完这个代码之后，当即决定去操场跑步先放松一下自己的身体。再想着周六日去哪儿逛逛放松一下自己的精神。 \n<!-- more -->　　\n\n　　为了编写这个程序，在经历了使用Scrapy+Splash的失望的情绪之后，决定愤然不使用框架，自己使用Python Http请求库requests编写程序根据程序请求的api实现自动化抓取新闻数据并最终写入数据库。虽然最后也完成了这个任务，但是还是觉得这之间有太多的小细节搞得我痛苦不已，经常会被腾讯新闻参差不齐的json数据返回结果解析搞得头疼不已，加上它本身的url格式不同且请求数据方式不同，所以我不得不将程序的逻辑复杂化。\n\n　　em...所以在写完这个程序之后，自己在感慨框架确实是一个好东西，至少每个站点的数据请求方式以及模式都不相同，如果每次我们想要爬取一个站点的数据都去编写一个这样的逻辑，实在是一个费劲的工作，而框架就为我们解决这类问题提供了一个通用的方法，不得不为前辈们的智慧心血感到佩服。工作归工作，生活还是蛮重要的，还是回到文章的正题，花卉市场以及龙华古寺之旅 u_u\n\n　　上海有很多花卉市场，但是经过考虑之后，我选择了钦青花卉市场，因为看评论以及评分好像都还不错，距离也还行，就决定去了。\n\n![](/images/huahui_route.jpg \"上海钦青花卉市场路线\")\n\n　　一路奔波，终于到达了目的地，从外面来看好像还不错 (✪ω✪)\n\n![](/images/qinqinghuahi.jpg \"上海钦青花卉市场\")\n\n　　然后就是到里面到处逛，发现了很多好看的植物...我看着这些植物...有一瞬间感觉自己也只是一个会移动的生命而已，除此之外和它们一样只是在简单的存在着的生命体而已，没有什么特别之处。其它的好像也没什么值得说的，不如贴一些图片吧 ヾ(ｏ･ω･)ﾉ \n\n![](/images/flowers/pic1.jpg \"\")\n![](/images/flowers/pic2.jpg \"\")\n![](/images/flowers/pic3.jpg \"\")\n![](/images/flowers/pic4.jpg \"\")\n![](/images/flowers/pic5.jpg \"\")\n![](/images/flowers/pic6.jpg \"\")\n![](/images/flowers/pic7.jpg \"\")\n![](/images/flowers/pic8.jpg \"\")\n![](/images/flowers/pic9.jpg \"\")\n![](/images/flowers/pic10.jpg \"\")\n![](/images/flowers/pic11.jpg \"\")\n\n　　逛了前面的花卉市场，这后面紧接着还有一个市场，像是以前传统一点的老花卉市场，虽然装修上不如前面的花卉市场，不过也很有意思。里面除了有一些花卉之外，还有一些动物，比如鱼、鸟、兔子、乌龟等之类的。本来自己是有买几条鱼回去养的念头的，但是后来想想还是算了，毕竟一个小鱼缸里放几条鱼感觉也怪没意思的，一点都不具备观赏性，也不热闹，甚至还会感到有些冷清。而且宿舍也不具备那个条件，不如等以后又条件了自己再弄一个大鱼缸，再搞个氧气泵，这样就可以开心的养各种各样的鱼了。看着这些鱼类，不禁让自己回忆起曾经在北京去过的一个水族馆，当时第一次看到那么多种类的海底动物，感觉很震撼，第一次觉得水底世界特别的美，下次一定还要去一次水族馆...就是门票费感觉不太便宜 T_T\n\n　　不多说了，赶紧贴一些图片吧。(感觉蓝色的鹦鹉贼好看 (๑╹◡╹)ﾉ\"\"\")\n\n![](/images/flowers/pic12.jpg \"\")\n![](/images/flowers/pic13.jpg \"\")\n![](/images/flowers/pic14.jpg \"\")\n![](/images/flowers/pic15.jpg \"\")\n![](/images/flowers/pic16.jpg \"\")\n![](/images/flowers/pic17.jpg \"\")\n![](/images/flowers/pic18.jpg \"\")\n![](/images/flowers/pic19.jpg \"\")\n![](/images/flowers/pic20.jpg \"\")\n![](/images/flowers/pic21.jpg \"\")\n![](/images/flowers/pic22.jpg \"\")\n![](/images/flowers/pic23.jpg \"\")\n![](/images/flowers/pic24.jpg \"\")\n![](/images/flowers/pic25.jpg \"\")\n![](/images/flowers/pic26.jpg \"\")\n![](/images/flowers/pic27.jpg \"\")\n![](/images/flowers/pic28.jpg \"\")\n![](/images/flowers/pic29.jpg \"\")\n![](/images/flowers/pic30.jpg \"\")\n![](/images/flowers/pic31.jpg \"\")\n![](/images/flowers/pic32.jpg \"\")\n![](/images/flowers/pic33.jpg \"\")\n![](/images/flowers/pic34.jpg \"\")\n![](/images/flowers/pic35.jpg \"\")\n\n　　花鸟市场逛完之后，本来看时间还早，打算去下一个花鸟市场看看有什么不一样没有，但是还是机缘巧合的在路中发现了龙华寺，早就听说过这个寺庙了。因为易中天每年春节都要来上海龙华古寺参禅斗诗，所以当自己路过龙华寺的时候，多半是掺杂的是对易大师的敬仰，就兴冲冲的往龙华寺奔去了。仔细回想为什么自己会如此喜欢易中天，还是结缘于他的品三国系列，除了他的品三国之外，我也听了很多关于他在其它方面的言论，以及读过他的读城记，也去了解过他的一些经历，可以说是自己非常喜欢的一位大师了，至今在自己的宿舍还摆着他的书，虽然这些书自己现在还并没有怎么看.. (´･ᴗ･`)\n\n![](/images/flowers/pic36.jpg \"\")\n\n　　突然有点怀念超喜欢易中天还处于高中时候，也超喜欢我高中的物理老师易大师，我觉得他们都是真正属于自由率性的人，好像前几天自己还做梦梦到自己又碰到自己的高中物理老师，自己很高兴但对方好像不怎么爱理我...(﹂_﹂)。其实有想要回家的时候把易大师约出来吃个饭的，但是手机号码在自己之前的手机里被自己搞丢了。并且又想到自己还经历比较浅，也没搞出什么名堂，不如再过几年等自己再成长一段时间再去找他唠嗑聊天，或许那时候会聊得比较好吧。\n\n　　em...还是将目光切换到龙华古寺...既然来了，不如入乡随俗，那当然少不了拜佛祖、拜菩萨，许下了自己的小心愿。嗯...肯定许的不是下面这个愿望。\n\n{% codeblock  lang:java %}\n/*\n               _ooOoo_\n              o8888888o\n              88\" . \"88\n              (| -_- |)\n              O\\  =  /O\n           ____/`---'\\____\n         .'  \\\\|     |//  `.\n        /  \\\\|||  :  |||//  \\\n       /  _||||| -:- |||||-  \\\n       |   | \\\\\\  -  /// |   |\n       | \\_|  ''\\---/''  |   |\n       \\  .-\\__  `-`  ___/-. /\n     ___`. .'  /--.--\\  `. . __\n  .\"\" '<  `.___\\_<|>_/___.'  >'\"\".\n | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |\n \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /\n======`-.____`-.___\\_____/___.-`____.-'======\n               `=---='\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        佛祖保佑       永无BUG\n*/\n{% endcodeblock %}\n\n　　附上一些龙华寺的照片。\n\n![](/images/flowers/pic37.jpg \"\")\n![](/images/flowers/pic38.jpg \"\")\n![](/images/flowers/pic39.jpg \"\")\n![](/images/flowers/pic40.jpg \"\")\n\n　　又去逛了旁边的龙华烈士陵园。\n\n![](/images/flowers/pic41.jpg \"\")\n![](/images/flowers/pic42.jpg \"\")\n![](/images/flowers/pic43.jpg \"\")\n![](/images/flowers/pic44.jpg \"\")\n\n　　最后叶挺将军的诗句让我觉得特别震撼，记得这是小学语文课本上的文章，当时不知道什么叫狗洞，还以为是在一个监狱里特地为囚犯打了一个狗洞可以钻出去。-.-。尤其是最后一句\"我应该在烈火与热血中得到永生\"，我体会到了话语中为了心中的理想不顾一切的热血与疯狂，他们注定是时代的缔造者。北伐期间的叶挺独立团，即使距离现在这么多年，也依旧不能不对这支铁血之师报以敬畏之心。\n\n　　All dream never die.\n\n\n\n\n\n\n\n","slug":"花卉市场&龙华古寺之旅","published":1,"updated":"2019-05-19T09:42:05.869Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxb1001hfo81f38i1cn8","content":"<p>　　这周为了完成将腾讯新闻爬取到数据库的任务，搞得自己有点精疲力尽，眼睛也有些受不了长时间的工作，意识又陷入被程序捕获的状态，所以我在写完这个代码之后，当即决定去操场跑步先放松一下自己的身体。再想着周六日去哪儿逛逛放松一下自己的精神。<br><a id=\"more\"></a>　　</p>\n<p>　　为了编写这个程序，在经历了使用Scrapy+Splash的失望的情绪之后，决定愤然不使用框架，自己使用Python Http请求库requests编写程序根据程序请求的api实现自动化抓取新闻数据并最终写入数据库。虽然最后也完成了这个任务，但是还是觉得这之间有太多的小细节搞得我痛苦不已，经常会被腾讯新闻参差不齐的json数据返回结果解析搞得头疼不已，加上它本身的url格式不同且请求数据方式不同，所以我不得不将程序的逻辑复杂化。</p>\n<p>　　em…所以在写完这个程序之后，自己在感慨框架确实是一个好东西，至少每个站点的数据请求方式以及模式都不相同，如果每次我们想要爬取一个站点的数据都去编写一个这样的逻辑，实在是一个费劲的工作，而框架就为我们解决这类问题提供了一个通用的方法，不得不为前辈们的智慧心血感到佩服。工作归工作，生活还是蛮重要的，还是回到文章的正题，花卉市场以及龙华古寺之旅 u_u</p>\n<p>　　上海有很多花卉市场，但是经过考虑之后，我选择了钦青花卉市场，因为看评论以及评分好像都还不错，距离也还行，就决定去了。</p>\n<p><img src=\"/images/huahui_route.jpg\" alt=\"\" title=\"上海钦青花卉市场路线\"></p>\n<p>　　一路奔波，终于到达了目的地，从外面来看好像还不错 (✪ω✪)</p>\n<p><img src=\"/images/qinqinghuahi.jpg\" alt=\"\" title=\"上海钦青花卉市场\"></p>\n<p>　　然后就是到里面到处逛，发现了很多好看的植物…我看着这些植物…有一瞬间感觉自己也只是一个会移动的生命而已，除此之外和它们一样只是在简单的存在着的生命体而已，没有什么特别之处。其它的好像也没什么值得说的，不如贴一些图片吧 ヾ(ｏ･ω･)ﾉ </p>\n<p><img src=\"/images/flowers/pic1.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic2.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic3.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic4.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic5.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic6.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic7.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic8.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic9.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic10.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic11.jpg\" alt=\"\"></p>\n<p>　　逛了前面的花卉市场，这后面紧接着还有一个市场，像是以前传统一点的老花卉市场，虽然装修上不如前面的花卉市场，不过也很有意思。里面除了有一些花卉之外，还有一些动物，比如鱼、鸟、兔子、乌龟等之类的。本来自己是有买几条鱼回去养的念头的，但是后来想想还是算了，毕竟一个小鱼缸里放几条鱼感觉也怪没意思的，一点都不具备观赏性，也不热闹，甚至还会感到有些冷清。而且宿舍也不具备那个条件，不如等以后又条件了自己再弄一个大鱼缸，再搞个氧气泵，这样就可以开心的养各种各样的鱼了。看着这些鱼类，不禁让自己回忆起曾经在北京去过的一个水族馆，当时第一次看到那么多种类的海底动物，感觉很震撼，第一次觉得水底世界特别的美，下次一定还要去一次水族馆…就是门票费感觉不太便宜 T_T</p>\n<p>　　不多说了，赶紧贴一些图片吧。(感觉蓝色的鹦鹉贼好看 (๑╹◡╹)ﾉ”””)</p>\n<p><img src=\"/images/flowers/pic12.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic13.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic14.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic15.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic16.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic17.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic18.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic19.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic20.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic21.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic22.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic23.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic24.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic25.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic26.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic27.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic28.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic29.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic30.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic31.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic32.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic33.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic34.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic35.jpg\" alt=\"\"></p>\n<p>　　花鸟市场逛完之后，本来看时间还早，打算去下一个花鸟市场看看有什么不一样没有，但是还是机缘巧合的在路中发现了龙华寺，早就听说过这个寺庙了。因为易中天每年春节都要来上海龙华古寺参禅斗诗，所以当自己路过龙华寺的时候，多半是掺杂的是对易大师的敬仰，就兴冲冲的往龙华寺奔去了。仔细回想为什么自己会如此喜欢易中天，还是结缘于他的品三国系列，除了他的品三国之外，我也听了很多关于他在其它方面的言论，以及读过他的读城记，也去了解过他的一些经历，可以说是自己非常喜欢的一位大师了，至今在自己的宿舍还摆着他的书，虽然这些书自己现在还并没有怎么看.. (´･ᴗ･`)</p>\n<p><img src=\"/images/flowers/pic36.jpg\" alt=\"\"></p>\n<p>　　突然有点怀念超喜欢易中天还处于高中时候，也超喜欢我高中的物理老师易大师，我觉得他们都是真正属于自由率性的人，好像前几天自己还做梦梦到自己又碰到自己的高中物理老师，自己很高兴但对方好像不怎么爱理我…(﹂_﹂)。其实有想要回家的时候把易大师约出来吃个饭的，但是手机号码在自己之前的手机里被自己搞丢了。并且又想到自己还经历比较浅，也没搞出什么名堂，不如再过几年等自己再成长一段时间再去找他唠嗑聊天，或许那时候会聊得比较好吧。</p>\n<p>　　em…还是将目光切换到龙华古寺…既然来了，不如入乡随俗，那当然少不了拜佛祖、拜菩萨，许下了自己的小心愿。嗯…肯定许的不是下面这个愿望。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">               _ooOoo_</span></span><br><span class=\"line\"><span class=\"comment\">              o8888888o</span></span><br><span class=\"line\"><span class=\"comment\">              88\" . \"88</span></span><br><span class=\"line\"><span class=\"comment\">              (| -_- |)</span></span><br><span class=\"line\"><span class=\"comment\">              O\\  =  /O</span></span><br><span class=\"line\"><span class=\"comment\">           ____/`---'\\____</span></span><br><span class=\"line\"><span class=\"comment\">         .'  \\\\|     |//  `.</span></span><br><span class=\"line\"><span class=\"comment\">        /  \\\\|||  :  |||//  \\</span></span><br><span class=\"line\"><span class=\"comment\">       /  _||||| -:- |||||-  \\</span></span><br><span class=\"line\"><span class=\"comment\">       |   | \\\\\\  -  /// |   |</span></span><br><span class=\"line\"><span class=\"comment\">       | \\_|  ''\\---/''  |   |</span></span><br><span class=\"line\"><span class=\"comment\">       \\  .-\\__  `-`  ___/-. /</span></span><br><span class=\"line\"><span class=\"comment\">     ___`. .'  /--.--\\  `. . __</span></span><br><span class=\"line\"><span class=\"comment\">  .\"\" '&lt;  `.___\\_&lt;|&gt;_/___.'  &gt;'\"\".</span></span><br><span class=\"line\"><span class=\"comment\"> | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |</span></span><br><span class=\"line\"><span class=\"comment\"> \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /</span></span><br><span class=\"line\"><span class=\"comment\">======`-.____`-.___\\_____/___.-`____.-'======</span></span><br><span class=\"line\"><span class=\"comment\">               `=---='</span></span><br><span class=\"line\"><span class=\"comment\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class=\"line\"><span class=\"comment\">        佛祖保佑       永无BUG</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>　　附上一些龙华寺的照片。</p>\n<p><img src=\"/images/flowers/pic37.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic38.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic39.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic40.jpg\" alt=\"\"></p>\n<p>　　又去逛了旁边的龙华烈士陵园。</p>\n<p><img src=\"/images/flowers/pic41.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic42.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic43.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic44.jpg\" alt=\"\"></p>\n<p>　　最后叶挺将军的诗句让我觉得特别震撼，记得这是小学语文课本上的文章，当时不知道什么叫狗洞，还以为是在一个监狱里特地为囚犯打了一个狗洞可以钻出去。-.-。尤其是最后一句”我应该在烈火与热血中得到永生”，我体会到了话语中为了心中的理想不顾一切的热血与疯狂，他们注定是时代的缔造者。北伐期间的叶挺独立团，即使距离现在这么多年，也依旧不能不对这支铁血之师报以敬畏之心。</p>\n<p>　　All dream never die.</p>\n","site":{"data":{}},"excerpt":"<p>　　这周为了完成将腾讯新闻爬取到数据库的任务，搞得自己有点精疲力尽，眼睛也有些受不了长时间的工作，意识又陷入被程序捕获的状态，所以我在写完这个代码之后，当即决定去操场跑步先放松一下自己的身体。再想着周六日去哪儿逛逛放松一下自己的精神。<br>","more":"</p>\n<p>　　为了编写这个程序，在经历了使用Scrapy+Splash的失望的情绪之后，决定愤然不使用框架，自己使用Python Http请求库requests编写程序根据程序请求的api实现自动化抓取新闻数据并最终写入数据库。虽然最后也完成了这个任务，但是还是觉得这之间有太多的小细节搞得我痛苦不已，经常会被腾讯新闻参差不齐的json数据返回结果解析搞得头疼不已，加上它本身的url格式不同且请求数据方式不同，所以我不得不将程序的逻辑复杂化。</p>\n<p>　　em…所以在写完这个程序之后，自己在感慨框架确实是一个好东西，至少每个站点的数据请求方式以及模式都不相同，如果每次我们想要爬取一个站点的数据都去编写一个这样的逻辑，实在是一个费劲的工作，而框架就为我们解决这类问题提供了一个通用的方法，不得不为前辈们的智慧心血感到佩服。工作归工作，生活还是蛮重要的，还是回到文章的正题，花卉市场以及龙华古寺之旅 u_u</p>\n<p>　　上海有很多花卉市场，但是经过考虑之后，我选择了钦青花卉市场，因为看评论以及评分好像都还不错，距离也还行，就决定去了。</p>\n<p><img src=\"/images/huahui_route.jpg\" alt=\"\" title=\"上海钦青花卉市场路线\"></p>\n<p>　　一路奔波，终于到达了目的地，从外面来看好像还不错 (✪ω✪)</p>\n<p><img src=\"/images/qinqinghuahi.jpg\" alt=\"\" title=\"上海钦青花卉市场\"></p>\n<p>　　然后就是到里面到处逛，发现了很多好看的植物…我看着这些植物…有一瞬间感觉自己也只是一个会移动的生命而已，除此之外和它们一样只是在简单的存在着的生命体而已，没有什么特别之处。其它的好像也没什么值得说的，不如贴一些图片吧 ヾ(ｏ･ω･)ﾉ </p>\n<p><img src=\"/images/flowers/pic1.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic2.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic3.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic4.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic5.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic6.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic7.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic8.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic9.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic10.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic11.jpg\" alt=\"\"></p>\n<p>　　逛了前面的花卉市场，这后面紧接着还有一个市场，像是以前传统一点的老花卉市场，虽然装修上不如前面的花卉市场，不过也很有意思。里面除了有一些花卉之外，还有一些动物，比如鱼、鸟、兔子、乌龟等之类的。本来自己是有买几条鱼回去养的念头的，但是后来想想还是算了，毕竟一个小鱼缸里放几条鱼感觉也怪没意思的，一点都不具备观赏性，也不热闹，甚至还会感到有些冷清。而且宿舍也不具备那个条件，不如等以后又条件了自己再弄一个大鱼缸，再搞个氧气泵，这样就可以开心的养各种各样的鱼了。看着这些鱼类，不禁让自己回忆起曾经在北京去过的一个水族馆，当时第一次看到那么多种类的海底动物，感觉很震撼，第一次觉得水底世界特别的美，下次一定还要去一次水族馆…就是门票费感觉不太便宜 T_T</p>\n<p>　　不多说了，赶紧贴一些图片吧。(感觉蓝色的鹦鹉贼好看 (๑╹◡╹)ﾉ”””)</p>\n<p><img src=\"/images/flowers/pic12.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic13.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic14.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic15.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic16.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic17.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic18.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic19.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic20.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic21.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic22.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic23.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic24.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic25.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic26.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic27.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic28.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic29.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic30.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic31.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic32.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic33.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic34.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic35.jpg\" alt=\"\"></p>\n<p>　　花鸟市场逛完之后，本来看时间还早，打算去下一个花鸟市场看看有什么不一样没有，但是还是机缘巧合的在路中发现了龙华寺，早就听说过这个寺庙了。因为易中天每年春节都要来上海龙华古寺参禅斗诗，所以当自己路过龙华寺的时候，多半是掺杂的是对易大师的敬仰，就兴冲冲的往龙华寺奔去了。仔细回想为什么自己会如此喜欢易中天，还是结缘于他的品三国系列，除了他的品三国之外，我也听了很多关于他在其它方面的言论，以及读过他的读城记，也去了解过他的一些经历，可以说是自己非常喜欢的一位大师了，至今在自己的宿舍还摆着他的书，虽然这些书自己现在还并没有怎么看.. (´･ᴗ･`)</p>\n<p><img src=\"/images/flowers/pic36.jpg\" alt=\"\"></p>\n<p>　　突然有点怀念超喜欢易中天还处于高中时候，也超喜欢我高中的物理老师易大师，我觉得他们都是真正属于自由率性的人，好像前几天自己还做梦梦到自己又碰到自己的高中物理老师，自己很高兴但对方好像不怎么爱理我…(﹂_﹂)。其实有想要回家的时候把易大师约出来吃个饭的，但是手机号码在自己之前的手机里被自己搞丢了。并且又想到自己还经历比较浅，也没搞出什么名堂，不如再过几年等自己再成长一段时间再去找他唠嗑聊天，或许那时候会聊得比较好吧。</p>\n<p>　　em…还是将目光切换到龙华古寺…既然来了，不如入乡随俗，那当然少不了拜佛祖、拜菩萨，许下了自己的小心愿。嗯…肯定许的不是下面这个愿望。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">               _ooOoo_</span></span><br><span class=\"line\"><span class=\"comment\">              o8888888o</span></span><br><span class=\"line\"><span class=\"comment\">              88\" . \"88</span></span><br><span class=\"line\"><span class=\"comment\">              (| -_- |)</span></span><br><span class=\"line\"><span class=\"comment\">              O\\  =  /O</span></span><br><span class=\"line\"><span class=\"comment\">           ____/`---'\\____</span></span><br><span class=\"line\"><span class=\"comment\">         .'  \\\\|     |//  `.</span></span><br><span class=\"line\"><span class=\"comment\">        /  \\\\|||  :  |||//  \\</span></span><br><span class=\"line\"><span class=\"comment\">       /  _||||| -:- |||||-  \\</span></span><br><span class=\"line\"><span class=\"comment\">       |   | \\\\\\  -  /// |   |</span></span><br><span class=\"line\"><span class=\"comment\">       | \\_|  ''\\---/''  |   |</span></span><br><span class=\"line\"><span class=\"comment\">       \\  .-\\__  `-`  ___/-. /</span></span><br><span class=\"line\"><span class=\"comment\">     ___`. .'  /--.--\\  `. . __</span></span><br><span class=\"line\"><span class=\"comment\">  .\"\" '&lt;  `.___\\_&lt;|&gt;_/___.'  &gt;'\"\".</span></span><br><span class=\"line\"><span class=\"comment\"> | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |</span></span><br><span class=\"line\"><span class=\"comment\"> \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /</span></span><br><span class=\"line\"><span class=\"comment\">======`-.____`-.___\\_____/___.-`____.-'======</span></span><br><span class=\"line\"><span class=\"comment\">               `=---='</span></span><br><span class=\"line\"><span class=\"comment\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class=\"line\"><span class=\"comment\">        佛祖保佑       永无BUG</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>　　附上一些龙华寺的照片。</p>\n<p><img src=\"/images/flowers/pic37.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic38.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic39.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic40.jpg\" alt=\"\"></p>\n<p>　　又去逛了旁边的龙华烈士陵园。</p>\n<p><img src=\"/images/flowers/pic41.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic42.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic43.jpg\" alt=\"\"><br><img src=\"/images/flowers/pic44.jpg\" alt=\"\"></p>\n<p>　　最后叶挺将军的诗句让我觉得特别震撼，记得这是小学语文课本上的文章，当时不知道什么叫狗洞，还以为是在一个监狱里特地为囚犯打了一个狗洞可以钻出去。-.-。尤其是最后一句”我应该在烈火与热血中得到永生”，我体会到了话语中为了心中的理想不顾一切的热血与疯狂，他们注定是时代的缔造者。北伐期间的叶挺独立团，即使距离现在这么多年，也依旧不能不对这支铁血之师报以敬畏之心。</p>\n<p>　　All dream never die.</p>"},{"layout":"post","title":"近期小结","date":"2019-05-25T13:32:00.000Z","_content":"　　{% raw %}呼~{% endraw %}开学来这段时间真是忙的够呛。好在学校的事情基本差不多都结束了，除了后续还有一个遗留的短学期需要再处理一下。回想一下自己一边找工作一边写毕业设计的过程，前后差不多历经12周的时间，细细数来也差不多将近三个月的时间了，终于有个可以喘息的时间了{% raw %}~{% endraw %}\n<!-- more -->\n\n![](/images/piyixia.jpg \"皮一下很开心\")\n\n　　难受的是，自己又被自己的话给打脸了，什么周六日绝对不学习要找个地方出去逛，什么一定要找时间练习滑板之类的，算了算了，我还是忘了自己说过的话比较合适，因为真的没几件是完成的，嗯，没错，打脸对于我来说就是日常操作。\n\n![](/images/hehe.jpg \"实力打脸\")\n\n　　最近换了台机器，因为上个兄弟真的到了退役的时候，自己也弄不懂为什么有时候无法识别到机械硬盘但开机几次之后又可以了，很奇怪真的，然后第一次出现这个问题的时候我没太在意，以为只是一次偶然。直到第二次又出现了这个问题的时候，想到后续万一毕设答辩前自己的电脑挂了这种可能，无奈之下只好现将代码都同步到github上去，然后换个兄弟将所有开发环境又搭了一次，这整整花了自己一天的时间才将所有的环境都部署好。上网查了一下机械硬盘会挂掉的原因，有的人说是因为接触不良，但自己不太懂硬件的一些东西，自己去拆机维修太冒险了，没必要去冒这种风险，但拿去维修的话又不知道要什么时候才能修好，而且自己平时上班也要用，在学校搞毕设也要用，这个尴尬的时候确实不适合拿去维修，索性就更换了自己的装备。\n\n　　开始还在纠结自己要去买什么机子好，最后还是选择了神舟，因为我对配置的要求要胜于对外观的要求，所以配置太低的基本不在自己的考虑范围内。加上最近英伟达出了16系的显卡，所以我就瞄准了搭配1660TI显卡的本子，开始考虑的是雷神系列的本子，但实在是太贵了，i7九代配上这个显卡价格就到了九千了，但反之看神舟的价格还不到七千，虽然神舟丑是丑了点，做工当然也没雷神好，但是我觉得一个游戏本最重要的一点是它的散热，如果散热不好的话外观再好看配置再好也是白搭，之前自己就深受华硕zen系列之苦，明明配置不错却使用起来像是个瓜皮，真的受不了，为了外观都不考虑散热口的，把散热口放在屏幕的下面，还在网上鼓吹自己的散热如何如何，哎，想想自己当年是真的弱智，反正以后是不可能再买华硕的本了。\n\n　　虽然说神舟的售后据说不怎么样，但是我估计售后还是有的，相对一线大厂如Dell、Asus、Hp等就会差很多。但电脑硬件坏这种情况我觉得这种事情还是比较少发生的，一般的软件问题自己应该也可以搞定，所以想想自己一定程度上可以忽略这个问题，再说鱼和熊掌不可兼得嘛，适合自己的总是最好的，个人觉得神舟从各方面来说还是比较适合自己的。经过这段时间的使用，自己对神舟的这款本子还是比较满意的，除了它的镜面屏让我有点难受之外，其它方面基本没有什么缺点。为了在原有的基础上去提升它的性能表现，前几天自己还特地买了一根8G的内存条搭载上去，自己发现加了内存条之后从单通道变成双通道之后简直速度要飞起，又想起自己买的第一个本，拆开一看发现只有一个内存槽就算了，居然为了凑8G还内置了一个4G的内存条，真TM的是奸若磐石呀，这可真不是白喊出来的，此时此刻我想再喊一遍，再买华硕我是狗！！！\n\n![](/images/dalian.jpg \"打脸\")\n\n　　估计以后自己不会怎么使用老兄弟了，有点伤感，毕竟自己是一个怀旧的人。等资金充足了找个师傅修修老兄弟，说不定哪天自己挖矿什么的或者做测试什么还需要两台计算机，毕竟这东西用久了也不想当做二手卖出去，总是有些感情的，这可是承载了自己四年的回忆啊。\n\n　　还是小结一下最近的事情吧，扯着扯着就说到笔记本上了。其实就是一通瞎忙，还是自找的，给自己目标设定过高，结果将自己累吐血。主要还是自己对自己过于自信，所以使用很多自己不熟悉的技术去做开发，事实上没什么不可以，就是被逼的用尽所有时间去学习需要的知识。这一顿搞完差不多真的快累垮了，近几天自己就只想睡觉什么其他的事情都不想做，累到荼蘼。想想忙完学校的事之后公司又会有一堆事接踵而来，公司的技术栈自己完全要重学，虽然我觉得对于自己来说没有什么特别大的问题，但还是想放松一段时间再投入到下一阶段中，之前自己就曾经犯过同样的错误，为了按时完成项目不断的push自己去学习然后不仅效率变得极低，而且整个人都不好了，甚至怀疑自己是否还存在。所以学会放松是非常重要的一件事情，效率高的时候看一个东西很快就知道该怎么做了，如果长期处在一个状态会变得极其低效，本来大部分的东西就不需要花费那么多时间，基本保持专注力几天都可以学到一些核心内容。\n\n　　莎士比亚说，思虑过多就失去了做人的乐趣，这句话真是说到自己的内心最真切的感受，但代码的思维跟的多了就会不自觉的对大部分事情都从思考的角度出发，然后发现一切事物就变得没有了趣味可言，这真的变成了一种恶性循环。昨天刚看了一部电影非分熟女，电影里说的一句话很是打动我，很多事情要学会用心去感受，而不要用头脑去思考。看来自我调节是一门真正需要必修的课，而我这门课明显是不合格的，慢慢去学吧，时刻提醒自己要学会放松自己的意识，用心去感受接触到的事物，因为自己一用头脑思考就会变得十分冷漠无情，和一个机器人无异了。\n\n　　em...可能这是自己最想总结的内容吧，也是因为独在异乡，对这座城市没有归属感，而且这个地方没有真正意义上的朋友，这两个因素也是导致自己时常觉得生活无味的原因。记得老师曾给我建议，就是没必要对朋友那么苛求，可以把不同的朋友分成不同的类别，比如这个朋友可以一起干这个，而那个朋友可以一起干其他的事情，我觉得这对于自己很难做到，可能自己的内心是比较高冷的吧，对一些人了解之后感到他们的无趣就基本可以判断它们对于一些事情会做什么样的反应，而自己也不喜欢去刻意附和自己厌恶的东西。自己也不喜欢去隐藏自己的情绪，所以说注定自己做不到老师提供的建议。\n\n　　em...还是想说那句话，很孤独但很爽，不用面对这些虚伪的面孔，起码让我感受到这才是属于自己的自由，如果为此付出的代价很昂贵的话，I will say, I choose my fate.\n","source":"_posts/近期小结.md","raw":"layout: \"post\"\ntitle: \"近期小结\"\ndate: \"2019-05-25 21:32\"\ncategories:\n- [LIFE]\ntags:\n- EXPERIENCE\n---\n　　{% raw %}呼~{% endraw %}开学来这段时间真是忙的够呛。好在学校的事情基本差不多都结束了，除了后续还有一个遗留的短学期需要再处理一下。回想一下自己一边找工作一边写毕业设计的过程，前后差不多历经12周的时间，细细数来也差不多将近三个月的时间了，终于有个可以喘息的时间了{% raw %}~{% endraw %}\n<!-- more -->\n\n![](/images/piyixia.jpg \"皮一下很开心\")\n\n　　难受的是，自己又被自己的话给打脸了，什么周六日绝对不学习要找个地方出去逛，什么一定要找时间练习滑板之类的，算了算了，我还是忘了自己说过的话比较合适，因为真的没几件是完成的，嗯，没错，打脸对于我来说就是日常操作。\n\n![](/images/hehe.jpg \"实力打脸\")\n\n　　最近换了台机器，因为上个兄弟真的到了退役的时候，自己也弄不懂为什么有时候无法识别到机械硬盘但开机几次之后又可以了，很奇怪真的，然后第一次出现这个问题的时候我没太在意，以为只是一次偶然。直到第二次又出现了这个问题的时候，想到后续万一毕设答辩前自己的电脑挂了这种可能，无奈之下只好现将代码都同步到github上去，然后换个兄弟将所有开发环境又搭了一次，这整整花了自己一天的时间才将所有的环境都部署好。上网查了一下机械硬盘会挂掉的原因，有的人说是因为接触不良，但自己不太懂硬件的一些东西，自己去拆机维修太冒险了，没必要去冒这种风险，但拿去维修的话又不知道要什么时候才能修好，而且自己平时上班也要用，在学校搞毕设也要用，这个尴尬的时候确实不适合拿去维修，索性就更换了自己的装备。\n\n　　开始还在纠结自己要去买什么机子好，最后还是选择了神舟，因为我对配置的要求要胜于对外观的要求，所以配置太低的基本不在自己的考虑范围内。加上最近英伟达出了16系的显卡，所以我就瞄准了搭配1660TI显卡的本子，开始考虑的是雷神系列的本子，但实在是太贵了，i7九代配上这个显卡价格就到了九千了，但反之看神舟的价格还不到七千，虽然神舟丑是丑了点，做工当然也没雷神好，但是我觉得一个游戏本最重要的一点是它的散热，如果散热不好的话外观再好看配置再好也是白搭，之前自己就深受华硕zen系列之苦，明明配置不错却使用起来像是个瓜皮，真的受不了，为了外观都不考虑散热口的，把散热口放在屏幕的下面，还在网上鼓吹自己的散热如何如何，哎，想想自己当年是真的弱智，反正以后是不可能再买华硕的本了。\n\n　　虽然说神舟的售后据说不怎么样，但是我估计售后还是有的，相对一线大厂如Dell、Asus、Hp等就会差很多。但电脑硬件坏这种情况我觉得这种事情还是比较少发生的，一般的软件问题自己应该也可以搞定，所以想想自己一定程度上可以忽略这个问题，再说鱼和熊掌不可兼得嘛，适合自己的总是最好的，个人觉得神舟从各方面来说还是比较适合自己的。经过这段时间的使用，自己对神舟的这款本子还是比较满意的，除了它的镜面屏让我有点难受之外，其它方面基本没有什么缺点。为了在原有的基础上去提升它的性能表现，前几天自己还特地买了一根8G的内存条搭载上去，自己发现加了内存条之后从单通道变成双通道之后简直速度要飞起，又想起自己买的第一个本，拆开一看发现只有一个内存槽就算了，居然为了凑8G还内置了一个4G的内存条，真TM的是奸若磐石呀，这可真不是白喊出来的，此时此刻我想再喊一遍，再买华硕我是狗！！！\n\n![](/images/dalian.jpg \"打脸\")\n\n　　估计以后自己不会怎么使用老兄弟了，有点伤感，毕竟自己是一个怀旧的人。等资金充足了找个师傅修修老兄弟，说不定哪天自己挖矿什么的或者做测试什么还需要两台计算机，毕竟这东西用久了也不想当做二手卖出去，总是有些感情的，这可是承载了自己四年的回忆啊。\n\n　　还是小结一下最近的事情吧，扯着扯着就说到笔记本上了。其实就是一通瞎忙，还是自找的，给自己目标设定过高，结果将自己累吐血。主要还是自己对自己过于自信，所以使用很多自己不熟悉的技术去做开发，事实上没什么不可以，就是被逼的用尽所有时间去学习需要的知识。这一顿搞完差不多真的快累垮了，近几天自己就只想睡觉什么其他的事情都不想做，累到荼蘼。想想忙完学校的事之后公司又会有一堆事接踵而来，公司的技术栈自己完全要重学，虽然我觉得对于自己来说没有什么特别大的问题，但还是想放松一段时间再投入到下一阶段中，之前自己就曾经犯过同样的错误，为了按时完成项目不断的push自己去学习然后不仅效率变得极低，而且整个人都不好了，甚至怀疑自己是否还存在。所以学会放松是非常重要的一件事情，效率高的时候看一个东西很快就知道该怎么做了，如果长期处在一个状态会变得极其低效，本来大部分的东西就不需要花费那么多时间，基本保持专注力几天都可以学到一些核心内容。\n\n　　莎士比亚说，思虑过多就失去了做人的乐趣，这句话真是说到自己的内心最真切的感受，但代码的思维跟的多了就会不自觉的对大部分事情都从思考的角度出发，然后发现一切事物就变得没有了趣味可言，这真的变成了一种恶性循环。昨天刚看了一部电影非分熟女，电影里说的一句话很是打动我，很多事情要学会用心去感受，而不要用头脑去思考。看来自我调节是一门真正需要必修的课，而我这门课明显是不合格的，慢慢去学吧，时刻提醒自己要学会放松自己的意识，用心去感受接触到的事物，因为自己一用头脑思考就会变得十分冷漠无情，和一个机器人无异了。\n\n　　em...可能这是自己最想总结的内容吧，也是因为独在异乡，对这座城市没有归属感，而且这个地方没有真正意义上的朋友，这两个因素也是导致自己时常觉得生活无味的原因。记得老师曾给我建议，就是没必要对朋友那么苛求，可以把不同的朋友分成不同的类别，比如这个朋友可以一起干这个，而那个朋友可以一起干其他的事情，我觉得这对于自己很难做到，可能自己的内心是比较高冷的吧，对一些人了解之后感到他们的无趣就基本可以判断它们对于一些事情会做什么样的反应，而自己也不喜欢去刻意附和自己厌恶的东西。自己也不喜欢去隐藏自己的情绪，所以说注定自己做不到老师提供的建议。\n\n　　em...还是想说那句话，很孤独但很爽，不用面对这些虚伪的面孔，起码让我感受到这才是属于自己的自由，如果为此付出的代价很昂贵的话，I will say, I choose my fate.\n","slug":"近期小结","published":1,"updated":"2019-05-25T16:18:57.184Z","comments":1,"photos":[],"link":"","_id":"cjzr1cxb2001kfo81tgo49yc2","content":"<p>　　呼~开学来这段时间真是忙的够呛。好在学校的事情基本差不多都结束了，除了后续还有一个遗留的短学期需要再处理一下。回想一下自己一边找工作一边写毕业设计的过程，前后差不多历经12周的时间，细细数来也差不多将近三个月的时间了，终于有个可以喘息的时间了~<br><a id=\"more\"></a></p>\n<p><img src=\"/images/piyixia.jpg\" alt=\"\" title=\"皮一下很开心\"></p>\n<p>　　难受的是，自己又被自己的话给打脸了，什么周六日绝对不学习要找个地方出去逛，什么一定要找时间练习滑板之类的，算了算了，我还是忘了自己说过的话比较合适，因为真的没几件是完成的，嗯，没错，打脸对于我来说就是日常操作。</p>\n<p><img src=\"/images/hehe.jpg\" alt=\"\" title=\"实力打脸\"></p>\n<p>　　最近换了台机器，因为上个兄弟真的到了退役的时候，自己也弄不懂为什么有时候无法识别到机械硬盘但开机几次之后又可以了，很奇怪真的，然后第一次出现这个问题的时候我没太在意，以为只是一次偶然。直到第二次又出现了这个问题的时候，想到后续万一毕设答辩前自己的电脑挂了这种可能，无奈之下只好现将代码都同步到github上去，然后换个兄弟将所有开发环境又搭了一次，这整整花了自己一天的时间才将所有的环境都部署好。上网查了一下机械硬盘会挂掉的原因，有的人说是因为接触不良，但自己不太懂硬件的一些东西，自己去拆机维修太冒险了，没必要去冒这种风险，但拿去维修的话又不知道要什么时候才能修好，而且自己平时上班也要用，在学校搞毕设也要用，这个尴尬的时候确实不适合拿去维修，索性就更换了自己的装备。</p>\n<p>　　开始还在纠结自己要去买什么机子好，最后还是选择了神舟，因为我对配置的要求要胜于对外观的要求，所以配置太低的基本不在自己的考虑范围内。加上最近英伟达出了16系的显卡，所以我就瞄准了搭配1660TI显卡的本子，开始考虑的是雷神系列的本子，但实在是太贵了，i7九代配上这个显卡价格就到了九千了，但反之看神舟的价格还不到七千，虽然神舟丑是丑了点，做工当然也没雷神好，但是我觉得一个游戏本最重要的一点是它的散热，如果散热不好的话外观再好看配置再好也是白搭，之前自己就深受华硕zen系列之苦，明明配置不错却使用起来像是个瓜皮，真的受不了，为了外观都不考虑散热口的，把散热口放在屏幕的下面，还在网上鼓吹自己的散热如何如何，哎，想想自己当年是真的弱智，反正以后是不可能再买华硕的本了。</p>\n<p>　　虽然说神舟的售后据说不怎么样，但是我估计售后还是有的，相对一线大厂如Dell、Asus、Hp等就会差很多。但电脑硬件坏这种情况我觉得这种事情还是比较少发生的，一般的软件问题自己应该也可以搞定，所以想想自己一定程度上可以忽略这个问题，再说鱼和熊掌不可兼得嘛，适合自己的总是最好的，个人觉得神舟从各方面来说还是比较适合自己的。经过这段时间的使用，自己对神舟的这款本子还是比较满意的，除了它的镜面屏让我有点难受之外，其它方面基本没有什么缺点。为了在原有的基础上去提升它的性能表现，前几天自己还特地买了一根8G的内存条搭载上去，自己发现加了内存条之后从单通道变成双通道之后简直速度要飞起，又想起自己买的第一个本，拆开一看发现只有一个内存槽就算了，居然为了凑8G还内置了一个4G的内存条，真TM的是奸若磐石呀，这可真不是白喊出来的，此时此刻我想再喊一遍，再买华硕我是狗！！！</p>\n<p><img src=\"/images/dalian.jpg\" alt=\"\" title=\"打脸\"></p>\n<p>　　估计以后自己不会怎么使用老兄弟了，有点伤感，毕竟自己是一个怀旧的人。等资金充足了找个师傅修修老兄弟，说不定哪天自己挖矿什么的或者做测试什么还需要两台计算机，毕竟这东西用久了也不想当做二手卖出去，总是有些感情的，这可是承载了自己四年的回忆啊。</p>\n<p>　　还是小结一下最近的事情吧，扯着扯着就说到笔记本上了。其实就是一通瞎忙，还是自找的，给自己目标设定过高，结果将自己累吐血。主要还是自己对自己过于自信，所以使用很多自己不熟悉的技术去做开发，事实上没什么不可以，就是被逼的用尽所有时间去学习需要的知识。这一顿搞完差不多真的快累垮了，近几天自己就只想睡觉什么其他的事情都不想做，累到荼蘼。想想忙完学校的事之后公司又会有一堆事接踵而来，公司的技术栈自己完全要重学，虽然我觉得对于自己来说没有什么特别大的问题，但还是想放松一段时间再投入到下一阶段中，之前自己就曾经犯过同样的错误，为了按时完成项目不断的push自己去学习然后不仅效率变得极低，而且整个人都不好了，甚至怀疑自己是否还存在。所以学会放松是非常重要的一件事情，效率高的时候看一个东西很快就知道该怎么做了，如果长期处在一个状态会变得极其低效，本来大部分的东西就不需要花费那么多时间，基本保持专注力几天都可以学到一些核心内容。</p>\n<p>　　莎士比亚说，思虑过多就失去了做人的乐趣，这句话真是说到自己的内心最真切的感受，但代码的思维跟的多了就会不自觉的对大部分事情都从思考的角度出发，然后发现一切事物就变得没有了趣味可言，这真的变成了一种恶性循环。昨天刚看了一部电影非分熟女，电影里说的一句话很是打动我，很多事情要学会用心去感受，而不要用头脑去思考。看来自我调节是一门真正需要必修的课，而我这门课明显是不合格的，慢慢去学吧，时刻提醒自己要学会放松自己的意识，用心去感受接触到的事物，因为自己一用头脑思考就会变得十分冷漠无情，和一个机器人无异了。</p>\n<p>　　em…可能这是自己最想总结的内容吧，也是因为独在异乡，对这座城市没有归属感，而且这个地方没有真正意义上的朋友，这两个因素也是导致自己时常觉得生活无味的原因。记得老师曾给我建议，就是没必要对朋友那么苛求，可以把不同的朋友分成不同的类别，比如这个朋友可以一起干这个，而那个朋友可以一起干其他的事情，我觉得这对于自己很难做到，可能自己的内心是比较高冷的吧，对一些人了解之后感到他们的无趣就基本可以判断它们对于一些事情会做什么样的反应，而自己也不喜欢去刻意附和自己厌恶的东西。自己也不喜欢去隐藏自己的情绪，所以说注定自己做不到老师提供的建议。</p>\n<p>　　em…还是想说那句话，很孤独但很爽，不用面对这些虚伪的面孔，起码让我感受到这才是属于自己的自由，如果为此付出的代价很昂贵的话，I will say, I choose my fate.</p>\n","site":{"data":{}},"excerpt":"<p>　　呼~开学来这段时间真是忙的够呛。好在学校的事情基本差不多都结束了，除了后续还有一个遗留的短学期需要再处理一下。回想一下自己一边找工作一边写毕业设计的过程，前后差不多历经12周的时间，细细数来也差不多将近三个月的时间了，终于有个可以喘息的时间了~<br>","more":"</p>\n<p><img src=\"/images/piyixia.jpg\" alt=\"\" title=\"皮一下很开心\"></p>\n<p>　　难受的是，自己又被自己的话给打脸了，什么周六日绝对不学习要找个地方出去逛，什么一定要找时间练习滑板之类的，算了算了，我还是忘了自己说过的话比较合适，因为真的没几件是完成的，嗯，没错，打脸对于我来说就是日常操作。</p>\n<p><img src=\"/images/hehe.jpg\" alt=\"\" title=\"实力打脸\"></p>\n<p>　　最近换了台机器，因为上个兄弟真的到了退役的时候，自己也弄不懂为什么有时候无法识别到机械硬盘但开机几次之后又可以了，很奇怪真的，然后第一次出现这个问题的时候我没太在意，以为只是一次偶然。直到第二次又出现了这个问题的时候，想到后续万一毕设答辩前自己的电脑挂了这种可能，无奈之下只好现将代码都同步到github上去，然后换个兄弟将所有开发环境又搭了一次，这整整花了自己一天的时间才将所有的环境都部署好。上网查了一下机械硬盘会挂掉的原因，有的人说是因为接触不良，但自己不太懂硬件的一些东西，自己去拆机维修太冒险了，没必要去冒这种风险，但拿去维修的话又不知道要什么时候才能修好，而且自己平时上班也要用，在学校搞毕设也要用，这个尴尬的时候确实不适合拿去维修，索性就更换了自己的装备。</p>\n<p>　　开始还在纠结自己要去买什么机子好，最后还是选择了神舟，因为我对配置的要求要胜于对外观的要求，所以配置太低的基本不在自己的考虑范围内。加上最近英伟达出了16系的显卡，所以我就瞄准了搭配1660TI显卡的本子，开始考虑的是雷神系列的本子，但实在是太贵了，i7九代配上这个显卡价格就到了九千了，但反之看神舟的价格还不到七千，虽然神舟丑是丑了点，做工当然也没雷神好，但是我觉得一个游戏本最重要的一点是它的散热，如果散热不好的话外观再好看配置再好也是白搭，之前自己就深受华硕zen系列之苦，明明配置不错却使用起来像是个瓜皮，真的受不了，为了外观都不考虑散热口的，把散热口放在屏幕的下面，还在网上鼓吹自己的散热如何如何，哎，想想自己当年是真的弱智，反正以后是不可能再买华硕的本了。</p>\n<p>　　虽然说神舟的售后据说不怎么样，但是我估计售后还是有的，相对一线大厂如Dell、Asus、Hp等就会差很多。但电脑硬件坏这种情况我觉得这种事情还是比较少发生的，一般的软件问题自己应该也可以搞定，所以想想自己一定程度上可以忽略这个问题，再说鱼和熊掌不可兼得嘛，适合自己的总是最好的，个人觉得神舟从各方面来说还是比较适合自己的。经过这段时间的使用，自己对神舟的这款本子还是比较满意的，除了它的镜面屏让我有点难受之外，其它方面基本没有什么缺点。为了在原有的基础上去提升它的性能表现，前几天自己还特地买了一根8G的内存条搭载上去，自己发现加了内存条之后从单通道变成双通道之后简直速度要飞起，又想起自己买的第一个本，拆开一看发现只有一个内存槽就算了，居然为了凑8G还内置了一个4G的内存条，真TM的是奸若磐石呀，这可真不是白喊出来的，此时此刻我想再喊一遍，再买华硕我是狗！！！</p>\n<p><img src=\"/images/dalian.jpg\" alt=\"\" title=\"打脸\"></p>\n<p>　　估计以后自己不会怎么使用老兄弟了，有点伤感，毕竟自己是一个怀旧的人。等资金充足了找个师傅修修老兄弟，说不定哪天自己挖矿什么的或者做测试什么还需要两台计算机，毕竟这东西用久了也不想当做二手卖出去，总是有些感情的，这可是承载了自己四年的回忆啊。</p>\n<p>　　还是小结一下最近的事情吧，扯着扯着就说到笔记本上了。其实就是一通瞎忙，还是自找的，给自己目标设定过高，结果将自己累吐血。主要还是自己对自己过于自信，所以使用很多自己不熟悉的技术去做开发，事实上没什么不可以，就是被逼的用尽所有时间去学习需要的知识。这一顿搞完差不多真的快累垮了，近几天自己就只想睡觉什么其他的事情都不想做，累到荼蘼。想想忙完学校的事之后公司又会有一堆事接踵而来，公司的技术栈自己完全要重学，虽然我觉得对于自己来说没有什么特别大的问题，但还是想放松一段时间再投入到下一阶段中，之前自己就曾经犯过同样的错误，为了按时完成项目不断的push自己去学习然后不仅效率变得极低，而且整个人都不好了，甚至怀疑自己是否还存在。所以学会放松是非常重要的一件事情，效率高的时候看一个东西很快就知道该怎么做了，如果长期处在一个状态会变得极其低效，本来大部分的东西就不需要花费那么多时间，基本保持专注力几天都可以学到一些核心内容。</p>\n<p>　　莎士比亚说，思虑过多就失去了做人的乐趣，这句话真是说到自己的内心最真切的感受，但代码的思维跟的多了就会不自觉的对大部分事情都从思考的角度出发，然后发现一切事物就变得没有了趣味可言，这真的变成了一种恶性循环。昨天刚看了一部电影非分熟女，电影里说的一句话很是打动我，很多事情要学会用心去感受，而不要用头脑去思考。看来自我调节是一门真正需要必修的课，而我这门课明显是不合格的，慢慢去学吧，时刻提醒自己要学会放松自己的意识，用心去感受接触到的事物，因为自己一用头脑思考就会变得十分冷漠无情，和一个机器人无异了。</p>\n<p>　　em…可能这是自己最想总结的内容吧，也是因为独在异乡，对这座城市没有归属感，而且这个地方没有真正意义上的朋友，这两个因素也是导致自己时常觉得生活无味的原因。记得老师曾给我建议，就是没必要对朋友那么苛求，可以把不同的朋友分成不同的类别，比如这个朋友可以一起干这个，而那个朋友可以一起干其他的事情，我觉得这对于自己很难做到，可能自己的内心是比较高冷的吧，对一些人了解之后感到他们的无趣就基本可以判断它们对于一些事情会做什么样的反应，而自己也不喜欢去刻意附和自己厌恶的东西。自己也不喜欢去隐藏自己的情绪，所以说注定自己做不到老师提供的建议。</p>\n<p>　　em…还是想说那句话，很孤独但很爽，不用面对这些虚伪的面孔，起码让我感受到这才是属于自己的自由，如果为此付出的代价很昂贵的话，I will say, I choose my fate.</p>"},{"layout":"post","title":"Vue基础 - Class和Style绑定","date":"2019-10-28T02:00:00.000Z","thumbnail":"http://swcheng.com/images/vuelogo.png","_content":"　　在开发中我们不可避免的要动态的改变一个元素的样式，有时候是为了响应用户操作，有时候是根据数据的不同显示不同的样式等。这些时候我们的样式不可以进行硬编码，在正常情况下我们需要手动编写JS去实现这个功能，但是在Vue组件中，可以使用数据绑定一样的方式为组件的属性进行赋值达到动态修改组件样式的目的，由于Vue强大的响应式功能，我们可以很方便的修改组件的class和style属性。\n\n<!-- more -->\n\n　　Vue对class和style两个属性做了特别的增强，一般的属性的值只能为js计算结果的字符串，但class和style除了字符串外，还可以是对象或者数组：\n\n## class绑定\n\n### 使用对象的方式\n\n　　为class属性添加一个对象，\n\n{% codeblock lang:html %}\n　　<div v-bind:class=\"{ active: isActive }\"></div>\n{% endcodeblock %}\n\n　　在使用对象表达一个组件的class的时候，对象的属性表示class的值，而该属性的值isActive是否为一个真值，即true或false，如果不是true或false则会被强制转化为true或false值。当其为true的时候表示改组件有这个属性表示的class，否则没有，所以你可以通过在这个对象中添加多个属性达到控制组件class的目的。比如使用下面的方式：\n\n{% codeblock lang:html %}\n  <div\n    v-bind:class=\"{ active: isActive, 'text-danger': hasError }\">\n  </div>\n{% endcodeblock %}\n\n　　此外，v-bind:class属性还可以和普通的class属性共存，比如有下面的例子：\n\n{% codeblock lang:html %}\n  <div\n    class=\"static\"\n    v-bind:class=\"{ active: isActive, 'text-danger': hasError }\">\n  </div>\n{% endcodeblock %}\n\n　　如果有以下data，\n\n{% codeblock lang:js %}\n  data: {\n    isActive: true,\n    hasError: false\n  }\n{% endcodeblock %}\n\n　　结果会被渲染为，\n\n{% codeblock lang:html %}\n  <div class=\"static active\"></div>\n{% endcodeblock %}\n\n　　当isActive或者hasError的值变化时，class列表将相应地更新。例如，如果hasError的值为true，class列表将变为\"static active text-danger\"。当然这里前提是isActive和hasError需要满足响应式的前提，由于js的限制，vue无法对对象属性的增加和删除进行响应，也没法对数组的非变异方法进行响应。\n\n### 使用数组的方式\n\n　　我们可以把一个数组传给 v-bind:class，\n\n{% codeblock lang:html %}\n  <div v-bind:class=\"[{ active: isActive }, errorClass]\"></div>\n\n  data: {\n    errorClass: 'text-danger',\n    isActive: true\n  }\n{% endcodeblock %}\n\n　　与对象的渲染方式不同，使用数组会判断在数组中的变量类型，如果变量的值的类型为一个对象，那么它会像传递对象的方式去处理这个变量，如果这个变量的值的类型为一个字符串，那么会将其代表的字符串的值作为组件的class属性，\n\n{% codeblock lang:html %}\n  <div class=\"active text-danger\"></div>\n{% endcodeblock %}\n\n　　在使用组件的方式的时候，你可以使用三元表达式去控制数组中的成员达到控制组件属性的目的：\n{% codeblock lang:html %}\n  <div v-bind:class=\"[{ active: isActive }, errorClass]\"></div>\n{% endcodeblock %}\n\n### 与模版class共存\n\n　　之前我们已经知道v-bind:class可以与class共存，除此之外，其实v-bind:class以及class都同时可以和组件定义处的属性共存。例如，你声明了下面的组件，\n{% codeblock lang:html %}\n  Vue.component('my-component', {\n    template: '<p class=\"foo bar\">Hi</p>'\n  })\n{% endcodeblock %}\n\n　　如果直接添加一些class，\n{% codeblock lang:html %}\n  <my-component class=\"baz boo\"></my-component>\n{% endcodeblock %}\n\n　　结果会被渲染为：\n{% codeblock lang:html %}\n  <p class=\"foo bar baz boo\">Hi</p>\n{% endcodeblock %}\n\n　　同样对于v-bind:class也同样适用，\n{% codeblock lang:html %}\n  <my-component v-bind:class=\"{ active: isActive }\"></my-component>\n{% endcodeblock %}\n\n　　当 isActive 为 truthy[1] 时，HTML 将被渲染成为：\n{% codeblock lang:html %}\n  <p class=\"foo bar active\">Hi</p>\n{% endcodeblock %}\n\n\n## style内联样式绑定\n\n### 使用对象的方式\n\n　　与class绑定有所区别，在内联样式的绑定中，对象的属性和值分别表示css属性的名称和值，需要注意的是，对象属性的值类型必须为字符串而不可以是其它任意类型的值，因为vue无法判断对象属性中的值的单位，所以我们必须使用字符串进行准确的定义。CSS的很多属性都使用横线分割表示，我们在js中对象定义属性的时候无法直接定义短横线分割的属性，虽然可以通过加单引号包含的方式添加这样的属性，但是访问起来也必须通过[]的方式引用，这样未免太不人性化，所以vue提供了驼峰式(camelCase)的方式在对象中定义属性达到定义css属性的方式：\n\n{% codeblock lang:html %}\n  <div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n\n  data: {\n    activeColor: 'red',\n    fontSize: 30\n  }\n{% endcodeblock %}\n\n　　直接绑定到一个样式对象通常更好，这会让模板更清晰：\n{% codeblock lang:html %}\n  <div v-bind:style=\"styleObject\"></div>\n\n  data: {\n    styleObject: {\n      color: 'red',\n      fontSize: '13px'\n    }\n  }\n{% endcodeblock %}\n\n　　结果会被渲染为:\n{% codeblock lang:html %}\n<div style=\"color: 'red'; fontSize: '13px'\"></div>\n{% endcodeblock %}\n### 使用数组的方式\n\n　　v-bind:style使用数组的方式类似于v-bind:class，可以同时定义多个变量，也可以使用三元表达式，同时根据变量的类型去定义css属性。\n\n### 自动添加前缀\n\n　　在v-bind:style使用一些需要自动添加[]浏览器引擎前缀](https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix)的css属性的时候，Vue.js 会自动侦测并添加相应的前缀。\n\n### 多重值\n\n　　从 2.3.0 起你可以为 style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：\n{% codeblock lang:html %}\n  <div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n{% endcodeblock %}\n\n　　这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。\n","source":"_posts/Vue基础-Class和Style绑定.md","raw":"layout: \"post\"\ntitle: \"Vue基础 - Class和Style绑定\"\ndate: \"2019-10-28 10:00\"\ncategories:\n- [UI,VUE]\ntags:\n- [TECHNOLOGY]\nthumbnail: http://swcheng.com/images/vuelogo.png\n---\n　　在开发中我们不可避免的要动态的改变一个元素的样式，有时候是为了响应用户操作，有时候是根据数据的不同显示不同的样式等。这些时候我们的样式不可以进行硬编码，在正常情况下我们需要手动编写JS去实现这个功能，但是在Vue组件中，可以使用数据绑定一样的方式为组件的属性进行赋值达到动态修改组件样式的目的，由于Vue强大的响应式功能，我们可以很方便的修改组件的class和style属性。\n\n<!-- more -->\n\n　　Vue对class和style两个属性做了特别的增强，一般的属性的值只能为js计算结果的字符串，但class和style除了字符串外，还可以是对象或者数组：\n\n## class绑定\n\n### 使用对象的方式\n\n　　为class属性添加一个对象，\n\n{% codeblock lang:html %}\n　　<div v-bind:class=\"{ active: isActive }\"></div>\n{% endcodeblock %}\n\n　　在使用对象表达一个组件的class的时候，对象的属性表示class的值，而该属性的值isActive是否为一个真值，即true或false，如果不是true或false则会被强制转化为true或false值。当其为true的时候表示改组件有这个属性表示的class，否则没有，所以你可以通过在这个对象中添加多个属性达到控制组件class的目的。比如使用下面的方式：\n\n{% codeblock lang:html %}\n  <div\n    v-bind:class=\"{ active: isActive, 'text-danger': hasError }\">\n  </div>\n{% endcodeblock %}\n\n　　此外，v-bind:class属性还可以和普通的class属性共存，比如有下面的例子：\n\n{% codeblock lang:html %}\n  <div\n    class=\"static\"\n    v-bind:class=\"{ active: isActive, 'text-danger': hasError }\">\n  </div>\n{% endcodeblock %}\n\n　　如果有以下data，\n\n{% codeblock lang:js %}\n  data: {\n    isActive: true,\n    hasError: false\n  }\n{% endcodeblock %}\n\n　　结果会被渲染为，\n\n{% codeblock lang:html %}\n  <div class=\"static active\"></div>\n{% endcodeblock %}\n\n　　当isActive或者hasError的值变化时，class列表将相应地更新。例如，如果hasError的值为true，class列表将变为\"static active text-danger\"。当然这里前提是isActive和hasError需要满足响应式的前提，由于js的限制，vue无法对对象属性的增加和删除进行响应，也没法对数组的非变异方法进行响应。\n\n### 使用数组的方式\n\n　　我们可以把一个数组传给 v-bind:class，\n\n{% codeblock lang:html %}\n  <div v-bind:class=\"[{ active: isActive }, errorClass]\"></div>\n\n  data: {\n    errorClass: 'text-danger',\n    isActive: true\n  }\n{% endcodeblock %}\n\n　　与对象的渲染方式不同，使用数组会判断在数组中的变量类型，如果变量的值的类型为一个对象，那么它会像传递对象的方式去处理这个变量，如果这个变量的值的类型为一个字符串，那么会将其代表的字符串的值作为组件的class属性，\n\n{% codeblock lang:html %}\n  <div class=\"active text-danger\"></div>\n{% endcodeblock %}\n\n　　在使用组件的方式的时候，你可以使用三元表达式去控制数组中的成员达到控制组件属性的目的：\n{% codeblock lang:html %}\n  <div v-bind:class=\"[{ active: isActive }, errorClass]\"></div>\n{% endcodeblock %}\n\n### 与模版class共存\n\n　　之前我们已经知道v-bind:class可以与class共存，除此之外，其实v-bind:class以及class都同时可以和组件定义处的属性共存。例如，你声明了下面的组件，\n{% codeblock lang:html %}\n  Vue.component('my-component', {\n    template: '<p class=\"foo bar\">Hi</p>'\n  })\n{% endcodeblock %}\n\n　　如果直接添加一些class，\n{% codeblock lang:html %}\n  <my-component class=\"baz boo\"></my-component>\n{% endcodeblock %}\n\n　　结果会被渲染为：\n{% codeblock lang:html %}\n  <p class=\"foo bar baz boo\">Hi</p>\n{% endcodeblock %}\n\n　　同样对于v-bind:class也同样适用，\n{% codeblock lang:html %}\n  <my-component v-bind:class=\"{ active: isActive }\"></my-component>\n{% endcodeblock %}\n\n　　当 isActive 为 truthy[1] 时，HTML 将被渲染成为：\n{% codeblock lang:html %}\n  <p class=\"foo bar active\">Hi</p>\n{% endcodeblock %}\n\n\n## style内联样式绑定\n\n### 使用对象的方式\n\n　　与class绑定有所区别，在内联样式的绑定中，对象的属性和值分别表示css属性的名称和值，需要注意的是，对象属性的值类型必须为字符串而不可以是其它任意类型的值，因为vue无法判断对象属性中的值的单位，所以我们必须使用字符串进行准确的定义。CSS的很多属性都使用横线分割表示，我们在js中对象定义属性的时候无法直接定义短横线分割的属性，虽然可以通过加单引号包含的方式添加这样的属性，但是访问起来也必须通过[]的方式引用，这样未免太不人性化，所以vue提供了驼峰式(camelCase)的方式在对象中定义属性达到定义css属性的方式：\n\n{% codeblock lang:html %}\n  <div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n\n  data: {\n    activeColor: 'red',\n    fontSize: 30\n  }\n{% endcodeblock %}\n\n　　直接绑定到一个样式对象通常更好，这会让模板更清晰：\n{% codeblock lang:html %}\n  <div v-bind:style=\"styleObject\"></div>\n\n  data: {\n    styleObject: {\n      color: 'red',\n      fontSize: '13px'\n    }\n  }\n{% endcodeblock %}\n\n　　结果会被渲染为:\n{% codeblock lang:html %}\n<div style=\"color: 'red'; fontSize: '13px'\"></div>\n{% endcodeblock %}\n### 使用数组的方式\n\n　　v-bind:style使用数组的方式类似于v-bind:class，可以同时定义多个变量，也可以使用三元表达式，同时根据变量的类型去定义css属性。\n\n### 自动添加前缀\n\n　　在v-bind:style使用一些需要自动添加[]浏览器引擎前缀](https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix)的css属性的时候，Vue.js 会自动侦测并添加相应的前缀。\n\n### 多重值\n\n　　从 2.3.0 起你可以为 style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：\n{% codeblock lang:html %}\n  <div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n{% endcodeblock %}\n\n　　这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。\n","slug":"Vue基础-Class和Style绑定","published":1,"updated":"2019-10-28T05:23:25.106Z","_id":"ck29vbsl500004081iwgtvyvn","comments":1,"photos":[],"link":"","content":"<p>　　在开发中我们不可避免的要动态的改变一个元素的样式，有时候是为了响应用户操作，有时候是根据数据的不同显示不同的样式等。这些时候我们的样式不可以进行硬编码，在正常情况下我们需要手动编写JS去实现这个功能，但是在Vue组件中，可以使用数据绑定一样的方式为组件的属性进行赋值达到动态修改组件样式的目的，由于Vue强大的响应式功能，我们可以很方便的修改组件的class和style属性。</p>\n<a id=\"more\"></a>\n<p>　　Vue对class和style两个属性做了特别的增强，一般的属性的值只能为js计算结果的字符串，但class和style除了字符串外，还可以是对象或者数组：</p>\n<h2 id=\"class绑定\"><a href=\"#class绑定\" class=\"headerlink\" title=\"class绑定\"></a>class绑定</h2><h3 id=\"使用对象的方式\"><a href=\"#使用对象的方式\" class=\"headerlink\" title=\"使用对象的方式\"></a>使用对象的方式</h3><p>　　为class属性添加一个对象，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　在使用对象表达一个组件的class的时候，对象的属性表示class的值，而该属性的值isActive是否为一个真值，即true或false，如果不是true或false则会被强制转化为true或false值。当其为true的时候表示改组件有这个属性表示的class，否则没有，所以你可以通过在这个对象中添加多个属性达到控制组件class的目的。比如使用下面的方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　此外，v-bind:class属性还可以和普通的class属性共存，比如有下面的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　如果有以下data，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  hasError: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　结果会被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　当isActive或者hasError的值变化时，class列表将相应地更新。例如，如果hasError的值为true，class列表将变为”static active text-danger”。当然这里前提是isActive和hasError需要满足响应式的前提，由于js的限制，vue无法对对象属性的增加和删除进行响应，也没法对数组的非变异方法进行响应。</p>\n<h3 id=\"使用数组的方式\"><a href=\"#使用数组的方式\" class=\"headerlink\" title=\"使用数组的方式\"></a>使用数组的方式</h3><p>　　我们可以把一个数组传给 v-bind:class，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[&#123; active: isActive &#125;, errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  errorClass: 'text-danger',</span><br><span class=\"line\">  isActive: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　与对象的渲染方式不同，使用数组会判断在数组中的变量类型，如果变量的值的类型为一个对象，那么它会像传递对象的方式去处理这个变量，如果这个变量的值的类型为一个字符串，那么会将其代表的字符串的值作为组件的class属性，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　在使用组件的方式的时候，你可以使用三元表达式去控制数组中的成员达到控制组件属性的目的：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[&#123; active: isActive &#125;, errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"与模版class共存\"><a href=\"#与模版class共存\" class=\"headerlink\" title=\"与模版class共存\"></a>与模版class共存</h3><p>　　之前我们已经知道v-bind:class可以与class共存，除此之外，其实v-bind:class以及class都同时可以和组件定义处的属性共存。例如，你声明了下面的组件，<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component('my-component', &#123;</span><br><span class=\"line\">  template: '<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>　　如果直接添加一些class，<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">class</span>=<span class=\"string\">\"baz boo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　结果会被渲染为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar baz boo\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　同样对于v-bind:class也同样适用，<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　当 isActive 为 truthy[1] 时，HTML 将被渲染成为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"style内联样式绑定\"><a href=\"#style内联样式绑定\" class=\"headerlink\" title=\"style内联样式绑定\"></a>style内联样式绑定</h2><h3 id=\"使用对象的方式-1\"><a href=\"#使用对象的方式-1\" class=\"headerlink\" title=\"使用对象的方式\"></a>使用对象的方式</h3><p>　　与class绑定有所区别，在内联样式的绑定中，对象的属性和值分别表示css属性的名称和值，需要注意的是，对象属性的值类型必须为字符串而不可以是其它任意类型的值，因为vue无法判断对象属性中的值的单位，所以我们必须使用字符串进行准确的定义。CSS的很多属性都使用横线分割表示，我们在js中对象定义属性的时候无法直接定义短横线分割的属性，虽然可以通过加单引号包含的方式添加这样的属性，但是访问起来也必须通过[]的方式引用，这样未免太不人性化，所以vue提供了驼峰式(camelCase)的方式在对象中定义属性达到定义css属性的方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  activeColor: 'red',</span><br><span class=\"line\">  fontSize: 30</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　直接绑定到一个样式对象通常更好，这会让模板更清晰：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"styleObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  styleObject: &#123;</span><br><span class=\"line\">    color: 'red',</span><br><span class=\"line\">    fontSize: '13px'</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　结果会被渲染为:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: 'red'; fontSize: '13px'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用数组的方式-1\"><a href=\"#使用数组的方式-1\" class=\"headerlink\" title=\"使用数组的方式\"></a>使用数组的方式</h3><p>　　v-bind:style使用数组的方式类似于v-bind:class，可以同时定义多个变量，也可以使用三元表达式，同时根据变量的类型去定义css属性。</p>\n<h3 id=\"自动添加前缀\"><a href=\"#自动添加前缀\" class=\"headerlink\" title=\"自动添加前缀\"></a>自动添加前缀</h3><p>　　在v-bind:style使用一些需要自动添加<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix\" target=\"_blank\" rel=\"noopener\">]浏览器引擎前缀</a>的css属性的时候，Vue.js 会自动侦测并添加相应的前缀。</p>\n<h3 id=\"多重值\"><a href=\"#多重值\" class=\"headerlink\" title=\"多重值\"></a>多重值</h3><p>　　从 2.3.0 起你可以为 style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。</p>\n","site":{"data":{}},"excerpt":"<p>　　在开发中我们不可避免的要动态的改变一个元素的样式，有时候是为了响应用户操作，有时候是根据数据的不同显示不同的样式等。这些时候我们的样式不可以进行硬编码，在正常情况下我们需要手动编写JS去实现这个功能，但是在Vue组件中，可以使用数据绑定一样的方式为组件的属性进行赋值达到动态修改组件样式的目的，由于Vue强大的响应式功能，我们可以很方便的修改组件的class和style属性。</p>","more":"<p>　　Vue对class和style两个属性做了特别的增强，一般的属性的值只能为js计算结果的字符串，但class和style除了字符串外，还可以是对象或者数组：</p>\n<h2 id=\"class绑定\"><a href=\"#class绑定\" class=\"headerlink\" title=\"class绑定\"></a>class绑定</h2><h3 id=\"使用对象的方式\"><a href=\"#使用对象的方式\" class=\"headerlink\" title=\"使用对象的方式\"></a>使用对象的方式</h3><p>　　为class属性添加一个对象，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　在使用对象表达一个组件的class的时候，对象的属性表示class的值，而该属性的值isActive是否为一个真值，即true或false，如果不是true或false则会被强制转化为true或false值。当其为true的时候表示改组件有这个属性表示的class，否则没有，所以你可以通过在这个对象中添加多个属性达到控制组件class的目的。比如使用下面的方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　此外，v-bind:class属性还可以和普通的class属性共存，比如有下面的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　如果有以下data，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  hasError: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　结果会被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　当isActive或者hasError的值变化时，class列表将相应地更新。例如，如果hasError的值为true，class列表将变为”static active text-danger”。当然这里前提是isActive和hasError需要满足响应式的前提，由于js的限制，vue无法对对象属性的增加和删除进行响应，也没法对数组的非变异方法进行响应。</p>\n<h3 id=\"使用数组的方式\"><a href=\"#使用数组的方式\" class=\"headerlink\" title=\"使用数组的方式\"></a>使用数组的方式</h3><p>　　我们可以把一个数组传给 v-bind:class，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[&#123; active: isActive &#125;, errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  errorClass: 'text-danger',</span><br><span class=\"line\">  isActive: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　与对象的渲染方式不同，使用数组会判断在数组中的变量类型，如果变量的值的类型为一个对象，那么它会像传递对象的方式去处理这个变量，如果这个变量的值的类型为一个字符串，那么会将其代表的字符串的值作为组件的class属性，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　在使用组件的方式的时候，你可以使用三元表达式去控制数组中的成员达到控制组件属性的目的：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[&#123; active: isActive &#125;, errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"与模版class共存\"><a href=\"#与模版class共存\" class=\"headerlink\" title=\"与模版class共存\"></a>与模版class共存</h3><p>　　之前我们已经知道v-bind:class可以与class共存，除此之外，其实v-bind:class以及class都同时可以和组件定义处的属性共存。例如，你声明了下面的组件，<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component('my-component', &#123;</span><br><span class=\"line\">  template: '<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>　　如果直接添加一些class，<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">class</span>=<span class=\"string\">\"baz boo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　结果会被渲染为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar baz boo\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　同样对于v-bind:class也同样适用，<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　当 isActive 为 truthy[1] 时，HTML 将被渲染成为：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"style内联样式绑定\"><a href=\"#style内联样式绑定\" class=\"headerlink\" title=\"style内联样式绑定\"></a>style内联样式绑定</h2><h3 id=\"使用对象的方式-1\"><a href=\"#使用对象的方式-1\" class=\"headerlink\" title=\"使用对象的方式\"></a>使用对象的方式</h3><p>　　与class绑定有所区别，在内联样式的绑定中，对象的属性和值分别表示css属性的名称和值，需要注意的是，对象属性的值类型必须为字符串而不可以是其它任意类型的值，因为vue无法判断对象属性中的值的单位，所以我们必须使用字符串进行准确的定义。CSS的很多属性都使用横线分割表示，我们在js中对象定义属性的时候无法直接定义短横线分割的属性，虽然可以通过加单引号包含的方式添加这样的属性，但是访问起来也必须通过[]的方式引用，这样未免太不人性化，所以vue提供了驼峰式(camelCase)的方式在对象中定义属性达到定义css属性的方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  activeColor: 'red',</span><br><span class=\"line\">  fontSize: 30</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　直接绑定到一个样式对象通常更好，这会让模板更清晰：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"styleObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  styleObject: &#123;</span><br><span class=\"line\">    color: 'red',</span><br><span class=\"line\">    fontSize: '13px'</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>　　结果会被渲染为:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: 'red'; fontSize: '13px'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用数组的方式-1\"><a href=\"#使用数组的方式-1\" class=\"headerlink\" title=\"使用数组的方式\"></a>使用数组的方式</h3><p>　　v-bind:style使用数组的方式类似于v-bind:class，可以同时定义多个变量，也可以使用三元表达式，同时根据变量的类型去定义css属性。</p>\n<h3 id=\"自动添加前缀\"><a href=\"#自动添加前缀\" class=\"headerlink\" title=\"自动添加前缀\"></a>自动添加前缀</h3><p>　　在v-bind:style使用一些需要自动添加<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix\" target=\"_blank\" rel=\"noopener\">]浏览器引擎前缀</a>的css属性的时候，Vue.js 会自动侦测并添加相应的前缀。</p>\n<h3 id=\"多重值\"><a href=\"#多重值\" class=\"headerlink\" title=\"多重值\"></a>多重值</h3><p>　　从 2.3.0 起你可以为 style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。</p>"},{"layout":"post","title":"Vue基础 - 组件","date":"2019-10-28T05:23:00.000Z","thumbnail":"http://swcheng.com/images/vuelogo.png","_content":"　　组件是Vue设计的核心思想，Vue应用也是由一个个组件组成的，组件可以被复用，也可以根据情况动态显示不同的组件。在Vue的组件中，主要包括template、script以及style三个内容，template是编写的组件的html模版(也可以使用JSX)，里面包含的是页面的基础的html内容，可以使用Vue指令去进行一些额外逻辑的处理；script包含Vue组件内部的一些数据，方法，生命周期钩子等；style中是为组件编写的一些css样式，如果在style中加上scope表示这些样式作用域为组件内，如果没有则表示定义的全局样式。\n\n<!-- more -->\n\n## 组件注册\n\n　　Vue的组件需要定义且注册之后才可以与其它组件配合工作，上面叙述的是组件在.vue模板里的书写方式，如果我们直接在JS中全局定义并注册一个Vue组件的方式为：\n\n{% codeblock lang:js %}\n  // 定义一个名为 button-counter 的新组件\n  Vue.component('button-counter', {\n    data: function () {\n      return {\n        count: 0\n      }\n    },\n    template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.</button>'\n  })\n{% endcodeblock %}\n\n　　当一个组件完成注册之后，就可以被使用在其它组件之中了，全局注册的组件可以在整个Vue应用中使用，比如我们可以在html模板中这样定义，\n\n{% codeblock lang:html %}\n  <div id=\"components-demo\">\n    <button-counter></button-counter>\n  </div>\n{% endcodeblock %}\n\n　　所有Vue应用仅有一个根实例，根实例与其它组件的区别是它具备一个el属性，这个属性在其它组件中并不存在，el属性用于将vue应用绑定到唯一的DOM节点上。对于一个已经定义并全局注册的组件，你可以在任意一个地方进行复用，\n\n{% codeblock lang:html %}\n  <div id=\"components-demo\">\n    <button-counter></button-counter>\n    <button-counter></button-counter>\n    <button-counter></button-counter>\n  </div>\n{% endcodeblock %}\n\n　　在这里的button-counter组件中，每个组件都维护自己的数据独立工作，当这份数据是从外部传入的时候，这个规则可能不再成立。相同的组件只可能因为数据不同而显示不同的样式，当依赖式数据改动的时候，视图将会被相应更新。所以为了维护每个组件的独立，在组件内部定义data属性的时候，必须使用方法返回一个对象而不能直接定义为一个对象，正确添加data的方式应该是这样：\n\n{% codeblock lang:js %}\n  data: function () {\n    return {\n      count: 0\n    }\n  }\n{% endcodeblock %}\n\n　　全局注册过的组件在任何地方都可用，但是有时候我们不需要去全局定义一个组件，因为对于很多使用频率较低组件来说，并不需要进行全局注册，只进行局部注册即可，过多的全局注册会导致用户增加下载的JS的体积。对于局部注册的组件，只可以在引入其的组件中使用，不可以在其它组件的模板中使用。局部定义一个组件的方式很简单，在JS中直接定义的方式为：\n\n{% codeblock lang:js %}\n  var ComponentA = { /* ... */ }\n  var ComponentB = { /* ... */ }\n  var ComponentC = { /* ... */ }\n{% endcodeblock %}\n\n　　在需要引入其的组件中的components属性中，添加指向这个对象的引用，(局部注册的组件只可以在它自己的模板中使用，不可使用在其子组件中，也就是说，这里同时引入A和B，无法在B的模板中使用A，要想在B中使用A，必须在B中单独引入)\n\n{% codeblock lang:js %}\n  new Vue({\n    el: '#app',\n    components: {\n      'component-a': ComponentA,\n      'component-b': ComponentB\n    }\n  })\n{% endcodeblock %}\n\n　　或者如果你通过 Babel 和 webpack 使用 ES2015 模块，那么代码看起来更像：\n\n{% codeblock lang:js %}\n  import ComponentA from './ComponentA.vue'\n\n  export default {\n    components: {\n      ComponentA\n    },\n    // ...\n  }\n{% endcodeblock %}\n\n　　在引入局部组件之后，在模板中使用只需要引入其在components中编写的组件属性名称，比如这里定义的属性名称为ComponentA，那么在模板中就可以编写<ComponentA></ComponentA>，这样看上去不太符合标准的html标签的写法，所幸的是，Vue中两种写法都支持，当你使用PascalCase的写法的时候，你依然可以在模板中使用<component-a></component-a>这样的写法。但如果你本身就在components中使用的是kebab-case这样的写法，那么在模板中你也只能在这里面使用kebab-case这样的写法。\n\n### 基础组件全局注册\n\n　　对于一些基础组件，这类组件相对比较通用，如果一个个去导入这些组件，那么会导致在很多组件中有大量包含基础组件的长列表，这时候我们想要在全局注册这些组件。如果你使用webpack这类前端打包工具，那么你可以使用[require.context](https://webpack.js.org/guides/dependency-management/)很方便的一次引入大量的基础组件，\n\n{% codeblock lang:js %}\n  import Vue from 'vue'\n  import upperFirst from 'lodash/upperFirst'\n  import camelCase from 'lodash/camelCase'\n\n  const requireComponent = require.context(\n    // 其组件目录的相对路径\n    './components',\n    // 是否查询其子目录\n    false,\n    // 匹配基础组件文件名的正则表达式\n    /Base[A-Z]\\w+\\.(vue|js)$/\n  )\n\n  requireComponent.keys().forEach(fileName => {\n    // 获取组件配置\n    const componentConfig = requireComponent(fileName)\n\n    // 获取组件的 PascalCase 命名\n    const componentName = upperFirst(\n      camelCase(\n        // 获取和目录深度无关的文件名\n        fileName\n          .split('/')\n          .pop()\n          .replace(/\\.\\w+$/, '')\n      )\n    )\n\n    // 全局注册组件\n    Vue.component(\n      componentName,\n        // 如果这个组件选项是通过 `export default` 导出的，\n        // 那么就会优先使用 `.default`，\n        // 否则回退到使用模块的根。\n        componentConfig.default || componentConfig\n    )\n\n  });\n\n{% endcodeblock %}  \n\n\n## 组件Prop\n\n### Prop定义和传递\n\n　　组件中的数据分成两个部分，一部分是由父组件传递给自己的，就是这里说的Prop，另一部分是自身的数据，也就是data属性定义的部分。在组件中定义一个Prop最简单的方式，\n\n{% codeblock lang:js %}\n  Vue.component('blog-post', {\n    props: ['title'],\n    template: '<h3>{{ title }}</h3>'\n  })\n{% endcodeblock %}  \n\n　　最简单的在父组件中为其赋值的方式，\n\n{% codeblock lang:js %}\n  <blog-post title=\"My journey with Vue\"></blog-post>\n  <blog-post title=\"Blogging with Vue\"></blog-post>\n  <blog-post title=\"Why Vue is so fun\"></blog-post>\n{% endcodeblock %}  \n\n　　一个组件可以拥有任意数量的Prop，在组件中访问Prop的属性的方式和data属性一样，这里的title不仅可以是字符串，可以是任何类型的值(对象，数组，布尔值...)。更方便的是，可以配合使用v-for去遍历生成一个子组件列表，\n\n{% codeblock lang:html %}\n  <blog-post\n    v-for=\"post in posts\"\n    v-bind:key=\"post.id\"\n    v-bind:title=\"post.title\"\n  ></blog-post>\n{% endcodeblock %}  \n\n　　一个需要注意的地方是，在HTML中DOM是不区分大小写的，也就是说浏览器会把所有大写字母解释为小写字母，如果使用DOM中的模板，如果需要对camel-case格式的prop赋值必须在模板中用与其等价的kebab-case命名。\n\n{% codeblock lang:html %}\n  Vue.component('blog-post', {\n    // 在 JavaScript 中是 camelCase 的\n    props: ['postTitle'],\n    template: '<h3>{{ postTitle }}</h3>'\n  })\n\n  <!-- 在 HTML 中是 kebab-case 的 -->\n  <blog-post post-title=\"hello!\"></blog-post>\n{% endcodeblock %}  \n\n　　但是如果使用字符串模板，那么这条限制就不存在了，那么什么是字符串模板什么是DOM模板呢？DOM模板是指能被浏览器解析的模板，DOM模板和元素的html混合在一起进行定义，比如下面的例子，id为demo的div既是位于html中，又作为vue的一个组件被定义，这就被称为DOM模板，\n\n{% codeblock lang:html %}\n  <body>\n    <!-- html模板 -->\n    <div id=\"demo\" title=\"i love jack\">\n      <span :customId=\"id\">{{message}}</span>\n    </div>\n    <script>\n      let obj = {\n        message: 'hello,world',\n        id: 'JS脚本模板'\n      }\n      var vm = new Vue({\n        el: '#demo',\n        data: obj,\n        prop: ['title']\n      })\n    </script>\n  </body>\n{% endcodeblock %}  \n\n　　字符串模板是定义在js代码中用字符串包裹起来进行定义的vue组件，这种方式被称为字符串模板，比如下面的全局注册和局部组件定义都是字符串模板的使用方式，***(注意，通过字符串模板定义的元素，会替换挂载的元素)***\n\n{% codeblock lang:html %}\n  <body>\n    <div id=\"template\"></div>\n    <script type=\"x-template\" id=\"optioncompTemp\">\n           <option>a</option>\n    </script>\n    <script>\n      Vue.component('my-component', {\n        props: ['param'],\n        template: `\n          <div>A custom component{{param}}</div>\n        `\n      })\n      new Vue({\n        el: '#template',\n        data: {\n          name: 'donghai'\n        },\n        components: {\n          'se-com': {\n            props: ['param'],\n            template: '#optioncompTemp'\n          }\n        },\n        // 字符串模板，替换全部的模板，内联字符串模板\n        template: `\n        <ol>\n          <tr is=\"my-component\" :param=\"name\"></tr>\n          <tr is=\"se-com\" :param=\"name\" ></tr>\n          <se-com :param=\"name\"></se-com>\n        </ol>\n        `\n      })\n    </script>\n  </body>\n{% endcodeblock %}  \n\n　　除了DOM模板和字符串模板之外，在vue中还存在着内联字符串模板以及{% raw %}JS脚本模板{% endraw %}模板，内联字符串模板指的是，在一个组件内部引用其它组件的时候，这个被引入的子组件也是直接用字符串表示，而非来自其它形式(如导入一个模板等)方式的引入，\n\n{% codeblock lang:js %}\n\n  new Vue({\n        el: '#template',\n        data: {\n          name: 'donghai'\n        },\n        components: {\n          'se-com': {\n            props: ['param'],\n            template: `<div>我是第二个组件{{param}}</div>`\n          }\n        },\n        // 字符串模板，替换挂载元素\n        template: `\n        <ol>\n          <tr is=\"my-component\" :param=\"name\"></tr>\n          <tr is=\"se-com\" :param=\"name\" ></tr>\n          <se-com :param=\"name\"></se-com>\n        </ol>\n        `\n      })\n\n{% endcodeblock %}  \n\n　　JS脚本模板指的是使用script标签去声明一个组件的模板，\n\n{% codeblock lang:html %}\n  <body>\n    <div id=\"app\">\n      <select>\n        <option is=\"optioncomp\"></option>\n      </select>\n    </div>\n      <!--模板内容存放区域-->\n    <script type=\"text/x-template\" id=\"optioncompTemp\">\n      <option>a</option>\n    </script>\n    <script>\n      new Vue({\n        el: '#app',\n        components: {\n          'optioncomp': {\n            template: '#optioncompTemp'\n          }\n        }\n      })\n    </script>\n  </body>\n{% endcodeblock %}  \n\n　　但是如果我们使用文件模板，即xxx.vue的方式，在前端工程中就不存在上面提到的大小写的问题了。除此之外，vue模板中定义的组件在一些特定的标签下受到限制，例如***ul、ol、table、select***这样的元素里允许包含的元素有限制，而另一些像***option***这样的元素只能出现在某些特定元素的内部。下面这样的方式是不被允许的，\n\n{% codeblock lang:html %}\n  <table>\n    <my-row>...</my-row>\n  </table>\n{% endcodeblock %}  \n\n　　这时候自定义组件my-row会被当成无效的内容，这时候需要使用到特殊的is属性，\n\n{% codeblock lang:html %}\n  <table>\n    <tr is=\"my-row\"></tr>\n  </table>\n{% endcodeblock %}  \n\n　　另外这个特殊的标签限制只会的一些内容有效，对于下面的情况，则可以在这些被限制的标签中使用自定义模板，\n\n- 内联字符串模板\n- 单文件组件 (.vue)\n- JS脚本模板\n\n### 静态传递和动态传递\n\n　　我们知道可以这样传递到组件中一个静态的值，而且它总是一个字符串类型，\n\n{% codeblock lang:html %}\n  <blog-post title=\"My journey with Vue\"></blog-post>\n{% endcodeblock %}  \n\n　　通过v-bind进行动态赋值，\n\n{% codeblock lang:html %}\n\n  <!-- 动态赋予一个变量的值 -->\n  <blog-post v-bind:title=\"post.title\"></blog-post>\n\n  <!-- 动态赋予一个复杂表达式的值 -->\n  <blog-post\n    v-bind:title=\"post.title + ' by ' + post.author.name\">\n  </blog-post>\n\n{% endcodeblock %}  \n\n　　对于静态赋值，有时候我们想要传递一个数字类型或者布尔类型的时候，是无法做到的，所以这时候我们必须使用动态赋值的方式传递一个js表达式，\n\n{% codeblock lang:html %}\n\n  <!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue -->\n  <!-- 这是一个 JavaScript 表达式而不是一个字符串。-->\n  <blog-post v-bind:likes=\"42\"></blog-post>\n\n  <!-- 包含该 prop 没有值的情况在内，都意味着 `true`。-->\n  <blog-post is-published></blog-post>\n\n  <!-- 即便 `false` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue -->\n  <!-- 这是一个 JavaScript 表达式而不是一个字符串。-->\n  <blog-post v-bind:is-published=\"false\"></blog-post>\n\n  <!-- 即便数组是静态的，我们仍然需要 `v-bind` 来告诉 Vue -->\n  <!-- 这是一个 JavaScript 表达式而不是一个字符串。-->\n  <blog-post v-bind:comment-ids=\"[234, 266, 273]\"></blog-post>\n\n  <!-- 即便对象是静态的，我们仍然需要 `v-bind` 来告诉 Vue -->\n  <!-- 这是一个 JavaScript 表达式而不是一个字符串。-->\n  <blog-post\n    v-bind:author=\"{\n      name: 'Veronica',\n      company: 'Veridian Dynamics'\n    }\"></blog-post>\n\n{% endcodeblock %}  \n\n　　如果你想要在组件中同时定义多个属性，但又不希望把它们都放置在一个对象中，这时候你可能需要写很多赋值语句，vue提供了不带参数的v-bind指令帮助你一次传递一个对象的所有属性，\n\n{% codeblock lang:html %}\n\n  <blog-post v-bind=\"post\"></blog-post>\n\n  等价于:\n\n  <blog-post\n  v-bind:id=\"post.id\"\n  v-bind:title=\"post.title\"></blog-post>\n\n{% endcodeblock %}  \n\n### 单向数据流\n\n　　Vue中所有的数据在父组件和自组件中是单向下行绑定的，这意味着，父组件中修改传递到子组件中的prop时，子组件中的数据同样会被修改，但是反之却不行。这样的目的是为了防止子组件的改动影响到父组件中的数据，会导致应用的数据流向难以理解。Vue这样设计是很合理的，因为有时候我们不希望子组件的改动影响到父组件的数据，只有在必要的时候才去这么做，这样使我们对数据具备更多的可控性。\n\n　　另外在Vue中如果你在子组件中修改了prop，那么控制台会提示一个警告，意味着你不应该这么做。从父组件传递到子组件的prop一般有下面两个用处，\n\n　　1. 用于传递一个初始值，子组件依赖这个初始值去进行组件的渲染，并将其当作一个本地数据使用。这时候你应该拷贝一份数据到本地，\n{% codeblock lang:js %}\n  props: ['initialCounter'],\n  data: function () {\n    return {\n      counter: this.initialCounter\n    }\n  }\n{% endcodeblock %}  \n\n　　2. 这个prop不需要修改，只是用于读取，但是子组件需要修改传递过来的数据源，这时候可以将其设置为一个计算属性，\n\n{% codeblock lang:js %}\n  props: ['size'],\n  computed: {\n    normalizedSize: function () {\n      return this.size.trim().toLowerCase()\n    }\n  }\n{% endcodeblock %}  \n\n　　***对于对象类型或者数组类型的prop，在从父组件传递到组件中的时候，变量的类型是引用，也就是指向对象和数组的地址，这时候上面的单向数据流就不成立了。就是说单向数据流法则仅当你传递的是一个非对象和数组类型的值的时候才成立，否则子组件和父组件一样会将数据的修改影响到对方。***\n\n### Prop验证\n\n　　有时候我们在编写一个组件的时候，自己一般知道需要往里面传递什么类型的值，或者这个Prop的一些限制，但是后面的开发者并不知道这时候需要怎么传递，你可以为这些Prop添加一个验证帮助其它开发者检验错误，当prop验证失败的时候，(开发环境构建版本的)Vue 将会产生一个控制台的警告。如果需要对Prop检查错误，就必须使用对象的语法形式而非数组，\n\n{% codeblock lang:js %}\n\n  Vue.component('my-component', {\n    props: {\n      // 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)\n      propA: Number,\n      // 多个可能的类型\n      propB: [String, Number],\n      // 必填的字符串\n      propC: {\n        type: String,\n        required: true\n      },\n      // 带有默认值的数字\n      propD: {\n        type: Number,\n        default: 100\n      },\n      // 带有默认值的对象\n      propE: {\n        type: Object,\n        // 对象或数组默认值必须从一个工厂函数获取\n        default: function () {\n          return { message: 'hello' }\n        }\n      },\n      // 自定义验证函数\n      propF: {\n        validator: function (value) {\n          // 这个值必须匹配下列字符串中的一个\n          return ['success', 'warning', 'danger'].indexOf(value) !== -1\n        }\n      }\n    }\n  })\n\n{% endcodeblock %}  \n\n　　***Prop验证发生在组件创建前，也就是说，组件的Prop中的default和validator不可以使用定义在组件data、computed、methods中的属性和方法***\n\n　　type可以是下面原生构造函数中的一个：\n\n- String\n- Number\n- Boolean\n- Array\n- Object\n- Date\n- Function\n- Symbol\n\n　　除了这些默认的构造函数，你也可以使用自定义构造函数进行类型的检查，\n\n{% codeblock lang:js %}\n\nfunction Person (firstName, lastName) {\n  this.firstName = firstName\n  this.lastName = lastName\n}\n\nVue.component('blog-post', {\n  props: {\n    author: Person\n  }\n})\n\n{% endcodeblock %}  \n\n### 非Prop特性\n\n　　非Prop特性这个名字听起来不容易被理解，简单来说，就是指那些在组件中的props属性中没有被声明的，但是又在父组件中向子组件传递的属性。比如下面的例子：\n\n{% codeblock lang:html %}\n  <div id=\"app\">\n      <my-comp data-title=\"learn vue\" class=\"mycls\" style=\"color:red;\"></my-comp>\n  </div>\n  <script>\n      Vue.component('my-comp', {\n          template: '<div>我是组件</div>'\n      });\n      new Vue({\n          el: '#app'\n      });\n  </script>\n{% endcodeblock %}  \n\n　　这里的my-comp组件中并未定义data-title这个prop，但是又向my-comp标签传递了这个属性，这时候会在这个组件的根元素上添加这个属性，所以这个地方会最终被渲染为，\n\n{% codeblock lang:html %}\n\n  <div id=\"app\">\n    <div data-title=\"learn vue\" class=\"mycls\" style=\"color:red;\"></div>\n  </div>\n\n{% endcodeblock %}\n\n　　这里包括class和style都属于非Prop特性，但不同的是，对于class和style这类非Prop特性，vue有做特殊的处理，前面在Class和Style绑定的时候也提到了，模板中定义的class和style和在模板中传递的值会被合并而不是简单的覆盖。对于其它非Prop特性来说，如果在组件中定义了这个属性，又接着传递了该属性，那么这个非Prop属性会被传递的值覆盖，\n\n{% codeblock lang:html %}\n  <script>\n      Vue.component('my-comp', {\n          template: '<div type=\"inital\">我是组件</div>'\n      });\n      new Vue({\n          el: '#app'\n      });\n  </script>\n\n  <div id=\"app\">\n      <my-comp type=\"changed\"></my-comp>\n  </div>\n\n{% endcodeblock %}\n\n　　最后这里会被渲染为，\n\n{% codeblock lang:html %}\n\n  <div id=\"app\">\n      <div type=\"changed\"></div>\n  </div>\n\n{% endcodeblock %}\n\n　　当然，有时候你不想要传递的非Prop属性覆盖掉组件中定义的值，你可以组件的选项中设置 inheritAttrs: false去达到这个目的，这样，所有的非Prop属性都不会出现在最后组件根元素的DOM节点上，覆盖也就根本不存在了，***(inheritAttrs: false不会影响class和style的绑定)***\n\n{% codeblock lang:js %}\n\n  Vue.component('my-component', {\n    inheritAttrs: false,\n    // ...\n  })\n\n{% endcodeblock %}\n\n　　那么，我们如何去获取到这些非Prop属性的值呢，vue提供了[$attrs](https://vuejs.org/v2/api/#vm-attrs)为我们做到了这一点，$attrs是一个包含所有非Prop属性的对象，***(不包括class和style)***，如果这样如果我们想要将一个非Prop属性绑定到组件的非根元素上时，使用这个属性将变的非常方便，\n\n{% codeblock lang:html %}\n\n  Vue.component('base-input', {\n    inheritAttrs: false,\n    props: ['label', 'value'],\n    template: `\n      <label>\n        {{ label }}\n        <input\n          v-bind=\"$attrs\"\n          v-bind:value=\"value\">\n      </label>\n    `\n  })\n\n  在base-input标签中\n\n  <base-input\n    v-model=\"username\"\n    required\n    placeholder=\"Enter your username\">\n    </base-input>\n\n{% endcodeblock %}\n\n　　这里将会被渲染为，\n\n{% codeblock lang:html %}\n\n  <label>\n      {\n        \"required\": \"\",\n        \"placeholder\": \"Enter your username\"\n      }<input required=\"required\" placeholder=\"Enter your username\">\n  </label>\n\n{% endcodeblock %}\n\n　　这样你使用基础自定义组件就像是原始的HTML元素一样，避免了不必要的代码逻辑***(添加多余的prop)***。\n\n## 自定义事件\n\n### 事件名\n\n　　自定义事件名称不像Prop一样存在大小写转换的可能，我们需要精确的匹配一个自定义事件的名称，才可以触发自定义事件的监听器。比如手动触发一个事件，\n\n{% codeblock lang:js %}\n\n  this.$emit('myEvent')\n\n{% endcodeblock %}\n\n　　如果去监听这个自定义事件的kebab-case是不会有任何效果的，\n\n{% codeblock lang:html %}\n\n  <!-- 没有效果 -->\n  <my-component v-on:my-event=\"doSomething\"></my-component>\n\n{% endcodeblock %}\n\n　　除此之外，***在DOM模板中***，v-on指令后面如果定义的是myEvent的话，同样这里的myEvent也会被解析为myevent，这种情况下也会导致myEvent监听器无法被触发，所以不推荐使用camelCase的事件命名，尽可能使用kebab-case的命名方式。\n\n### 自定义组件的v-model\n\n　　我们知道，v-model指令可以将组件的行为数据同步到绑定到的data，而v-model的实现原理就是在我们需要在对应的组件上监听原生的DOM事件并使用$emit发出一个自定义事件，然后v-model会在这个对应的自定义事件的监听器中修改绑定的data。v-model默认监听的是原生的input事件以及原生DOM的value属性，但不同的输入组件的事件和属性值会有不同，如果需要改变它的默认行为可以这样做，\n\n{% codeblock lang:html %}\n\n  Vue.component('base-checkbox', {\n    model: {\n      prop: 'checked',\n      event: 'change'\n    },\n    props: {\n      checked: Boolean\n    },\n    template: `\n      <input\n        type=\"checkbox\"\n        v-bind:checked=\"checked\"\n        v-on:change=\"$emit('change', $event.target.checked)\">`\n  })\n\n{% endcodeblock %}\n\n　　注意，根据之前所述，如果你需要对checked使用v-bind，必须在props中进行声明。\n\n### 绑定原生事件\n\n　　我们都知道v-on可以绑定事件监听器，但是这个的指令的例子中很多在组件标签中监听的是emit的input、change事件啦，在组件的一些原生的html元素中监听的也是input、change事件，这时候开发者会感到迷惑，那么什么时候监听原生的事件什么时候监听的是自定义的事件呢？它们的用法好像看上去没有区别。这时候我们需要借助官方文档的力量帮我们解除迷惑，\n\n> ***用在普通元素上时，只能监听原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。***\n\n　　看到这里恍然大悟，这就是说，在普通元素上v-on只可以监听原生的事件，如果使用在自定义元素上的时候，两者都可以，这时候默认监听自定义事件，但是如果需要去监听原生的事件需要加上***.native***修饰符。\n\n　　在监听原生事件的时候，监听器处理方法只有事件原生对象为唯一的参数。如果使用内联语句，在语句中可以访问一个$event属性，\n\n{% codeblock lang:js %}\n\n  v-on:click=\"handle('ok', $event)\"\n\n{% endcodeblock %}\n\n　　在使用v-on监听自定义事件的时候，不像监听原生事件一样有一个事件原生对象，这种情况只存在一个从<span>$emit</span>传递过来的额外的参数，有趣的是，这两种方式都使用$event作为传递的变量名称，***(虽然都被写为$event，但是含义却大不一样，一个是原生的事件对象，一个是负载信息)***\n\n{% codeblock lang:html %}\n\n  <!-- 内联语句，$event只是负载信息，如果需要标识DOM，可以添加data-属性 -->\n  <my-component @my-event=\"handleThis(123, $event)\"></my-component>\n\n  <!-- 也可以直接绑定到一个方法变量，第一个参数就是这个负载信息 -->\n  this.$emit('give-advice',  { detail: detailInfo })\n\n  <div id=\"emit-example-argument\">\n    <magic-eight-ball v-on:give-advice=\"showAdvice\"></magic-eight-ball>\n  </div>\n\n  <!-- 这里的advice的值为  { detail: detailInfo } -->\n  new Vue({\n    el: '#emit-example-argument',\n    methods: {\n      showAdvice: function (advice) {\n        alert(advice)\n      }\n    }\n  })\n\n{% endcodeblock %}\n\n　　理解了v-on的使用方式，我们可以轻松的绑定一个原生事件，但是我们在自定义组件上使用v-on.native的时候，只会将这个事件绑定到组件的根元素上，对于有些情况来说，这样的绑定会失效，比如下面这样的自定义组件，\n\n{% codeblock lang:html %}\n\n  <label>\n    {{ label }}\n    <input\n      v-bind=\"$attrs\"\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\">\n  </label>\n\n{% endcodeblock %}\n\n　　姑且将其称之为base-input，如果我们在这个base-input上监听一个focus事件，\n\n{% codeblock lang:html %}\n\n  <base-input v-on:focus.native=\"onFocus\"></base-input>\n\n{% endcodeblock %}\n\n　　对于这种情况，由于label并不是focusable元素，所以对这个标签添加focus监听器是没有作用的，这时候这个focus监听器并不会被添加到input元素上去，我们的v-on:focus.native也就会起不到任何作用。针对这种情况，Vue提供了一个 <span>$listeners</span>属性，$listeners是一个对象，包含了绑定到这个组件上的根元素的所有事件监听器，***(不包括通过.native修饰符添加的监听器，且$listeners仅在2.4+中可用)***，一个<base-input>如果有如下的定义，\n\n{% codeblock lang:html %}\n\n  <base-input v-on:mouseover=\"handleMouseOver\" v-on:click=\"handleClick\"></base-input>\n\n{% endcodeblock %}\n\n　　这样这个$listeners在组件内的值为，\n\n{% codeblock lang:html %}\n\n  {\n    mouseover: handleMouseOver(event) { ... }\n    click: handleClick(value) { ... },\n  }\n\n{% endcodeblock %}\n\n　　所以如果我们需要在组件的子元素绑定一些原生事件，配合上计算属性可以进行一个自定义的添加，\n\n{% codeblock lang:js %}\n\n  Vue.component('base-input', {\n    inheritAttrs: false,\n    props: ['label', 'value'],\n    computed: {\n      inputListeners: function () {\n        var vm = this\n        // `Object.assign` 将所有的对象合并为一个新对象\n        return Object.assign({},\n          // 我们从父级添加所有的监听器\n          this.$listeners,\n          // 然后我们添加自定义监听器，\n          // 或覆写一些监听器的行为\n          {\n            // 这里确保组件配合 `v-model` 的工作\n            input: function (event) {\n              vm.$emit('input', event.target.value)\n            }\n          }\n        )\n      }\n    },\n    template: `\n      <label>\n        {{ label }}\n        <input\n          v-bind=\"$attrs\"\n          v-bind:value=\"value\"\n          v-on=\"inputListeners\">\n      </label>\n    `\n  })\n\n{% endcodeblock %}\n\n　　这样的话，我们在自定义组件上直接添加监听器就好像在组件子元素上直接添加了原生的监听器，看上去它们就像是一个元素。\n\n### .sync 修饰符\n\n　　之前我们已经在Prop中编写了Vue中组件的单向数据流向，但有时候我们希望改变这个特性，将数据进行双向绑定，使用v-model是一种方式，但其本质是通过自定义事件的监听器去实现的。v-model是针对组件的行为进行的双向绑定，对于一些更加通用的做法，Vue推荐使用update:myPropName的模式去达到这个目的。什么是update:myPropName模式呢？简而言之就是子组件内发出一个update:myPropName的事件，附带上myProp的新值，并在组件根元素上添加这个自定义事件的监听器进行修改。\n\n{% codeblock lang:html %}\n\n  <!-- 子组件中 -->\n  this.$emit('update:title', newTitle)\n\n  <!-- 根组件 -->\n  <text-document\n    v-bind:title=\"doc.title\"\n    v-on:update:title=\"doc.title = $event\"\n  ></text-document>\n\n{% endcodeblock %}\n\n　　为了方便，Vue提供了.sync 修饰符，也就是说，被.sync修饰符修饰过的变量，只需要在子组件中发出\"update:title\"这个事件就可以实现数据的双向绑定了。.sync的用法，\n\n{% codeblock lang:html %}\n\n  <text-document v-bind:title.sync=\"doc.title\"></text-document>\n\n  <!-- 设置多个prop的时候 -->\n  <text-document v-bind.sync=\"doc\"></text-document>\n\n{% endcodeblock %}\n\n　　完整的使用方式，\n\n{% codeblock lang:html %}\n\n  <div id=\"app\">\n    <p>{{ message }}</p>\n    <child :open.sync=\"message\"></child>\n  </div>\n\n  <template id=\"child\">\n    <div>\n      <input type=\"text\" :value=\"open\" @input=\"$emit('update:open', $event.target.value)\">\n      open: {{ open }}\n    </div>\n  </template>\n\n{% endcodeblock %}\n\n　　说白了，.sync修饰符就是语法糖，\n\n{% codeblock lang:js %}\n\n  :open.sync=\"state\"\n\n  <!-- 相当于 -->\n\n  :open=\"state\" @update:open=\"state = $event\"\n\n{% endcodeblock %}\n\n　　***注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用，以及将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，这是因为在vue需要考虑很多边缘情况***\n\n\n## 插槽\n\n　　***在vue 2.6+中，为插槽这部分内容引入v-slot指令去替代slot和slot-scope，slot和slot-scope已经被废弃，但是在vue2.x中仍然被支持。关于为什么弃用slot-scope，官方在[这里](https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md)解释了***\n\n### 插槽内容\n\n　　在自定义组件中，虽然我们可以通过数据驱动去定义不同的组件，但是很多时候这种方式只能用于有限种情况的使用，或者说已知情况的定义。所以如果我们想要直观的在组件中内嵌一些元素，就像普通的HTML元素一样，并需要灵活的添加任意的元素类型和数目，这时候插槽的作用就体现出来了。Vue采用<slot>标签作为承载这样的内嵌元素的出口，比如你定义一个下面这样的组件，我们称其为navigation-link，\n\n{% codeblock lang:html %}\n\n  <a\n    v-bind:href=\"url\"\n    class=\"nav-link\">\n    <slot></slot>\n  </a>\n\n{% endcodeblock %}\n\n　　在使用组件的时候，\n\n{% codeblock lang:html %}\n\n  <navigation-link url=\"/profile\">\n    Your Profile\n  </navigation-link>\n\n{% endcodeblock %}\n\n　　这样，在渲染的时候，<slot>部分就会被替代为\"Your Profile\"。在插槽内不仅可以添加字符串，还可以添加任意html原生元素和自定义组件标签，\n\n{% codeblock lang:html %}\n\n  <navigation-link url=\"/profile\">\n    <!-- 添加一个 Font Awesome 图标 -->\n    <span class=\"fa fa-user\"></span>\n    Your Profile\n  </navigation-link>\n\n  <!-- 甚至包括自定义组件 -->\n\n  <navigation-link url=\"/profile\">\n    <!-- 添加一个图标的组件 -->\n    <font-awesome-icon name=\"user\"></font-awesome-icon>\n    Your Profile\n</navigation-link>\n\n{% endcodeblock %}\n\n　　如果在navigation-link组件的定义中没有包含slot标签，那么该组件标签起始和结束之前的任何内容都会被丢弃。\n\n### 后备内容\n\n　　对于一个插槽来说，后备内容是在组件被使用时使用者并未为插槽提供任何内容时显示的内容，可以被称为插槽默认内容。比如定义一个submit-buton组件，\n\n{% codeblock lang:html %}\n\n  <button type=\"submit\">\n    <slot>Submit</slot>\n  </button>\n\n{% endcodeblock %}\n\n　　默认情况下如果我们在引用这个组件时，直接像下面这样使用，\n\n{% codeblock lang:html %}\n\n  <submit-button></submit-button>\n\n{% endcodeblock %}\n\n　　会被渲染为，\n\n{% codeblock lang:html %}\n\n  <button type=\"submit\">\n    Submit\n  </button>\n\n{% endcodeblock %}\n\n　　当提供内容的时候，\n\n{% codeblock lang:html %}\n\n  <submit-button>\n    Save\n  </submit-button>\n\n{% endcodeblock %}\n\n　　则这个提供的内容将会被渲染从而取代后备内容：\n\n{% codeblock lang:html %}\n\n  <button type=\"submit\">\n    Save\n  </button>\n\n{% endcodeblock %}\n\n\n###　具名插槽\n\n　　有时候我们需要将多个插槽定义在组件的不同位置，比如下面的base-layout组件，\n\n{% codeblock lang:html %}\n\n  <div class=\"container\">\n    <header>\n      <!-- 我们希望把页头放这里 -->\n    </header>\n    <main>\n      <!-- 我们希望把主要内容放这里 -->\n    </main>\n    <footer>\n      <!-- 我们希望把页脚放这里 -->\n    </footer>\n  </div>\n\n{% endcodeblock %}\n\n　　对于这种情况，我们在定义slot的时候，需要用到一个特殊的属性name，\n\n{% codeblock lang:html %}\n\n  <div class=\"container\">\n    <header>\n       <slot name=\"header\"></slot>\n    </header>\n    <main>\n      <slot></slot>\n    </main>\n    <footer>\n      <slot name=\"footer\"></slot>\n    </footer>\n  </div>\n\n{% endcodeblock %}\n\n　　不带name的slot出口会带有隐含的名字\"default\"，对于使用了具名插槽的组件，需要配合template元素使用v-slot指令提供插槽名称的方式去提供插槽内容，\n\n{% codeblock lang:html %}\n\n  <base-layout>\n    <template v-slot:header>\n      <h1>Here might be a page title</h1>\n    </template>\n\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n\n    <template v-slot:footer>\n      <p>Here's some contact info</p>\n    </template>\n  </base-layout>\n\n  <!-- 下面和上面的方式结果相同，只不过是一个显示的指定了default，另一个使用默认的方式提供默认插槽的内容 -->\n\n  <base-layout>\n    <template v-slot:header>\n      <h1>Here might be a page title</h1>\n    </template>\n\n    <template v-slot:default>\n      <p>A paragraph for the main content.</p>\n      <p>And another one.</p>\n    </template>\n\n    <template v-slot:footer>\n      <p>Here's some contact info</p>\n    </template>\n  </base-layout>\n\n{% endcodeblock %}\n\n　　注意 v-slot 只能添加在一个template标签上 (只有一种例外情况，下文会提到，为默认插槽添加插槽Prop的时候，在组件标签上添加v-slot)，这一点和已经废弃的 slot 特性不同。\n\n### 编译作用域\n\n　　有时候你可能会想在插槽中使用一些这个插槽所属组件内部的数据，比如，\n\n{% codeblock lang:html %}\n\n  <navigation-link url=\"/profile\">\n    Clicking here will send you to: {{ url }}\n    <!--\n    这里的 `url` 会是 undefined，因为 \"/profile\" 是\n    _传递给_ <navigation-link> 的而不是\n    在 <navigation-link> 组件*内部*定义的。\n    -->\n  </navigation-link>\n\n{% endcodeblock %}\n\n　　官方对这个编译作用域的解释有点难以理解，而且也会涉及到之前的后备插槽的内容，所以我有意将后备插槽以及具名插槽提到这部分前面，便于结合这两部分一起解释这个编译作用域。\n\n　　先说结论，我们使用插槽添加内容时，这部分我们自定义的内容只可以访问和它本身所处同一模板文件的数据作用域，而不可以访问这个插槽所作用的组件内部的数据作用域。而当我们使用后备内容的时候，后备内容是处于在组件内部的模板定义，所以后备内容只可以访问组件内部的数据作用域，不可以访问组件外部的数据作用域，这两者恰好相反。这时候就很好的可以理解官方的一句话了，\n\n> 父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。\n\n　　我们通过下面的例子可以去理解这种情况，在组件child定义四个具名插槽，这两个具名插槽都的后备内容分别使用内部和外部两个变量，然后再在\n\n{% codeblock lang:js %}\n<!-- 定义下面的内容 -->\n  Vue.component('child', {\n  \ttemplate: `\n    \t<div>\n        <slot>{{ innerMsg }}</slot>\n        <slot name=\"second\">{{ outerMsg }}</slot>\n        <slot name=\"third\"></slot>\n        <slot name=\"forth\"></slot>\n      </div>`,\n    data(){\n    \treturn {\n     \t\tinnerMsg: \"内部定义的第一个值\",\n        secondInnerMsg: \"内部定义的第二个值\"\n      }\n    }\n  });\n\n  new Vue({\n    el: '#app',\n    data: {\n      outerMsg: '外部定义的一个值',\n      secondOuterMsg: \"外部定义的第二个值\"\n    }\n  })\n\n{% endcodeblock %}\n\n　　以及对应的html模板，\n\n{% codeblock lang:html %}\n\n  <script src=\"https://unpkg.com/vue\"></script>\n\n  <div id=\"app\">\n    <child>\n      <template v-slot:default></template>\n      <template v-slot:second></template>\n      <template v-slot:third>{{ secondInnerMsg }}</template>\n      <template v-slot:forth>{{ secondOuterMsg }}</template>\n    </child>\n  </div>\n\n{% endcodeblock %}\n\n　　渲染结果，\n\n{% codeblock lang:html %}\n\n  <div id=\"app\">\n    <div>内部定义的第一个值   外部定义的第二个值</div>\n  </div>\n\n  <!-- 另外控制有如下的显示，\n    Property or method \"outerMsg\" is not defined on the instance but referenced during render\n    Property or method \"secondInnerMsg\" is not defined on the instance but referenced during render.\n   -->\n\n{% endcodeblock %}\n\n\n### 作用域插槽\n\n　　从上面的解释我们知道，后备插槽和自定义的插槽具有独立的作用域，互相都无法访问彼此的作用内容。但数据是可以从父组件流向自组件的，也就是说，虽然子组件中不存在对应的数据，但是可以当数据从父组件中传递到子组件后，在后备插槽中也可以获取到了。但是问题是父组件中无法获取到子组件的数据，如果当我们需要在自定义插槽中使用到子组件的数据的时候，这时候需要借助插槽Prop，也就是作用域插槽，借助官方的例子来说明作用域插槽的使用，有一个current-user组件，它的插槽中存在这样一个后备插槽，后备内容显示用户的名，\n\n{% codeblock lang:html %}\n\n  <span>\n    <slot>{{ user.lastName }}</slot>\n  </span>\n\n{% endcodeblock %}\n\n　　如果正常情况下我们想要它显示用户的姓，但是user是组件内的值，下面的做法肯定是没有作用的，\n\n{% codeblock lang:js %}\n\n  {% raw %}{{ user.firstName }}{% endraw %}\n\n{% endcodeblock %}\n\n　　为了让user在父级的插槽内容中可用，我们可以将user作为<slot>元素的一个特性绑定上去：\n\n{% codeblock lang:html %}\n\n  <span>\n    <slot v-bind:user=\"user\">\n      {{ user.lastName }}\n    </slot>\n  </span>\n\n{% endcodeblock %}\n\n　　在组件内部的插槽处绑定了属性之后，可以给v-slot带上一个值来定义我们提供的插槽prop的名字，插槽prop对象的命名可以随意，没有过多的约束，这里我们将其命名为slotProps，之后可以使用这个插槽prop对象去访问之前绑定在插槽上的prop，\n\n{% codeblock lang:html %}\n\n  <current-user>\n    <template v-slot:default=\"slotProps\">\n      {{ slotProps.user.firstName }}\n    </template>\n  </current-user>\n\n{% endcodeblock %}\n\n　　如果被提供的内容只有默认插槽的时候，可以直接将插槽prop对象的命名放到组件的标签上，\n\n{% codeblock lang:html %}\n\n  <current-user v-slot:default=\"slotProps\">\n    {{ slotProps.user.firstName }}\n  </current-user>\n\n<!-- 由于是默认模板，还可以简写为 -->\n\n  <current-user v-slot=\"slotProps\">\n    {{ slotProps.user.firstName }}\n  </current-user>\n　　\n{% endcodeblock %}\n\n　　上面简写的方式仅仅可用于仅存在默认插槽的情况，不可以和具名插槽混用，因为每个插槽都有自己独立的Prop对象，这样会导致插槽Prop作用域不明确，如果存在多个插槽的情况，应该使用完整的基于template标签的语法：\n\n{% codeblock lang:html %}\n\n  <current-user>\n    <template v-slot:default=\"slotProps\">\n      {{ slotProps.user.firstName }}\n    </template>\n\n    <template v-slot:other=\"otherSlotProps\">\n      ...\n    </template>\n  </current-user>\n\n{% endcodeblock %}\n\n　　作用域插槽的内部工作原理是将你的插槽内容包括在一个传入单个参数的函数里，在环境支持的情况下(单文件组件或现代浏览器)，另一种获取插槽prop对象的方式是对其进行解构赋值，\n\n{% codeblock lang:html %}\n\n  <current-user v-slot=\"{ user }\">\n    {{ user.firstName }}\n  </current-user>\n\n  <!-- 使用es6结构赋值对prop进行重命名 -->\n  <current-user v-slot=\"{ user: person }\">\n    {{ person.firstName }}\n  </current-user>\n\n  <!-- 在组件内部值不存在的时候，使用结构赋值传递一个默认值 -->\n  <current-user v-slot=\"{ user = { firstName: 'Guest' } }\">\n    {{ user.firstName }}\n  </current-user>\n\n{% endcodeblock %}\n\n### 动态插槽名\n\n　　在2.6.0+中，可以在v-slot上使用动态指令参数，定义动态的插槽名，\n\n{% codeblock lang:html %}\n\n  <base-layout>\n    <template v-slot:[dynamicSlotName]>\n      ...\n    </template>\n  </base-layout>\n\n{% endcodeblock %}\n\n### 具名插槽的缩写\n\n　　和v-on以及v-bind一样，v-slot也有缩写，即把参数之前的所有内容(v-slot:)替换为字符#。例如v-slot:head，可以被重写为#header，\n\n{% codeblock lang:html %}\n\n  <base-layout>\n    <template #header>\n      <h1>Here might be a page title</h1>\n    </template>\n\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n\n    <template #footer>\n      <p>Here's some contact info</p>\n    </template>\n  </base-layout>\n\n{% endcodeblock %}\n\n　　该缩写只其在有参数的时候才可用，\n\n{% codeblock lang:html %}\n\n  <!-- 这样会触发一个警告，且这样的语法是无效的 -->\n  <current-user #=\"{ user }\">\n    {{ user.firstName }}\n  </current-user>\n\n  <!-- 正确的写法为: -->\n  <current-user #default=\"{ user }\">\n    {{ user.firstName }}\n  </current-user>\n\n{% endcodeblock %}\n\n### 废弃的语法\n\n　　前文提过，v-slot是在vue2.6+被支持的语法，之前的语法可以去参照[官方文档](https://cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95)。\n\n\n## 动态组件 & 异步组件\n\n　　有时候，我们可能在一个元素上根据条件显示不同的组件，这时候我们可能会想要使用v-if去根据数据的不同动态渲染不同的组件。除此之外，同时vue还提供了动态组件去实现这个需求，一个经典的案例如下，\n\n{% codeblock lang:html %}\n\n  <!-- 已经注册的组件 -->\n  Vue.component('tab-home', {\n  \ttemplate: '<div>Home component</div>'\n  })\n\n  Vue.component('tab-posts', {\n  \ttemplate: '<div>Posts component</div>'\n  })\n\n  Vue.component('tab-archive', {\n  \ttemplate: '<div>Archive component</div>'\n  })\n\n  <div id=\"dynamic-component-demo\" class=\"demo\">\n    <button\n      v-for=\"tab in tabs\"\n      v-bind:key=\"tab.name\"\n      v-bind:class=\"['tab-button', { active: currentTab.name === tab.name }]\"\n      v-on:click=\"currentTab = tab\"\n    >{{ tab.name }}</button>\n\n    <component\n      v-bind:is=\"currentTab.component\"\n      class=\"tab\"\n    ></component>\n\n  </div>\n\n  <!-- vue根组件 -->\n  new Vue({\n    el: '#dynamic-component-demo',\n    data: {\n      currentTab: 'Home',\n      tabs: ['Home', 'Posts', 'Archive']\n    },\n    computed: {\n      currentTabComponent: function () {\n        return 'tab-' + this.currentTab.toLowerCase()\n      }\n    }\n  })\n\n{% endcodeblock %}\n\n　　通过在这个特殊的component标签上添加is属性，我们实现了在一个元素上动态渲染不同组件的功能。这里的currentTabComponent不仅是可以指向已经注册组件的名称，还可以指向一个组件的选项对象，另一种使用例子可以看[这里](https://jsfiddle.net/chrisvfritz/b2qj69o1/)。\n\n　　从上面我们得知我们可以使用动态组件根据条件在同一个位置渲染不同的组件，但是在不同的组件间进行切换的时候会导致这个组件会被重新渲染，这样在之前的页面进行的一些修改将不会被保留下来。要保留之前组件的状态的，可以使用vue提供的keep-alive元素，\n\n{% codeblock lang:html %}\n\n  <!-- 失活的组件将会被缓存！-->\n  <keep-alive>\n    <component v-bind:is=\"currentTabComponent\"></component>\n  </keep-alive>\n\n{% endcodeblock %}\n\n　　使用例子可以看[这里](https://jsfiddle.net/chrisvfritz/Lp20op9o/)。\n\n　　在大型应用中，我们可能需要将应用分割成一些小的块，并且只有在需要的时候才从服务器中加载，而不是一次将所有需要的内容都加载下来。而通过这种方式进行条件加载的组件被称为异步组件，vue通过允许你使用一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义，且vue只有在这个组件需要被渲染的时候才发触发这个工厂函数的执行，并将结果缓存起来提供到接下来的重渲染，\n\n{% codeblock lang:js %}\n\n  Vue.component('async-example', function (resolve, reject) {\n    setTimeout(function () {\n      // 向 `resolve` 回调传递组件定义\n      resolve({\n        template: '<div>I am async!</div>'\n      })\n    }, 1000)\n  })\n\n{% endcodeblock %}\n\n　　但这种编写在vue的方式并不实用，因为我们依然没有减少下载js代码的体积，并让代码的维护性和重构性变的很不友好，所以一般需要配合[webpack的code-splitting功能](https://webpack.js.org/guides/code-splitting/)进行一起使用，\n\n{% codeblock lang:js %}\n\n  Vue.component('async-webpack-example', function (resolve) {\n    // 这个特殊的 `require` 语法将会告诉 webpack\n    // 自动将你的构建代码切割成多个包，这些包\n    // 会通过 Ajax 请求加载\n    require(['./my-async-component'], resolve)\n  })\n\n{% endcodeblock %}\n\n　　在上述情况下，你也使用返回一个Promise的方式去异步加载这个组件，\n\n{% codeblock lang:js %}\n\n  <!-- 全局注册 -->\n  Vue.component(\n    'async-webpack-example',\n    // 这个 `import` 函数会返回一个 `Promise` 对象。\n    () => import('./my-async-component')\n  )\n  <!-- 局部注册 -->\n  new Vue({\n    // ...\n    components: {\n      'my-component': () => import('./my-async-component')\n    }\n  })\n\n{% endcodeblock %}\n\n　　在vue 2.3 +中，加载异步组件的时候，vue支持返回一个包含如下格式的对象去处理在加载过程中组件显示的内容，***(如果你希望在Vue-Router中使用下面的语法的话，需要vue-router 2.4 + )***\n\n{% codeblock lang:js %}\n\n  const AsyncComponent = () => ({\n    // 需要加载的组件 (应该是一个 `Promise` 对象)\n    component: import('./MyComponent.vue'),\n    // 异步组件加载时使用的组件\n    loading: LoadingComponent,\n    // 加载失败时使用的组件\n    error: ErrorComponent,\n    // 展示加载时组件的延时时间。默认值是 200 (毫秒)\n    delay: 200,\n    // 如果提供了超时时间且组件加载也超时了，\n    // 则使用加载失败时使用的组件。默认值是：`Infinity`\n    timeout: 3000\n  })\n\n{% endcodeblock %}\n\n\n## 处理边界情况\n\n### 访问元素 & 组件\n\n　　在大多数情况下，在一个Vue应用中是不需要直接操作DOM的，但是对于一些情况则不是这样，比如当我们引入一个三方组件的时候，这时候很有可能需要直接操作DOM去达到业务需求。\n\n#### 访问根实例\n\n　　在每个new Vue实例的组件中，其根实例可以通过$root属性进行访问。比如在下面的例子中，\n\n{% codeblock lang:js %}\n\n  // Vue 根实例\n  new Vue({\n    data: {\n      foo: 1\n    },\n    computed: {\n      bar: function () { /* ... */ }\n    },\n    methods: {\n      baz: function () { /* ... */ }\n    }\n  });\n\n  <!-- 通过$root，所有的子组件都可以将这个实例当作一个全局的store来使用 -->\n\n  // 获取根组件的数据\n  this.$root.foo\n\n  // 写入根组件的数据\n  this.$root.foo = 2\n\n  // 访问根组件的计算属性\n  this.$root.bar\n\n  // 调用根组件的方法\n  this.$root.baz()\n\n  <!-- 对于 demo 或非常小型的有少量组件的应用来说这是很方便的。\n      不过这个模式扩展到中大型应用来说就不然了。\n      因此在绝大多数情况下，我们强烈推荐使用 Vuex 来管理应用的状态。\n   -->\n\n{% endcodeblock %}\n\n#### 访问父级组件实例\n\n　　和$root类似，$parent属性可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。***(将数据传入自组件的方式达到自组件调用父组件方法或修改属性的方式容易让应用变的难以被理解，并且prop的作用应该是父组件需要传递到子组件的初始数据，而不是用于父子组件间的互相通讯。其实即便是通过$root的方式，也会容易使应用很难被理解，但是这种方式相对来说是要优于使用Prop的方式。)***\n\n{% codeblock lang:js %}\n\n  <google-map>\n    <google-map-marker v-bind:places=\"vueConfCities\"></google-map-marker>\n  </google-map>\n\n  <!-- 在子组件调用父组件方法，并传递一个方法引用在父组件的上下文中被调用 -->\n\n  Vue.component('google-map-marker', {\n    props: ['places'],\n    created: function () {\n      var vm = this\n      vm.$parent.getMap(function (map) {\n        vm.places.forEach(function (place) {\n          new google.maps.Marker({\n            position: place.position,\n            map: map\n          })\n        })\n      })\n    },\n    render (h) {\n      return null\n    }\n  })\n\n{% endcodeblock %}\n\n#### 访问子组件实例或子元素\n\n　　尽管存在prop和事件，有的时候你仍可能需要在JavaScript里直接访问一个子组件。为了达到这个目的，你可以通过ref特性为这个子组件赋予一个ID引用。ref被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的$refs对象上。例如：\n\n{% codeblock lang:html %}\n\n  <base-input ref=\"usernameInput\"></base-input>\n\n{% endcodeblock %}\n\n　　现在在你已经定义了这个ref的组件里，你可以使用访问子组件实例：\n\n{% codeblock lang:js %}\n\n  this.$refs.usernameInput\n\n{% endcodeblock %}\n\n　　同样在我们的这个base-input子组件中，也可以对组成它的基本元素加上ref属性。如果在普通的DOM元素上使用ref，那么这个引用指向的就是DOM元素。如果用在子组件上，引用就指向组件实例：\n\n{% codeblock lang:html %}\n\n  <!-- 在base-input的模板DOM元素上添加1 -->\n  <input ref=\"input\">\n\n  <!-- `vm.$refs.p` 是一个DOM对象 -->\n  <p ref=\"p\">hello</p>\n\n  <!-- `vm.$refs.child` 是一个组件实例 -->\n  <child-component ref=\"child\"></child-component>\n\n{% endcodeblock %}\n\n　　***$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。关于ref 注册时间的重要说明：因为 ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！$refs 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。***\n\n\n#### 依赖注入\n\n　　前面我们已经提到了父组件和子组件互相持有引用的方式，这类场景在cs的应用程序中很常见，在cs程序的开发中，经常使用一些依赖注入框架解决这类问题，比如在Android中就有Dagger等框架。除此之外，在Web服务端也有此类的需求，在后端经常会出现业务之间的交叉，为了减少代码之间的耦合度，也会使用一些依赖注入框架，使用比较多的应该就是Spring IOC了。看来vue也是仿照此类模式的实现，我们来看看Vue中的依赖注入的使用方式，在之前的例子中，假设父组件和子组件之间又需要加入一个中间组件，\n\n{% codeblock lang:html %}\n\n  <google-map>\n    <google-map-region v-bind:shape=\"cityBoundaries\">\n      <google-map-markers v-bind:places=\"iceCreamShops\"></google-map-markers>\n    </google-map-region>\n  </google-map>\n\n{% endcodeblock %}\n\n　　由于出现了google-map-region这个组件，并且在这个组件里，所有 <google-map> 的后代都需要访问一个 getMap 方法，以便知道要跟哪个地图进行交互。不幸的是，使用 $parent 属性无法很好的扩展到更深层级的嵌套组件上。这也是依赖注入的用武之地，它用到了两个新的实例选项：provide 和 inject。\n\n　　provide 选项允许我们指定我们想要提供给后代组件的数据/方法。在这个例子中，就是 <google-map> 内部的 getMap 方法：\n\n{% codeblock lang:js %}\n\n  provide: function () {\n    return {\n      getMap: this.getMap\n    }\n  }\n\n{% endcodeblock %}\n\n　　然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的属性：\n\n{% codeblock lang:js %}\n\n  inject: ['getMap']\n\n{% endcodeblock %}\n\n　　相比$parent来说，这个用法可以让我们在任意后代组件中访问getMap，而不需要在每个子组件间中大量的使用$parent。并且这种方式不需要担心我们可能会改变/移除一些子组件依赖的东西，在对原有逻辑进行很小的改动的情况下调用父组件的方式和属性。\n\n　　***然而，依赖注入还是有负面影响的。它将你应用程序中的组件与它们当前的组织方式耦合起来，使重构变得更加困难。同时所提供的属性是非响应式的。这是出于设计的考虑，因为使用它们来创建一个中心化规模化的数据跟使用 $root做这件事都是不够好的。如果你想要共享的这个属性是你的应用特有的，而不是通用化的，或者如果你想在祖先组件中更新所提供的数据，那么这意味着你可能需要换用一个像Vuex这样真正的状态管理方案了。***\n\n### 程序化的监听器\n\n　　我们已经知道可以使用v-on监听$emit发出的事件，但是有时候我们想要在程序中动态的添加监听器，这时候就可以:\n\n- 通过 $on(eventName, eventHandler) 侦听一个事件\n- 通过 $once(eventName, eventHandler) 一次性侦听一个事件\n- 通过 $off(eventName, eventHandler) 停止侦听一个事件\n\n　　如果你需要用的一个三方组件，并在组件挂载的时候进行创建，组件销毁的时候同时对这个三方组件进行销毁，你很有可能编写下面的代码，\n\n{% codeblock lang:js %}\n\n  // 一次性将这个日期选择器附加到一个输入框上\n  // 它会被挂载到 DOM 上。\n  mounted: function () {\n    // Pikaday 是一个第三方日期选择器的库\n    this.picker = new Pikaday({\n      field: this.$refs.input,\n      format: 'YYYY-MM-DD'\n    })\n  },\n  // 在组件被销毁之前，\n  // 也销毁这个日期选择器。\n  beforeDestroy: function () {\n    this.picker.destroy()\n  }\n\n{% endcodeblock %}\n\n　　但是这样的方式会使得组件实例持有三方组件的引用，但其实理论上组件实例是没有必要去持有这样的一个引用，这样的增加组件实例的属性的做法显得有些多余。第二个问题是我们的建立代码和清理代码分离，这样如果之后我们需要清理这个三方组件就需要在组件中清理所有销毁的相关内容。\n\n　　为了解决上面的两个问题，你应该通过一个程序化的侦听器解决这两个问题：\n\n{% codeblock lang:js %}\n\n  mounted: function () {\n    var picker = new Pikaday({\n      field: this.$refs.input,\n      format: 'YYYY-MM-DD'\n    })\n\n    this.$once('hook:beforeDestroy', function () {\n      picker.destroy()\n    })\n  }\n\n{% endcodeblock %}\n\n　　这样，只需要在组件销毁的时候，$emit一个hook:beforeDestroy事件就可以清理这个三方组件了，甚至可以将它们包裹在一个方法里，即使重复引用多个三方组件，也可以一次清理干净，\n\n{% codeblock lang:js %}\n\n  mounted: function () {\n    this.attachDatepicker('startDateInput')\n    this.attachDatepicker('endDateInput')\n  },\n  methods: {\n    attachDatepicker: function (refName) {\n      var picker = new Pikaday({\n        field: this.$refs[refName],\n        format: 'YYYY-MM-DD'\n      })\n\n      this.$once('hook:beforeDestroy', function () {\n        picker.destroy()\n      })\n    }\n  }\n\n{% endcodeblock %}\n\n　　这里需要理解清楚一点，当我们对同一个事件绑定多个处理函数时，在低版本的vue中是不支持使用v-on的数组形式的，并且我们也不可以在组件的标签上定义重复的v-on属性，所以这时候可以使用$on或者$once这样的方式动态添加多个监听器，这样所有的监听器都可以得到添加和执行，***需要搞清楚的一个概念是一个事件可以有多个不同的监听器的，执行顺序是先添加先被执行***。\n\n　　***注意 Vue 的事件系统不同于浏览器的 EventTarget API。尽管它们工作起来是相似的，但是 $emit、$on, 和 $off 并不是 dispatchEvent、addEventListener 和 removeEventListener 的别名。***\n\n\n### 循环引用\n\n#### 递归组件\n\n　　组件是可以在它们自己的模板中调用自身的。不过它们只能通过 name 选项来做这件事：\n\n{% codeblock lang:js %}\n\n  name: 'unique-name-of-my-component'\n\n  <!-- 当你使用 Vue.component 全局注册一个组件时，这个全局的 ID 会自动设置为该组件的 name 选项。 -->\n\n  Vue.component('unique-name-of-my-component', {\n    // ...\n  })\n\n{% endcodeblock %}\n\n　　虽然递归组件看上去很实用，但是稍有不慎，就有可能导致一个无限循环，\n\n{% codeblock lang:js %}\n\n  name: 'stack-overflow',\n  template: '<div><stack-overflow></stack-overflow></div>'\n\n{% endcodeblock %}\n\n　　类似上述的组件将会导致“max stack size exceeded”错误，所以请确保递归调用是条件性的 (例如使用一个最终会得到 false 的 v-if)。\n\n#### 组件之间的循环引用\n\n　　假设你需要构建一个文件目录树，像访达或资源管理器那样的。你可能有一个 <tree-folder> 组件，模板是这样的：\n\n{% codeblock lang:html %}\n\n  <p>\n    <span>{{ folder.name }}</span>\n    <tree-folder-contents :children=\"folder.children\"/>\n  </p>\n\n{% endcodeblock %}\n\n　　<tree-folder-contents> 组件，\n\n{% codeblock lang:html %}\n\n  <ul>\n    <li v-for=\"child in children\">\n      <tree-folder v-if=\"child.children\" :folder=\"child\"/>\n      <span v-else>{{ child.name }}</span>\n    </li>\n  </ul>\n\n{% endcodeblock %}\n\n　　当你仔细观察的时候，你会发现这些组件在渲染树中互为对方的后代和祖先——一个悖论！当通过 Vue.component 全局注册组件的时候，这个悖论会被自动解开。如果你是这样做的，那么你可以跳过这里。然而，如果你使用一个模块系统依赖/导入组件，例如通过 webpack 或 Browserify，你会遇到一个错误：\n\n>  Failed to mount component: template or render function not defined.\n\n　　为了解释这里发生了什么，我们先把两个组件称为A和B。模块系统发现它需要A，但是首先A依赖B，但是B又依赖A，但是A又依赖B，如此往复。这变成了一个循环，不知道如何不经过其中一个组件而完全解析出另一个组件。为了解决这个问题，我们需要给模块系统一个点，在那里“A 反正是需要B的，但是我们不需要先解析B。”\n\n\n　　在我们的例子中，把 <tree-folder> 组件设为了那个点。我们知道那个产生悖论的子组件是 <tree-folder-contents> 组件，所以我们会等到生命周期钩子 beforeCreate 时去注册它：\n\n{% codeblock lang:html %}\n\n  beforeCreate: function () {\n    this.$options.components.TreeFolderContents = require('./tree-folder-contents.vue').default\n  }\n\n  <!-- 或者，在本地组件注册时候，你可以使用 webpack 的异步 import： -->\n  components: {\n    TreeFolderContents: () => import('./tree-folder-contents.vue')\n  }\n\n  <!-- 这样问题就解决了！ -->\n\n{% endcodeblock %}\n\n\n### 控制更新\n\n#### 强制更新\n\n　　你可能还没有留意到数组或对象的变更检测注意事项，或者你可能依赖了一个未被Vue的响应式系统追踪的状态。\n\n　　然而，如果你已经做到了上述的事项仍然发现在极少数的情况下需要手动强制更新，那么你可以通过 $forceUpdate 来做这件事。比如Vue就没法检测对Map的追踪，不过这个问题在3.0版本得到添加。\n\n#### 通过 v-once 创建低开销的静态组件\n\n　　渲染普通的 HTML 元素在 Vue 中是非常快速的，但有的时候你可能有一个组件，这个组件包含了大量静态内容。在这种情况下，你可以在根元素上添加 v-once 特性以确保这些内容只计算一次然后缓存起来，就像这样：***(虽然响应式很好用，但也要使用在适当的地方哦)***\n\n{% codeblock lang:html %}\n\n  Vue.component('terms-of-service', {\n    template: `\n      <div v-once>\n        <h1>Terms of Service</h1>\n        ... a lot of static content ...\n      </div>\n    `\n  })\n\n{% endcodeblock %}\n\n　　***再说一次，试着不要过度使用这个模式。当你需要渲染大量静态内容时，极少数的情况下它会给你带来便利，除非你非常留意渲染变慢了，不然它完全是没有必要的——再加上它在后期会带来很多困惑。例如，设想另一个开发者并不熟悉 v-once 或漏看了它在模板中，他们可能会花很多个小时去找出模板为什么无法正确更新。***\n\n\n## 小结\n\n　　这篇在十月份就开始写了，但是一直到十一月差不多中旬才发出来，效率实在是底下，虽然其中有很多其它的事情造成了一些拖延，但是这个速度还是不能被接受。这段时间差不多将近一个半月，陆陆续续抽时间将vue-router、vuex、vue的文档刷了一遍，vue还有小部分没有看，算是对之前的查漏补缺吧，也知道了很多之前没有刻意去了解过的一些细节。接下来的计划大概是先把vue剩下的内容刷完，然后再去研究webpack的文档，webpack实在是太重要了，简直就是前端项目的基石。也不知道等自己刷完这两个内容要多久，不过看了下接下来的开发计划，自己应该是挺闲的。应该可以在年前将这些都搞定。\n\n　　再接下来的计划可能就很明确了，刷文档的目的当然还是为了开发做铺垫，很多人可能会说我不刷文档也可以愉快的开发呀。但是个人觉得这种方式对于职业来说太不靠谱，很多东西都理解的不透彻，在需求当头的时候就看能用就用了，也不考虑这样做的一些后果，或者说弊端。这对工程来说就是不负责的表现，自己也看了太多这种例子，对这种行为个人是有一些鄙视成分在里面的，虽然人都有一个成长的过程，但我觉得这是习惯问题，或者说态度问题。看多了这种粗制滥造的代码之后只能说，不可能要求每个人做到完美，对自己要求严格就行，不让自己难受就好了。\n\n　　不知道还会不会写技术博客，自己有点儿动摇，因为有道笔记对我来说明显比md形式的博客更加方便，写完这篇之后自己确实有些动摇了，因为这对自己来说就像是一些笔记，而笔记是只适合个人翻阅的。\n\n　　em...罗马不是一天建成的，早点休息吧。\n","source":"_posts/Vue基础-组件.md","raw":"layout: \"post\"\ntitle: \"Vue基础 - 组件\"\ndate: \"2019-10-28 13:23\"\ncategories:\n- [UI,VUE]\ntags:\n- [TECHNOLOGY]\nthumbnail: http://swcheng.com/images/vuelogo.png\n---\n　　组件是Vue设计的核心思想，Vue应用也是由一个个组件组成的，组件可以被复用，也可以根据情况动态显示不同的组件。在Vue的组件中，主要包括template、script以及style三个内容，template是编写的组件的html模版(也可以使用JSX)，里面包含的是页面的基础的html内容，可以使用Vue指令去进行一些额外逻辑的处理；script包含Vue组件内部的一些数据，方法，生命周期钩子等；style中是为组件编写的一些css样式，如果在style中加上scope表示这些样式作用域为组件内，如果没有则表示定义的全局样式。\n\n<!-- more -->\n\n## 组件注册\n\n　　Vue的组件需要定义且注册之后才可以与其它组件配合工作，上面叙述的是组件在.vue模板里的书写方式，如果我们直接在JS中全局定义并注册一个Vue组件的方式为：\n\n{% codeblock lang:js %}\n  // 定义一个名为 button-counter 的新组件\n  Vue.component('button-counter', {\n    data: function () {\n      return {\n        count: 0\n      }\n    },\n    template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.</button>'\n  })\n{% endcodeblock %}\n\n　　当一个组件完成注册之后，就可以被使用在其它组件之中了，全局注册的组件可以在整个Vue应用中使用，比如我们可以在html模板中这样定义，\n\n{% codeblock lang:html %}\n  <div id=\"components-demo\">\n    <button-counter></button-counter>\n  </div>\n{% endcodeblock %}\n\n　　所有Vue应用仅有一个根实例，根实例与其它组件的区别是它具备一个el属性，这个属性在其它组件中并不存在，el属性用于将vue应用绑定到唯一的DOM节点上。对于一个已经定义并全局注册的组件，你可以在任意一个地方进行复用，\n\n{% codeblock lang:html %}\n  <div id=\"components-demo\">\n    <button-counter></button-counter>\n    <button-counter></button-counter>\n    <button-counter></button-counter>\n  </div>\n{% endcodeblock %}\n\n　　在这里的button-counter组件中，每个组件都维护自己的数据独立工作，当这份数据是从外部传入的时候，这个规则可能不再成立。相同的组件只可能因为数据不同而显示不同的样式，当依赖式数据改动的时候，视图将会被相应更新。所以为了维护每个组件的独立，在组件内部定义data属性的时候，必须使用方法返回一个对象而不能直接定义为一个对象，正确添加data的方式应该是这样：\n\n{% codeblock lang:js %}\n  data: function () {\n    return {\n      count: 0\n    }\n  }\n{% endcodeblock %}\n\n　　全局注册过的组件在任何地方都可用，但是有时候我们不需要去全局定义一个组件，因为对于很多使用频率较低组件来说，并不需要进行全局注册，只进行局部注册即可，过多的全局注册会导致用户增加下载的JS的体积。对于局部注册的组件，只可以在引入其的组件中使用，不可以在其它组件的模板中使用。局部定义一个组件的方式很简单，在JS中直接定义的方式为：\n\n{% codeblock lang:js %}\n  var ComponentA = { /* ... */ }\n  var ComponentB = { /* ... */ }\n  var ComponentC = { /* ... */ }\n{% endcodeblock %}\n\n　　在需要引入其的组件中的components属性中，添加指向这个对象的引用，(局部注册的组件只可以在它自己的模板中使用，不可使用在其子组件中，也就是说，这里同时引入A和B，无法在B的模板中使用A，要想在B中使用A，必须在B中单独引入)\n\n{% codeblock lang:js %}\n  new Vue({\n    el: '#app',\n    components: {\n      'component-a': ComponentA,\n      'component-b': ComponentB\n    }\n  })\n{% endcodeblock %}\n\n　　或者如果你通过 Babel 和 webpack 使用 ES2015 模块，那么代码看起来更像：\n\n{% codeblock lang:js %}\n  import ComponentA from './ComponentA.vue'\n\n  export default {\n    components: {\n      ComponentA\n    },\n    // ...\n  }\n{% endcodeblock %}\n\n　　在引入局部组件之后，在模板中使用只需要引入其在components中编写的组件属性名称，比如这里定义的属性名称为ComponentA，那么在模板中就可以编写<ComponentA></ComponentA>，这样看上去不太符合标准的html标签的写法，所幸的是，Vue中两种写法都支持，当你使用PascalCase的写法的时候，你依然可以在模板中使用<component-a></component-a>这样的写法。但如果你本身就在components中使用的是kebab-case这样的写法，那么在模板中你也只能在这里面使用kebab-case这样的写法。\n\n### 基础组件全局注册\n\n　　对于一些基础组件，这类组件相对比较通用，如果一个个去导入这些组件，那么会导致在很多组件中有大量包含基础组件的长列表，这时候我们想要在全局注册这些组件。如果你使用webpack这类前端打包工具，那么你可以使用[require.context](https://webpack.js.org/guides/dependency-management/)很方便的一次引入大量的基础组件，\n\n{% codeblock lang:js %}\n  import Vue from 'vue'\n  import upperFirst from 'lodash/upperFirst'\n  import camelCase from 'lodash/camelCase'\n\n  const requireComponent = require.context(\n    // 其组件目录的相对路径\n    './components',\n    // 是否查询其子目录\n    false,\n    // 匹配基础组件文件名的正则表达式\n    /Base[A-Z]\\w+\\.(vue|js)$/\n  )\n\n  requireComponent.keys().forEach(fileName => {\n    // 获取组件配置\n    const componentConfig = requireComponent(fileName)\n\n    // 获取组件的 PascalCase 命名\n    const componentName = upperFirst(\n      camelCase(\n        // 获取和目录深度无关的文件名\n        fileName\n          .split('/')\n          .pop()\n          .replace(/\\.\\w+$/, '')\n      )\n    )\n\n    // 全局注册组件\n    Vue.component(\n      componentName,\n        // 如果这个组件选项是通过 `export default` 导出的，\n        // 那么就会优先使用 `.default`，\n        // 否则回退到使用模块的根。\n        componentConfig.default || componentConfig\n    )\n\n  });\n\n{% endcodeblock %}  \n\n\n## 组件Prop\n\n### Prop定义和传递\n\n　　组件中的数据分成两个部分，一部分是由父组件传递给自己的，就是这里说的Prop，另一部分是自身的数据，也就是data属性定义的部分。在组件中定义一个Prop最简单的方式，\n\n{% codeblock lang:js %}\n  Vue.component('blog-post', {\n    props: ['title'],\n    template: '<h3>{{ title }}</h3>'\n  })\n{% endcodeblock %}  \n\n　　最简单的在父组件中为其赋值的方式，\n\n{% codeblock lang:js %}\n  <blog-post title=\"My journey with Vue\"></blog-post>\n  <blog-post title=\"Blogging with Vue\"></blog-post>\n  <blog-post title=\"Why Vue is so fun\"></blog-post>\n{% endcodeblock %}  \n\n　　一个组件可以拥有任意数量的Prop，在组件中访问Prop的属性的方式和data属性一样，这里的title不仅可以是字符串，可以是任何类型的值(对象，数组，布尔值...)。更方便的是，可以配合使用v-for去遍历生成一个子组件列表，\n\n{% codeblock lang:html %}\n  <blog-post\n    v-for=\"post in posts\"\n    v-bind:key=\"post.id\"\n    v-bind:title=\"post.title\"\n  ></blog-post>\n{% endcodeblock %}  \n\n　　一个需要注意的地方是，在HTML中DOM是不区分大小写的，也就是说浏览器会把所有大写字母解释为小写字母，如果使用DOM中的模板，如果需要对camel-case格式的prop赋值必须在模板中用与其等价的kebab-case命名。\n\n{% codeblock lang:html %}\n  Vue.component('blog-post', {\n    // 在 JavaScript 中是 camelCase 的\n    props: ['postTitle'],\n    template: '<h3>{{ postTitle }}</h3>'\n  })\n\n  <!-- 在 HTML 中是 kebab-case 的 -->\n  <blog-post post-title=\"hello!\"></blog-post>\n{% endcodeblock %}  \n\n　　但是如果使用字符串模板，那么这条限制就不存在了，那么什么是字符串模板什么是DOM模板呢？DOM模板是指能被浏览器解析的模板，DOM模板和元素的html混合在一起进行定义，比如下面的例子，id为demo的div既是位于html中，又作为vue的一个组件被定义，这就被称为DOM模板，\n\n{% codeblock lang:html %}\n  <body>\n    <!-- html模板 -->\n    <div id=\"demo\" title=\"i love jack\">\n      <span :customId=\"id\">{{message}}</span>\n    </div>\n    <script>\n      let obj = {\n        message: 'hello,world',\n        id: 'JS脚本模板'\n      }\n      var vm = new Vue({\n        el: '#demo',\n        data: obj,\n        prop: ['title']\n      })\n    </script>\n  </body>\n{% endcodeblock %}  \n\n　　字符串模板是定义在js代码中用字符串包裹起来进行定义的vue组件，这种方式被称为字符串模板，比如下面的全局注册和局部组件定义都是字符串模板的使用方式，***(注意，通过字符串模板定义的元素，会替换挂载的元素)***\n\n{% codeblock lang:html %}\n  <body>\n    <div id=\"template\"></div>\n    <script type=\"x-template\" id=\"optioncompTemp\">\n           <option>a</option>\n    </script>\n    <script>\n      Vue.component('my-component', {\n        props: ['param'],\n        template: `\n          <div>A custom component{{param}}</div>\n        `\n      })\n      new Vue({\n        el: '#template',\n        data: {\n          name: 'donghai'\n        },\n        components: {\n          'se-com': {\n            props: ['param'],\n            template: '#optioncompTemp'\n          }\n        },\n        // 字符串模板，替换全部的模板，内联字符串模板\n        template: `\n        <ol>\n          <tr is=\"my-component\" :param=\"name\"></tr>\n          <tr is=\"se-com\" :param=\"name\" ></tr>\n          <se-com :param=\"name\"></se-com>\n        </ol>\n        `\n      })\n    </script>\n  </body>\n{% endcodeblock %}  \n\n　　除了DOM模板和字符串模板之外，在vue中还存在着内联字符串模板以及{% raw %}JS脚本模板{% endraw %}模板，内联字符串模板指的是，在一个组件内部引用其它组件的时候，这个被引入的子组件也是直接用字符串表示，而非来自其它形式(如导入一个模板等)方式的引入，\n\n{% codeblock lang:js %}\n\n  new Vue({\n        el: '#template',\n        data: {\n          name: 'donghai'\n        },\n        components: {\n          'se-com': {\n            props: ['param'],\n            template: `<div>我是第二个组件{{param}}</div>`\n          }\n        },\n        // 字符串模板，替换挂载元素\n        template: `\n        <ol>\n          <tr is=\"my-component\" :param=\"name\"></tr>\n          <tr is=\"se-com\" :param=\"name\" ></tr>\n          <se-com :param=\"name\"></se-com>\n        </ol>\n        `\n      })\n\n{% endcodeblock %}  \n\n　　JS脚本模板指的是使用script标签去声明一个组件的模板，\n\n{% codeblock lang:html %}\n  <body>\n    <div id=\"app\">\n      <select>\n        <option is=\"optioncomp\"></option>\n      </select>\n    </div>\n      <!--模板内容存放区域-->\n    <script type=\"text/x-template\" id=\"optioncompTemp\">\n      <option>a</option>\n    </script>\n    <script>\n      new Vue({\n        el: '#app',\n        components: {\n          'optioncomp': {\n            template: '#optioncompTemp'\n          }\n        }\n      })\n    </script>\n  </body>\n{% endcodeblock %}  \n\n　　但是如果我们使用文件模板，即xxx.vue的方式，在前端工程中就不存在上面提到的大小写的问题了。除此之外，vue模板中定义的组件在一些特定的标签下受到限制，例如***ul、ol、table、select***这样的元素里允许包含的元素有限制，而另一些像***option***这样的元素只能出现在某些特定元素的内部。下面这样的方式是不被允许的，\n\n{% codeblock lang:html %}\n  <table>\n    <my-row>...</my-row>\n  </table>\n{% endcodeblock %}  \n\n　　这时候自定义组件my-row会被当成无效的内容，这时候需要使用到特殊的is属性，\n\n{% codeblock lang:html %}\n  <table>\n    <tr is=\"my-row\"></tr>\n  </table>\n{% endcodeblock %}  \n\n　　另外这个特殊的标签限制只会的一些内容有效，对于下面的情况，则可以在这些被限制的标签中使用自定义模板，\n\n- 内联字符串模板\n- 单文件组件 (.vue)\n- JS脚本模板\n\n### 静态传递和动态传递\n\n　　我们知道可以这样传递到组件中一个静态的值，而且它总是一个字符串类型，\n\n{% codeblock lang:html %}\n  <blog-post title=\"My journey with Vue\"></blog-post>\n{% endcodeblock %}  \n\n　　通过v-bind进行动态赋值，\n\n{% codeblock lang:html %}\n\n  <!-- 动态赋予一个变量的值 -->\n  <blog-post v-bind:title=\"post.title\"></blog-post>\n\n  <!-- 动态赋予一个复杂表达式的值 -->\n  <blog-post\n    v-bind:title=\"post.title + ' by ' + post.author.name\">\n  </blog-post>\n\n{% endcodeblock %}  \n\n　　对于静态赋值，有时候我们想要传递一个数字类型或者布尔类型的时候，是无法做到的，所以这时候我们必须使用动态赋值的方式传递一个js表达式，\n\n{% codeblock lang:html %}\n\n  <!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue -->\n  <!-- 这是一个 JavaScript 表达式而不是一个字符串。-->\n  <blog-post v-bind:likes=\"42\"></blog-post>\n\n  <!-- 包含该 prop 没有值的情况在内，都意味着 `true`。-->\n  <blog-post is-published></blog-post>\n\n  <!-- 即便 `false` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue -->\n  <!-- 这是一个 JavaScript 表达式而不是一个字符串。-->\n  <blog-post v-bind:is-published=\"false\"></blog-post>\n\n  <!-- 即便数组是静态的，我们仍然需要 `v-bind` 来告诉 Vue -->\n  <!-- 这是一个 JavaScript 表达式而不是一个字符串。-->\n  <blog-post v-bind:comment-ids=\"[234, 266, 273]\"></blog-post>\n\n  <!-- 即便对象是静态的，我们仍然需要 `v-bind` 来告诉 Vue -->\n  <!-- 这是一个 JavaScript 表达式而不是一个字符串。-->\n  <blog-post\n    v-bind:author=\"{\n      name: 'Veronica',\n      company: 'Veridian Dynamics'\n    }\"></blog-post>\n\n{% endcodeblock %}  \n\n　　如果你想要在组件中同时定义多个属性，但又不希望把它们都放置在一个对象中，这时候你可能需要写很多赋值语句，vue提供了不带参数的v-bind指令帮助你一次传递一个对象的所有属性，\n\n{% codeblock lang:html %}\n\n  <blog-post v-bind=\"post\"></blog-post>\n\n  等价于:\n\n  <blog-post\n  v-bind:id=\"post.id\"\n  v-bind:title=\"post.title\"></blog-post>\n\n{% endcodeblock %}  \n\n### 单向数据流\n\n　　Vue中所有的数据在父组件和自组件中是单向下行绑定的，这意味着，父组件中修改传递到子组件中的prop时，子组件中的数据同样会被修改，但是反之却不行。这样的目的是为了防止子组件的改动影响到父组件中的数据，会导致应用的数据流向难以理解。Vue这样设计是很合理的，因为有时候我们不希望子组件的改动影响到父组件的数据，只有在必要的时候才去这么做，这样使我们对数据具备更多的可控性。\n\n　　另外在Vue中如果你在子组件中修改了prop，那么控制台会提示一个警告，意味着你不应该这么做。从父组件传递到子组件的prop一般有下面两个用处，\n\n　　1. 用于传递一个初始值，子组件依赖这个初始值去进行组件的渲染，并将其当作一个本地数据使用。这时候你应该拷贝一份数据到本地，\n{% codeblock lang:js %}\n  props: ['initialCounter'],\n  data: function () {\n    return {\n      counter: this.initialCounter\n    }\n  }\n{% endcodeblock %}  \n\n　　2. 这个prop不需要修改，只是用于读取，但是子组件需要修改传递过来的数据源，这时候可以将其设置为一个计算属性，\n\n{% codeblock lang:js %}\n  props: ['size'],\n  computed: {\n    normalizedSize: function () {\n      return this.size.trim().toLowerCase()\n    }\n  }\n{% endcodeblock %}  \n\n　　***对于对象类型或者数组类型的prop，在从父组件传递到组件中的时候，变量的类型是引用，也就是指向对象和数组的地址，这时候上面的单向数据流就不成立了。就是说单向数据流法则仅当你传递的是一个非对象和数组类型的值的时候才成立，否则子组件和父组件一样会将数据的修改影响到对方。***\n\n### Prop验证\n\n　　有时候我们在编写一个组件的时候，自己一般知道需要往里面传递什么类型的值，或者这个Prop的一些限制，但是后面的开发者并不知道这时候需要怎么传递，你可以为这些Prop添加一个验证帮助其它开发者检验错误，当prop验证失败的时候，(开发环境构建版本的)Vue 将会产生一个控制台的警告。如果需要对Prop检查错误，就必须使用对象的语法形式而非数组，\n\n{% codeblock lang:js %}\n\n  Vue.component('my-component', {\n    props: {\n      // 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)\n      propA: Number,\n      // 多个可能的类型\n      propB: [String, Number],\n      // 必填的字符串\n      propC: {\n        type: String,\n        required: true\n      },\n      // 带有默认值的数字\n      propD: {\n        type: Number,\n        default: 100\n      },\n      // 带有默认值的对象\n      propE: {\n        type: Object,\n        // 对象或数组默认值必须从一个工厂函数获取\n        default: function () {\n          return { message: 'hello' }\n        }\n      },\n      // 自定义验证函数\n      propF: {\n        validator: function (value) {\n          // 这个值必须匹配下列字符串中的一个\n          return ['success', 'warning', 'danger'].indexOf(value) !== -1\n        }\n      }\n    }\n  })\n\n{% endcodeblock %}  \n\n　　***Prop验证发生在组件创建前，也就是说，组件的Prop中的default和validator不可以使用定义在组件data、computed、methods中的属性和方法***\n\n　　type可以是下面原生构造函数中的一个：\n\n- String\n- Number\n- Boolean\n- Array\n- Object\n- Date\n- Function\n- Symbol\n\n　　除了这些默认的构造函数，你也可以使用自定义构造函数进行类型的检查，\n\n{% codeblock lang:js %}\n\nfunction Person (firstName, lastName) {\n  this.firstName = firstName\n  this.lastName = lastName\n}\n\nVue.component('blog-post', {\n  props: {\n    author: Person\n  }\n})\n\n{% endcodeblock %}  \n\n### 非Prop特性\n\n　　非Prop特性这个名字听起来不容易被理解，简单来说，就是指那些在组件中的props属性中没有被声明的，但是又在父组件中向子组件传递的属性。比如下面的例子：\n\n{% codeblock lang:html %}\n  <div id=\"app\">\n      <my-comp data-title=\"learn vue\" class=\"mycls\" style=\"color:red;\"></my-comp>\n  </div>\n  <script>\n      Vue.component('my-comp', {\n          template: '<div>我是组件</div>'\n      });\n      new Vue({\n          el: '#app'\n      });\n  </script>\n{% endcodeblock %}  \n\n　　这里的my-comp组件中并未定义data-title这个prop，但是又向my-comp标签传递了这个属性，这时候会在这个组件的根元素上添加这个属性，所以这个地方会最终被渲染为，\n\n{% codeblock lang:html %}\n\n  <div id=\"app\">\n    <div data-title=\"learn vue\" class=\"mycls\" style=\"color:red;\"></div>\n  </div>\n\n{% endcodeblock %}\n\n　　这里包括class和style都属于非Prop特性，但不同的是，对于class和style这类非Prop特性，vue有做特殊的处理，前面在Class和Style绑定的时候也提到了，模板中定义的class和style和在模板中传递的值会被合并而不是简单的覆盖。对于其它非Prop特性来说，如果在组件中定义了这个属性，又接着传递了该属性，那么这个非Prop属性会被传递的值覆盖，\n\n{% codeblock lang:html %}\n  <script>\n      Vue.component('my-comp', {\n          template: '<div type=\"inital\">我是组件</div>'\n      });\n      new Vue({\n          el: '#app'\n      });\n  </script>\n\n  <div id=\"app\">\n      <my-comp type=\"changed\"></my-comp>\n  </div>\n\n{% endcodeblock %}\n\n　　最后这里会被渲染为，\n\n{% codeblock lang:html %}\n\n  <div id=\"app\">\n      <div type=\"changed\"></div>\n  </div>\n\n{% endcodeblock %}\n\n　　当然，有时候你不想要传递的非Prop属性覆盖掉组件中定义的值，你可以组件的选项中设置 inheritAttrs: false去达到这个目的，这样，所有的非Prop属性都不会出现在最后组件根元素的DOM节点上，覆盖也就根本不存在了，***(inheritAttrs: false不会影响class和style的绑定)***\n\n{% codeblock lang:js %}\n\n  Vue.component('my-component', {\n    inheritAttrs: false,\n    // ...\n  })\n\n{% endcodeblock %}\n\n　　那么，我们如何去获取到这些非Prop属性的值呢，vue提供了[$attrs](https://vuejs.org/v2/api/#vm-attrs)为我们做到了这一点，$attrs是一个包含所有非Prop属性的对象，***(不包括class和style)***，如果这样如果我们想要将一个非Prop属性绑定到组件的非根元素上时，使用这个属性将变的非常方便，\n\n{% codeblock lang:html %}\n\n  Vue.component('base-input', {\n    inheritAttrs: false,\n    props: ['label', 'value'],\n    template: `\n      <label>\n        {{ label }}\n        <input\n          v-bind=\"$attrs\"\n          v-bind:value=\"value\">\n      </label>\n    `\n  })\n\n  在base-input标签中\n\n  <base-input\n    v-model=\"username\"\n    required\n    placeholder=\"Enter your username\">\n    </base-input>\n\n{% endcodeblock %}\n\n　　这里将会被渲染为，\n\n{% codeblock lang:html %}\n\n  <label>\n      {\n        \"required\": \"\",\n        \"placeholder\": \"Enter your username\"\n      }<input required=\"required\" placeholder=\"Enter your username\">\n  </label>\n\n{% endcodeblock %}\n\n　　这样你使用基础自定义组件就像是原始的HTML元素一样，避免了不必要的代码逻辑***(添加多余的prop)***。\n\n## 自定义事件\n\n### 事件名\n\n　　自定义事件名称不像Prop一样存在大小写转换的可能，我们需要精确的匹配一个自定义事件的名称，才可以触发自定义事件的监听器。比如手动触发一个事件，\n\n{% codeblock lang:js %}\n\n  this.$emit('myEvent')\n\n{% endcodeblock %}\n\n　　如果去监听这个自定义事件的kebab-case是不会有任何效果的，\n\n{% codeblock lang:html %}\n\n  <!-- 没有效果 -->\n  <my-component v-on:my-event=\"doSomething\"></my-component>\n\n{% endcodeblock %}\n\n　　除此之外，***在DOM模板中***，v-on指令后面如果定义的是myEvent的话，同样这里的myEvent也会被解析为myevent，这种情况下也会导致myEvent监听器无法被触发，所以不推荐使用camelCase的事件命名，尽可能使用kebab-case的命名方式。\n\n### 自定义组件的v-model\n\n　　我们知道，v-model指令可以将组件的行为数据同步到绑定到的data，而v-model的实现原理就是在我们需要在对应的组件上监听原生的DOM事件并使用$emit发出一个自定义事件，然后v-model会在这个对应的自定义事件的监听器中修改绑定的data。v-model默认监听的是原生的input事件以及原生DOM的value属性，但不同的输入组件的事件和属性值会有不同，如果需要改变它的默认行为可以这样做，\n\n{% codeblock lang:html %}\n\n  Vue.component('base-checkbox', {\n    model: {\n      prop: 'checked',\n      event: 'change'\n    },\n    props: {\n      checked: Boolean\n    },\n    template: `\n      <input\n        type=\"checkbox\"\n        v-bind:checked=\"checked\"\n        v-on:change=\"$emit('change', $event.target.checked)\">`\n  })\n\n{% endcodeblock %}\n\n　　注意，根据之前所述，如果你需要对checked使用v-bind，必须在props中进行声明。\n\n### 绑定原生事件\n\n　　我们都知道v-on可以绑定事件监听器，但是这个的指令的例子中很多在组件标签中监听的是emit的input、change事件啦，在组件的一些原生的html元素中监听的也是input、change事件，这时候开发者会感到迷惑，那么什么时候监听原生的事件什么时候监听的是自定义的事件呢？它们的用法好像看上去没有区别。这时候我们需要借助官方文档的力量帮我们解除迷惑，\n\n> ***用在普通元素上时，只能监听原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。***\n\n　　看到这里恍然大悟，这就是说，在普通元素上v-on只可以监听原生的事件，如果使用在自定义元素上的时候，两者都可以，这时候默认监听自定义事件，但是如果需要去监听原生的事件需要加上***.native***修饰符。\n\n　　在监听原生事件的时候，监听器处理方法只有事件原生对象为唯一的参数。如果使用内联语句，在语句中可以访问一个$event属性，\n\n{% codeblock lang:js %}\n\n  v-on:click=\"handle('ok', $event)\"\n\n{% endcodeblock %}\n\n　　在使用v-on监听自定义事件的时候，不像监听原生事件一样有一个事件原生对象，这种情况只存在一个从<span>$emit</span>传递过来的额外的参数，有趣的是，这两种方式都使用$event作为传递的变量名称，***(虽然都被写为$event，但是含义却大不一样，一个是原生的事件对象，一个是负载信息)***\n\n{% codeblock lang:html %}\n\n  <!-- 内联语句，$event只是负载信息，如果需要标识DOM，可以添加data-属性 -->\n  <my-component @my-event=\"handleThis(123, $event)\"></my-component>\n\n  <!-- 也可以直接绑定到一个方法变量，第一个参数就是这个负载信息 -->\n  this.$emit('give-advice',  { detail: detailInfo })\n\n  <div id=\"emit-example-argument\">\n    <magic-eight-ball v-on:give-advice=\"showAdvice\"></magic-eight-ball>\n  </div>\n\n  <!-- 这里的advice的值为  { detail: detailInfo } -->\n  new Vue({\n    el: '#emit-example-argument',\n    methods: {\n      showAdvice: function (advice) {\n        alert(advice)\n      }\n    }\n  })\n\n{% endcodeblock %}\n\n　　理解了v-on的使用方式，我们可以轻松的绑定一个原生事件，但是我们在自定义组件上使用v-on.native的时候，只会将这个事件绑定到组件的根元素上，对于有些情况来说，这样的绑定会失效，比如下面这样的自定义组件，\n\n{% codeblock lang:html %}\n\n  <label>\n    {{ label }}\n    <input\n      v-bind=\"$attrs\"\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\">\n  </label>\n\n{% endcodeblock %}\n\n　　姑且将其称之为base-input，如果我们在这个base-input上监听一个focus事件，\n\n{% codeblock lang:html %}\n\n  <base-input v-on:focus.native=\"onFocus\"></base-input>\n\n{% endcodeblock %}\n\n　　对于这种情况，由于label并不是focusable元素，所以对这个标签添加focus监听器是没有作用的，这时候这个focus监听器并不会被添加到input元素上去，我们的v-on:focus.native也就会起不到任何作用。针对这种情况，Vue提供了一个 <span>$listeners</span>属性，$listeners是一个对象，包含了绑定到这个组件上的根元素的所有事件监听器，***(不包括通过.native修饰符添加的监听器，且$listeners仅在2.4+中可用)***，一个<base-input>如果有如下的定义，\n\n{% codeblock lang:html %}\n\n  <base-input v-on:mouseover=\"handleMouseOver\" v-on:click=\"handleClick\"></base-input>\n\n{% endcodeblock %}\n\n　　这样这个$listeners在组件内的值为，\n\n{% codeblock lang:html %}\n\n  {\n    mouseover: handleMouseOver(event) { ... }\n    click: handleClick(value) { ... },\n  }\n\n{% endcodeblock %}\n\n　　所以如果我们需要在组件的子元素绑定一些原生事件，配合上计算属性可以进行一个自定义的添加，\n\n{% codeblock lang:js %}\n\n  Vue.component('base-input', {\n    inheritAttrs: false,\n    props: ['label', 'value'],\n    computed: {\n      inputListeners: function () {\n        var vm = this\n        // `Object.assign` 将所有的对象合并为一个新对象\n        return Object.assign({},\n          // 我们从父级添加所有的监听器\n          this.$listeners,\n          // 然后我们添加自定义监听器，\n          // 或覆写一些监听器的行为\n          {\n            // 这里确保组件配合 `v-model` 的工作\n            input: function (event) {\n              vm.$emit('input', event.target.value)\n            }\n          }\n        )\n      }\n    },\n    template: `\n      <label>\n        {{ label }}\n        <input\n          v-bind=\"$attrs\"\n          v-bind:value=\"value\"\n          v-on=\"inputListeners\">\n      </label>\n    `\n  })\n\n{% endcodeblock %}\n\n　　这样的话，我们在自定义组件上直接添加监听器就好像在组件子元素上直接添加了原生的监听器，看上去它们就像是一个元素。\n\n### .sync 修饰符\n\n　　之前我们已经在Prop中编写了Vue中组件的单向数据流向，但有时候我们希望改变这个特性，将数据进行双向绑定，使用v-model是一种方式，但其本质是通过自定义事件的监听器去实现的。v-model是针对组件的行为进行的双向绑定，对于一些更加通用的做法，Vue推荐使用update:myPropName的模式去达到这个目的。什么是update:myPropName模式呢？简而言之就是子组件内发出一个update:myPropName的事件，附带上myProp的新值，并在组件根元素上添加这个自定义事件的监听器进行修改。\n\n{% codeblock lang:html %}\n\n  <!-- 子组件中 -->\n  this.$emit('update:title', newTitle)\n\n  <!-- 根组件 -->\n  <text-document\n    v-bind:title=\"doc.title\"\n    v-on:update:title=\"doc.title = $event\"\n  ></text-document>\n\n{% endcodeblock %}\n\n　　为了方便，Vue提供了.sync 修饰符，也就是说，被.sync修饰符修饰过的变量，只需要在子组件中发出\"update:title\"这个事件就可以实现数据的双向绑定了。.sync的用法，\n\n{% codeblock lang:html %}\n\n  <text-document v-bind:title.sync=\"doc.title\"></text-document>\n\n  <!-- 设置多个prop的时候 -->\n  <text-document v-bind.sync=\"doc\"></text-document>\n\n{% endcodeblock %}\n\n　　完整的使用方式，\n\n{% codeblock lang:html %}\n\n  <div id=\"app\">\n    <p>{{ message }}</p>\n    <child :open.sync=\"message\"></child>\n  </div>\n\n  <template id=\"child\">\n    <div>\n      <input type=\"text\" :value=\"open\" @input=\"$emit('update:open', $event.target.value)\">\n      open: {{ open }}\n    </div>\n  </template>\n\n{% endcodeblock %}\n\n　　说白了，.sync修饰符就是语法糖，\n\n{% codeblock lang:js %}\n\n  :open.sync=\"state\"\n\n  <!-- 相当于 -->\n\n  :open=\"state\" @update:open=\"state = $event\"\n\n{% endcodeblock %}\n\n　　***注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用，以及将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，这是因为在vue需要考虑很多边缘情况***\n\n\n## 插槽\n\n　　***在vue 2.6+中，为插槽这部分内容引入v-slot指令去替代slot和slot-scope，slot和slot-scope已经被废弃，但是在vue2.x中仍然被支持。关于为什么弃用slot-scope，官方在[这里](https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md)解释了***\n\n### 插槽内容\n\n　　在自定义组件中，虽然我们可以通过数据驱动去定义不同的组件，但是很多时候这种方式只能用于有限种情况的使用，或者说已知情况的定义。所以如果我们想要直观的在组件中内嵌一些元素，就像普通的HTML元素一样，并需要灵活的添加任意的元素类型和数目，这时候插槽的作用就体现出来了。Vue采用<slot>标签作为承载这样的内嵌元素的出口，比如你定义一个下面这样的组件，我们称其为navigation-link，\n\n{% codeblock lang:html %}\n\n  <a\n    v-bind:href=\"url\"\n    class=\"nav-link\">\n    <slot></slot>\n  </a>\n\n{% endcodeblock %}\n\n　　在使用组件的时候，\n\n{% codeblock lang:html %}\n\n  <navigation-link url=\"/profile\">\n    Your Profile\n  </navigation-link>\n\n{% endcodeblock %}\n\n　　这样，在渲染的时候，<slot>部分就会被替代为\"Your Profile\"。在插槽内不仅可以添加字符串，还可以添加任意html原生元素和自定义组件标签，\n\n{% codeblock lang:html %}\n\n  <navigation-link url=\"/profile\">\n    <!-- 添加一个 Font Awesome 图标 -->\n    <span class=\"fa fa-user\"></span>\n    Your Profile\n  </navigation-link>\n\n  <!-- 甚至包括自定义组件 -->\n\n  <navigation-link url=\"/profile\">\n    <!-- 添加一个图标的组件 -->\n    <font-awesome-icon name=\"user\"></font-awesome-icon>\n    Your Profile\n</navigation-link>\n\n{% endcodeblock %}\n\n　　如果在navigation-link组件的定义中没有包含slot标签，那么该组件标签起始和结束之前的任何内容都会被丢弃。\n\n### 后备内容\n\n　　对于一个插槽来说，后备内容是在组件被使用时使用者并未为插槽提供任何内容时显示的内容，可以被称为插槽默认内容。比如定义一个submit-buton组件，\n\n{% codeblock lang:html %}\n\n  <button type=\"submit\">\n    <slot>Submit</slot>\n  </button>\n\n{% endcodeblock %}\n\n　　默认情况下如果我们在引用这个组件时，直接像下面这样使用，\n\n{% codeblock lang:html %}\n\n  <submit-button></submit-button>\n\n{% endcodeblock %}\n\n　　会被渲染为，\n\n{% codeblock lang:html %}\n\n  <button type=\"submit\">\n    Submit\n  </button>\n\n{% endcodeblock %}\n\n　　当提供内容的时候，\n\n{% codeblock lang:html %}\n\n  <submit-button>\n    Save\n  </submit-button>\n\n{% endcodeblock %}\n\n　　则这个提供的内容将会被渲染从而取代后备内容：\n\n{% codeblock lang:html %}\n\n  <button type=\"submit\">\n    Save\n  </button>\n\n{% endcodeblock %}\n\n\n###　具名插槽\n\n　　有时候我们需要将多个插槽定义在组件的不同位置，比如下面的base-layout组件，\n\n{% codeblock lang:html %}\n\n  <div class=\"container\">\n    <header>\n      <!-- 我们希望把页头放这里 -->\n    </header>\n    <main>\n      <!-- 我们希望把主要内容放这里 -->\n    </main>\n    <footer>\n      <!-- 我们希望把页脚放这里 -->\n    </footer>\n  </div>\n\n{% endcodeblock %}\n\n　　对于这种情况，我们在定义slot的时候，需要用到一个特殊的属性name，\n\n{% codeblock lang:html %}\n\n  <div class=\"container\">\n    <header>\n       <slot name=\"header\"></slot>\n    </header>\n    <main>\n      <slot></slot>\n    </main>\n    <footer>\n      <slot name=\"footer\"></slot>\n    </footer>\n  </div>\n\n{% endcodeblock %}\n\n　　不带name的slot出口会带有隐含的名字\"default\"，对于使用了具名插槽的组件，需要配合template元素使用v-slot指令提供插槽名称的方式去提供插槽内容，\n\n{% codeblock lang:html %}\n\n  <base-layout>\n    <template v-slot:header>\n      <h1>Here might be a page title</h1>\n    </template>\n\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n\n    <template v-slot:footer>\n      <p>Here's some contact info</p>\n    </template>\n  </base-layout>\n\n  <!-- 下面和上面的方式结果相同，只不过是一个显示的指定了default，另一个使用默认的方式提供默认插槽的内容 -->\n\n  <base-layout>\n    <template v-slot:header>\n      <h1>Here might be a page title</h1>\n    </template>\n\n    <template v-slot:default>\n      <p>A paragraph for the main content.</p>\n      <p>And another one.</p>\n    </template>\n\n    <template v-slot:footer>\n      <p>Here's some contact info</p>\n    </template>\n  </base-layout>\n\n{% endcodeblock %}\n\n　　注意 v-slot 只能添加在一个template标签上 (只有一种例外情况，下文会提到，为默认插槽添加插槽Prop的时候，在组件标签上添加v-slot)，这一点和已经废弃的 slot 特性不同。\n\n### 编译作用域\n\n　　有时候你可能会想在插槽中使用一些这个插槽所属组件内部的数据，比如，\n\n{% codeblock lang:html %}\n\n  <navigation-link url=\"/profile\">\n    Clicking here will send you to: {{ url }}\n    <!--\n    这里的 `url` 会是 undefined，因为 \"/profile\" 是\n    _传递给_ <navigation-link> 的而不是\n    在 <navigation-link> 组件*内部*定义的。\n    -->\n  </navigation-link>\n\n{% endcodeblock %}\n\n　　官方对这个编译作用域的解释有点难以理解，而且也会涉及到之前的后备插槽的内容，所以我有意将后备插槽以及具名插槽提到这部分前面，便于结合这两部分一起解释这个编译作用域。\n\n　　先说结论，我们使用插槽添加内容时，这部分我们自定义的内容只可以访问和它本身所处同一模板文件的数据作用域，而不可以访问这个插槽所作用的组件内部的数据作用域。而当我们使用后备内容的时候，后备内容是处于在组件内部的模板定义，所以后备内容只可以访问组件内部的数据作用域，不可以访问组件外部的数据作用域，这两者恰好相反。这时候就很好的可以理解官方的一句话了，\n\n> 父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。\n\n　　我们通过下面的例子可以去理解这种情况，在组件child定义四个具名插槽，这两个具名插槽都的后备内容分别使用内部和外部两个变量，然后再在\n\n{% codeblock lang:js %}\n<!-- 定义下面的内容 -->\n  Vue.component('child', {\n  \ttemplate: `\n    \t<div>\n        <slot>{{ innerMsg }}</slot>\n        <slot name=\"second\">{{ outerMsg }}</slot>\n        <slot name=\"third\"></slot>\n        <slot name=\"forth\"></slot>\n      </div>`,\n    data(){\n    \treturn {\n     \t\tinnerMsg: \"内部定义的第一个值\",\n        secondInnerMsg: \"内部定义的第二个值\"\n      }\n    }\n  });\n\n  new Vue({\n    el: '#app',\n    data: {\n      outerMsg: '外部定义的一个值',\n      secondOuterMsg: \"外部定义的第二个值\"\n    }\n  })\n\n{% endcodeblock %}\n\n　　以及对应的html模板，\n\n{% codeblock lang:html %}\n\n  <script src=\"https://unpkg.com/vue\"></script>\n\n  <div id=\"app\">\n    <child>\n      <template v-slot:default></template>\n      <template v-slot:second></template>\n      <template v-slot:third>{{ secondInnerMsg }}</template>\n      <template v-slot:forth>{{ secondOuterMsg }}</template>\n    </child>\n  </div>\n\n{% endcodeblock %}\n\n　　渲染结果，\n\n{% codeblock lang:html %}\n\n  <div id=\"app\">\n    <div>内部定义的第一个值   外部定义的第二个值</div>\n  </div>\n\n  <!-- 另外控制有如下的显示，\n    Property or method \"outerMsg\" is not defined on the instance but referenced during render\n    Property or method \"secondInnerMsg\" is not defined on the instance but referenced during render.\n   -->\n\n{% endcodeblock %}\n\n\n### 作用域插槽\n\n　　从上面的解释我们知道，后备插槽和自定义的插槽具有独立的作用域，互相都无法访问彼此的作用内容。但数据是可以从父组件流向自组件的，也就是说，虽然子组件中不存在对应的数据，但是可以当数据从父组件中传递到子组件后，在后备插槽中也可以获取到了。但是问题是父组件中无法获取到子组件的数据，如果当我们需要在自定义插槽中使用到子组件的数据的时候，这时候需要借助插槽Prop，也就是作用域插槽，借助官方的例子来说明作用域插槽的使用，有一个current-user组件，它的插槽中存在这样一个后备插槽，后备内容显示用户的名，\n\n{% codeblock lang:html %}\n\n  <span>\n    <slot>{{ user.lastName }}</slot>\n  </span>\n\n{% endcodeblock %}\n\n　　如果正常情况下我们想要它显示用户的姓，但是user是组件内的值，下面的做法肯定是没有作用的，\n\n{% codeblock lang:js %}\n\n  {% raw %}{{ user.firstName }}{% endraw %}\n\n{% endcodeblock %}\n\n　　为了让user在父级的插槽内容中可用，我们可以将user作为<slot>元素的一个特性绑定上去：\n\n{% codeblock lang:html %}\n\n  <span>\n    <slot v-bind:user=\"user\">\n      {{ user.lastName }}\n    </slot>\n  </span>\n\n{% endcodeblock %}\n\n　　在组件内部的插槽处绑定了属性之后，可以给v-slot带上一个值来定义我们提供的插槽prop的名字，插槽prop对象的命名可以随意，没有过多的约束，这里我们将其命名为slotProps，之后可以使用这个插槽prop对象去访问之前绑定在插槽上的prop，\n\n{% codeblock lang:html %}\n\n  <current-user>\n    <template v-slot:default=\"slotProps\">\n      {{ slotProps.user.firstName }}\n    </template>\n  </current-user>\n\n{% endcodeblock %}\n\n　　如果被提供的内容只有默认插槽的时候，可以直接将插槽prop对象的命名放到组件的标签上，\n\n{% codeblock lang:html %}\n\n  <current-user v-slot:default=\"slotProps\">\n    {{ slotProps.user.firstName }}\n  </current-user>\n\n<!-- 由于是默认模板，还可以简写为 -->\n\n  <current-user v-slot=\"slotProps\">\n    {{ slotProps.user.firstName }}\n  </current-user>\n　　\n{% endcodeblock %}\n\n　　上面简写的方式仅仅可用于仅存在默认插槽的情况，不可以和具名插槽混用，因为每个插槽都有自己独立的Prop对象，这样会导致插槽Prop作用域不明确，如果存在多个插槽的情况，应该使用完整的基于template标签的语法：\n\n{% codeblock lang:html %}\n\n  <current-user>\n    <template v-slot:default=\"slotProps\">\n      {{ slotProps.user.firstName }}\n    </template>\n\n    <template v-slot:other=\"otherSlotProps\">\n      ...\n    </template>\n  </current-user>\n\n{% endcodeblock %}\n\n　　作用域插槽的内部工作原理是将你的插槽内容包括在一个传入单个参数的函数里，在环境支持的情况下(单文件组件或现代浏览器)，另一种获取插槽prop对象的方式是对其进行解构赋值，\n\n{% codeblock lang:html %}\n\n  <current-user v-slot=\"{ user }\">\n    {{ user.firstName }}\n  </current-user>\n\n  <!-- 使用es6结构赋值对prop进行重命名 -->\n  <current-user v-slot=\"{ user: person }\">\n    {{ person.firstName }}\n  </current-user>\n\n  <!-- 在组件内部值不存在的时候，使用结构赋值传递一个默认值 -->\n  <current-user v-slot=\"{ user = { firstName: 'Guest' } }\">\n    {{ user.firstName }}\n  </current-user>\n\n{% endcodeblock %}\n\n### 动态插槽名\n\n　　在2.6.0+中，可以在v-slot上使用动态指令参数，定义动态的插槽名，\n\n{% codeblock lang:html %}\n\n  <base-layout>\n    <template v-slot:[dynamicSlotName]>\n      ...\n    </template>\n  </base-layout>\n\n{% endcodeblock %}\n\n### 具名插槽的缩写\n\n　　和v-on以及v-bind一样，v-slot也有缩写，即把参数之前的所有内容(v-slot:)替换为字符#。例如v-slot:head，可以被重写为#header，\n\n{% codeblock lang:html %}\n\n  <base-layout>\n    <template #header>\n      <h1>Here might be a page title</h1>\n    </template>\n\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n\n    <template #footer>\n      <p>Here's some contact info</p>\n    </template>\n  </base-layout>\n\n{% endcodeblock %}\n\n　　该缩写只其在有参数的时候才可用，\n\n{% codeblock lang:html %}\n\n  <!-- 这样会触发一个警告，且这样的语法是无效的 -->\n  <current-user #=\"{ user }\">\n    {{ user.firstName }}\n  </current-user>\n\n  <!-- 正确的写法为: -->\n  <current-user #default=\"{ user }\">\n    {{ user.firstName }}\n  </current-user>\n\n{% endcodeblock %}\n\n### 废弃的语法\n\n　　前文提过，v-slot是在vue2.6+被支持的语法，之前的语法可以去参照[官方文档](https://cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95)。\n\n\n## 动态组件 & 异步组件\n\n　　有时候，我们可能在一个元素上根据条件显示不同的组件，这时候我们可能会想要使用v-if去根据数据的不同动态渲染不同的组件。除此之外，同时vue还提供了动态组件去实现这个需求，一个经典的案例如下，\n\n{% codeblock lang:html %}\n\n  <!-- 已经注册的组件 -->\n  Vue.component('tab-home', {\n  \ttemplate: '<div>Home component</div>'\n  })\n\n  Vue.component('tab-posts', {\n  \ttemplate: '<div>Posts component</div>'\n  })\n\n  Vue.component('tab-archive', {\n  \ttemplate: '<div>Archive component</div>'\n  })\n\n  <div id=\"dynamic-component-demo\" class=\"demo\">\n    <button\n      v-for=\"tab in tabs\"\n      v-bind:key=\"tab.name\"\n      v-bind:class=\"['tab-button', { active: currentTab.name === tab.name }]\"\n      v-on:click=\"currentTab = tab\"\n    >{{ tab.name }}</button>\n\n    <component\n      v-bind:is=\"currentTab.component\"\n      class=\"tab\"\n    ></component>\n\n  </div>\n\n  <!-- vue根组件 -->\n  new Vue({\n    el: '#dynamic-component-demo',\n    data: {\n      currentTab: 'Home',\n      tabs: ['Home', 'Posts', 'Archive']\n    },\n    computed: {\n      currentTabComponent: function () {\n        return 'tab-' + this.currentTab.toLowerCase()\n      }\n    }\n  })\n\n{% endcodeblock %}\n\n　　通过在这个特殊的component标签上添加is属性，我们实现了在一个元素上动态渲染不同组件的功能。这里的currentTabComponent不仅是可以指向已经注册组件的名称，还可以指向一个组件的选项对象，另一种使用例子可以看[这里](https://jsfiddle.net/chrisvfritz/b2qj69o1/)。\n\n　　从上面我们得知我们可以使用动态组件根据条件在同一个位置渲染不同的组件，但是在不同的组件间进行切换的时候会导致这个组件会被重新渲染，这样在之前的页面进行的一些修改将不会被保留下来。要保留之前组件的状态的，可以使用vue提供的keep-alive元素，\n\n{% codeblock lang:html %}\n\n  <!-- 失活的组件将会被缓存！-->\n  <keep-alive>\n    <component v-bind:is=\"currentTabComponent\"></component>\n  </keep-alive>\n\n{% endcodeblock %}\n\n　　使用例子可以看[这里](https://jsfiddle.net/chrisvfritz/Lp20op9o/)。\n\n　　在大型应用中，我们可能需要将应用分割成一些小的块，并且只有在需要的时候才从服务器中加载，而不是一次将所有需要的内容都加载下来。而通过这种方式进行条件加载的组件被称为异步组件，vue通过允许你使用一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义，且vue只有在这个组件需要被渲染的时候才发触发这个工厂函数的执行，并将结果缓存起来提供到接下来的重渲染，\n\n{% codeblock lang:js %}\n\n  Vue.component('async-example', function (resolve, reject) {\n    setTimeout(function () {\n      // 向 `resolve` 回调传递组件定义\n      resolve({\n        template: '<div>I am async!</div>'\n      })\n    }, 1000)\n  })\n\n{% endcodeblock %}\n\n　　但这种编写在vue的方式并不实用，因为我们依然没有减少下载js代码的体积，并让代码的维护性和重构性变的很不友好，所以一般需要配合[webpack的code-splitting功能](https://webpack.js.org/guides/code-splitting/)进行一起使用，\n\n{% codeblock lang:js %}\n\n  Vue.component('async-webpack-example', function (resolve) {\n    // 这个特殊的 `require` 语法将会告诉 webpack\n    // 自动将你的构建代码切割成多个包，这些包\n    // 会通过 Ajax 请求加载\n    require(['./my-async-component'], resolve)\n  })\n\n{% endcodeblock %}\n\n　　在上述情况下，你也使用返回一个Promise的方式去异步加载这个组件，\n\n{% codeblock lang:js %}\n\n  <!-- 全局注册 -->\n  Vue.component(\n    'async-webpack-example',\n    // 这个 `import` 函数会返回一个 `Promise` 对象。\n    () => import('./my-async-component')\n  )\n  <!-- 局部注册 -->\n  new Vue({\n    // ...\n    components: {\n      'my-component': () => import('./my-async-component')\n    }\n  })\n\n{% endcodeblock %}\n\n　　在vue 2.3 +中，加载异步组件的时候，vue支持返回一个包含如下格式的对象去处理在加载过程中组件显示的内容，***(如果你希望在Vue-Router中使用下面的语法的话，需要vue-router 2.4 + )***\n\n{% codeblock lang:js %}\n\n  const AsyncComponent = () => ({\n    // 需要加载的组件 (应该是一个 `Promise` 对象)\n    component: import('./MyComponent.vue'),\n    // 异步组件加载时使用的组件\n    loading: LoadingComponent,\n    // 加载失败时使用的组件\n    error: ErrorComponent,\n    // 展示加载时组件的延时时间。默认值是 200 (毫秒)\n    delay: 200,\n    // 如果提供了超时时间且组件加载也超时了，\n    // 则使用加载失败时使用的组件。默认值是：`Infinity`\n    timeout: 3000\n  })\n\n{% endcodeblock %}\n\n\n## 处理边界情况\n\n### 访问元素 & 组件\n\n　　在大多数情况下，在一个Vue应用中是不需要直接操作DOM的，但是对于一些情况则不是这样，比如当我们引入一个三方组件的时候，这时候很有可能需要直接操作DOM去达到业务需求。\n\n#### 访问根实例\n\n　　在每个new Vue实例的组件中，其根实例可以通过$root属性进行访问。比如在下面的例子中，\n\n{% codeblock lang:js %}\n\n  // Vue 根实例\n  new Vue({\n    data: {\n      foo: 1\n    },\n    computed: {\n      bar: function () { /* ... */ }\n    },\n    methods: {\n      baz: function () { /* ... */ }\n    }\n  });\n\n  <!-- 通过$root，所有的子组件都可以将这个实例当作一个全局的store来使用 -->\n\n  // 获取根组件的数据\n  this.$root.foo\n\n  // 写入根组件的数据\n  this.$root.foo = 2\n\n  // 访问根组件的计算属性\n  this.$root.bar\n\n  // 调用根组件的方法\n  this.$root.baz()\n\n  <!-- 对于 demo 或非常小型的有少量组件的应用来说这是很方便的。\n      不过这个模式扩展到中大型应用来说就不然了。\n      因此在绝大多数情况下，我们强烈推荐使用 Vuex 来管理应用的状态。\n   -->\n\n{% endcodeblock %}\n\n#### 访问父级组件实例\n\n　　和$root类似，$parent属性可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。***(将数据传入自组件的方式达到自组件调用父组件方法或修改属性的方式容易让应用变的难以被理解，并且prop的作用应该是父组件需要传递到子组件的初始数据，而不是用于父子组件间的互相通讯。其实即便是通过$root的方式，也会容易使应用很难被理解，但是这种方式相对来说是要优于使用Prop的方式。)***\n\n{% codeblock lang:js %}\n\n  <google-map>\n    <google-map-marker v-bind:places=\"vueConfCities\"></google-map-marker>\n  </google-map>\n\n  <!-- 在子组件调用父组件方法，并传递一个方法引用在父组件的上下文中被调用 -->\n\n  Vue.component('google-map-marker', {\n    props: ['places'],\n    created: function () {\n      var vm = this\n      vm.$parent.getMap(function (map) {\n        vm.places.forEach(function (place) {\n          new google.maps.Marker({\n            position: place.position,\n            map: map\n          })\n        })\n      })\n    },\n    render (h) {\n      return null\n    }\n  })\n\n{% endcodeblock %}\n\n#### 访问子组件实例或子元素\n\n　　尽管存在prop和事件，有的时候你仍可能需要在JavaScript里直接访问一个子组件。为了达到这个目的，你可以通过ref特性为这个子组件赋予一个ID引用。ref被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的$refs对象上。例如：\n\n{% codeblock lang:html %}\n\n  <base-input ref=\"usernameInput\"></base-input>\n\n{% endcodeblock %}\n\n　　现在在你已经定义了这个ref的组件里，你可以使用访问子组件实例：\n\n{% codeblock lang:js %}\n\n  this.$refs.usernameInput\n\n{% endcodeblock %}\n\n　　同样在我们的这个base-input子组件中，也可以对组成它的基本元素加上ref属性。如果在普通的DOM元素上使用ref，那么这个引用指向的就是DOM元素。如果用在子组件上，引用就指向组件实例：\n\n{% codeblock lang:html %}\n\n  <!-- 在base-input的模板DOM元素上添加1 -->\n  <input ref=\"input\">\n\n  <!-- `vm.$refs.p` 是一个DOM对象 -->\n  <p ref=\"p\">hello</p>\n\n  <!-- `vm.$refs.child` 是一个组件实例 -->\n  <child-component ref=\"child\"></child-component>\n\n{% endcodeblock %}\n\n　　***$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。关于ref 注册时间的重要说明：因为 ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！$refs 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。***\n\n\n#### 依赖注入\n\n　　前面我们已经提到了父组件和子组件互相持有引用的方式，这类场景在cs的应用程序中很常见，在cs程序的开发中，经常使用一些依赖注入框架解决这类问题，比如在Android中就有Dagger等框架。除此之外，在Web服务端也有此类的需求，在后端经常会出现业务之间的交叉，为了减少代码之间的耦合度，也会使用一些依赖注入框架，使用比较多的应该就是Spring IOC了。看来vue也是仿照此类模式的实现，我们来看看Vue中的依赖注入的使用方式，在之前的例子中，假设父组件和子组件之间又需要加入一个中间组件，\n\n{% codeblock lang:html %}\n\n  <google-map>\n    <google-map-region v-bind:shape=\"cityBoundaries\">\n      <google-map-markers v-bind:places=\"iceCreamShops\"></google-map-markers>\n    </google-map-region>\n  </google-map>\n\n{% endcodeblock %}\n\n　　由于出现了google-map-region这个组件，并且在这个组件里，所有 <google-map> 的后代都需要访问一个 getMap 方法，以便知道要跟哪个地图进行交互。不幸的是，使用 $parent 属性无法很好的扩展到更深层级的嵌套组件上。这也是依赖注入的用武之地，它用到了两个新的实例选项：provide 和 inject。\n\n　　provide 选项允许我们指定我们想要提供给后代组件的数据/方法。在这个例子中，就是 <google-map> 内部的 getMap 方法：\n\n{% codeblock lang:js %}\n\n  provide: function () {\n    return {\n      getMap: this.getMap\n    }\n  }\n\n{% endcodeblock %}\n\n　　然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的属性：\n\n{% codeblock lang:js %}\n\n  inject: ['getMap']\n\n{% endcodeblock %}\n\n　　相比$parent来说，这个用法可以让我们在任意后代组件中访问getMap，而不需要在每个子组件间中大量的使用$parent。并且这种方式不需要担心我们可能会改变/移除一些子组件依赖的东西，在对原有逻辑进行很小的改动的情况下调用父组件的方式和属性。\n\n　　***然而，依赖注入还是有负面影响的。它将你应用程序中的组件与它们当前的组织方式耦合起来，使重构变得更加困难。同时所提供的属性是非响应式的。这是出于设计的考虑，因为使用它们来创建一个中心化规模化的数据跟使用 $root做这件事都是不够好的。如果你想要共享的这个属性是你的应用特有的，而不是通用化的，或者如果你想在祖先组件中更新所提供的数据，那么这意味着你可能需要换用一个像Vuex这样真正的状态管理方案了。***\n\n### 程序化的监听器\n\n　　我们已经知道可以使用v-on监听$emit发出的事件，但是有时候我们想要在程序中动态的添加监听器，这时候就可以:\n\n- 通过 $on(eventName, eventHandler) 侦听一个事件\n- 通过 $once(eventName, eventHandler) 一次性侦听一个事件\n- 通过 $off(eventName, eventHandler) 停止侦听一个事件\n\n　　如果你需要用的一个三方组件，并在组件挂载的时候进行创建，组件销毁的时候同时对这个三方组件进行销毁，你很有可能编写下面的代码，\n\n{% codeblock lang:js %}\n\n  // 一次性将这个日期选择器附加到一个输入框上\n  // 它会被挂载到 DOM 上。\n  mounted: function () {\n    // Pikaday 是一个第三方日期选择器的库\n    this.picker = new Pikaday({\n      field: this.$refs.input,\n      format: 'YYYY-MM-DD'\n    })\n  },\n  // 在组件被销毁之前，\n  // 也销毁这个日期选择器。\n  beforeDestroy: function () {\n    this.picker.destroy()\n  }\n\n{% endcodeblock %}\n\n　　但是这样的方式会使得组件实例持有三方组件的引用，但其实理论上组件实例是没有必要去持有这样的一个引用，这样的增加组件实例的属性的做法显得有些多余。第二个问题是我们的建立代码和清理代码分离，这样如果之后我们需要清理这个三方组件就需要在组件中清理所有销毁的相关内容。\n\n　　为了解决上面的两个问题，你应该通过一个程序化的侦听器解决这两个问题：\n\n{% codeblock lang:js %}\n\n  mounted: function () {\n    var picker = new Pikaday({\n      field: this.$refs.input,\n      format: 'YYYY-MM-DD'\n    })\n\n    this.$once('hook:beforeDestroy', function () {\n      picker.destroy()\n    })\n  }\n\n{% endcodeblock %}\n\n　　这样，只需要在组件销毁的时候，$emit一个hook:beforeDestroy事件就可以清理这个三方组件了，甚至可以将它们包裹在一个方法里，即使重复引用多个三方组件，也可以一次清理干净，\n\n{% codeblock lang:js %}\n\n  mounted: function () {\n    this.attachDatepicker('startDateInput')\n    this.attachDatepicker('endDateInput')\n  },\n  methods: {\n    attachDatepicker: function (refName) {\n      var picker = new Pikaday({\n        field: this.$refs[refName],\n        format: 'YYYY-MM-DD'\n      })\n\n      this.$once('hook:beforeDestroy', function () {\n        picker.destroy()\n      })\n    }\n  }\n\n{% endcodeblock %}\n\n　　这里需要理解清楚一点，当我们对同一个事件绑定多个处理函数时，在低版本的vue中是不支持使用v-on的数组形式的，并且我们也不可以在组件的标签上定义重复的v-on属性，所以这时候可以使用$on或者$once这样的方式动态添加多个监听器，这样所有的监听器都可以得到添加和执行，***需要搞清楚的一个概念是一个事件可以有多个不同的监听器的，执行顺序是先添加先被执行***。\n\n　　***注意 Vue 的事件系统不同于浏览器的 EventTarget API。尽管它们工作起来是相似的，但是 $emit、$on, 和 $off 并不是 dispatchEvent、addEventListener 和 removeEventListener 的别名。***\n\n\n### 循环引用\n\n#### 递归组件\n\n　　组件是可以在它们自己的模板中调用自身的。不过它们只能通过 name 选项来做这件事：\n\n{% codeblock lang:js %}\n\n  name: 'unique-name-of-my-component'\n\n  <!-- 当你使用 Vue.component 全局注册一个组件时，这个全局的 ID 会自动设置为该组件的 name 选项。 -->\n\n  Vue.component('unique-name-of-my-component', {\n    // ...\n  })\n\n{% endcodeblock %}\n\n　　虽然递归组件看上去很实用，但是稍有不慎，就有可能导致一个无限循环，\n\n{% codeblock lang:js %}\n\n  name: 'stack-overflow',\n  template: '<div><stack-overflow></stack-overflow></div>'\n\n{% endcodeblock %}\n\n　　类似上述的组件将会导致“max stack size exceeded”错误，所以请确保递归调用是条件性的 (例如使用一个最终会得到 false 的 v-if)。\n\n#### 组件之间的循环引用\n\n　　假设你需要构建一个文件目录树，像访达或资源管理器那样的。你可能有一个 <tree-folder> 组件，模板是这样的：\n\n{% codeblock lang:html %}\n\n  <p>\n    <span>{{ folder.name }}</span>\n    <tree-folder-contents :children=\"folder.children\"/>\n  </p>\n\n{% endcodeblock %}\n\n　　<tree-folder-contents> 组件，\n\n{% codeblock lang:html %}\n\n  <ul>\n    <li v-for=\"child in children\">\n      <tree-folder v-if=\"child.children\" :folder=\"child\"/>\n      <span v-else>{{ child.name }}</span>\n    </li>\n  </ul>\n\n{% endcodeblock %}\n\n　　当你仔细观察的时候，你会发现这些组件在渲染树中互为对方的后代和祖先——一个悖论！当通过 Vue.component 全局注册组件的时候，这个悖论会被自动解开。如果你是这样做的，那么你可以跳过这里。然而，如果你使用一个模块系统依赖/导入组件，例如通过 webpack 或 Browserify，你会遇到一个错误：\n\n>  Failed to mount component: template or render function not defined.\n\n　　为了解释这里发生了什么，我们先把两个组件称为A和B。模块系统发现它需要A，但是首先A依赖B，但是B又依赖A，但是A又依赖B，如此往复。这变成了一个循环，不知道如何不经过其中一个组件而完全解析出另一个组件。为了解决这个问题，我们需要给模块系统一个点，在那里“A 反正是需要B的，但是我们不需要先解析B。”\n\n\n　　在我们的例子中，把 <tree-folder> 组件设为了那个点。我们知道那个产生悖论的子组件是 <tree-folder-contents> 组件，所以我们会等到生命周期钩子 beforeCreate 时去注册它：\n\n{% codeblock lang:html %}\n\n  beforeCreate: function () {\n    this.$options.components.TreeFolderContents = require('./tree-folder-contents.vue').default\n  }\n\n  <!-- 或者，在本地组件注册时候，你可以使用 webpack 的异步 import： -->\n  components: {\n    TreeFolderContents: () => import('./tree-folder-contents.vue')\n  }\n\n  <!-- 这样问题就解决了！ -->\n\n{% endcodeblock %}\n\n\n### 控制更新\n\n#### 强制更新\n\n　　你可能还没有留意到数组或对象的变更检测注意事项，或者你可能依赖了一个未被Vue的响应式系统追踪的状态。\n\n　　然而，如果你已经做到了上述的事项仍然发现在极少数的情况下需要手动强制更新，那么你可以通过 $forceUpdate 来做这件事。比如Vue就没法检测对Map的追踪，不过这个问题在3.0版本得到添加。\n\n#### 通过 v-once 创建低开销的静态组件\n\n　　渲染普通的 HTML 元素在 Vue 中是非常快速的，但有的时候你可能有一个组件，这个组件包含了大量静态内容。在这种情况下，你可以在根元素上添加 v-once 特性以确保这些内容只计算一次然后缓存起来，就像这样：***(虽然响应式很好用，但也要使用在适当的地方哦)***\n\n{% codeblock lang:html %}\n\n  Vue.component('terms-of-service', {\n    template: `\n      <div v-once>\n        <h1>Terms of Service</h1>\n        ... a lot of static content ...\n      </div>\n    `\n  })\n\n{% endcodeblock %}\n\n　　***再说一次，试着不要过度使用这个模式。当你需要渲染大量静态内容时，极少数的情况下它会给你带来便利，除非你非常留意渲染变慢了，不然它完全是没有必要的——再加上它在后期会带来很多困惑。例如，设想另一个开发者并不熟悉 v-once 或漏看了它在模板中，他们可能会花很多个小时去找出模板为什么无法正确更新。***\n\n\n## 小结\n\n　　这篇在十月份就开始写了，但是一直到十一月差不多中旬才发出来，效率实在是底下，虽然其中有很多其它的事情造成了一些拖延，但是这个速度还是不能被接受。这段时间差不多将近一个半月，陆陆续续抽时间将vue-router、vuex、vue的文档刷了一遍，vue还有小部分没有看，算是对之前的查漏补缺吧，也知道了很多之前没有刻意去了解过的一些细节。接下来的计划大概是先把vue剩下的内容刷完，然后再去研究webpack的文档，webpack实在是太重要了，简直就是前端项目的基石。也不知道等自己刷完这两个内容要多久，不过看了下接下来的开发计划，自己应该是挺闲的。应该可以在年前将这些都搞定。\n\n　　再接下来的计划可能就很明确了，刷文档的目的当然还是为了开发做铺垫，很多人可能会说我不刷文档也可以愉快的开发呀。但是个人觉得这种方式对于职业来说太不靠谱，很多东西都理解的不透彻，在需求当头的时候就看能用就用了，也不考虑这样做的一些后果，或者说弊端。这对工程来说就是不负责的表现，自己也看了太多这种例子，对这种行为个人是有一些鄙视成分在里面的，虽然人都有一个成长的过程，但我觉得这是习惯问题，或者说态度问题。看多了这种粗制滥造的代码之后只能说，不可能要求每个人做到完美，对自己要求严格就行，不让自己难受就好了。\n\n　　不知道还会不会写技术博客，自己有点儿动摇，因为有道笔记对我来说明显比md形式的博客更加方便，写完这篇之后自己确实有些动摇了，因为这对自己来说就像是一些笔记，而笔记是只适合个人翻阅的。\n\n　　em...罗马不是一天建成的，早点休息吧。\n","slug":"Vue基础-组件","published":1,"updated":"2019-11-12T16:55:02.729Z","_id":"ck29z8yri0000to81no83x33z","comments":1,"photos":[],"link":"","content":"<p>　　组件是Vue设计的核心思想，Vue应用也是由一个个组件组成的，组件可以被复用，也可以根据情况动态显示不同的组件。在Vue的组件中，主要包括template、script以及style三个内容，template是编写的组件的html模版(也可以使用JSX)，里面包含的是页面的基础的html内容，可以使用Vue指令去进行一些额外逻辑的处理；script包含Vue组件内部的一些数据，方法，生命周期钩子等；style中是为组件编写的一些css样式，如果在style中加上scope表示这些样式作用域为组件内，如果没有则表示定义的全局样式。</p>\n<a id=\"more\"></a>\n<h2 id=\"组件注册\"><a href=\"#组件注册\" class=\"headerlink\" title=\"组件注册\"></a>组件注册</h2><p>　　Vue的组件需要定义且注册之后才可以与其它组件配合工作，上面叙述的是组件在.vue模板里的书写方式，如果我们直接在JS中全局定义并注册一个Vue组件的方式为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个名为 button-counter 的新组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;button v-on:click=\"count++\"&gt;You clicked me  times.&lt;/button&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>　　当一个组件完成注册之后，就可以被使用在其它组件之中了，全局注册的组件可以在整个Vue应用中使用，比如我们可以在html模板中这样定义，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"components-demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　所有Vue应用仅有一个根实例，根实例与其它组件的区别是它具备一个el属性，这个属性在其它组件中并不存在，el属性用于将vue应用绑定到唯一的DOM节点上。对于一个已经定义并全局注册的组件，你可以在任意一个地方进行复用，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"components-demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　在这里的button-counter组件中，每个组件都维护自己的数据独立工作，当这份数据是从外部传入的时候，这个规则可能不再成立。相同的组件只可能因为数据不同而显示不同的样式，当依赖式数据改动的时候，视图将会被相应更新。所以为了维护每个组件的独立，在组件内部定义data属性的时候，必须使用方法返回一个对象而不能直接定义为一个对象，正确添加data的方式应该是这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　全局注册过的组件在任何地方都可用，但是有时候我们不需要去全局定义一个组件，因为对于很多使用频率较低组件来说，并不需要进行全局注册，只进行局部注册即可，过多的全局注册会导致用户增加下载的JS的体积。对于局部注册的组件，只可以在引入其的组件中使用，不可以在其它组件的模板中使用。局部定义一个组件的方式很简单，在JS中直接定义的方式为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ComponentA = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ComponentB = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ComponentC = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>　　在需要引入其的组件中的components属性中，添加指向这个对象的引用，(局部注册的组件只可以在它自己的模板中使用，不可使用在其子组件中，也就是说，这里同时引入A和B，无法在B的模板中使用A，要想在B中使用A，必须在B中单独引入)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'component-a'</span>: ComponentA,</span><br><span class=\"line\">    <span class=\"string\">'component-b'</span>: ComponentB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>　　或者如果你通过 Babel 和 webpack 使用 ES2015 模块，那么代码看起来更像：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ComponentA <span class=\"keyword\">from</span> <span class=\"string\">'./ComponentA.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    ComponentA</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　在引入局部组件之后，在模板中使用只需要引入其在components中编写的组件属性名称，比如这里定义的属性名称为ComponentA，那么在模板中就可以编写<componenta></componenta>，这样看上去不太符合标准的html标签的写法，所幸的是，Vue中两种写法都支持，当你使用PascalCase的写法的时候，你依然可以在模板中使用<component-a>&lt;/component-a&gt;这样的写法。但如果你本身就在components中使用的是kebab-case这样的写法，那么在模板中你也只能在这里面使用kebab-case这样的写法。</component-a></p>\n<h3 id=\"基础组件全局注册\"><a href=\"#基础组件全局注册\" class=\"headerlink\" title=\"基础组件全局注册\"></a>基础组件全局注册</h3><p>　　对于一些基础组件，这类组件相对比较通用，如果一个个去导入这些组件，那么会导致在很多组件中有大量包含基础组件的长列表，这时候我们想要在全局注册这些组件。如果你使用webpack这类前端打包工具，那么你可以使用<a href=\"https://webpack.js.org/guides/dependency-management/\" target=\"_blank\" rel=\"noopener\">require.context</a>很方便的一次引入大量的基础组件，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> upperFirst <span class=\"keyword\">from</span> <span class=\"string\">'lodash/upperFirst'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> camelCase <span class=\"keyword\">from</span> <span class=\"string\">'lodash/camelCase'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> requireComponent = <span class=\"built_in\">require</span>.context(</span><br><span class=\"line\">  <span class=\"comment\">// 其组件目录的相对路径</span></span><br><span class=\"line\">  <span class=\"string\">'./components'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 是否查询其子目录</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 匹配基础组件文件名的正则表达式</span></span><br><span class=\"line\">  /Base[A-Z]\\w+\\.(vue|js)$/</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">requireComponent.keys().forEach(<span class=\"function\"><span class=\"params\">fileName</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取组件配置</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> componentConfig = requireComponent(fileName)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取组件的 PascalCase 命名</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> componentName = upperFirst(</span><br><span class=\"line\">    camelCase(</span><br><span class=\"line\">      <span class=\"comment\">// 获取和目录深度无关的文件名</span></span><br><span class=\"line\">      fileName</span><br><span class=\"line\">        .split(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        .pop()</span><br><span class=\"line\">        .replace(<span class=\"regexp\">/\\.\\w+$/</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 全局注册组件</span></span><br><span class=\"line\">  Vue.component(</span><br><span class=\"line\">    componentName,</span><br><span class=\"line\">      <span class=\"comment\">// 如果这个组件选项是通过 `export default` 导出的，</span></span><br><span class=\"line\">      <span class=\"comment\">// 那么就会优先使用 `.default`，</span></span><br><span class=\"line\">      <span class=\"comment\">// 否则回退到使用模块的根。</span></span><br><span class=\"line\">      componentConfig.default || componentConfig</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<h2 id=\"组件Prop\"><a href=\"#组件Prop\" class=\"headerlink\" title=\"组件Prop\"></a>组件Prop</h2><h3 id=\"Prop定义和传递\"><a href=\"#Prop定义和传递\" class=\"headerlink\" title=\"Prop定义和传递\"></a>Prop定义和传递</h3><p>　　组件中的数据分成两个部分，一部分是由父组件传递给自己的，就是这里说的Prop，另一部分是自身的数据，也就是data属性定义的部分。在组件中定义一个Prop最简单的方式，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'title'</span>],</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;h3&gt;Vue基础 - 组件&lt;/h3&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>  \n<p>　　最简单的在父组件中为其赋值的方式，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;blog-post title=<span class=\"string\">\"My journey with Vue\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span></span><br><span class=\"line\">&lt;blog-post title=\"Blogging with Vue\"&gt;&lt;/blog-post&gt;</span><br><span class=\"line\">&lt;blog-post title=\"Why Vue is so fun\"&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure>  \n<p>　　一个组件可以拥有任意数量的Prop，在组件中访问Prop的属性的方式和data属性一样，这里的title不仅可以是字符串，可以是任何类型的值(对象，数组，布尔值…)。更方便的是，可以配合使用v-for去遍历生成一个子组件列表，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"post in posts\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　一个需要注意的地方是，在HTML中DOM是不区分大小写的，也就是说浏览器会把所有大写字母解释为小写字母，如果使用DOM中的模板，如果需要对camel-case格式的prop赋值必须在模板中用与其等价的kebab-case命名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component('blog-post', &#123;</span><br><span class=\"line\">  // 在 JavaScript 中是 camelCase 的</span><br><span class=\"line\">  props: ['postTitle'],</span><br><span class=\"line\">  template: '<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">post-title</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　但是如果使用字符串模板，那么这条限制就不存在了，那么什么是字符串模板什么是DOM模板呢？DOM模板是指能被浏览器解析的模板，DOM模板和元素的html混合在一起进行定义，比如下面的例子，id为demo的div既是位于html中，又作为vue的一个组件被定义，这就被称为DOM模板，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- html模板 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"i love jack\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:customId</span>=<span class=\"string\">\"id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> obj = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      message: <span class=\"string\">'hello,world'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      id: <span class=\"string\">'JS脚本模板'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      el: <span class=\"string\">'#demo'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      data: obj,</span></span><br><span class=\"line\"><span class=\"javascript\">      prop: [<span class=\"string\">'title'</span>]</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　字符串模板是定义在js代码中用字符串包裹起来进行定义的vue组件，这种方式被称为字符串模板，比如下面的全局注册和局部组件定义都是字符串模板的使用方式，<strong><em>(注意，通过字符串模板定义的元素，会替换挂载的元素)</em></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"template\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"x-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"optioncompTemp\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">         <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      props: [<span class=\"string\">'param'</span>],</span></span><br><span class=\"line\"><span class=\"undefined\">      template: `</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>A custom component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">      `</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      el: <span class=\"string\">'#template'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">'donghai'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      components: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'se-com'</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          props: [<span class=\"string\">'param'</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">          template: <span class=\"string\">'#optioncompTemp'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 字符串模板，替换全部的模板，内联字符串模板</span></span></span><br><span class=\"line\"><span class=\"undefined\">      template: `</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &lt;tr is=<span class=\"string\">\"my-component\"</span> :param=<span class=\"string\">\"name\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">        &lt;tr is=<span class=\"string\">\"se-com\"</span> :param=<span class=\"string\">\"name\"</span> &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">se-com</span> <span class=\"attr\">:param</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">se-com</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">      `</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　除了DOM模板和字符串模板之外，在vue中还存在着内联字符串模板以及JS脚本模板模板，内联字符串模板指的是，在一个组件内部引用其它组件的时候，这个被引入的子组件也是直接用字符串表示，而非来自其它形式(如导入一个模板等)方式的引入，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">'#template'</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'donghai'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        <span class=\"string\">'se-com'</span>: &#123;</span><br><span class=\"line\">          props: [<span class=\"string\">'param'</span>],</span><br><span class=\"line\">          template: <span class=\"string\">`&lt;div&gt;我是第二个组件&lt;/div&gt;`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 字符串模板，替换挂载元素</span></span><br><span class=\"line\">      template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;ol&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;tr is=\"my-component\" :param=\"name\"&gt;&lt;/tr&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;tr is=\"se-com\" :param=\"name\" &gt;&lt;/tr&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;se-com :param=\"name\"&gt;&lt;/se-com&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ol&gt;</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<p>　　JS脚本模板指的是使用script标签去声明一个组件的模板，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">is</span>=<span class=\"string\">\"optioncomp\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--模板内容存放区域--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"optioncompTemp\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      components: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'optioncomp'</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          template: <span class=\"string\">'#optioncompTemp'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　但是如果我们使用文件模板，即xxx.vue的方式，在前端工程中就不存在上面提到的大小写的问题了。除此之外，vue模板中定义的组件在一些特定的标签下受到限制，例如<strong><em>ul、ol、table、select</em></strong>这样的元素里允许包含的元素有限制，而另一些像<strong><em>option</em></strong>这样的元素只能出现在某些特定元素的内部。下面这样的方式是不被允许的，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-row</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">my-row</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　这时候自定义组件my-row会被当成无效的内容，这时候需要使用到特殊的is属性，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　另外这个特殊的标签限制只会的一些内容有效，对于下面的情况，则可以在这些被限制的标签中使用自定义模板，</p>\n<ul>\n<li>内联字符串模板</li>\n<li>单文件组件 (.vue)</li>\n<li>JS脚本模板</li>\n</ul>\n<h3 id=\"静态传递和动态传递\"><a href=\"#静态传递和动态传递\" class=\"headerlink\" title=\"静态传递和动态传递\"></a>静态传递和动态传递</h3><p>　　我们知道可以这样传递到组件中一个静态的值，而且它总是一个字符串类型，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">title</span>=<span class=\"string\">\"My journey with Vue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　通过v-bind进行动态赋值，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态赋予一个变量的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title + ' by ' + post.author.name\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<p>　　对于静态赋值，有时候我们想要传递一个数字类型或者布尔类型的时候，是无法做到的，所以这时候我们必须使用动态赋值的方式传递一个js表达式，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind:likes</span>=<span class=\"string\">\"42\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 包含该 prop 没有值的情况在内，都意味着 `true`。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">is-published</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即便 `false` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind:is-published</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即便数组是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind:comment-ids</span>=<span class=\"string\">\"[234, 266, 273]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即便对象是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:author</span>=<span class=\"string\">\"&#123;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    name: 'Veronica',</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    company: 'Veridian Dynamics'</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<p>　　如果你想要在组件中同时定义多个属性，但又不希望把它们都放置在一个对象中，这时候你可能需要写很多赋值语句，vue提供了不带参数的v-bind指令帮助你一次传递一个对象的所有属性，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"post\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">等价于:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><p>　　Vue中所有的数据在父组件和自组件中是单向下行绑定的，这意味着，父组件中修改传递到子组件中的prop时，子组件中的数据同样会被修改，但是反之却不行。这样的目的是为了防止子组件的改动影响到父组件中的数据，会导致应用的数据流向难以理解。Vue这样设计是很合理的，因为有时候我们不希望子组件的改动影响到父组件的数据，只有在必要的时候才去这么做，这样使我们对数据具备更多的可控性。</p>\n<p>　　另外在Vue中如果你在子组件中修改了prop，那么控制台会提示一个警告，意味着你不应该这么做。从父组件传递到子组件的prop一般有下面两个用处，</p>\n<p>　　1. 用于传递一个初始值，子组件依赖这个初始值去进行组件的渲染，并将其当作一个本地数据使用。这时候你应该拷贝一份数据到本地，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: [<span class=\"string\">'initialCounter'</span>],</span><br><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    counter: <span class=\"keyword\">this</span>.initialCounter</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>  </p>\n<p>　　2. 这个prop不需要修改，只是用于读取，但是子组件需要修改传递过来的数据源，这时候可以将其设置为一个计算属性，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: [<span class=\"string\">'size'</span>],</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  normalizedSize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size.trim().toLowerCase()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>  \n<p>　　<strong><em>对于对象类型或者数组类型的prop，在从父组件传递到组件中的时候，变量的类型是引用，也就是指向对象和数组的地址，这时候上面的单向数据流就不成立了。就是说单向数据流法则仅当你传递的是一个非对象和数组类型的值的时候才成立，否则子组件和父组件一样会将数据的修改影响到对方。</em></strong></p>\n<h3 id=\"Prop验证\"><a href=\"#Prop验证\" class=\"headerlink\" title=\"Prop验证\"></a>Prop验证</h3><p>　　有时候我们在编写一个组件的时候，自己一般知道需要往里面传递什么类型的值，或者这个Prop的一些限制，但是后面的开发者并不知道这时候需要怎么传递，你可以为这些Prop添加一个验证帮助其它开发者检验错误，当prop验证失败的时候，(开发环境构建版本的)Vue 将会产生一个控制台的警告。如果需要对Prop检查错误，就必须使用对象的语法形式而非数组，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class=\"line\">    propA: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 多个可能的类型</span></span><br><span class=\"line\">    propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 必填的字符串</span></span><br><span class=\"line\">    propC: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 带有默认值的数字</span></span><br><span class=\"line\">    propD: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 带有默认值的对象</span></span><br><span class=\"line\">    propE: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 自定义验证函数</span></span><br><span class=\"line\">    propF: &#123;</span><br><span class=\"line\">      validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个值必须匹配下列字符串中的一个</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">'success'</span>, <span class=\"string\">'warning'</span>, <span class=\"string\">'danger'</span>].indexOf(value) !== <span class=\"number\">-1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<p>　　<strong><em>Prop验证发生在组件创建前，也就是说，组件的Prop中的default和validator不可以使用定义在组件data、computed、methods中的属性和方法</em></strong></p>\n<p>　　type可以是下面原生构造函数中的一个：</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Array</li>\n<li>Object</li>\n<li>Date</li>\n<li>Function</li>\n<li>Symbol</li>\n</ul>\n<p>　　除了这些默认的构造函数，你也可以使用自定义构造函数进行类型的检查，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">firstName, lastName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.firstName = firstName</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lastName = lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    author: Person</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<h3 id=\"非Prop特性\"><a href=\"#非Prop特性\" class=\"headerlink\" title=\"非Prop特性\"></a>非Prop特性</h3><p>　　非Prop特性这个名字听起来不容易被理解，简单来说，就是指那些在组件中的props属性中没有被声明的，但是又在父组件中向子组件传递的属性。比如下面的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-comp</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"learn vue\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mycls\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.component(<span class=\"string\">'my-comp'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        template: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　这里的my-comp组件中并未定义data-title这个prop，但是又向my-comp标签传递了这个属性，这时候会在这个组件的根元素上添加这个属性，所以这个地方会最终被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"learn vue\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mycls\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这里包括class和style都属于非Prop特性，但不同的是，对于class和style这类非Prop特性，vue有做特殊的处理，前面在Class和Style绑定的时候也提到了，模板中定义的class和style和在模板中传递的值会被合并而不是简单的覆盖。对于其它非Prop特性来说，如果在组件中定义了这个属性，又接着传递了该属性，那么这个非Prop属性会被传递的值覆盖，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.component(<span class=\"string\">'my-comp'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        template: '<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">type</span>=<span class=\"string\">\"inital\"</span>&gt;</span>我是组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-comp</span> <span class=\"attr\">type</span>=<span class=\"string\">\"changed\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　最后这里会被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">type</span>=<span class=\"string\">\"changed\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　当然，有时候你不想要传递的非Prop属性覆盖掉组件中定义的值，你可以组件的选项中设置 inheritAttrs: false去达到这个目的，这样，所有的非Prop属性都不会出现在最后组件根元素的DOM节点上，覆盖也就根本不存在了，<strong><em>(inheritAttrs: false不会影响class和style的绑定)</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  inheritAttrs: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　那么，我们如何去获取到这些非Prop属性的值呢，vue提供了<a href=\"https://vuejs.org/v2/api/#vm-attrs\" target=\"_blank\" rel=\"noopener\">$attrs</a>为我们做到了这一点，$attrs是一个包含所有非Prop属性的对象，<strong><em>(不包括class和style)</em></strong>，如果这样如果我们想要将一个非Prop属性绑定到组件的非根元素上时，使用这个属性将变的非常方便，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component('base-input', &#123;</span><br><span class=\"line\">  inheritAttrs: false,</span><br><span class=\"line\">  props: ['label', 'value'],</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$attrs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"value\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">在base-input标签中</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-model</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这里将会被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      \"required\": \"\",</span><br><span class=\"line\">      \"placeholder\": \"Enter your username\"</span><br><span class=\"line\">    &#125;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span>=<span class=\"string\">\"required\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样你使用基础自定义组件就像是原始的HTML元素一样，避免了不必要的代码逻辑<strong><em>(添加多余的prop)</em></strong>。</p>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><h3 id=\"事件名\"><a href=\"#事件名\" class=\"headerlink\" title=\"事件名\"></a>事件名</h3><p>　　自定义事件名称不像Prop一样存在大小写转换的可能，我们需要精确的匹配一个自定义事件的名称，才可以触发自定义事件的监听器。比如手动触发一个事件，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'myEvent'</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　如果去监听这个自定义事件的kebab-case是不会有任何效果的，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 没有效果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:my-event</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　除此之外，<strong><em>在DOM模板中</em></strong>，v-on指令后面如果定义的是myEvent的话，同样这里的myEvent也会被解析为myevent，这种情况下也会导致myEvent监听器无法被触发，所以不推荐使用camelCase的事件命名，尽可能使用kebab-case的命名方式。</p>\n<h3 id=\"自定义组件的v-model\"><a href=\"#自定义组件的v-model\" class=\"headerlink\" title=\"自定义组件的v-model\"></a>自定义组件的v-model</h3><p>　　我们知道，v-model指令可以将组件的行为数据同步到绑定到的data，而v-model的实现原理就是在我们需要在对应的组件上监听原生的DOM事件并使用$emit发出一个自定义事件，然后v-model会在这个对应的自定义事件的监听器中修改绑定的data。v-model默认监听的是原生的input事件以及原生DOM的value属性，但不同的输入组件的事件和属性值会有不同，如果需要改变它的默认行为可以这样做，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component('base-checkbox', &#123;</span><br><span class=\"line\">  model: &#123;</span><br><span class=\"line\">    prop: 'checked',</span><br><span class=\"line\">    event: 'change'</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    checked: Boolean</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:checked</span>=<span class=\"string\">\"checked\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-on:change</span>=<span class=\"string\">\"$emit('change', $event.target.checked)\"</span>&gt;</span>`</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　注意，根据之前所述，如果你需要对checked使用v-bind，必须在props中进行声明。</p>\n<h3 id=\"绑定原生事件\"><a href=\"#绑定原生事件\" class=\"headerlink\" title=\"绑定原生事件\"></a>绑定原生事件</h3><p>　　我们都知道v-on可以绑定事件监听器，但是这个的指令的例子中很多在组件标签中监听的是emit的input、change事件啦，在组件的一些原生的html元素中监听的也是input、change事件，这时候开发者会感到迷惑，那么什么时候监听原生的事件什么时候监听的是自定义的事件呢？它们的用法好像看上去没有区别。这时候我们需要借助官方文档的力量帮我们解除迷惑，</p>\n<blockquote>\n<p><strong><em>用在普通元素上时，只能监听原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。</em></strong></p>\n</blockquote>\n<p>　　看到这里恍然大悟，这就是说，在普通元素上v-on只可以监听原生的事件，如果使用在自定义元素上的时候，两者都可以，这时候默认监听自定义事件，但是如果需要去监听原生的事件需要加上<strong><em>.native</em></strong>修饰符。</p>\n<p>　　在监听原生事件的时候，监听器处理方法只有事件原生对象为唯一的参数。如果使用内联语句，在语句中可以访问一个$event属性，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">v-on:click=<span class=\"string\">\"handle('ok', $event)\"</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在使用v-on监听自定义事件的时候，不像监听原生事件一样有一个事件原生对象，这种情况只存在一个从<span>$emit</span>传递过来的额外的参数，有趣的是，这两种方式都使用$event作为传递的变量名称，<strong><em>(虽然都被写为$event，但是含义却大不一样，一个是原生的事件对象，一个是负载信息)</em></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 内联语句，$event只是负载信息，如果需要标识DOM，可以添加data-属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis(123, $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 也可以直接绑定到一个方法变量，第一个参数就是这个负载信息 --&gt;</span></span><br><span class=\"line\">this.$emit('give-advice',  &#123; detail: detailInfo &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"emit-example-argument\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">magic-eight-ball</span> <span class=\"attr\">v-on:give-advice</span>=<span class=\"string\">\"showAdvice\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">magic-eight-ball</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这里的advice的值为  &#123; detail: detailInfo &#125; --&gt;</span></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '#emit-example-argument',</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    showAdvice: function (advice) &#123;</span><br><span class=\"line\">      alert(advice)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　理解了v-on的使用方式，我们可以轻松的绑定一个原生事件，但是我们在自定义组件上使用v-on.native的时候，只会将这个事件绑定到组件的根元素上，对于有些情况来说，这样的绑定会失效，比如下面这样的自定义组件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$attrs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"$emit('input', $event.target.value)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　姑且将其称之为base-input，如果我们在这个base-input上监听一个focus事件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span> <span class=\"attr\">v-on:focus.native</span>=<span class=\"string\">\"onFocus\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　对于这种情况，由于label并不是focusable元素，所以对这个标签添加focus监听器是没有作用的，这时候这个focus监听器并不会被添加到input元素上去，我们的v-on:focus.native也就会起不到任何作用。针对这种情况，Vue提供了一个 <span>$listeners</span>属性，$listeners是一个对象，包含了绑定到这个组件上的根元素的所有事件监听器，<strong><em>(不包括通过.native修饰符添加的监听器，且$listeners仅在2.4+中可用)</em></strong>，一个<base-input>如果有如下的定义，</base-input></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span> <span class=\"attr\">v-on:mouseover</span>=<span class=\"string\">\"handleMouseOver\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"handleClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样这个$listeners在组件内的值为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mouseover: handleMouseOver(event) &#123; ... &#125;</span><br><span class=\"line\">  click: handleClick(value) &#123; ... &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　所以如果我们需要在组件的子元素绑定一些原生事件，配合上计算属性可以进行一个自定义的添加，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'base-input'</span>, &#123;</span><br><span class=\"line\">  inheritAttrs: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'label'</span>, <span class=\"string\">'value'</span>],</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    inputListeners: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">      <span class=\"comment\">// `Object.assign` 将所有的对象合并为一个新对象</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 我们从父级添加所有的监听器</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$listeners,</span><br><span class=\"line\">        <span class=\"comment\">// 然后我们添加自定义监听器，</span></span><br><span class=\"line\">        <span class=\"comment\">// 或覆写一些监听器的行为</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 这里确保组件配合 `v-model` 的工作</span></span><br><span class=\"line\">          input: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            vm.$emit(<span class=\"string\">'input'</span>, event.target.value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;label&gt;</span></span><br><span class=\"line\"><span class=\"string\">      </span></span><br><span class=\"line\"><span class=\"string\">      &lt;input</span></span><br><span class=\"line\"><span class=\"string\">        v-bind=\"$attrs\"</span></span><br><span class=\"line\"><span class=\"string\">        v-bind:value=\"value\"</span></span><br><span class=\"line\"><span class=\"string\">        v-on=\"inputListeners\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样的话，我们在自定义组件上直接添加监听器就好像在组件子元素上直接添加了原生的监听器，看上去它们就像是一个元素。</p>\n<h3 id=\"sync-修饰符\"><a href=\"#sync-修饰符\" class=\"headerlink\" title=\".sync 修饰符\"></a>.sync 修饰符</h3><p>　　之前我们已经在Prop中编写了Vue中组件的单向数据流向，但有时候我们希望改变这个特性，将数据进行双向绑定，使用v-model是一种方式，但其本质是通过自定义事件的监听器去实现的。v-model是针对组件的行为进行的双向绑定，对于一些更加通用的做法，Vue推荐使用update:myPropName的模式去达到这个目的。什么是update:myPropName模式呢？简而言之就是子组件内发出一个update:myPropName的事件，附带上myProp的新值，并在组件根元素上添加这个自定义事件的监听器进行修改。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件中 --&gt;</span></span><br><span class=\"line\">this.$emit('update:title', newTitle)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 根组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"doc.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:update:title</span>=<span class=\"string\">\"doc.title = $event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　为了方便，Vue提供了.sync 修饰符，也就是说，被.sync修饰符修饰过的变量，只需要在子组件中发出”update:title”这个事件就可以实现数据的双向绑定了。.sync的用法，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind:title.sync</span>=<span class=\"string\">\"doc.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 设置多个prop的时候 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind.sync</span>=<span class=\"string\">\"doc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　完整的使用方式，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:open.sync</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"open\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"$emit('update:open', $event.target.value)\"</span>&gt;</span></span><br><span class=\"line\">    open: </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　说白了，.sync修饰符就是语法糖，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">:open.sync=<span class=\"string\">\"state\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 相当于 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">:open=<span class=\"string\">\"state\"</span> @update:open=<span class=\"string\">\"state = $event\"</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　<strong><em>注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用，以及将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，这是因为在vue需要考虑很多边缘情况</em></strong></p>\n<h2 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h2><p>　　<strong><em>在vue 2.6+中，为插槽这部分内容引入v-slot指令去替代slot和slot-scope，slot和slot-scope已经被废弃，但是在vue2.x中仍然被支持。关于为什么弃用slot-scope，官方在<a href=\"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md\" target=\"_blank\" rel=\"noopener\">这里</a>解释了</em></strong></p>\n<h3 id=\"插槽内容\"><a href=\"#插槽内容\" class=\"headerlink\" title=\"插槽内容\"></a>插槽内容</h3><p>　　在自定义组件中，虽然我们可以通过数据驱动去定义不同的组件，但是很多时候这种方式只能用于有限种情况的使用，或者说已知情况的定义。所以如果我们想要直观的在组件中内嵌一些元素，就像普通的HTML元素一样，并需要灵活的添加任意的元素类型和数目，这时候插槽的作用就体现出来了。Vue采用<slot>标签作为承载这样的内嵌元素的出口，比如你定义一个下面这样的组件，我们称其为navigation-link，</slot></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"nav-link\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在使用组件的时候，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br><span class=\"line\">  Your Profile</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样，在渲染的时候，<slot>部分就会被替代为”Your Profile”。在插槽内不仅可以添加字符串，还可以添加任意html原生元素和自定义组件标签，</slot></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加一个 Font Awesome 图标 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    Your Profile</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 甚至包括自定义组件 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加一个图标的组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">font-awesome-icon</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">font-awesome-icon</span>&gt;</span></span><br><span class=\"line\">    Your Profile</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　如果在navigation-link组件的定义中没有包含slot标签，那么该组件标签起始和结束之前的任何内容都会被丢弃。</p>\n<h3 id=\"后备内容\"><a href=\"#后备内容\" class=\"headerlink\" title=\"后备内容\"></a>后备内容</h3><p>　　对于一个插槽来说，后备内容是在组件被使用时使用者并未为插槽提供任何内容时显示的内容，可以被称为插槽默认内容。比如定义一个submit-buton组件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　默认情况下如果我们在引用这个组件时，直接像下面这样使用，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">submit-button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">submit-button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　会被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">  Submit</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　当提供内容的时候，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">submit-button</span>&gt;</span></span><br><span class=\"line\">  Save</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">submit-button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　则这个提供的内容将会被渲染从而取代后备内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">  Save</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"　具名插槽\"></a>　具名插槽</h3><p>　　有时候我们需要将多个插槽定义在组件的不同位置，比如下面的base-layout组件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把页头放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把主要内容放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把页脚放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　对于这种情况，我们在定义slot的时候，需要用到一个特殊的属性name，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　不带name的slot出口会带有隐含的名字”default”，对于使用了具名插槽的组件，需要配合template元素使用v-slot指令提供插槽名称的方式去提供插槽内容，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面和上面的方式结果相同，只不过是一个显示的指定了default，另一个使用默认的方式提供默认插槽的内容 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　注意 v-slot 只能添加在一个template标签上 (只有一种例外情况，下文会提到，为默认插槽添加插槽Prop的时候，在组件标签上添加v-slot)，这一点和已经废弃的 slot 特性不同。</p>\n<h3 id=\"编译作用域\"><a href=\"#编译作用域\" class=\"headerlink\" title=\"编译作用域\"></a>编译作用域</h3><p>　　有时候你可能会想在插槽中使用一些这个插槽所属组件内部的数据，比如，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br><span class=\"line\">  Clicking here will send you to: </span><br><span class=\"line\">  <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">  这里的 `url` 会是 undefined，因为 \"/profile\" 是</span></span><br><span class=\"line\"><span class=\"comment\">  _传递给_ &lt;navigation-link&gt; 的而不是</span></span><br><span class=\"line\"><span class=\"comment\">  在 &lt;navigation-link&gt; 组件*内部*定义的。</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　官方对这个编译作用域的解释有点难以理解，而且也会涉及到之前的后备插槽的内容，所以我有意将后备插槽以及具名插槽提到这部分前面，便于结合这两部分一起解释这个编译作用域。</p>\n<p>　　先说结论，我们使用插槽添加内容时，这部分我们自定义的内容只可以访问和它本身所处同一模板文件的数据作用域，而不可以访问这个插槽所作用的组件内部的数据作用域。而当我们使用后备内容的时候，后备内容是处于在组件内部的模板定义，所以后备内容只可以访问组件内部的数据作用域，不可以访问组件外部的数据作用域，这两者恰好相反。这时候就很好的可以理解官方的一句话了，</p>\n<blockquote>\n<p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p>\n</blockquote>\n<p>　　我们通过下面的例子可以去理解这种情况，在组件child定义四个具名插槽，这两个具名插槽都的后备内容分别使用内部和外部两个变量，然后再在</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 定义下面的内容 --&gt;</span><br><span class=\"line\">  Vue.component(<span class=\"string\">'child'</span>, &#123;</span><br><span class=\"line\">  \ttemplate: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    \t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"second\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"third\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"forth\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     \t\tinnerMsg: <span class=\"string\">\"内部定义的第一个值\"</span>,</span><br><span class=\"line\">        secondInnerMsg: <span class=\"string\">\"内部定义的第二个值\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      outerMsg: <span class=\"string\">'外部定义的一个值'</span>,</span><br><span class=\"line\">      secondOuterMsg: <span class=\"string\">\"外部定义的第二个值\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　以及对应的html模板，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:second</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:third</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:forth</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　渲染结果，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内部定义的第一个值   外部定义的第二个值<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 另外控制有如下的显示，</span></span><br><span class=\"line\"><span class=\"comment\">  Property or method \"outerMsg\" is not defined on the instance but referenced during render</span></span><br><span class=\"line\"><span class=\"comment\">  Property or method \"secondInnerMsg\" is not defined on the instance but referenced during render.</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><p>　　从上面的解释我们知道，后备插槽和自定义的插槽具有独立的作用域，互相都无法访问彼此的作用内容。但数据是可以从父组件流向自组件的，也就是说，虽然子组件中不存在对应的数据，但是可以当数据从父组件中传递到子组件后，在后备插槽中也可以获取到了。但是问题是父组件中无法获取到子组件的数据，如果当我们需要在自定义插槽中使用到子组件的数据的时候，这时候需要借助插槽Prop，也就是作用域插槽，借助官方的例子来说明作用域插槽的使用，有一个current-user组件，它的插槽中存在这样一个后备插槽，后备内容显示用户的名，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　如果正常情况下我们想要它显示用户的姓，但是user是组件内的值，下面的做法肯定是没有作用的，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; user.firstName &#125;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　为了让user在父级的插槽内容中可用，我们可以将user作为<slot>元素的一个特性绑定上去：</slot></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">v-bind:user</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在组件内部的插槽处绑定了属性之后，可以给v-slot带上一个值来定义我们提供的插槽prop的名字，插槽prop对象的命名可以随意，没有过多的约束，这里我们将其命名为slotProps，之后可以使用这个插槽prop对象去访问之前绑定在插槽上的prop，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　如果被提供的内容只有默认插槽的时候，可以直接将插槽prop对象的命名放到组件的标签上，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot:default</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 由于是默认模板，还可以简写为 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\">　　</span><br></pre></td></tr></table></figure>\n<p>　　上面简写的方式仅仅可用于仅存在默认插槽的情况，不可以和具名插槽混用，因为每个插槽都有自己独立的Prop对象，这样会导致插槽Prop作用域不明确，如果存在多个插槽的情况，应该使用完整的基于template标签的语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:other</span>=<span class=\"string\">\"otherSlotProps\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　作用域插槽的内部工作原理是将你的插槽内容包括在一个传入单个参数的函数里，在环境支持的情况下(单文件组件或现代浏览器)，另一种获取插槽prop对象的方式是对其进行解构赋值，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"&#123; user &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用es6结构赋值对prop进行重命名 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"&#123; user: person &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在组件内部值不存在的时候，使用结构赋值传递一个默认值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"&#123; user = &#123; firstName: 'Guest' &#125; &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"动态插槽名\"><a href=\"#动态插槽名\" class=\"headerlink\" title=\"动态插槽名\"></a>动态插槽名</h3><p>　　在2.6.0+中，可以在v-slot上使用动态指令参数，定义动态的插槽名，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:</span>[<span class=\"attr\">dynamicSlotName</span>]&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"具名插槽的缩写\"><a href=\"#具名插槽的缩写\" class=\"headerlink\" title=\"具名插槽的缩写\"></a>具名插槽的缩写</h3><p>　　和v-on以及v-bind一样，v-slot也有缩写，即把参数之前的所有内容(v-slot:)替换为字符#。例如v-slot:head，可以被重写为#header，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　该缩写只其在有参数的时候才可用，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这样会触发一个警告，且这样的语法是无效的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> #=<span class=\"string\">\"&#123; user &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 正确的写法为: --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> #<span class=\"attr\">default</span>=<span class=\"string\">\"&#123; user &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"废弃的语法\"><a href=\"#废弃的语法\" class=\"headerlink\" title=\"废弃的语法\"></a>废弃的语法</h3><p>　　前文提过，v-slot是在vue2.6+被支持的语法，之前的语法可以去参照<a href=\"https://cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h2 id=\"动态组件-amp-异步组件\"><a href=\"#动态组件-amp-异步组件\" class=\"headerlink\" title=\"动态组件 &amp; 异步组件\"></a>动态组件 &amp; 异步组件</h2><p>　　有时候，我们可能在一个元素上根据条件显示不同的组件，这时候我们可能会想要使用v-if去根据数据的不同动态渲染不同的组件。除此之外，同时vue还提供了动态组件去实现这个需求，一个经典的案例如下，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 已经注册的组件 --&gt;</span></span><br><span class=\"line\">Vue.component('tab-home', &#123;</span><br><span class=\"line\">\ttemplate: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component('tab-posts', &#123;</span><br><span class=\"line\">\ttemplate: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Posts component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component('tab-archive', &#123;</span><br><span class=\"line\">\ttemplate: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Archive component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dynamic-component-demo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"tab in tabs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"tab.name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"['tab-button', &#123; active: currentTab.name === tab.name &#125;]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"currentTab = tab\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentTab.component\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"tab\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vue根组件 --&gt;</span></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '#dynamic-component-demo',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentTab: 'Home',</span><br><span class=\"line\">    tabs: ['Home', 'Posts', 'Archive']</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    currentTabComponent: function () &#123;</span><br><span class=\"line\">      return 'tab-' + this.currentTab.toLowerCase()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　通过在这个特殊的component标签上添加is属性，我们实现了在一个元素上动态渲染不同组件的功能。这里的currentTabComponent不仅是可以指向已经注册组件的名称，还可以指向一个组件的选项对象，另一种使用例子可以看<a href=\"https://jsfiddle.net/chrisvfritz/b2qj69o1/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>　　从上面我们得知我们可以使用动态组件根据条件在同一个位置渲染不同的组件，但是在不同的组件间进行切换的时候会导致这个组件会被重新渲染，这样在之前的页面进行的一些修改将不会被保留下来。要保留之前组件的状态的，可以使用vue提供的keep-alive元素，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 失活的组件将会被缓存！--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentTabComponent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　使用例子可以看<a href=\"https://jsfiddle.net/chrisvfritz/Lp20op9o/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>　　在大型应用中，我们可能需要将应用分割成一些小的块，并且只有在需要的时候才从服务器中加载，而不是一次将所有需要的内容都加载下来。而通过这种方式进行条件加载的组件被称为异步组件，vue通过允许你使用一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义，且vue只有在这个组件需要被渲染的时候才发触发这个工厂函数的执行，并将结果缓存起来提供到接下来的重渲染，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'async-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 向 `resolve` 回调传递组件定义</span></span><br><span class=\"line\">    resolve(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　但这种编写在vue的方式并不实用，因为我们依然没有减少下载js代码的体积，并让代码的维护性和重构性变的很不友好，所以一般需要配合<a href=\"https://webpack.js.org/guides/code-splitting/\" target=\"_blank\" rel=\"noopener\">webpack的code-splitting功能</a>进行一起使用，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这个特殊的 `require` 语法将会告诉 webpack</span></span><br><span class=\"line\">  <span class=\"comment\">// 自动将你的构建代码切割成多个包，这些包</span></span><br><span class=\"line\">  <span class=\"comment\">// 会通过 Ajax 请求加载</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在上述情况下，你也使用返回一个Promise的方式去异步加载这个组件，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 全局注册 --&gt;</span><br><span class=\"line\">Vue.component(</span><br><span class=\"line\">  <span class=\"string\">'async-webpack-example'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 这个 `import` 函数会返回一个 `Promise` 对象。</span></span><br><span class=\"line\">  () =&gt; <span class=\"keyword\">import</span>(<span class=\"string\">'./my-async-component'</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">&lt;!-- 局部注册 --&gt;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'my-component'</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./my-async-component'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在vue 2.3 +中，加载异步组件的时候，vue支持返回一个包含如下格式的对象去处理在加载过程中组件显示的内容，<strong><em>(如果你希望在Vue-Router中使用下面的语法的话，需要vue-router 2.4 + )</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> AsyncComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要加载的组件 (应该是一个 `Promise` 对象)</span></span><br><span class=\"line\">  component: <span class=\"keyword\">import</span>(<span class=\"string\">'./MyComponent.vue'</span>),</span><br><span class=\"line\">  <span class=\"comment\">// 异步组件加载时使用的组件</span></span><br><span class=\"line\">  loading: LoadingComponent,</span><br><span class=\"line\">  <span class=\"comment\">// 加载失败时使用的组件</span></span><br><span class=\"line\">  error: ErrorComponent,</span><br><span class=\"line\">  <span class=\"comment\">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span></span><br><span class=\"line\">  delay: <span class=\"number\">200</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 如果提供了超时时间且组件加载也超时了，</span></span><br><span class=\"line\">  <span class=\"comment\">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span></span><br><span class=\"line\">  timeout: <span class=\"number\">3000</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"处理边界情况\"><a href=\"#处理边界情况\" class=\"headerlink\" title=\"处理边界情况\"></a>处理边界情况</h2><h3 id=\"访问元素-amp-组件\"><a href=\"#访问元素-amp-组件\" class=\"headerlink\" title=\"访问元素 &amp; 组件\"></a>访问元素 &amp; 组件</h3><p>　　在大多数情况下，在一个Vue应用中是不需要直接操作DOM的，但是对于一些情况则不是这样，比如当我们引入一个三方组件的时候，这时候很有可能需要直接操作DOM去达到业务需求。</p>\n<h4 id=\"访问根实例\"><a href=\"#访问根实例\" class=\"headerlink\" title=\"访问根实例\"></a>访问根实例</h4><p>　　在每个new Vue实例的组件中，其根实例可以通过$root属性进行访问。比如在下面的例子中，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vue 根实例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    baz: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 通过$root，所有的子组件都可以将这个实例当作一个全局的store来使用 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取根组件的数据</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$root.foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入根组件的数据</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$root.foo = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问根组件的计算属性</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$root.bar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用根组件的方法</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$root.baz()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 对于 demo 或非常小型的有少量组件的应用来说这是很方便的。</span><br><span class=\"line\">    不过这个模式扩展到中大型应用来说就不然了。</span><br><span class=\"line\">    因此在绝大多数情况下，我们强烈推荐使用 Vuex 来管理应用的状态。</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"访问父级组件实例\"><a href=\"#访问父级组件实例\" class=\"headerlink\" title=\"访问父级组件实例\"></a>访问父级组件实例</h4><p>　　和$root类似，$parent属性可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。<strong><em>(将数据传入自组件的方式达到自组件调用父组件方法或修改属性的方式容易让应用变的难以被理解，并且prop的作用应该是父组件需要传递到子组件的初始数据，而不是用于父子组件间的互相通讯。其实即便是通过$root的方式，也会容易使应用很难被理解，但是这种方式相对来说是要优于使用Prop的方式。)</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;google-map&gt;</span><br><span class=\"line\">  &lt;google-map-marker v-bind:places=<span class=\"string\">\"vueConfCities\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">google-map-marker</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">google-map</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 在子组件调用父组件方法，并传递一个方法引用在父组件的上下文中被调用 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">Vue.component('google-map-marker', &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  props: ['places'],</span></span><br><span class=\"line\"><span class=\"xml\">  created: function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    var vm = this</span></span><br><span class=\"line\"><span class=\"xml\">    vm.$parent.getMap(function (map) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      vm.places.forEach(function (place) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        new google.maps.Marker(&#123;</span></span><br><span class=\"line\"><span class=\"xml\">          position: place.position,</span></span><br><span class=\"line\"><span class=\"xml\">          map: map</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;,</span></span><br><span class=\"line\"><span class=\"xml\">  render (h) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return null</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;)</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"访问子组件实例或子元素\"><a href=\"#访问子组件实例或子元素\" class=\"headerlink\" title=\"访问子组件实例或子元素\"></a>访问子组件实例或子元素</h4><p>　　尽管存在prop和事件，有的时候你仍可能需要在JavaScript里直接访问一个子组件。为了达到这个目的，你可以通过ref特性为这个子组件赋予一个ID引用。ref被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的$refs对象上。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"usernameInput\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　现在在你已经定义了这个ref的组件里，你可以使用访问子组件实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$refs.usernameInput</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　同样在我们的这个base-input子组件中，也可以对组成它的基本元素加上ref属性。如果在普通的DOM元素上使用ref，那么这个引用指向的就是DOM元素。如果用在子组件上，引用就指向组件实例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在base-input的模板DOM元素上添加1 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"input\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- `vm.$refs.p` 是一个DOM对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- `vm.$refs.child` 是一个组件实例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　<strong><em>$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。关于ref 注册时间的重要说明：因为 ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！$refs 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。</em></strong></p>\n<h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>　　前面我们已经提到了父组件和子组件互相持有引用的方式，这类场景在cs的应用程序中很常见，在cs程序的开发中，经常使用一些依赖注入框架解决这类问题，比如在Android中就有Dagger等框架。除此之外，在Web服务端也有此类的需求，在后端经常会出现业务之间的交叉，为了减少代码之间的耦合度，也会使用一些依赖注入框架，使用比较多的应该就是Spring IOC了。看来vue也是仿照此类模式的实现，我们来看看Vue中的依赖注入的使用方式，在之前的例子中，假设父组件和子组件之间又需要加入一个中间组件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">google-map</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">google-map-region</span> <span class=\"attr\">v-bind:shape</span>=<span class=\"string\">\"cityBoundaries\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">google-map-markers</span> <span class=\"attr\">v-bind:places</span>=<span class=\"string\">\"iceCreamShops\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">google-map-markers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">google-map-region</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">google-map</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　由于出现了google-map-region这个组件，并且在这个组件里，所有 <google-map> 的后代都需要访问一个 getMap 方法，以便知道要跟哪个地图进行交互。不幸的是，使用 $parent 属性无法很好的扩展到更深层级的嵌套组件上。这也是依赖注入的用武之地，它用到了两个新的实例选项：provide 和 inject。</google-map></p>\n<p>　　provide 选项允许我们指定我们想要提供给后代组件的数据/方法。在这个例子中，就是 <google-map> 内部的 getMap 方法：</google-map></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">provide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getMap: <span class=\"keyword\">this</span>.getMap</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">inject: [<span class=\"string\">'getMap'</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　相比$parent来说，这个用法可以让我们在任意后代组件中访问getMap，而不需要在每个子组件间中大量的使用$parent。并且这种方式不需要担心我们可能会改变/移除一些子组件依赖的东西，在对原有逻辑进行很小的改动的情况下调用父组件的方式和属性。</p>\n<p>　　<strong><em>然而，依赖注入还是有负面影响的。它将你应用程序中的组件与它们当前的组织方式耦合起来，使重构变得更加困难。同时所提供的属性是非响应式的。这是出于设计的考虑，因为使用它们来创建一个中心化规模化的数据跟使用 $root做这件事都是不够好的。如果你想要共享的这个属性是你的应用特有的，而不是通用化的，或者如果你想在祖先组件中更新所提供的数据，那么这意味着你可能需要换用一个像Vuex这样真正的状态管理方案了。</em></strong></p>\n<h3 id=\"程序化的监听器\"><a href=\"#程序化的监听器\" class=\"headerlink\" title=\"程序化的监听器\"></a>程序化的监听器</h3><p>　　我们已经知道可以使用v-on监听$emit发出的事件，但是有时候我们想要在程序中动态的添加监听器，这时候就可以:</p>\n<ul>\n<li>通过 $on(eventName, eventHandler) 侦听一个事件</li>\n<li>通过 $once(eventName, eventHandler) 一次性侦听一个事件</li>\n<li>通过 $off(eventName, eventHandler) 停止侦听一个事件</li>\n</ul>\n<p>　　如果你需要用的一个三方组件，并在组件挂载的时候进行创建，组件销毁的时候同时对这个三方组件进行销毁，你很有可能编写下面的代码，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一次性将这个日期选择器附加到一个输入框上</span></span><br><span class=\"line\"><span class=\"comment\">// 它会被挂载到 DOM 上。</span></span><br><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Pikaday 是一个第三方日期选择器的库</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.picker = <span class=\"keyword\">new</span> Pikaday(&#123;</span><br><span class=\"line\">    field: <span class=\"keyword\">this</span>.$refs.input,</span><br><span class=\"line\">    format: <span class=\"string\">'YYYY-MM-DD'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 在组件被销毁之前，</span></span><br><span class=\"line\"><span class=\"comment\">// 也销毁这个日期选择器。</span></span><br><span class=\"line\">beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.picker.destroy()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　但是这样的方式会使得组件实例持有三方组件的引用，但其实理论上组件实例是没有必要去持有这样的一个引用，这样的增加组件实例的属性的做法显得有些多余。第二个问题是我们的建立代码和清理代码分离，这样如果之后我们需要清理这个三方组件就需要在组件中清理所有销毁的相关内容。</p>\n<p>　　为了解决上面的两个问题，你应该通过一个程序化的侦听器解决这两个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> picker = <span class=\"keyword\">new</span> Pikaday(&#123;</span><br><span class=\"line\">    field: <span class=\"keyword\">this</span>.$refs.input,</span><br><span class=\"line\">    format: <span class=\"string\">'YYYY-MM-DD'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$once(<span class=\"string\">'hook:beforeDestroy'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    picker.destroy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样，只需要在组件销毁的时候，$emit一个hook:beforeDestroy事件就可以清理这个三方组件了，甚至可以将它们包裹在一个方法里，即使重复引用多个三方组件，也可以一次清理干净，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.attachDatepicker(<span class=\"string\">'startDateInput'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.attachDatepicker(<span class=\"string\">'endDateInput'</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  attachDatepicker: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">refName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> picker = <span class=\"keyword\">new</span> Pikaday(&#123;</span><br><span class=\"line\">      field: <span class=\"keyword\">this</span>.$refs[refName],</span><br><span class=\"line\">      format: <span class=\"string\">'YYYY-MM-DD'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$once(<span class=\"string\">'hook:beforeDestroy'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      picker.destroy()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这里需要理解清楚一点，当我们对同一个事件绑定多个处理函数时，在低版本的vue中是不支持使用v-on的数组形式的，并且我们也不可以在组件的标签上定义重复的v-on属性，所以这时候可以使用$on或者$once这样的方式动态添加多个监听器，这样所有的监听器都可以得到添加和执行，<strong><em>需要搞清楚的一个概念是一个事件可以有多个不同的监听器的，执行顺序是先添加先被执行</em></strong>。</p>\n<p>　　<strong><em>注意 Vue 的事件系统不同于浏览器的 EventTarget API。尽管它们工作起来是相似的，但是 $emit、$on, 和 $off 并不是 dispatchEvent、addEventListener 和 removeEventListener 的别名。</em></strong></p>\n<h3 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h3><h4 id=\"递归组件\"><a href=\"#递归组件\" class=\"headerlink\" title=\"递归组件\"></a>递归组件</h4><p>　　组件是可以在它们自己的模板中调用自身的。不过它们只能通过 name 选项来做这件事：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">name: <span class=\"string\">'unique-name-of-my-component'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 当你使用 Vue.component 全局注册一个组件时，这个全局的 ID 会自动设置为该组件的 name 选项。 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'unique-name-of-my-component'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　虽然递归组件看上去很实用，但是稍有不慎，就有可能导致一个无限循环，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">name: <span class=\"string\">'stack-overflow'</span>,</span><br><span class=\"line\">template: <span class=\"string\">'&lt;div&gt;&lt;stack-overflow&gt;&lt;/stack-overflow&gt;&lt;/div&gt;'</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　类似上述的组件将会导致“max stack size exceeded”错误，所以请确保递归调用是条件性的 (例如使用一个最终会得到 false 的 v-if)。</p>\n<h4 id=\"组件之间的循环引用\"><a href=\"#组件之间的循环引用\" class=\"headerlink\" title=\"组件之间的循环引用\"></a>组件之间的循环引用</h4><p>　　假设你需要构建一个文件目录树，像访达或资源管理器那样的。你可能有一个 <tree-folder> 组件，模板是这样的：</tree-folder></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tree-folder-contents</span> <span class=\"attr\">:children</span>=<span class=\"string\">\"folder.children\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　<tree-folder-contents> 组件，</tree-folder-contents></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"child in children\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tree-folder</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"child.children\"</span> <span class=\"attr\">:folder</span>=<span class=\"string\">\"child\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　当你仔细观察的时候，你会发现这些组件在渲染树中互为对方的后代和祖先——一个悖论！当通过 Vue.component 全局注册组件的时候，这个悖论会被自动解开。如果你是这样做的，那么你可以跳过这里。然而，如果你使用一个模块系统依赖/导入组件，例如通过 webpack 或 Browserify，你会遇到一个错误：</p>\n<blockquote>\n<p> Failed to mount component: template or render function not defined.</p>\n</blockquote>\n<p>　　为了解释这里发生了什么，我们先把两个组件称为A和B。模块系统发现它需要A，但是首先A依赖B，但是B又依赖A，但是A又依赖B，如此往复。这变成了一个循环，不知道如何不经过其中一个组件而完全解析出另一个组件。为了解决这个问题，我们需要给模块系统一个点，在那里“A 反正是需要B的，但是我们不需要先解析B。”</p>\n<p>　　在我们的例子中，把 <tree-folder> 组件设为了那个点。我们知道那个产生悖论的子组件是 <tree-folder-contents> 组件，所以我们会等到生命周期钩子 beforeCreate 时去注册它：</tree-folder-contents></tree-folder></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">beforeCreate: function () &#123;</span><br><span class=\"line\">  this.$options.components.TreeFolderContents = require('./tree-folder-contents.vue').default</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或者，在本地组件注册时候，你可以使用 webpack 的异步 import： --&gt;</span></span><br><span class=\"line\">components: &#123;</span><br><span class=\"line\">  TreeFolderContents: () =&gt; import('./tree-folder-contents.vue')</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这样问题就解决了！ --&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"控制更新\"><a href=\"#控制更新\" class=\"headerlink\" title=\"控制更新\"></a>控制更新</h3><h4 id=\"强制更新\"><a href=\"#强制更新\" class=\"headerlink\" title=\"强制更新\"></a>强制更新</h4><p>　　你可能还没有留意到数组或对象的变更检测注意事项，或者你可能依赖了一个未被Vue的响应式系统追踪的状态。</p>\n<p>　　然而，如果你已经做到了上述的事项仍然发现在极少数的情况下需要手动强制更新，那么你可以通过 $forceUpdate 来做这件事。比如Vue就没法检测对Map的追踪，不过这个问题在3.0版本得到添加。</p>\n<h4 id=\"通过-v-once-创建低开销的静态组件\"><a href=\"#通过-v-once-创建低开销的静态组件\" class=\"headerlink\" title=\"通过 v-once 创建低开销的静态组件\"></a>通过 v-once 创建低开销的静态组件</h4><p>　　渲染普通的 HTML 元素在 Vue 中是非常快速的，但有的时候你可能有一个组件，这个组件包含了大量静态内容。在这种情况下，你可以在根元素上添加 v-once 特性以确保这些内容只计算一次然后缓存起来，就像这样：<strong><em>(虽然响应式很好用，但也要使用在适当的地方哦)</em></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component('terms-of-service', &#123;</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-once</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Terms of Service<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      ... a lot of static content ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　<strong><em>再说一次，试着不要过度使用这个模式。当你需要渲染大量静态内容时，极少数的情况下它会给你带来便利，除非你非常留意渲染变慢了，不然它完全是没有必要的——再加上它在后期会带来很多困惑。例如，设想另一个开发者并不熟悉 v-once 或漏看了它在模板中，他们可能会花很多个小时去找出模板为什么无法正确更新。</em></strong></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>　　这篇在十月份就开始写了，但是一直到十一月差不多中旬才发出来，效率实在是底下，虽然其中有很多其它的事情造成了一些拖延，但是这个速度还是不能被接受。这段时间差不多将近一个半月，陆陆续续抽时间将vue-router、vuex、vue的文档刷了一遍，vue还有小部分没有看，算是对之前的查漏补缺吧，也知道了很多之前没有刻意去了解过的一些细节。接下来的计划大概是先把vue剩下的内容刷完，然后再去研究webpack的文档，webpack实在是太重要了，简直就是前端项目的基石。也不知道等自己刷完这两个内容要多久，不过看了下接下来的开发计划，自己应该是挺闲的。应该可以在年前将这些都搞定。</p>\n<p>　　再接下来的计划可能就很明确了，刷文档的目的当然还是为了开发做铺垫，很多人可能会说我不刷文档也可以愉快的开发呀。但是个人觉得这种方式对于职业来说太不靠谱，很多东西都理解的不透彻，在需求当头的时候就看能用就用了，也不考虑这样做的一些后果，或者说弊端。这对工程来说就是不负责的表现，自己也看了太多这种例子，对这种行为个人是有一些鄙视成分在里面的，虽然人都有一个成长的过程，但我觉得这是习惯问题，或者说态度问题。看多了这种粗制滥造的代码之后只能说，不可能要求每个人做到完美，对自己要求严格就行，不让自己难受就好了。</p>\n<p>　　不知道还会不会写技术博客，自己有点儿动摇，因为有道笔记对我来说明显比md形式的博客更加方便，写完这篇之后自己确实有些动摇了，因为这对自己来说就像是一些笔记，而笔记是只适合个人翻阅的。</p>\n<p>　　em…罗马不是一天建成的，早点休息吧。</p>\n","site":{"data":{}},"excerpt":"<p>　　组件是Vue设计的核心思想，Vue应用也是由一个个组件组成的，组件可以被复用，也可以根据情况动态显示不同的组件。在Vue的组件中，主要包括template、script以及style三个内容，template是编写的组件的html模版(也可以使用JSX)，里面包含的是页面的基础的html内容，可以使用Vue指令去进行一些额外逻辑的处理；script包含Vue组件内部的一些数据，方法，生命周期钩子等；style中是为组件编写的一些css样式，如果在style中加上scope表示这些样式作用域为组件内，如果没有则表示定义的全局样式。</p>","more":"<h2 id=\"组件注册\"><a href=\"#组件注册\" class=\"headerlink\" title=\"组件注册\"></a>组件注册</h2><p>　　Vue的组件需要定义且注册之后才可以与其它组件配合工作，上面叙述的是组件在.vue模板里的书写方式，如果我们直接在JS中全局定义并注册一个Vue组件的方式为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个名为 button-counter 的新组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;button v-on:click=\"count++\"&gt;You clicked me  times.&lt;/button&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>　　当一个组件完成注册之后，就可以被使用在其它组件之中了，全局注册的组件可以在整个Vue应用中使用，比如我们可以在html模板中这样定义，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"components-demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　所有Vue应用仅有一个根实例，根实例与其它组件的区别是它具备一个el属性，这个属性在其它组件中并不存在，el属性用于将vue应用绑定到唯一的DOM节点上。对于一个已经定义并全局注册的组件，你可以在任意一个地方进行复用，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"components-demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　在这里的button-counter组件中，每个组件都维护自己的数据独立工作，当这份数据是从外部传入的时候，这个规则可能不再成立。相同的组件只可能因为数据不同而显示不同的样式，当依赖式数据改动的时候，视图将会被相应更新。所以为了维护每个组件的独立，在组件内部定义data属性的时候，必须使用方法返回一个对象而不能直接定义为一个对象，正确添加data的方式应该是这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　全局注册过的组件在任何地方都可用，但是有时候我们不需要去全局定义一个组件，因为对于很多使用频率较低组件来说，并不需要进行全局注册，只进行局部注册即可，过多的全局注册会导致用户增加下载的JS的体积。对于局部注册的组件，只可以在引入其的组件中使用，不可以在其它组件的模板中使用。局部定义一个组件的方式很简单，在JS中直接定义的方式为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ComponentA = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ComponentB = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ComponentC = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>　　在需要引入其的组件中的components属性中，添加指向这个对象的引用，(局部注册的组件只可以在它自己的模板中使用，不可使用在其子组件中，也就是说，这里同时引入A和B，无法在B的模板中使用A，要想在B中使用A，必须在B中单独引入)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'component-a'</span>: ComponentA,</span><br><span class=\"line\">    <span class=\"string\">'component-b'</span>: ComponentB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>　　或者如果你通过 Babel 和 webpack 使用 ES2015 模块，那么代码看起来更像：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ComponentA <span class=\"keyword\">from</span> <span class=\"string\">'./ComponentA.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    ComponentA</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　在引入局部组件之后，在模板中使用只需要引入其在components中编写的组件属性名称，比如这里定义的属性名称为ComponentA，那么在模板中就可以编写<componenta></componenta>，这样看上去不太符合标准的html标签的写法，所幸的是，Vue中两种写法都支持，当你使用PascalCase的写法的时候，你依然可以在模板中使用<component-a>&lt;/component-a&gt;这样的写法。但如果你本身就在components中使用的是kebab-case这样的写法，那么在模板中你也只能在这里面使用kebab-case这样的写法。</component-a></p>\n<h3 id=\"基础组件全局注册\"><a href=\"#基础组件全局注册\" class=\"headerlink\" title=\"基础组件全局注册\"></a>基础组件全局注册</h3><p>　　对于一些基础组件，这类组件相对比较通用，如果一个个去导入这些组件，那么会导致在很多组件中有大量包含基础组件的长列表，这时候我们想要在全局注册这些组件。如果你使用webpack这类前端打包工具，那么你可以使用<a href=\"https://webpack.js.org/guides/dependency-management/\" target=\"_blank\" rel=\"noopener\">require.context</a>很方便的一次引入大量的基础组件，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> upperFirst <span class=\"keyword\">from</span> <span class=\"string\">'lodash/upperFirst'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> camelCase <span class=\"keyword\">from</span> <span class=\"string\">'lodash/camelCase'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> requireComponent = <span class=\"built_in\">require</span>.context(</span><br><span class=\"line\">  <span class=\"comment\">// 其组件目录的相对路径</span></span><br><span class=\"line\">  <span class=\"string\">'./components'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 是否查询其子目录</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 匹配基础组件文件名的正则表达式</span></span><br><span class=\"line\">  /Base[A-Z]\\w+\\.(vue|js)$/</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">requireComponent.keys().forEach(<span class=\"function\"><span class=\"params\">fileName</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取组件配置</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> componentConfig = requireComponent(fileName)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取组件的 PascalCase 命名</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> componentName = upperFirst(</span><br><span class=\"line\">    camelCase(</span><br><span class=\"line\">      <span class=\"comment\">// 获取和目录深度无关的文件名</span></span><br><span class=\"line\">      fileName</span><br><span class=\"line\">        .split(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        .pop()</span><br><span class=\"line\">        .replace(<span class=\"regexp\">/\\.\\w+$/</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 全局注册组件</span></span><br><span class=\"line\">  Vue.component(</span><br><span class=\"line\">    componentName,</span><br><span class=\"line\">      <span class=\"comment\">// 如果这个组件选项是通过 `export default` 导出的，</span></span><br><span class=\"line\">      <span class=\"comment\">// 那么就会优先使用 `.default`，</span></span><br><span class=\"line\">      <span class=\"comment\">// 否则回退到使用模块的根。</span></span><br><span class=\"line\">      componentConfig.default || componentConfig</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<h2 id=\"组件Prop\"><a href=\"#组件Prop\" class=\"headerlink\" title=\"组件Prop\"></a>组件Prop</h2><h3 id=\"Prop定义和传递\"><a href=\"#Prop定义和传递\" class=\"headerlink\" title=\"Prop定义和传递\"></a>Prop定义和传递</h3><p>　　组件中的数据分成两个部分，一部分是由父组件传递给自己的，就是这里说的Prop，另一部分是自身的数据，也就是data属性定义的部分。在组件中定义一个Prop最简单的方式，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'title'</span>],</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;h3&gt;Vue基础 - 组件&lt;/h3&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>  \n<p>　　最简单的在父组件中为其赋值的方式，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;blog-post title=<span class=\"string\">\"My journey with Vue\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span></span><br><span class=\"line\">&lt;blog-post title=\"Blogging with Vue\"&gt;&lt;/blog-post&gt;</span><br><span class=\"line\">&lt;blog-post title=\"Why Vue is so fun\"&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure>  \n<p>　　一个组件可以拥有任意数量的Prop，在组件中访问Prop的属性的方式和data属性一样，这里的title不仅可以是字符串，可以是任何类型的值(对象，数组，布尔值…)。更方便的是，可以配合使用v-for去遍历生成一个子组件列表，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"post in posts\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　一个需要注意的地方是，在HTML中DOM是不区分大小写的，也就是说浏览器会把所有大写字母解释为小写字母，如果使用DOM中的模板，如果需要对camel-case格式的prop赋值必须在模板中用与其等价的kebab-case命名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component('blog-post', &#123;</span><br><span class=\"line\">  // 在 JavaScript 中是 camelCase 的</span><br><span class=\"line\">  props: ['postTitle'],</span><br><span class=\"line\">  template: '<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">post-title</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　但是如果使用字符串模板，那么这条限制就不存在了，那么什么是字符串模板什么是DOM模板呢？DOM模板是指能被浏览器解析的模板，DOM模板和元素的html混合在一起进行定义，比如下面的例子，id为demo的div既是位于html中，又作为vue的一个组件被定义，这就被称为DOM模板，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- html模板 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"i love jack\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:customId</span>=<span class=\"string\">\"id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> obj = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      message: <span class=\"string\">'hello,world'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      id: <span class=\"string\">'JS脚本模板'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      el: <span class=\"string\">'#demo'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      data: obj,</span></span><br><span class=\"line\"><span class=\"javascript\">      prop: [<span class=\"string\">'title'</span>]</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　字符串模板是定义在js代码中用字符串包裹起来进行定义的vue组件，这种方式被称为字符串模板，比如下面的全局注册和局部组件定义都是字符串模板的使用方式，<strong><em>(注意，通过字符串模板定义的元素，会替换挂载的元素)</em></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"template\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"x-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"optioncompTemp\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">         <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      props: [<span class=\"string\">'param'</span>],</span></span><br><span class=\"line\"><span class=\"undefined\">      template: `</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>A custom component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">      `</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      el: <span class=\"string\">'#template'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">'donghai'</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      components: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'se-com'</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          props: [<span class=\"string\">'param'</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">          template: <span class=\"string\">'#optioncompTemp'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 字符串模板，替换全部的模板，内联字符串模板</span></span></span><br><span class=\"line\"><span class=\"undefined\">      template: `</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &lt;tr is=<span class=\"string\">\"my-component\"</span> :param=<span class=\"string\">\"name\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">        &lt;tr is=<span class=\"string\">\"se-com\"</span> :param=<span class=\"string\">\"name\"</span> &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">se-com</span> <span class=\"attr\">:param</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">se-com</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">      `</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　除了DOM模板和字符串模板之外，在vue中还存在着内联字符串模板以及JS脚本模板模板，内联字符串模板指的是，在一个组件内部引用其它组件的时候，这个被引入的子组件也是直接用字符串表示，而非来自其它形式(如导入一个模板等)方式的引入，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">'#template'</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'donghai'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        <span class=\"string\">'se-com'</span>: &#123;</span><br><span class=\"line\">          props: [<span class=\"string\">'param'</span>],</span><br><span class=\"line\">          template: <span class=\"string\">`&lt;div&gt;我是第二个组件&lt;/div&gt;`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 字符串模板，替换挂载元素</span></span><br><span class=\"line\">      template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;ol&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;tr is=\"my-component\" :param=\"name\"&gt;&lt;/tr&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;tr is=\"se-com\" :param=\"name\" &gt;&lt;/tr&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;se-com :param=\"name\"&gt;&lt;/se-com&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ol&gt;</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<p>　　JS脚本模板指的是使用script标签去声明一个组件的模板，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">is</span>=<span class=\"string\">\"optioncomp\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--模板内容存放区域--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"optioncompTemp\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      components: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'optioncomp'</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          template: <span class=\"string\">'#optioncompTemp'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　但是如果我们使用文件模板，即xxx.vue的方式，在前端工程中就不存在上面提到的大小写的问题了。除此之外，vue模板中定义的组件在一些特定的标签下受到限制，例如<strong><em>ul、ol、table、select</em></strong>这样的元素里允许包含的元素有限制，而另一些像<strong><em>option</em></strong>这样的元素只能出现在某些特定元素的内部。下面这样的方式是不被允许的，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-row</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">my-row</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　这时候自定义组件my-row会被当成无效的内容，这时候需要使用到特殊的is属性，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　另外这个特殊的标签限制只会的一些内容有效，对于下面的情况，则可以在这些被限制的标签中使用自定义模板，</p>\n<ul>\n<li>内联字符串模板</li>\n<li>单文件组件 (.vue)</li>\n<li>JS脚本模板</li>\n</ul>\n<h3 id=\"静态传递和动态传递\"><a href=\"#静态传递和动态传递\" class=\"headerlink\" title=\"静态传递和动态传递\"></a>静态传递和动态传递</h3><p>　　我们知道可以这样传递到组件中一个静态的值，而且它总是一个字符串类型，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">title</span>=<span class=\"string\">\"My journey with Vue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　通过v-bind进行动态赋值，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态赋予一个变量的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title + ' by ' + post.author.name\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<p>　　对于静态赋值，有时候我们想要传递一个数字类型或者布尔类型的时候，是无法做到的，所以这时候我们必须使用动态赋值的方式传递一个js表达式，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind:likes</span>=<span class=\"string\">\"42\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 包含该 prop 没有值的情况在内，都意味着 `true`。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">is-published</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即便 `false` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind:is-published</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即便数组是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind:comment-ids</span>=<span class=\"string\">\"[234, 266, 273]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即便对象是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:author</span>=<span class=\"string\">\"&#123;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    name: 'Veronica',</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    company: 'Veridian Dynamics'</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">  &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<p>　　如果你想要在组件中同时定义多个属性，但又不希望把它们都放置在一个对象中，这时候你可能需要写很多赋值语句，vue提供了不带参数的v-bind指令帮助你一次传递一个对象的所有属性，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"post\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">等价于:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><p>　　Vue中所有的数据在父组件和自组件中是单向下行绑定的，这意味着，父组件中修改传递到子组件中的prop时，子组件中的数据同样会被修改，但是反之却不行。这样的目的是为了防止子组件的改动影响到父组件中的数据，会导致应用的数据流向难以理解。Vue这样设计是很合理的，因为有时候我们不希望子组件的改动影响到父组件的数据，只有在必要的时候才去这么做，这样使我们对数据具备更多的可控性。</p>\n<p>　　另外在Vue中如果你在子组件中修改了prop，那么控制台会提示一个警告，意味着你不应该这么做。从父组件传递到子组件的prop一般有下面两个用处，</p>\n<p>　　1. 用于传递一个初始值，子组件依赖这个初始值去进行组件的渲染，并将其当作一个本地数据使用。这时候你应该拷贝一份数据到本地，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: [<span class=\"string\">'initialCounter'</span>],</span><br><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    counter: <span class=\"keyword\">this</span>.initialCounter</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>  </p>\n<p>　　2. 这个prop不需要修改，只是用于读取，但是子组件需要修改传递过来的数据源，这时候可以将其设置为一个计算属性，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: [<span class=\"string\">'size'</span>],</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  normalizedSize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size.trim().toLowerCase()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>  \n<p>　　<strong><em>对于对象类型或者数组类型的prop，在从父组件传递到组件中的时候，变量的类型是引用，也就是指向对象和数组的地址，这时候上面的单向数据流就不成立了。就是说单向数据流法则仅当你传递的是一个非对象和数组类型的值的时候才成立，否则子组件和父组件一样会将数据的修改影响到对方。</em></strong></p>\n<h3 id=\"Prop验证\"><a href=\"#Prop验证\" class=\"headerlink\" title=\"Prop验证\"></a>Prop验证</h3><p>　　有时候我们在编写一个组件的时候，自己一般知道需要往里面传递什么类型的值，或者这个Prop的一些限制，但是后面的开发者并不知道这时候需要怎么传递，你可以为这些Prop添加一个验证帮助其它开发者检验错误，当prop验证失败的时候，(开发环境构建版本的)Vue 将会产生一个控制台的警告。如果需要对Prop检查错误，就必须使用对象的语法形式而非数组，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class=\"line\">    propA: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 多个可能的类型</span></span><br><span class=\"line\">    propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 必填的字符串</span></span><br><span class=\"line\">    propC: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 带有默认值的数字</span></span><br><span class=\"line\">    propD: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 带有默认值的对象</span></span><br><span class=\"line\">    propE: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 自定义验证函数</span></span><br><span class=\"line\">    propF: &#123;</span><br><span class=\"line\">      validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个值必须匹配下列字符串中的一个</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">'success'</span>, <span class=\"string\">'warning'</span>, <span class=\"string\">'danger'</span>].indexOf(value) !== <span class=\"number\">-1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<p>　　<strong><em>Prop验证发生在组件创建前，也就是说，组件的Prop中的default和validator不可以使用定义在组件data、computed、methods中的属性和方法</em></strong></p>\n<p>　　type可以是下面原生构造函数中的一个：</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Array</li>\n<li>Object</li>\n<li>Date</li>\n<li>Function</li>\n<li>Symbol</li>\n</ul>\n<p>　　除了这些默认的构造函数，你也可以使用自定义构造函数进行类型的检查，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">firstName, lastName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.firstName = firstName</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lastName = lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    author: Person</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>  \n<h3 id=\"非Prop特性\"><a href=\"#非Prop特性\" class=\"headerlink\" title=\"非Prop特性\"></a>非Prop特性</h3><p>　　非Prop特性这个名字听起来不容易被理解，简单来说，就是指那些在组件中的props属性中没有被声明的，但是又在父组件中向子组件传递的属性。比如下面的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-comp</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"learn vue\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mycls\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.component(<span class=\"string\">'my-comp'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        template: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>  \n<p>　　这里的my-comp组件中并未定义data-title这个prop，但是又向my-comp标签传递了这个属性，这时候会在这个组件的根元素上添加这个属性，所以这个地方会最终被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"learn vue\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mycls\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这里包括class和style都属于非Prop特性，但不同的是，对于class和style这类非Prop特性，vue有做特殊的处理，前面在Class和Style绑定的时候也提到了，模板中定义的class和style和在模板中传递的值会被合并而不是简单的覆盖。对于其它非Prop特性来说，如果在组件中定义了这个属性，又接着传递了该属性，那么这个非Prop属性会被传递的值覆盖，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.component(<span class=\"string\">'my-comp'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        template: '<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">type</span>=<span class=\"string\">\"inital\"</span>&gt;</span>我是组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-comp</span> <span class=\"attr\">type</span>=<span class=\"string\">\"changed\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　最后这里会被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">type</span>=<span class=\"string\">\"changed\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　当然，有时候你不想要传递的非Prop属性覆盖掉组件中定义的值，你可以组件的选项中设置 inheritAttrs: false去达到这个目的，这样，所有的非Prop属性都不会出现在最后组件根元素的DOM节点上，覆盖也就根本不存在了，<strong><em>(inheritAttrs: false不会影响class和style的绑定)</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  inheritAttrs: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　那么，我们如何去获取到这些非Prop属性的值呢，vue提供了<a href=\"https://vuejs.org/v2/api/#vm-attrs\" target=\"_blank\" rel=\"noopener\">$attrs</a>为我们做到了这一点，$attrs是一个包含所有非Prop属性的对象，<strong><em>(不包括class和style)</em></strong>，如果这样如果我们想要将一个非Prop属性绑定到组件的非根元素上时，使用这个属性将变的非常方便，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component('base-input', &#123;</span><br><span class=\"line\">  inheritAttrs: false,</span><br><span class=\"line\">  props: ['label', 'value'],</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$attrs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"value\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">在base-input标签中</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-model</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">required</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这里将会被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      \"required\": \"\",</span><br><span class=\"line\">      \"placeholder\": \"Enter your username\"</span><br><span class=\"line\">    &#125;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span>=<span class=\"string\">\"required\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样你使用基础自定义组件就像是原始的HTML元素一样，避免了不必要的代码逻辑<strong><em>(添加多余的prop)</em></strong>。</p>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><h3 id=\"事件名\"><a href=\"#事件名\" class=\"headerlink\" title=\"事件名\"></a>事件名</h3><p>　　自定义事件名称不像Prop一样存在大小写转换的可能，我们需要精确的匹配一个自定义事件的名称，才可以触发自定义事件的监听器。比如手动触发一个事件，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'myEvent'</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　如果去监听这个自定义事件的kebab-case是不会有任何效果的，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 没有效果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:my-event</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　除此之外，<strong><em>在DOM模板中</em></strong>，v-on指令后面如果定义的是myEvent的话，同样这里的myEvent也会被解析为myevent，这种情况下也会导致myEvent监听器无法被触发，所以不推荐使用camelCase的事件命名，尽可能使用kebab-case的命名方式。</p>\n<h3 id=\"自定义组件的v-model\"><a href=\"#自定义组件的v-model\" class=\"headerlink\" title=\"自定义组件的v-model\"></a>自定义组件的v-model</h3><p>　　我们知道，v-model指令可以将组件的行为数据同步到绑定到的data，而v-model的实现原理就是在我们需要在对应的组件上监听原生的DOM事件并使用$emit发出一个自定义事件，然后v-model会在这个对应的自定义事件的监听器中修改绑定的data。v-model默认监听的是原生的input事件以及原生DOM的value属性，但不同的输入组件的事件和属性值会有不同，如果需要改变它的默认行为可以这样做，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component('base-checkbox', &#123;</span><br><span class=\"line\">  model: &#123;</span><br><span class=\"line\">    prop: 'checked',</span><br><span class=\"line\">    event: 'change'</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    checked: Boolean</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:checked</span>=<span class=\"string\">\"checked\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-on:change</span>=<span class=\"string\">\"$emit('change', $event.target.checked)\"</span>&gt;</span>`</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　注意，根据之前所述，如果你需要对checked使用v-bind，必须在props中进行声明。</p>\n<h3 id=\"绑定原生事件\"><a href=\"#绑定原生事件\" class=\"headerlink\" title=\"绑定原生事件\"></a>绑定原生事件</h3><p>　　我们都知道v-on可以绑定事件监听器，但是这个的指令的例子中很多在组件标签中监听的是emit的input、change事件啦，在组件的一些原生的html元素中监听的也是input、change事件，这时候开发者会感到迷惑，那么什么时候监听原生的事件什么时候监听的是自定义的事件呢？它们的用法好像看上去没有区别。这时候我们需要借助官方文档的力量帮我们解除迷惑，</p>\n<blockquote>\n<p><strong><em>用在普通元素上时，只能监听原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。</em></strong></p>\n</blockquote>\n<p>　　看到这里恍然大悟，这就是说，在普通元素上v-on只可以监听原生的事件，如果使用在自定义元素上的时候，两者都可以，这时候默认监听自定义事件，但是如果需要去监听原生的事件需要加上<strong><em>.native</em></strong>修饰符。</p>\n<p>　　在监听原生事件的时候，监听器处理方法只有事件原生对象为唯一的参数。如果使用内联语句，在语句中可以访问一个$event属性，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">v-on:click=<span class=\"string\">\"handle('ok', $event)\"</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在使用v-on监听自定义事件的时候，不像监听原生事件一样有一个事件原生对象，这种情况只存在一个从<span>$emit</span>传递过来的额外的参数，有趣的是，这两种方式都使用$event作为传递的变量名称，<strong><em>(虽然都被写为$event，但是含义却大不一样，一个是原生的事件对象，一个是负载信息)</em></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 内联语句，$event只是负载信息，如果需要标识DOM，可以添加data-属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis(123, $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 也可以直接绑定到一个方法变量，第一个参数就是这个负载信息 --&gt;</span></span><br><span class=\"line\">this.$emit('give-advice',  &#123; detail: detailInfo &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"emit-example-argument\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">magic-eight-ball</span> <span class=\"attr\">v-on:give-advice</span>=<span class=\"string\">\"showAdvice\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">magic-eight-ball</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这里的advice的值为  &#123; detail: detailInfo &#125; --&gt;</span></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '#emit-example-argument',</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    showAdvice: function (advice) &#123;</span><br><span class=\"line\">      alert(advice)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　理解了v-on的使用方式，我们可以轻松的绑定一个原生事件，但是我们在自定义组件上使用v-on.native的时候，只会将这个事件绑定到组件的根元素上，对于有些情况来说，这样的绑定会失效，比如下面这样的自定义组件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$attrs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"$emit('input', $event.target.value)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　姑且将其称之为base-input，如果我们在这个base-input上监听一个focus事件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span> <span class=\"attr\">v-on:focus.native</span>=<span class=\"string\">\"onFocus\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　对于这种情况，由于label并不是focusable元素，所以对这个标签添加focus监听器是没有作用的，这时候这个focus监听器并不会被添加到input元素上去，我们的v-on:focus.native也就会起不到任何作用。针对这种情况，Vue提供了一个 <span>$listeners</span>属性，$listeners是一个对象，包含了绑定到这个组件上的根元素的所有事件监听器，<strong><em>(不包括通过.native修饰符添加的监听器，且$listeners仅在2.4+中可用)</em></strong>，一个<base-input>如果有如下的定义，</base-input></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span> <span class=\"attr\">v-on:mouseover</span>=<span class=\"string\">\"handleMouseOver\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"handleClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样这个$listeners在组件内的值为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mouseover: handleMouseOver(event) &#123; ... &#125;</span><br><span class=\"line\">  click: handleClick(value) &#123; ... &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　所以如果我们需要在组件的子元素绑定一些原生事件，配合上计算属性可以进行一个自定义的添加，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'base-input'</span>, &#123;</span><br><span class=\"line\">  inheritAttrs: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'label'</span>, <span class=\"string\">'value'</span>],</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    inputListeners: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">      <span class=\"comment\">// `Object.assign` 将所有的对象合并为一个新对象</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 我们从父级添加所有的监听器</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$listeners,</span><br><span class=\"line\">        <span class=\"comment\">// 然后我们添加自定义监听器，</span></span><br><span class=\"line\">        <span class=\"comment\">// 或覆写一些监听器的行为</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 这里确保组件配合 `v-model` 的工作</span></span><br><span class=\"line\">          input: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            vm.$emit(<span class=\"string\">'input'</span>, event.target.value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;label&gt;</span></span><br><span class=\"line\"><span class=\"string\">      </span></span><br><span class=\"line\"><span class=\"string\">      &lt;input</span></span><br><span class=\"line\"><span class=\"string\">        v-bind=\"$attrs\"</span></span><br><span class=\"line\"><span class=\"string\">        v-bind:value=\"value\"</span></span><br><span class=\"line\"><span class=\"string\">        v-on=\"inputListeners\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样的话，我们在自定义组件上直接添加监听器就好像在组件子元素上直接添加了原生的监听器，看上去它们就像是一个元素。</p>\n<h3 id=\"sync-修饰符\"><a href=\"#sync-修饰符\" class=\"headerlink\" title=\".sync 修饰符\"></a>.sync 修饰符</h3><p>　　之前我们已经在Prop中编写了Vue中组件的单向数据流向，但有时候我们希望改变这个特性，将数据进行双向绑定，使用v-model是一种方式，但其本质是通过自定义事件的监听器去实现的。v-model是针对组件的行为进行的双向绑定，对于一些更加通用的做法，Vue推荐使用update:myPropName的模式去达到这个目的。什么是update:myPropName模式呢？简而言之就是子组件内发出一个update:myPropName的事件，附带上myProp的新值，并在组件根元素上添加这个自定义事件的监听器进行修改。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件中 --&gt;</span></span><br><span class=\"line\">this.$emit('update:title', newTitle)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 根组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"doc.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:update:title</span>=<span class=\"string\">\"doc.title = $event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　为了方便，Vue提供了.sync 修饰符，也就是说，被.sync修饰符修饰过的变量，只需要在子组件中发出”update:title”这个事件就可以实现数据的双向绑定了。.sync的用法，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind:title.sync</span>=<span class=\"string\">\"doc.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 设置多个prop的时候 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind.sync</span>=<span class=\"string\">\"doc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　完整的使用方式，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:open.sync</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"open\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"$emit('update:open', $event.target.value)\"</span>&gt;</span></span><br><span class=\"line\">    open: </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　说白了，.sync修饰符就是语法糖，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">:open.sync=<span class=\"string\">\"state\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 相当于 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">:open=<span class=\"string\">\"state\"</span> @update:open=<span class=\"string\">\"state = $event\"</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　<strong><em>注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用，以及将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，这是因为在vue需要考虑很多边缘情况</em></strong></p>\n<h2 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h2><p>　　<strong><em>在vue 2.6+中，为插槽这部分内容引入v-slot指令去替代slot和slot-scope，slot和slot-scope已经被废弃，但是在vue2.x中仍然被支持。关于为什么弃用slot-scope，官方在<a href=\"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md\" target=\"_blank\" rel=\"noopener\">这里</a>解释了</em></strong></p>\n<h3 id=\"插槽内容\"><a href=\"#插槽内容\" class=\"headerlink\" title=\"插槽内容\"></a>插槽内容</h3><p>　　在自定义组件中，虽然我们可以通过数据驱动去定义不同的组件，但是很多时候这种方式只能用于有限种情况的使用，或者说已知情况的定义。所以如果我们想要直观的在组件中内嵌一些元素，就像普通的HTML元素一样，并需要灵活的添加任意的元素类型和数目，这时候插槽的作用就体现出来了。Vue采用<slot>标签作为承载这样的内嵌元素的出口，比如你定义一个下面这样的组件，我们称其为navigation-link，</slot></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"nav-link\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在使用组件的时候，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br><span class=\"line\">  Your Profile</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样，在渲染的时候，<slot>部分就会被替代为”Your Profile”。在插槽内不仅可以添加字符串，还可以添加任意html原生元素和自定义组件标签，</slot></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加一个 Font Awesome 图标 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    Your Profile</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 甚至包括自定义组件 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加一个图标的组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">font-awesome-icon</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">font-awesome-icon</span>&gt;</span></span><br><span class=\"line\">    Your Profile</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　如果在navigation-link组件的定义中没有包含slot标签，那么该组件标签起始和结束之前的任何内容都会被丢弃。</p>\n<h3 id=\"后备内容\"><a href=\"#后备内容\" class=\"headerlink\" title=\"后备内容\"></a>后备内容</h3><p>　　对于一个插槽来说，后备内容是在组件被使用时使用者并未为插槽提供任何内容时显示的内容，可以被称为插槽默认内容。比如定义一个submit-buton组件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　默认情况下如果我们在引用这个组件时，直接像下面这样使用，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">submit-button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">submit-button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　会被渲染为，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">  Submit</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　当提供内容的时候，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">submit-button</span>&gt;</span></span><br><span class=\"line\">  Save</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">submit-button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　则这个提供的内容将会被渲染从而取代后备内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">  Save</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"　具名插槽\"></a>　具名插槽</h3><p>　　有时候我们需要将多个插槽定义在组件的不同位置，比如下面的base-layout组件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把页头放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把主要内容放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们希望把页脚放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　对于这种情况，我们在定义slot的时候，需要用到一个特殊的属性name，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　不带name的slot出口会带有隐含的名字”default”，对于使用了具名插槽的组件，需要配合template元素使用v-slot指令提供插槽名称的方式去提供插槽内容，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面和上面的方式结果相同，只不过是一个显示的指定了default，另一个使用默认的方式提供默认插槽的内容 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　注意 v-slot 只能添加在一个template标签上 (只有一种例外情况，下文会提到，为默认插槽添加插槽Prop的时候，在组件标签上添加v-slot)，这一点和已经废弃的 slot 特性不同。</p>\n<h3 id=\"编译作用域\"><a href=\"#编译作用域\" class=\"headerlink\" title=\"编译作用域\"></a>编译作用域</h3><p>　　有时候你可能会想在插槽中使用一些这个插槽所属组件内部的数据，比如，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br><span class=\"line\">  Clicking here will send you to: </span><br><span class=\"line\">  <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">  这里的 `url` 会是 undefined，因为 \"/profile\" 是</span></span><br><span class=\"line\"><span class=\"comment\">  _传递给_ &lt;navigation-link&gt; 的而不是</span></span><br><span class=\"line\"><span class=\"comment\">  在 &lt;navigation-link&gt; 组件*内部*定义的。</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　官方对这个编译作用域的解释有点难以理解，而且也会涉及到之前的后备插槽的内容，所以我有意将后备插槽以及具名插槽提到这部分前面，便于结合这两部分一起解释这个编译作用域。</p>\n<p>　　先说结论，我们使用插槽添加内容时，这部分我们自定义的内容只可以访问和它本身所处同一模板文件的数据作用域，而不可以访问这个插槽所作用的组件内部的数据作用域。而当我们使用后备内容的时候，后备内容是处于在组件内部的模板定义，所以后备内容只可以访问组件内部的数据作用域，不可以访问组件外部的数据作用域，这两者恰好相反。这时候就很好的可以理解官方的一句话了，</p>\n<blockquote>\n<p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p>\n</blockquote>\n<p>　　我们通过下面的例子可以去理解这种情况，在组件child定义四个具名插槽，这两个具名插槽都的后备内容分别使用内部和外部两个变量，然后再在</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 定义下面的内容 --&gt;</span><br><span class=\"line\">  Vue.component(<span class=\"string\">'child'</span>, &#123;</span><br><span class=\"line\">  \ttemplate: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    \t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"second\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"third\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"forth\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     \t\tinnerMsg: <span class=\"string\">\"内部定义的第一个值\"</span>,</span><br><span class=\"line\">        secondInnerMsg: <span class=\"string\">\"内部定义的第二个值\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      outerMsg: <span class=\"string\">'外部定义的一个值'</span>,</span><br><span class=\"line\">      secondOuterMsg: <span class=\"string\">\"外部定义的第二个值\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　以及对应的html模板，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:second</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:third</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:forth</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　渲染结果，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>内部定义的第一个值   外部定义的第二个值<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 另外控制有如下的显示，</span></span><br><span class=\"line\"><span class=\"comment\">  Property or method \"outerMsg\" is not defined on the instance but referenced during render</span></span><br><span class=\"line\"><span class=\"comment\">  Property or method \"secondInnerMsg\" is not defined on the instance but referenced during render.</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><p>　　从上面的解释我们知道，后备插槽和自定义的插槽具有独立的作用域，互相都无法访问彼此的作用内容。但数据是可以从父组件流向自组件的，也就是说，虽然子组件中不存在对应的数据，但是可以当数据从父组件中传递到子组件后，在后备插槽中也可以获取到了。但是问题是父组件中无法获取到子组件的数据，如果当我们需要在自定义插槽中使用到子组件的数据的时候，这时候需要借助插槽Prop，也就是作用域插槽，借助官方的例子来说明作用域插槽的使用，有一个current-user组件，它的插槽中存在这样一个后备插槽，后备内容显示用户的名，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　如果正常情况下我们想要它显示用户的姓，但是user是组件内的值，下面的做法肯定是没有作用的，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; user.firstName &#125;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　为了让user在父级的插槽内容中可用，我们可以将user作为<slot>元素的一个特性绑定上去：</slot></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">v-bind:user</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在组件内部的插槽处绑定了属性之后，可以给v-slot带上一个值来定义我们提供的插槽prop的名字，插槽prop对象的命名可以随意，没有过多的约束，这里我们将其命名为slotProps，之后可以使用这个插槽prop对象去访问之前绑定在插槽上的prop，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　如果被提供的内容只有默认插槽的时候，可以直接将插槽prop对象的命名放到组件的标签上，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot:default</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 由于是默认模板，还可以简写为 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\">　　</span><br></pre></td></tr></table></figure>\n<p>　　上面简写的方式仅仅可用于仅存在默认插槽的情况，不可以和具名插槽混用，因为每个插槽都有自己独立的Prop对象，这样会导致插槽Prop作用域不明确，如果存在多个插槽的情况，应该使用完整的基于template标签的语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:other</span>=<span class=\"string\">\"otherSlotProps\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　作用域插槽的内部工作原理是将你的插槽内容包括在一个传入单个参数的函数里，在环境支持的情况下(单文件组件或现代浏览器)，另一种获取插槽prop对象的方式是对其进行解构赋值，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"&#123; user &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用es6结构赋值对prop进行重命名 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"&#123; user: person &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在组件内部值不存在的时候，使用结构赋值传递一个默认值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">\"&#123; user = &#123; firstName: 'Guest' &#125; &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"动态插槽名\"><a href=\"#动态插槽名\" class=\"headerlink\" title=\"动态插槽名\"></a>动态插槽名</h3><p>　　在2.6.0+中，可以在v-slot上使用动态指令参数，定义动态的插槽名，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:</span>[<span class=\"attr\">dynamicSlotName</span>]&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"具名插槽的缩写\"><a href=\"#具名插槽的缩写\" class=\"headerlink\" title=\"具名插槽的缩写\"></a>具名插槽的缩写</h3><p>　　和v-on以及v-bind一样，v-slot也有缩写，即把参数之前的所有内容(v-slot:)替换为字符#。例如v-slot:head，可以被重写为#header，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　该缩写只其在有参数的时候才可用，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这样会触发一个警告，且这样的语法是无效的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> #=<span class=\"string\">\"&#123; user &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 正确的写法为: --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">current-user</span> #<span class=\"attr\">default</span>=<span class=\"string\">\"&#123; user &#125;\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">current-user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"废弃的语法\"><a href=\"#废弃的语法\" class=\"headerlink\" title=\"废弃的语法\"></a>废弃的语法</h3><p>　　前文提过，v-slot是在vue2.6+被支持的语法，之前的语法可以去参照<a href=\"https://cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h2 id=\"动态组件-amp-异步组件\"><a href=\"#动态组件-amp-异步组件\" class=\"headerlink\" title=\"动态组件 &amp; 异步组件\"></a>动态组件 &amp; 异步组件</h2><p>　　有时候，我们可能在一个元素上根据条件显示不同的组件，这时候我们可能会想要使用v-if去根据数据的不同动态渲染不同的组件。除此之外，同时vue还提供了动态组件去实现这个需求，一个经典的案例如下，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 已经注册的组件 --&gt;</span></span><br><span class=\"line\">Vue.component('tab-home', &#123;</span><br><span class=\"line\">\ttemplate: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component('tab-posts', &#123;</span><br><span class=\"line\">\ttemplate: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Posts component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component('tab-archive', &#123;</span><br><span class=\"line\">\ttemplate: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Archive component<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dynamic-component-demo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"tab in tabs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"tab.name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"['tab-button', &#123; active: currentTab.name === tab.name &#125;]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"currentTab = tab\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentTab.component\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"tab\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vue根组件 --&gt;</span></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '#dynamic-component-demo',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentTab: 'Home',</span><br><span class=\"line\">    tabs: ['Home', 'Posts', 'Archive']</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    currentTabComponent: function () &#123;</span><br><span class=\"line\">      return 'tab-' + this.currentTab.toLowerCase()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　通过在这个特殊的component标签上添加is属性，我们实现了在一个元素上动态渲染不同组件的功能。这里的currentTabComponent不仅是可以指向已经注册组件的名称，还可以指向一个组件的选项对象，另一种使用例子可以看<a href=\"https://jsfiddle.net/chrisvfritz/b2qj69o1/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>　　从上面我们得知我们可以使用动态组件根据条件在同一个位置渲染不同的组件，但是在不同的组件间进行切换的时候会导致这个组件会被重新渲染，这样在之前的页面进行的一些修改将不会被保留下来。要保留之前组件的状态的，可以使用vue提供的keep-alive元素，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 失活的组件将会被缓存！--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentTabComponent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　使用例子可以看<a href=\"https://jsfiddle.net/chrisvfritz/Lp20op9o/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>　　在大型应用中，我们可能需要将应用分割成一些小的块，并且只有在需要的时候才从服务器中加载，而不是一次将所有需要的内容都加载下来。而通过这种方式进行条件加载的组件被称为异步组件，vue通过允许你使用一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义，且vue只有在这个组件需要被渲染的时候才发触发这个工厂函数的执行，并将结果缓存起来提供到接下来的重渲染，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'async-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 向 `resolve` 回调传递组件定义</span></span><br><span class=\"line\">    resolve(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　但这种编写在vue的方式并不实用，因为我们依然没有减少下载js代码的体积，并让代码的维护性和重构性变的很不友好，所以一般需要配合<a href=\"https://webpack.js.org/guides/code-splitting/\" target=\"_blank\" rel=\"noopener\">webpack的code-splitting功能</a>进行一起使用，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这个特殊的 `require` 语法将会告诉 webpack</span></span><br><span class=\"line\">  <span class=\"comment\">// 自动将你的构建代码切割成多个包，这些包</span></span><br><span class=\"line\">  <span class=\"comment\">// 会通过 Ajax 请求加载</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在上述情况下，你也使用返回一个Promise的方式去异步加载这个组件，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 全局注册 --&gt;</span><br><span class=\"line\">Vue.component(</span><br><span class=\"line\">  <span class=\"string\">'async-webpack-example'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 这个 `import` 函数会返回一个 `Promise` 对象。</span></span><br><span class=\"line\">  () =&gt; <span class=\"keyword\">import</span>(<span class=\"string\">'./my-async-component'</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">&lt;!-- 局部注册 --&gt;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'my-component'</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./my-async-component'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　在vue 2.3 +中，加载异步组件的时候，vue支持返回一个包含如下格式的对象去处理在加载过程中组件显示的内容，<strong><em>(如果你希望在Vue-Router中使用下面的语法的话，需要vue-router 2.4 + )</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> AsyncComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要加载的组件 (应该是一个 `Promise` 对象)</span></span><br><span class=\"line\">  component: <span class=\"keyword\">import</span>(<span class=\"string\">'./MyComponent.vue'</span>),</span><br><span class=\"line\">  <span class=\"comment\">// 异步组件加载时使用的组件</span></span><br><span class=\"line\">  loading: LoadingComponent,</span><br><span class=\"line\">  <span class=\"comment\">// 加载失败时使用的组件</span></span><br><span class=\"line\">  error: ErrorComponent,</span><br><span class=\"line\">  <span class=\"comment\">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span></span><br><span class=\"line\">  delay: <span class=\"number\">200</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 如果提供了超时时间且组件加载也超时了，</span></span><br><span class=\"line\">  <span class=\"comment\">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span></span><br><span class=\"line\">  timeout: <span class=\"number\">3000</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"处理边界情况\"><a href=\"#处理边界情况\" class=\"headerlink\" title=\"处理边界情况\"></a>处理边界情况</h2><h3 id=\"访问元素-amp-组件\"><a href=\"#访问元素-amp-组件\" class=\"headerlink\" title=\"访问元素 &amp; 组件\"></a>访问元素 &amp; 组件</h3><p>　　在大多数情况下，在一个Vue应用中是不需要直接操作DOM的，但是对于一些情况则不是这样，比如当我们引入一个三方组件的时候，这时候很有可能需要直接操作DOM去达到业务需求。</p>\n<h4 id=\"访问根实例\"><a href=\"#访问根实例\" class=\"headerlink\" title=\"访问根实例\"></a>访问根实例</h4><p>　　在每个new Vue实例的组件中，其根实例可以通过$root属性进行访问。比如在下面的例子中，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vue 根实例</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    baz: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 通过$root，所有的子组件都可以将这个实例当作一个全局的store来使用 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取根组件的数据</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$root.foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入根组件的数据</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$root.foo = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问根组件的计算属性</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$root.bar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用根组件的方法</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$root.baz()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 对于 demo 或非常小型的有少量组件的应用来说这是很方便的。</span><br><span class=\"line\">    不过这个模式扩展到中大型应用来说就不然了。</span><br><span class=\"line\">    因此在绝大多数情况下，我们强烈推荐使用 Vuex 来管理应用的状态。</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"访问父级组件实例\"><a href=\"#访问父级组件实例\" class=\"headerlink\" title=\"访问父级组件实例\"></a>访问父级组件实例</h4><p>　　和$root类似，$parent属性可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。<strong><em>(将数据传入自组件的方式达到自组件调用父组件方法或修改属性的方式容易让应用变的难以被理解，并且prop的作用应该是父组件需要传递到子组件的初始数据，而不是用于父子组件间的互相通讯。其实即便是通过$root的方式，也会容易使应用很难被理解，但是这种方式相对来说是要优于使用Prop的方式。)</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;google-map&gt;</span><br><span class=\"line\">  &lt;google-map-marker v-bind:places=<span class=\"string\">\"vueConfCities\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">google-map-marker</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">google-map</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 在子组件调用父组件方法，并传递一个方法引用在父组件的上下文中被调用 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">Vue.component('google-map-marker', &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  props: ['places'],</span></span><br><span class=\"line\"><span class=\"xml\">  created: function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    var vm = this</span></span><br><span class=\"line\"><span class=\"xml\">    vm.$parent.getMap(function (map) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      vm.places.forEach(function (place) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        new google.maps.Marker(&#123;</span></span><br><span class=\"line\"><span class=\"xml\">          position: place.position,</span></span><br><span class=\"line\"><span class=\"xml\">          map: map</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;,</span></span><br><span class=\"line\"><span class=\"xml\">  render (h) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return null</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;)</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"访问子组件实例或子元素\"><a href=\"#访问子组件实例或子元素\" class=\"headerlink\" title=\"访问子组件实例或子元素\"></a>访问子组件实例或子元素</h4><p>　　尽管存在prop和事件，有的时候你仍可能需要在JavaScript里直接访问一个子组件。为了达到这个目的，你可以通过ref特性为这个子组件赋予一个ID引用。ref被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的$refs对象上。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"usernameInput\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　现在在你已经定义了这个ref的组件里，你可以使用访问子组件实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$refs.usernameInput</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　同样在我们的这个base-input子组件中，也可以对组成它的基本元素加上ref属性。如果在普通的DOM元素上使用ref，那么这个引用指向的就是DOM元素。如果用在子组件上，引用就指向组件实例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在base-input的模板DOM元素上添加1 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"input\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- `vm.$refs.p` 是一个DOM对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- `vm.$refs.child` 是一个组件实例 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　<strong><em>$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。关于ref 注册时间的重要说明：因为 ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！$refs 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。</em></strong></p>\n<h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>　　前面我们已经提到了父组件和子组件互相持有引用的方式，这类场景在cs的应用程序中很常见，在cs程序的开发中，经常使用一些依赖注入框架解决这类问题，比如在Android中就有Dagger等框架。除此之外，在Web服务端也有此类的需求，在后端经常会出现业务之间的交叉，为了减少代码之间的耦合度，也会使用一些依赖注入框架，使用比较多的应该就是Spring IOC了。看来vue也是仿照此类模式的实现，我们来看看Vue中的依赖注入的使用方式，在之前的例子中，假设父组件和子组件之间又需要加入一个中间组件，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">google-map</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">google-map-region</span> <span class=\"attr\">v-bind:shape</span>=<span class=\"string\">\"cityBoundaries\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">google-map-markers</span> <span class=\"attr\">v-bind:places</span>=<span class=\"string\">\"iceCreamShops\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">google-map-markers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">google-map-region</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">google-map</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　由于出现了google-map-region这个组件，并且在这个组件里，所有 <google-map> 的后代都需要访问一个 getMap 方法，以便知道要跟哪个地图进行交互。不幸的是，使用 $parent 属性无法很好的扩展到更深层级的嵌套组件上。这也是依赖注入的用武之地，它用到了两个新的实例选项：provide 和 inject。</google-map></p>\n<p>　　provide 选项允许我们指定我们想要提供给后代组件的数据/方法。在这个例子中，就是 <google-map> 内部的 getMap 方法：</google-map></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">provide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getMap: <span class=\"keyword\">this</span>.getMap</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">inject: [<span class=\"string\">'getMap'</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　相比$parent来说，这个用法可以让我们在任意后代组件中访问getMap，而不需要在每个子组件间中大量的使用$parent。并且这种方式不需要担心我们可能会改变/移除一些子组件依赖的东西，在对原有逻辑进行很小的改动的情况下调用父组件的方式和属性。</p>\n<p>　　<strong><em>然而，依赖注入还是有负面影响的。它将你应用程序中的组件与它们当前的组织方式耦合起来，使重构变得更加困难。同时所提供的属性是非响应式的。这是出于设计的考虑，因为使用它们来创建一个中心化规模化的数据跟使用 $root做这件事都是不够好的。如果你想要共享的这个属性是你的应用特有的，而不是通用化的，或者如果你想在祖先组件中更新所提供的数据，那么这意味着你可能需要换用一个像Vuex这样真正的状态管理方案了。</em></strong></p>\n<h3 id=\"程序化的监听器\"><a href=\"#程序化的监听器\" class=\"headerlink\" title=\"程序化的监听器\"></a>程序化的监听器</h3><p>　　我们已经知道可以使用v-on监听$emit发出的事件，但是有时候我们想要在程序中动态的添加监听器，这时候就可以:</p>\n<ul>\n<li>通过 $on(eventName, eventHandler) 侦听一个事件</li>\n<li>通过 $once(eventName, eventHandler) 一次性侦听一个事件</li>\n<li>通过 $off(eventName, eventHandler) 停止侦听一个事件</li>\n</ul>\n<p>　　如果你需要用的一个三方组件，并在组件挂载的时候进行创建，组件销毁的时候同时对这个三方组件进行销毁，你很有可能编写下面的代码，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一次性将这个日期选择器附加到一个输入框上</span></span><br><span class=\"line\"><span class=\"comment\">// 它会被挂载到 DOM 上。</span></span><br><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Pikaday 是一个第三方日期选择器的库</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.picker = <span class=\"keyword\">new</span> Pikaday(&#123;</span><br><span class=\"line\">    field: <span class=\"keyword\">this</span>.$refs.input,</span><br><span class=\"line\">    format: <span class=\"string\">'YYYY-MM-DD'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 在组件被销毁之前，</span></span><br><span class=\"line\"><span class=\"comment\">// 也销毁这个日期选择器。</span></span><br><span class=\"line\">beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.picker.destroy()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　但是这样的方式会使得组件实例持有三方组件的引用，但其实理论上组件实例是没有必要去持有这样的一个引用，这样的增加组件实例的属性的做法显得有些多余。第二个问题是我们的建立代码和清理代码分离，这样如果之后我们需要清理这个三方组件就需要在组件中清理所有销毁的相关内容。</p>\n<p>　　为了解决上面的两个问题，你应该通过一个程序化的侦听器解决这两个问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> picker = <span class=\"keyword\">new</span> Pikaday(&#123;</span><br><span class=\"line\">    field: <span class=\"keyword\">this</span>.$refs.input,</span><br><span class=\"line\">    format: <span class=\"string\">'YYYY-MM-DD'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$once(<span class=\"string\">'hook:beforeDestroy'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    picker.destroy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这样，只需要在组件销毁的时候，$emit一个hook:beforeDestroy事件就可以清理这个三方组件了，甚至可以将它们包裹在一个方法里，即使重复引用多个三方组件，也可以一次清理干净，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.attachDatepicker(<span class=\"string\">'startDateInput'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.attachDatepicker(<span class=\"string\">'endDateInput'</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  attachDatepicker: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">refName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> picker = <span class=\"keyword\">new</span> Pikaday(&#123;</span><br><span class=\"line\">      field: <span class=\"keyword\">this</span>.$refs[refName],</span><br><span class=\"line\">      format: <span class=\"string\">'YYYY-MM-DD'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$once(<span class=\"string\">'hook:beforeDestroy'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      picker.destroy()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　这里需要理解清楚一点，当我们对同一个事件绑定多个处理函数时，在低版本的vue中是不支持使用v-on的数组形式的，并且我们也不可以在组件的标签上定义重复的v-on属性，所以这时候可以使用$on或者$once这样的方式动态添加多个监听器，这样所有的监听器都可以得到添加和执行，<strong><em>需要搞清楚的一个概念是一个事件可以有多个不同的监听器的，执行顺序是先添加先被执行</em></strong>。</p>\n<p>　　<strong><em>注意 Vue 的事件系统不同于浏览器的 EventTarget API。尽管它们工作起来是相似的，但是 $emit、$on, 和 $off 并不是 dispatchEvent、addEventListener 和 removeEventListener 的别名。</em></strong></p>\n<h3 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h3><h4 id=\"递归组件\"><a href=\"#递归组件\" class=\"headerlink\" title=\"递归组件\"></a>递归组件</h4><p>　　组件是可以在它们自己的模板中调用自身的。不过它们只能通过 name 选项来做这件事：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">name: <span class=\"string\">'unique-name-of-my-component'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 当你使用 Vue.component 全局注册一个组件时，这个全局的 ID 会自动设置为该组件的 name 选项。 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'unique-name-of-my-component'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　虽然递归组件看上去很实用，但是稍有不慎，就有可能导致一个无限循环，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">name: <span class=\"string\">'stack-overflow'</span>,</span><br><span class=\"line\">template: <span class=\"string\">'&lt;div&gt;&lt;stack-overflow&gt;&lt;/stack-overflow&gt;&lt;/div&gt;'</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　类似上述的组件将会导致“max stack size exceeded”错误，所以请确保递归调用是条件性的 (例如使用一个最终会得到 false 的 v-if)。</p>\n<h4 id=\"组件之间的循环引用\"><a href=\"#组件之间的循环引用\" class=\"headerlink\" title=\"组件之间的循环引用\"></a>组件之间的循环引用</h4><p>　　假设你需要构建一个文件目录树，像访达或资源管理器那样的。你可能有一个 <tree-folder> 组件，模板是这样的：</tree-folder></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tree-folder-contents</span> <span class=\"attr\">:children</span>=<span class=\"string\">\"folder.children\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　<tree-folder-contents> 组件，</tree-folder-contents></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"child in children\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tree-folder</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"child.children\"</span> <span class=\"attr\">:folder</span>=<span class=\"string\">\"child\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　当你仔细观察的时候，你会发现这些组件在渲染树中互为对方的后代和祖先——一个悖论！当通过 Vue.component 全局注册组件的时候，这个悖论会被自动解开。如果你是这样做的，那么你可以跳过这里。然而，如果你使用一个模块系统依赖/导入组件，例如通过 webpack 或 Browserify，你会遇到一个错误：</p>\n<blockquote>\n<p> Failed to mount component: template or render function not defined.</p>\n</blockquote>\n<p>　　为了解释这里发生了什么，我们先把两个组件称为A和B。模块系统发现它需要A，但是首先A依赖B，但是B又依赖A，但是A又依赖B，如此往复。这变成了一个循环，不知道如何不经过其中一个组件而完全解析出另一个组件。为了解决这个问题，我们需要给模块系统一个点，在那里“A 反正是需要B的，但是我们不需要先解析B。”</p>\n<p>　　在我们的例子中，把 <tree-folder> 组件设为了那个点。我们知道那个产生悖论的子组件是 <tree-folder-contents> 组件，所以我们会等到生命周期钩子 beforeCreate 时去注册它：</tree-folder-contents></tree-folder></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">beforeCreate: function () &#123;</span><br><span class=\"line\">  this.$options.components.TreeFolderContents = require('./tree-folder-contents.vue').default</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或者，在本地组件注册时候，你可以使用 webpack 的异步 import： --&gt;</span></span><br><span class=\"line\">components: &#123;</span><br><span class=\"line\">  TreeFolderContents: () =&gt; import('./tree-folder-contents.vue')</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这样问题就解决了！ --&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"控制更新\"><a href=\"#控制更新\" class=\"headerlink\" title=\"控制更新\"></a>控制更新</h3><h4 id=\"强制更新\"><a href=\"#强制更新\" class=\"headerlink\" title=\"强制更新\"></a>强制更新</h4><p>　　你可能还没有留意到数组或对象的变更检测注意事项，或者你可能依赖了一个未被Vue的响应式系统追踪的状态。</p>\n<p>　　然而，如果你已经做到了上述的事项仍然发现在极少数的情况下需要手动强制更新，那么你可以通过 $forceUpdate 来做这件事。比如Vue就没法检测对Map的追踪，不过这个问题在3.0版本得到添加。</p>\n<h4 id=\"通过-v-once-创建低开销的静态组件\"><a href=\"#通过-v-once-创建低开销的静态组件\" class=\"headerlink\" title=\"通过 v-once 创建低开销的静态组件\"></a>通过 v-once 创建低开销的静态组件</h4><p>　　渲染普通的 HTML 元素在 Vue 中是非常快速的，但有的时候你可能有一个组件，这个组件包含了大量静态内容。在这种情况下，你可以在根元素上添加 v-once 特性以确保这些内容只计算一次然后缓存起来，就像这样：<strong><em>(虽然响应式很好用，但也要使用在适当的地方哦)</em></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component('terms-of-service', &#123;</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-once</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Terms of Service<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      ... a lot of static content ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　<strong><em>再说一次，试着不要过度使用这个模式。当你需要渲染大量静态内容时，极少数的情况下它会给你带来便利，除非你非常留意渲染变慢了，不然它完全是没有必要的——再加上它在后期会带来很多困惑。例如，设想另一个开发者并不熟悉 v-once 或漏看了它在模板中，他们可能会花很多个小时去找出模板为什么无法正确更新。</em></strong></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>　　这篇在十月份就开始写了，但是一直到十一月差不多中旬才发出来，效率实在是底下，虽然其中有很多其它的事情造成了一些拖延，但是这个速度还是不能被接受。这段时间差不多将近一个半月，陆陆续续抽时间将vue-router、vuex、vue的文档刷了一遍，vue还有小部分没有看，算是对之前的查漏补缺吧，也知道了很多之前没有刻意去了解过的一些细节。接下来的计划大概是先把vue剩下的内容刷完，然后再去研究webpack的文档，webpack实在是太重要了，简直就是前端项目的基石。也不知道等自己刷完这两个内容要多久，不过看了下接下来的开发计划，自己应该是挺闲的。应该可以在年前将这些都搞定。</p>\n<p>　　再接下来的计划可能就很明确了，刷文档的目的当然还是为了开发做铺垫，很多人可能会说我不刷文档也可以愉快的开发呀。但是个人觉得这种方式对于职业来说太不靠谱，很多东西都理解的不透彻，在需求当头的时候就看能用就用了，也不考虑这样做的一些后果，或者说弊端。这对工程来说就是不负责的表现，自己也看了太多这种例子，对这种行为个人是有一些鄙视成分在里面的，虽然人都有一个成长的过程，但我觉得这是习惯问题，或者说态度问题。看多了这种粗制滥造的代码之后只能说，不可能要求每个人做到完美，对自己要求严格就行，不让自己难受就好了。</p>\n<p>　　不知道还会不会写技术博客，自己有点儿动摇，因为有道笔记对我来说明显比md形式的博客更加方便，写完这篇之后自己确实有些动摇了，因为这对自己来说就像是一些笔记，而笔记是只适合个人翻阅的。</p>\n<p>　　em…罗马不是一天建成的，早点休息吧。</p>"},{"layout":"post","title":"Think Different,Refuse Repeating","date":"2019-12-11T07:56:00.000Z","_content":"　　Think Different是苹果公司1997年的广告语，由乔布斯亲自编写。在广告词的原意是致疯狂的人，但是我更喜欢将把它解释为，\"拒绝不断重复，换个思考方式\"。\n<!-- more -->\n\n　　前段时间把Webpack的配置文档通读了一遍，看文档看的快吐了。所以最近打算学习一个Vue的开源项目，代码下载下来，在本地运行后有点迷茫，因为不知道如何去学习这个项目。想为它们的项目修一些Issue，但浏览了一下大部分的Issue，发现这些Issue都不能称为真正的Issue，很多都是一些基本知识都不懂的人随意提的东西，简单来说就是Issue数量虽多，但是质量太低。\n\n　　我感觉现在的开源环境，一个优秀点的开源项目，大家把从向它进行索取看成了理所当然。当自己碰到到点问题时，就像没头苍蝇一样到处求助，从来没有去想过先去花时间去学习自己不懂的知识，也更加不会想要去说做点什么帮助这个项目变的更好。其实我是很鄙视这帮人的，觉得这类人根本就不配称为程序员，而往往这类人又确实数量庞大，有点为之奈何的感觉。我感觉要是我这小爆脾气去维护一个开源项目，估计早就把这提的弱智Issue的人骂了个遍。\n\n　　话说回来，虽然哪里都有弱智，但开源世界的大神也是超级多。要是没有这些牛皮的开源项目工作者的无私贡献，软件开发也很难发展到现如今的水平。记得自己第一次开始学习的开源项目是Android类的，为了开发一个APP，自己是硬生生的根据源码从头到尾将那个开源项目手写了一遍。这个方法虽然笨，但是对于初学来说确实有比较大的帮助，现在想想这种从零完全模仿的方式还是不可取，一是太累，二是效率太低。\n\n　　所以最近当自己打算去学习一个新的开源项目的时候，我想去看看人家是怎么学习开源项目的，学习一下人家的经验。[有一篇文章](https://www.cnblogs.com/toUpdating/p/9271485.html)给了我一些启示。虽然这个老哥是专注于后端的，但是这种学习方式的经验也确实可以被借鉴。文章大致的将学习划分了五个步骤，安装、运行、原理研究、实际测试、源码研究。将一个项目运行起来大概是最简单的，首先了解这个项目是干什么的，然后根据文档引导一步步来就好了。\n\n　　我感觉我还是比较懒，一般运行起一个项目后就没下文了，无论是项目的运行还是框架的使用，自己都持有简单的态度，认为第一步先掌握它们的使用就好了，基本不会去进行下面的三个步骤。有时候当时可能只是先认为先掌握使用，然后再去掌握原理，或者自己去实现一个DEMO，但是到后来就很懒，不想去做这些非必要的事情。这样下去，其实对技术毫无提升，时间长了之后就都是在不断基于之前的知识在重复做过的内容，工作也会变的越来越乏味。\n\n　　正如此次计划学习一个开源项目一样，首先我们要知道为什么要去学习这个项目，是为了去学习项目使用的技术，或者某个功能是如何实现的，还是项目的配置，还是项目的结构，还是去学习项目的优秀编码思维等。漫无目的的学习其实只能是事倍功半，我们应该尽量避免这种事倍功半行为，时间本身就是一种成本，如果花费了大量的成本去做一件对你而言依然是重复的事情，还不如去做一些其它的事情开心一下。\n\n　　什么是Think Different呢，我认为无论在生活还是工作中，都会容易陷入一个不断重复的漩涡。这种漩涡很可怕，它会让你失去想象力，完全沦为一个车间流水线上的工人，只会为了完成基本的任务不断Repeat。既然这样，为何我们不尝试去思考一些不同的东西呢?既然这种不断重复很傻，我们为何不去尝试去做一些更棒的事情呢，或者直白点说去做一些牛逼的事情呢? 比如一个前端程序员，在掌握了框架的使用之后，为什么不可以将自己工作的时间分配一点出来去了解框架的原理，然后再在空闲时间自己根据原理自己去实现这个框架呢?在这个过程中，你肯定会获得很多不一样的体验，而且你的技术肯定会因此得到提升，因为你懂得很多别人不懂的东西，并且你知道每个东西的内部是怎样的而不是简单只会根据文档去使用工具的人。或者调侃一下说，知道如何制造工具和只会使用工具是人和猴子的本质区别。\n\n　　我认为并不是敢于Think Different 的人有多疯狂，Think Different有疯狂的含义我认为更多是乔布斯的广告营销的手段。Think Different应该是一种好的习惯，当你去这么做的时候，你会发现一切没你想的那么困难，毕竟大家都是智力正常的人嘛。当你站在另外一个角度的思考的时候，发现一切会变的豁然开朗。尝试去让思考如何改变成为一种习惯，努力别让惰性的去适应环境变成一种习惯。\n\n　　不过嘛，Think Different是一个好习惯不错，但是更重要的是让自己开心。不要为了Different而去Different，那样是很傻的，因为只不过是让自己徒增痛苦。好比你让一个不喜欢爬山的人去让他去尝试爬不同类型的山，他不会觉得这种改变很有满足感，只会觉得这种是一种高强度的体力活，迟早把他给累死。任何道理都不是通用的，还得根据每个人的情况去做一些调整，照搬别人说的话在我看来也是很傻的一种行为，就像那句话说的，如人饮水，冷暖自知。\n\n　　Happy Life & Happy Coding\n","source":"_posts/Think Different,Refuse Repeating.md","raw":"layout: \"post\"\ntitle: \"Think Different,Refuse Repeating\"\ndate: \"2019-12-11 15:56\"\ntags:\n- FEELING\n---\n　　Think Different是苹果公司1997年的广告语，由乔布斯亲自编写。在广告词的原意是致疯狂的人，但是我更喜欢将把它解释为，\"拒绝不断重复，换个思考方式\"。\n<!-- more -->\n\n　　前段时间把Webpack的配置文档通读了一遍，看文档看的快吐了。所以最近打算学习一个Vue的开源项目，代码下载下来，在本地运行后有点迷茫，因为不知道如何去学习这个项目。想为它们的项目修一些Issue，但浏览了一下大部分的Issue，发现这些Issue都不能称为真正的Issue，很多都是一些基本知识都不懂的人随意提的东西，简单来说就是Issue数量虽多，但是质量太低。\n\n　　我感觉现在的开源环境，一个优秀点的开源项目，大家把从向它进行索取看成了理所当然。当自己碰到到点问题时，就像没头苍蝇一样到处求助，从来没有去想过先去花时间去学习自己不懂的知识，也更加不会想要去说做点什么帮助这个项目变的更好。其实我是很鄙视这帮人的，觉得这类人根本就不配称为程序员，而往往这类人又确实数量庞大，有点为之奈何的感觉。我感觉要是我这小爆脾气去维护一个开源项目，估计早就把这提的弱智Issue的人骂了个遍。\n\n　　话说回来，虽然哪里都有弱智，但开源世界的大神也是超级多。要是没有这些牛皮的开源项目工作者的无私贡献，软件开发也很难发展到现如今的水平。记得自己第一次开始学习的开源项目是Android类的，为了开发一个APP，自己是硬生生的根据源码从头到尾将那个开源项目手写了一遍。这个方法虽然笨，但是对于初学来说确实有比较大的帮助，现在想想这种从零完全模仿的方式还是不可取，一是太累，二是效率太低。\n\n　　所以最近当自己打算去学习一个新的开源项目的时候，我想去看看人家是怎么学习开源项目的，学习一下人家的经验。[有一篇文章](https://www.cnblogs.com/toUpdating/p/9271485.html)给了我一些启示。虽然这个老哥是专注于后端的，但是这种学习方式的经验也确实可以被借鉴。文章大致的将学习划分了五个步骤，安装、运行、原理研究、实际测试、源码研究。将一个项目运行起来大概是最简单的，首先了解这个项目是干什么的，然后根据文档引导一步步来就好了。\n\n　　我感觉我还是比较懒，一般运行起一个项目后就没下文了，无论是项目的运行还是框架的使用，自己都持有简单的态度，认为第一步先掌握它们的使用就好了，基本不会去进行下面的三个步骤。有时候当时可能只是先认为先掌握使用，然后再去掌握原理，或者自己去实现一个DEMO，但是到后来就很懒，不想去做这些非必要的事情。这样下去，其实对技术毫无提升，时间长了之后就都是在不断基于之前的知识在重复做过的内容，工作也会变的越来越乏味。\n\n　　正如此次计划学习一个开源项目一样，首先我们要知道为什么要去学习这个项目，是为了去学习项目使用的技术，或者某个功能是如何实现的，还是项目的配置，还是项目的结构，还是去学习项目的优秀编码思维等。漫无目的的学习其实只能是事倍功半，我们应该尽量避免这种事倍功半行为，时间本身就是一种成本，如果花费了大量的成本去做一件对你而言依然是重复的事情，还不如去做一些其它的事情开心一下。\n\n　　什么是Think Different呢，我认为无论在生活还是工作中，都会容易陷入一个不断重复的漩涡。这种漩涡很可怕，它会让你失去想象力，完全沦为一个车间流水线上的工人，只会为了完成基本的任务不断Repeat。既然这样，为何我们不尝试去思考一些不同的东西呢?既然这种不断重复很傻，我们为何不去尝试去做一些更棒的事情呢，或者直白点说去做一些牛逼的事情呢? 比如一个前端程序员，在掌握了框架的使用之后，为什么不可以将自己工作的时间分配一点出来去了解框架的原理，然后再在空闲时间自己根据原理自己去实现这个框架呢?在这个过程中，你肯定会获得很多不一样的体验，而且你的技术肯定会因此得到提升，因为你懂得很多别人不懂的东西，并且你知道每个东西的内部是怎样的而不是简单只会根据文档去使用工具的人。或者调侃一下说，知道如何制造工具和只会使用工具是人和猴子的本质区别。\n\n　　我认为并不是敢于Think Different 的人有多疯狂，Think Different有疯狂的含义我认为更多是乔布斯的广告营销的手段。Think Different应该是一种好的习惯，当你去这么做的时候，你会发现一切没你想的那么困难，毕竟大家都是智力正常的人嘛。当你站在另外一个角度的思考的时候，发现一切会变的豁然开朗。尝试去让思考如何改变成为一种习惯，努力别让惰性的去适应环境变成一种习惯。\n\n　　不过嘛，Think Different是一个好习惯不错，但是更重要的是让自己开心。不要为了Different而去Different，那样是很傻的，因为只不过是让自己徒增痛苦。好比你让一个不喜欢爬山的人去让他去尝试爬不同类型的山，他不会觉得这种改变很有满足感，只会觉得这种是一种高强度的体力活，迟早把他给累死。任何道理都不是通用的，还得根据每个人的情况去做一些调整，照搬别人说的话在我看来也是很傻的一种行为，就像那句话说的，如人饮水，冷暖自知。\n\n　　Happy Life & Happy Coding\n","slug":"Think Different,Refuse Repeating","published":1,"updated":"2019-12-11T09:30:56.537Z","_id":"ck4137e3b0000ug8128jamt4h","comments":1,"photos":[],"link":"","content":"<p>　　Think Different是苹果公司1997年的广告语，由乔布斯亲自编写。在广告词的原意是致疯狂的人，但是我更喜欢将把它解释为，”拒绝不断重复，换个思考方式”。<br><a id=\"more\"></a></p>\n<p>　　前段时间把Webpack的配置文档通读了一遍，看文档看的快吐了。所以最近打算学习一个Vue的开源项目，代码下载下来，在本地运行后有点迷茫，因为不知道如何去学习这个项目。想为它们的项目修一些Issue，但浏览了一下大部分的Issue，发现这些Issue都不能称为真正的Issue，很多都是一些基本知识都不懂的人随意提的东西，简单来说就是Issue数量虽多，但是质量太低。</p>\n<p>　　我感觉现在的开源环境，一个优秀点的开源项目，大家把从向它进行索取看成了理所当然。当自己碰到到点问题时，就像没头苍蝇一样到处求助，从来没有去想过先去花时间去学习自己不懂的知识，也更加不会想要去说做点什么帮助这个项目变的更好。其实我是很鄙视这帮人的，觉得这类人根本就不配称为程序员，而往往这类人又确实数量庞大，有点为之奈何的感觉。我感觉要是我这小爆脾气去维护一个开源项目，估计早就把这提的弱智Issue的人骂了个遍。</p>\n<p>　　话说回来，虽然哪里都有弱智，但开源世界的大神也是超级多。要是没有这些牛皮的开源项目工作者的无私贡献，软件开发也很难发展到现如今的水平。记得自己第一次开始学习的开源项目是Android类的，为了开发一个APP，自己是硬生生的根据源码从头到尾将那个开源项目手写了一遍。这个方法虽然笨，但是对于初学来说确实有比较大的帮助，现在想想这种从零完全模仿的方式还是不可取，一是太累，二是效率太低。</p>\n<p>　　所以最近当自己打算去学习一个新的开源项目的时候，我想去看看人家是怎么学习开源项目的，学习一下人家的经验。<a href=\"https://www.cnblogs.com/toUpdating/p/9271485.html\" target=\"_blank\" rel=\"noopener\">有一篇文章</a>给了我一些启示。虽然这个老哥是专注于后端的，但是这种学习方式的经验也确实可以被借鉴。文章大致的将学习划分了五个步骤，安装、运行、原理研究、实际测试、源码研究。将一个项目运行起来大概是最简单的，首先了解这个项目是干什么的，然后根据文档引导一步步来就好了。</p>\n<p>　　我感觉我还是比较懒，一般运行起一个项目后就没下文了，无论是项目的运行还是框架的使用，自己都持有简单的态度，认为第一步先掌握它们的使用就好了，基本不会去进行下面的三个步骤。有时候当时可能只是先认为先掌握使用，然后再去掌握原理，或者自己去实现一个DEMO，但是到后来就很懒，不想去做这些非必要的事情。这样下去，其实对技术毫无提升，时间长了之后就都是在不断基于之前的知识在重复做过的内容，工作也会变的越来越乏味。</p>\n<p>　　正如此次计划学习一个开源项目一样，首先我们要知道为什么要去学习这个项目，是为了去学习项目使用的技术，或者某个功能是如何实现的，还是项目的配置，还是项目的结构，还是去学习项目的优秀编码思维等。漫无目的的学习其实只能是事倍功半，我们应该尽量避免这种事倍功半行为，时间本身就是一种成本，如果花费了大量的成本去做一件对你而言依然是重复的事情，还不如去做一些其它的事情开心一下。</p>\n<p>　　什么是Think Different呢，我认为无论在生活还是工作中，都会容易陷入一个不断重复的漩涡。这种漩涡很可怕，它会让你失去想象力，完全沦为一个车间流水线上的工人，只会为了完成基本的任务不断Repeat。既然这样，为何我们不尝试去思考一些不同的东西呢?既然这种不断重复很傻，我们为何不去尝试去做一些更棒的事情呢，或者直白点说去做一些牛逼的事情呢? 比如一个前端程序员，在掌握了框架的使用之后，为什么不可以将自己工作的时间分配一点出来去了解框架的原理，然后再在空闲时间自己根据原理自己去实现这个框架呢?在这个过程中，你肯定会获得很多不一样的体验，而且你的技术肯定会因此得到提升，因为你懂得很多别人不懂的东西，并且你知道每个东西的内部是怎样的而不是简单只会根据文档去使用工具的人。或者调侃一下说，知道如何制造工具和只会使用工具是人和猴子的本质区别。</p>\n<p>　　我认为并不是敢于Think Different 的人有多疯狂，Think Different有疯狂的含义我认为更多是乔布斯的广告营销的手段。Think Different应该是一种好的习惯，当你去这么做的时候，你会发现一切没你想的那么困难，毕竟大家都是智力正常的人嘛。当你站在另外一个角度的思考的时候，发现一切会变的豁然开朗。尝试去让思考如何改变成为一种习惯，努力别让惰性的去适应环境变成一种习惯。</p>\n<p>　　不过嘛，Think Different是一个好习惯不错，但是更重要的是让自己开心。不要为了Different而去Different，那样是很傻的，因为只不过是让自己徒增痛苦。好比你让一个不喜欢爬山的人去让他去尝试爬不同类型的山，他不会觉得这种改变很有满足感，只会觉得这种是一种高强度的体力活，迟早把他给累死。任何道理都不是通用的，还得根据每个人的情况去做一些调整，照搬别人说的话在我看来也是很傻的一种行为，就像那句话说的，如人饮水，冷暖自知。</p>\n<p>　　Happy Life &amp; Happy Coding</p>\n","site":{"data":{}},"excerpt":"<p>　　Think Different是苹果公司1997年的广告语，由乔布斯亲自编写。在广告词的原意是致疯狂的人，但是我更喜欢将把它解释为，”拒绝不断重复，换个思考方式”。<br>","more":"</p>\n<p>　　前段时间把Webpack的配置文档通读了一遍，看文档看的快吐了。所以最近打算学习一个Vue的开源项目，代码下载下来，在本地运行后有点迷茫，因为不知道如何去学习这个项目。想为它们的项目修一些Issue，但浏览了一下大部分的Issue，发现这些Issue都不能称为真正的Issue，很多都是一些基本知识都不懂的人随意提的东西，简单来说就是Issue数量虽多，但是质量太低。</p>\n<p>　　我感觉现在的开源环境，一个优秀点的开源项目，大家把从向它进行索取看成了理所当然。当自己碰到到点问题时，就像没头苍蝇一样到处求助，从来没有去想过先去花时间去学习自己不懂的知识，也更加不会想要去说做点什么帮助这个项目变的更好。其实我是很鄙视这帮人的，觉得这类人根本就不配称为程序员，而往往这类人又确实数量庞大，有点为之奈何的感觉。我感觉要是我这小爆脾气去维护一个开源项目，估计早就把这提的弱智Issue的人骂了个遍。</p>\n<p>　　话说回来，虽然哪里都有弱智，但开源世界的大神也是超级多。要是没有这些牛皮的开源项目工作者的无私贡献，软件开发也很难发展到现如今的水平。记得自己第一次开始学习的开源项目是Android类的，为了开发一个APP，自己是硬生生的根据源码从头到尾将那个开源项目手写了一遍。这个方法虽然笨，但是对于初学来说确实有比较大的帮助，现在想想这种从零完全模仿的方式还是不可取，一是太累，二是效率太低。</p>\n<p>　　所以最近当自己打算去学习一个新的开源项目的时候，我想去看看人家是怎么学习开源项目的，学习一下人家的经验。<a href=\"https://www.cnblogs.com/toUpdating/p/9271485.html\" target=\"_blank\" rel=\"noopener\">有一篇文章</a>给了我一些启示。虽然这个老哥是专注于后端的，但是这种学习方式的经验也确实可以被借鉴。文章大致的将学习划分了五个步骤，安装、运行、原理研究、实际测试、源码研究。将一个项目运行起来大概是最简单的，首先了解这个项目是干什么的，然后根据文档引导一步步来就好了。</p>\n<p>　　我感觉我还是比较懒，一般运行起一个项目后就没下文了，无论是项目的运行还是框架的使用，自己都持有简单的态度，认为第一步先掌握它们的使用就好了，基本不会去进行下面的三个步骤。有时候当时可能只是先认为先掌握使用，然后再去掌握原理，或者自己去实现一个DEMO，但是到后来就很懒，不想去做这些非必要的事情。这样下去，其实对技术毫无提升，时间长了之后就都是在不断基于之前的知识在重复做过的内容，工作也会变的越来越乏味。</p>\n<p>　　正如此次计划学习一个开源项目一样，首先我们要知道为什么要去学习这个项目，是为了去学习项目使用的技术，或者某个功能是如何实现的，还是项目的配置，还是项目的结构，还是去学习项目的优秀编码思维等。漫无目的的学习其实只能是事倍功半，我们应该尽量避免这种事倍功半行为，时间本身就是一种成本，如果花费了大量的成本去做一件对你而言依然是重复的事情，还不如去做一些其它的事情开心一下。</p>\n<p>　　什么是Think Different呢，我认为无论在生活还是工作中，都会容易陷入一个不断重复的漩涡。这种漩涡很可怕，它会让你失去想象力，完全沦为一个车间流水线上的工人，只会为了完成基本的任务不断Repeat。既然这样，为何我们不尝试去思考一些不同的东西呢?既然这种不断重复很傻，我们为何不去尝试去做一些更棒的事情呢，或者直白点说去做一些牛逼的事情呢? 比如一个前端程序员，在掌握了框架的使用之后，为什么不可以将自己工作的时间分配一点出来去了解框架的原理，然后再在空闲时间自己根据原理自己去实现这个框架呢?在这个过程中，你肯定会获得很多不一样的体验，而且你的技术肯定会因此得到提升，因为你懂得很多别人不懂的东西，并且你知道每个东西的内部是怎样的而不是简单只会根据文档去使用工具的人。或者调侃一下说，知道如何制造工具和只会使用工具是人和猴子的本质区别。</p>\n<p>　　我认为并不是敢于Think Different 的人有多疯狂，Think Different有疯狂的含义我认为更多是乔布斯的广告营销的手段。Think Different应该是一种好的习惯，当你去这么做的时候，你会发现一切没你想的那么困难，毕竟大家都是智力正常的人嘛。当你站在另外一个角度的思考的时候，发现一切会变的豁然开朗。尝试去让思考如何改变成为一种习惯，努力别让惰性的去适应环境变成一种习惯。</p>\n<p>　　不过嘛，Think Different是一个好习惯不错，但是更重要的是让自己开心。不要为了Different而去Different，那样是很傻的，因为只不过是让自己徒增痛苦。好比你让一个不喜欢爬山的人去让他去尝试爬不同类型的山，他不会觉得这种改变很有满足感，只会觉得这种是一种高强度的体力活，迟早把他给累死。任何道理都不是通用的，还得根据每个人的情况去做一些调整，照搬别人说的话在我看来也是很傻的一种行为，就像那句话说的，如人饮水，冷暖自知。</p>\n<p>　　Happy Life &amp; Happy Coding</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjzr1cxaq000qfo81zain011f","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxaw0012fo81090jrvi0"},{"post_id":"cjzr1cxae0009fo810sclx7f7","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxax0016fo81p7pg626y"},{"post_id":"cjzr1cxar000sfo81wvzpiti2","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxaz001afo81nlm3vhxs"},{"post_id":"cjzr1cxas000vfo81ut6lrcld","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb0001dfo81n02kkdik"},{"post_id":"cjzr1cxag000afo81lz21joyh","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb2001ifo81etgi1wul"},{"post_id":"cjzr1cxat000yfo81ean9m7ga","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb3001lfo81kfq7a5od"},{"post_id":"cjzr1cxav0011fo81mjsefbvp","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb4001ofo810sysy6zw"},{"post_id":"cjzr1cxa50002fo81zgdrm5nr","category_id":"cjzr1cxad0008fo81p9q9ra02","_id":"cjzr1cxb5001rfo81abnyv7dh"},{"post_id":"cjzr1cxa50002fo81zgdrm5nr","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb5001tfo81qp404221"},{"post_id":"cjzr1cxaw0014fo81du5gcnhi","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb6001wfo81chmfrtkb"},{"post_id":"cjzr1cxai000efo818phkeeh9","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb6001yfo81z8hcvfuk"},{"post_id":"cjzr1cxaz001cfo81g1eg5bdp","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb70020fo81wuowcx9k"},{"post_id":"cjzr1cxb1001hfo81f38i1cn8","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb70021fo81xp7eja8g"},{"post_id":"cjzr1cxa80004fo81tdndbwhh","category_id":"cjzr1cxah000cfo81zse9rvdq","_id":"cjzr1cxb80023fo819or8ce6y"},{"post_id":"cjzr1cxa80004fo81tdndbwhh","category_id":"cjzr1cxb1001gfo81aqtip0jb","_id":"cjzr1cxb80024fo817gm25i66"},{"post_id":"cjzr1cxb2001kfo81tgo49yc2","category_id":"cjzr1cxap000ofo810r9fzi44","_id":"cjzr1cxb80026fo818ztm21l2"},{"post_id":"cjzr1cxac0007fo81j2hkiih9","category_id":"cjzr1cxah000cfo81zse9rvdq","_id":"cjzr1cxb80027fo81prgyaovw"},{"post_id":"cjzr1cxac0007fo81j2hkiih9","category_id":"cjzr1cxb1001gfo81aqtip0jb","_id":"cjzr1cxb90029fo81zoxlxht1"},{"post_id":"cjzr1cxay0019fo81b9wlwxct","category_id":"cjzr1cxb80025fo81xm2lpaf4","_id":"cjzr1cxb9002bfo81yr0yxhmj"},{"post_id":"cjzr1cxak000gfo8184gytrzg","category_id":"cjzr1cxb4001pfo81yhs3ta9r","_id":"cjzr1cxba002dfo81az5gsgrd"},{"post_id":"cjzr1cxak000gfo8184gytrzg","category_id":"cjzr1cxb90028fo81tdh2tdd8","_id":"cjzr1cxba002efo81ywzanw6e"},{"post_id":"cjzr1cxan000kfo81hf9nzffj","category_id":"cjzr1cxb4001pfo81yhs3ta9r","_id":"cjzr1cxba002ffo813bvyugty"},{"post_id":"cjzr1cxan000kfo81hf9nzffj","category_id":"cjzr1cxb90028fo81tdh2tdd8","_id":"cjzr1cxbb002gfo810umm3ex6"},{"post_id":"cjzr1cxao000mfo81uc2ssqfe","category_id":"cjzr1cxb4001pfo81yhs3ta9r","_id":"cjzr1cxbb002hfo81eflfsdgm"},{"post_id":"cjzr1cxao000mfo81uc2ssqfe","category_id":"cjzr1cxb90028fo81tdh2tdd8","_id":"cjzr1cxbb002ifo815vqz5xr3"},{"post_id":"ck29vbsl500004081iwgtvyvn","category_id":"cjzr1cxb4001pfo81yhs3ta9r","_id":"ck29vbsle00024081ns6gmikm"},{"post_id":"ck29vbsl500004081iwgtvyvn","category_id":"cjzr1cxb90028fo81tdh2tdd8","_id":"ck29vbsle0003408137rosjvc"},{"post_id":"ck29z8yri0000to81no83x33z","category_id":"cjzr1cxb4001pfo81yhs3ta9r","_id":"ck2a1g4mn0002to8179b7u4rk"},{"post_id":"ck29z8yri0000to81no83x33z","category_id":"cjzr1cxb90028fo81tdh2tdd8","_id":"ck2a1g4mo0003to816l14lhtv"}],"PostTag":[{"post_id":"cjzr1cxae0009fo810sclx7f7","tag_id":"cjzr1cxaa0006fo81r6bntiyh","_id":"cjzr1cxai000dfo812guzw31p"},{"post_id":"cjzr1cxa50002fo81zgdrm5nr","tag_id":"cjzr1cxaa0006fo81r6bntiyh","_id":"cjzr1cxaj000ffo81ei5z5g2k"},{"post_id":"cjzr1cxai000efo818phkeeh9","tag_id":"cjzr1cxaa0006fo81r6bntiyh","_id":"cjzr1cxam000jfo814tnxw9gf"},{"post_id":"cjzr1cxa80004fo81tdndbwhh","tag_id":"cjzr1cxah000bfo81h0socva4","_id":"cjzr1cxao000lfo81xcve42yt"},{"post_id":"cjzr1cxak000gfo8184gytrzg","tag_id":"cjzr1cxah000bfo81h0socva4","_id":"cjzr1cxap000pfo81148ijet7"},{"post_id":"cjzr1cxan000kfo81hf9nzffj","tag_id":"cjzr1cxah000bfo81h0socva4","_id":"cjzr1cxaq000rfo81dc70g2j6"},{"post_id":"cjzr1cxac0007fo81j2hkiih9","tag_id":"cjzr1cxah000bfo81h0socva4","_id":"cjzr1cxar000tfo815r9l6p2e"},{"post_id":"cjzr1cxao000mfo81uc2ssqfe","tag_id":"cjzr1cxah000bfo81h0socva4","_id":"cjzr1cxat000xfo81274ceiy8"},{"post_id":"cjzr1cxaq000qfo81zain011f","tag_id":"cjzr1cxaa0006fo81r6bntiyh","_id":"cjzr1cxau000zfo81kqtynhkd"},{"post_id":"cjzr1cxag000afo81lz21joyh","tag_id":"cjzr1cxap000nfo81n0exd312","_id":"cjzr1cxaw0013fo81ynb7duev"},{"post_id":"cjzr1cxat000yfo81ean9m7ga","tag_id":"cjzr1cxaa0006fo81r6bntiyh","_id":"cjzr1cxay0017fo81yun0vyox"},{"post_id":"cjzr1cxar000sfo81wvzpiti2","tag_id":"cjzr1cxat000wfo81vkwnat6i","_id":"cjzr1cxaz001bfo81vtea6y7b"},{"post_id":"cjzr1cxaw0014fo81du5gcnhi","tag_id":"cjzr1cxaa0006fo81r6bntiyh","_id":"cjzr1cxb1001ffo81qc2homm6"},{"post_id":"cjzr1cxay0019fo81b9wlwxct","tag_id":"cjzr1cxah000bfo81h0socva4","_id":"cjzr1cxb2001jfo81zeuzd323"},{"post_id":"cjzr1cxas000vfo81ut6lrcld","tag_id":"cjzr1cxax0015fo817ypclr45","_id":"cjzr1cxb4001nfo81jroz16bz"},{"post_id":"cjzr1cxb1001hfo81f38i1cn8","tag_id":"cjzr1cxat000wfo81vkwnat6i","_id":"cjzr1cxb4001qfo81ylaj9x8g"},{"post_id":"cjzr1cxav0011fo81mjsefbvp","tag_id":"cjzr1cxb0001efo816szjvwkz","_id":"cjzr1cxb5001sfo81tjyy6be3"},{"post_id":"cjzr1cxb2001kfo81tgo49yc2","tag_id":"cjzr1cxb0001efo816szjvwkz","_id":"cjzr1cxb6001vfo81esgh9qi7"},{"post_id":"cjzr1cxaz001cfo81g1eg5bdp","tag_id":"cjzr1cxb3001mfo81sk7rzqvg","_id":"cjzr1cxb6001xfo81waxhzsn3"},{"post_id":"ck29vbsl500004081iwgtvyvn","tag_id":"cjzr1cxah000bfo81h0socva4","_id":"ck29vbslc00014081zv7oqgb2"},{"post_id":"ck29z8yri0000to81no83x33z","tag_id":"cjzr1cxah000bfo81h0socva4","_id":"ck2a1g4ml0001to81e2sit528"},{"post_id":"ck4137e3b0000ug8128jamt4h","tag_id":"cjzr1cxaa0006fo81r6bntiyh","_id":"ck4137e3f0001ug81kg1unz7a"}],"Tag":[{"name":"FEELING","_id":"cjzr1cxaa0006fo81r6bntiyh"},{"name":"TECHNOLOGY","_id":"cjzr1cxah000bfo81h0socva4"},{"name":"EMOTION","_id":"cjzr1cxap000nfo81n0exd312"},{"name":"STROLL","_id":"cjzr1cxat000wfo81vkwnat6i"},{"name":"SPORTS","_id":"cjzr1cxax0015fo817ypclr45"},{"name":"EXPERIENCE","_id":"cjzr1cxb0001efo816szjvwkz"},{"name":"DRAWING","_id":"cjzr1cxb3001mfo81sk7rzqvg"}]}}